
FLASH_EraseProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  20001000  20001000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000312c  200011c4  200011c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  200042f0  200042f0  000042f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20004344  20004344  0000436c  2**0
                  CONTENTS
  4 .ARM          00000008  20004344  20004344  00004344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  2000434c  2000436c  0000436c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  2000434c  2000434c  0000434c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  20004350  20004350  00004350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20004354  20004354  00004354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000436c  2000436c  0000436c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044ec  200044ec  0000436c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000436c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0000439c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e401  00000000  00000000  000043df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022fa  00000000  00000000  000127e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  00014ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aeb  00000000  00000000  000158b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224ef  00000000  00000000  0001639b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107bc  00000000  00000000  0003888a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d396e  00000000  00000000  00049046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039ec  00000000  00000000  0011c9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001203a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200011c4 <__do_global_dtors_aux>:
200011c4:	b510      	push	{r4, lr}
200011c6:	4c05      	ldr	r4, [pc, #20]	; (200011dc <__do_global_dtors_aux+0x18>)
200011c8:	7823      	ldrb	r3, [r4, #0]
200011ca:	b933      	cbnz	r3, 200011da <__do_global_dtors_aux+0x16>
200011cc:	4b04      	ldr	r3, [pc, #16]	; (200011e0 <__do_global_dtors_aux+0x1c>)
200011ce:	b113      	cbz	r3, 200011d6 <__do_global_dtors_aux+0x12>
200011d0:	4804      	ldr	r0, [pc, #16]	; (200011e4 <__do_global_dtors_aux+0x20>)
200011d2:	f3af 8000 	nop.w
200011d6:	2301      	movs	r3, #1
200011d8:	7023      	strb	r3, [r4, #0]
200011da:	bd10      	pop	{r4, pc}
200011dc:	2000436c 	.word	0x2000436c
200011e0:	00000000 	.word	0x00000000
200011e4:	200042d8 	.word	0x200042d8

200011e8 <frame_dummy>:
200011e8:	b508      	push	{r3, lr}
200011ea:	4b03      	ldr	r3, [pc, #12]	; (200011f8 <frame_dummy+0x10>)
200011ec:	b11b      	cbz	r3, 200011f6 <frame_dummy+0xe>
200011ee:	4903      	ldr	r1, [pc, #12]	; (200011fc <frame_dummy+0x14>)
200011f0:	4803      	ldr	r0, [pc, #12]	; (20001200 <frame_dummy+0x18>)
200011f2:	f3af 8000 	nop.w
200011f6:	bd08      	pop	{r3, pc}
200011f8:	00000000 	.word	0x00000000
200011fc:	20004370 	.word	0x20004370
20001200:	200042d8 	.word	0x200042d8

20001204 <__aeabi_uldivmod>:
20001204:	b953      	cbnz	r3, 2000121c <__aeabi_uldivmod+0x18>
20001206:	b94a      	cbnz	r2, 2000121c <__aeabi_uldivmod+0x18>
20001208:	2900      	cmp	r1, #0
2000120a:	bf08      	it	eq
2000120c:	2800      	cmpeq	r0, #0
2000120e:	bf1c      	itt	ne
20001210:	f04f 31ff 	movne.w	r1, #4294967295
20001214:	f04f 30ff 	movne.w	r0, #4294967295
20001218:	f000 b970 	b.w	200014fc <__aeabi_idiv0>
2000121c:	f1ad 0c08 	sub.w	ip, sp, #8
20001220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20001224:	f000 f806 	bl	20001234 <__udivmoddi4>
20001228:	f8dd e004 	ldr.w	lr, [sp, #4]
2000122c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20001230:	b004      	add	sp, #16
20001232:	4770      	bx	lr

20001234 <__udivmoddi4>:
20001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20001238:	9e08      	ldr	r6, [sp, #32]
2000123a:	460d      	mov	r5, r1
2000123c:	4604      	mov	r4, r0
2000123e:	460f      	mov	r7, r1
20001240:	2b00      	cmp	r3, #0
20001242:	d14a      	bne.n	200012da <__udivmoddi4+0xa6>
20001244:	428a      	cmp	r2, r1
20001246:	4694      	mov	ip, r2
20001248:	d965      	bls.n	20001316 <__udivmoddi4+0xe2>
2000124a:	fab2 f382 	clz	r3, r2
2000124e:	b143      	cbz	r3, 20001262 <__udivmoddi4+0x2e>
20001250:	fa02 fc03 	lsl.w	ip, r2, r3
20001254:	f1c3 0220 	rsb	r2, r3, #32
20001258:	409f      	lsls	r7, r3
2000125a:	fa20 f202 	lsr.w	r2, r0, r2
2000125e:	4317      	orrs	r7, r2
20001260:	409c      	lsls	r4, r3
20001262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
20001266:	fa1f f58c 	uxth.w	r5, ip
2000126a:	fbb7 f1fe 	udiv	r1, r7, lr
2000126e:	0c22      	lsrs	r2, r4, #16
20001270:	fb0e 7711 	mls	r7, lr, r1, r7
20001274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
20001278:	fb01 f005 	mul.w	r0, r1, r5
2000127c:	4290      	cmp	r0, r2
2000127e:	d90a      	bls.n	20001296 <__udivmoddi4+0x62>
20001280:	eb1c 0202 	adds.w	r2, ip, r2
20001284:	f101 37ff 	add.w	r7, r1, #4294967295
20001288:	f080 811c 	bcs.w	200014c4 <__udivmoddi4+0x290>
2000128c:	4290      	cmp	r0, r2
2000128e:	f240 8119 	bls.w	200014c4 <__udivmoddi4+0x290>
20001292:	3902      	subs	r1, #2
20001294:	4462      	add	r2, ip
20001296:	1a12      	subs	r2, r2, r0
20001298:	b2a4      	uxth	r4, r4
2000129a:	fbb2 f0fe 	udiv	r0, r2, lr
2000129e:	fb0e 2210 	mls	r2, lr, r0, r2
200012a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
200012a6:	fb00 f505 	mul.w	r5, r0, r5
200012aa:	42a5      	cmp	r5, r4
200012ac:	d90a      	bls.n	200012c4 <__udivmoddi4+0x90>
200012ae:	eb1c 0404 	adds.w	r4, ip, r4
200012b2:	f100 32ff 	add.w	r2, r0, #4294967295
200012b6:	f080 8107 	bcs.w	200014c8 <__udivmoddi4+0x294>
200012ba:	42a5      	cmp	r5, r4
200012bc:	f240 8104 	bls.w	200014c8 <__udivmoddi4+0x294>
200012c0:	4464      	add	r4, ip
200012c2:	3802      	subs	r0, #2
200012c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
200012c8:	1b64      	subs	r4, r4, r5
200012ca:	2100      	movs	r1, #0
200012cc:	b11e      	cbz	r6, 200012d6 <__udivmoddi4+0xa2>
200012ce:	40dc      	lsrs	r4, r3
200012d0:	2300      	movs	r3, #0
200012d2:	e9c6 4300 	strd	r4, r3, [r6]
200012d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200012da:	428b      	cmp	r3, r1
200012dc:	d908      	bls.n	200012f0 <__udivmoddi4+0xbc>
200012de:	2e00      	cmp	r6, #0
200012e0:	f000 80ed 	beq.w	200014be <__udivmoddi4+0x28a>
200012e4:	2100      	movs	r1, #0
200012e6:	e9c6 0500 	strd	r0, r5, [r6]
200012ea:	4608      	mov	r0, r1
200012ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200012f0:	fab3 f183 	clz	r1, r3
200012f4:	2900      	cmp	r1, #0
200012f6:	d149      	bne.n	2000138c <__udivmoddi4+0x158>
200012f8:	42ab      	cmp	r3, r5
200012fa:	d302      	bcc.n	20001302 <__udivmoddi4+0xce>
200012fc:	4282      	cmp	r2, r0
200012fe:	f200 80f8 	bhi.w	200014f2 <__udivmoddi4+0x2be>
20001302:	1a84      	subs	r4, r0, r2
20001304:	eb65 0203 	sbc.w	r2, r5, r3
20001308:	2001      	movs	r0, #1
2000130a:	4617      	mov	r7, r2
2000130c:	2e00      	cmp	r6, #0
2000130e:	d0e2      	beq.n	200012d6 <__udivmoddi4+0xa2>
20001310:	e9c6 4700 	strd	r4, r7, [r6]
20001314:	e7df      	b.n	200012d6 <__udivmoddi4+0xa2>
20001316:	b902      	cbnz	r2, 2000131a <__udivmoddi4+0xe6>
20001318:	deff      	udf	#255	; 0xff
2000131a:	fab2 f382 	clz	r3, r2
2000131e:	2b00      	cmp	r3, #0
20001320:	f040 8090 	bne.w	20001444 <__udivmoddi4+0x210>
20001324:	1a8a      	subs	r2, r1, r2
20001326:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000132a:	fa1f fe8c 	uxth.w	lr, ip
2000132e:	2101      	movs	r1, #1
20001330:	fbb2 f5f7 	udiv	r5, r2, r7
20001334:	fb07 2015 	mls	r0, r7, r5, r2
20001338:	0c22      	lsrs	r2, r4, #16
2000133a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
2000133e:	fb0e f005 	mul.w	r0, lr, r5
20001342:	4290      	cmp	r0, r2
20001344:	d908      	bls.n	20001358 <__udivmoddi4+0x124>
20001346:	eb1c 0202 	adds.w	r2, ip, r2
2000134a:	f105 38ff 	add.w	r8, r5, #4294967295
2000134e:	d202      	bcs.n	20001356 <__udivmoddi4+0x122>
20001350:	4290      	cmp	r0, r2
20001352:	f200 80cb 	bhi.w	200014ec <__udivmoddi4+0x2b8>
20001356:	4645      	mov	r5, r8
20001358:	1a12      	subs	r2, r2, r0
2000135a:	b2a4      	uxth	r4, r4
2000135c:	fbb2 f0f7 	udiv	r0, r2, r7
20001360:	fb07 2210 	mls	r2, r7, r0, r2
20001364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
20001368:	fb0e fe00 	mul.w	lr, lr, r0
2000136c:	45a6      	cmp	lr, r4
2000136e:	d908      	bls.n	20001382 <__udivmoddi4+0x14e>
20001370:	eb1c 0404 	adds.w	r4, ip, r4
20001374:	f100 32ff 	add.w	r2, r0, #4294967295
20001378:	d202      	bcs.n	20001380 <__udivmoddi4+0x14c>
2000137a:	45a6      	cmp	lr, r4
2000137c:	f200 80bb 	bhi.w	200014f6 <__udivmoddi4+0x2c2>
20001380:	4610      	mov	r0, r2
20001382:	eba4 040e 	sub.w	r4, r4, lr
20001386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
2000138a:	e79f      	b.n	200012cc <__udivmoddi4+0x98>
2000138c:	f1c1 0720 	rsb	r7, r1, #32
20001390:	408b      	lsls	r3, r1
20001392:	fa22 fc07 	lsr.w	ip, r2, r7
20001396:	ea4c 0c03 	orr.w	ip, ip, r3
2000139a:	fa05 f401 	lsl.w	r4, r5, r1
2000139e:	fa20 f307 	lsr.w	r3, r0, r7
200013a2:	40fd      	lsrs	r5, r7
200013a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
200013a8:	4323      	orrs	r3, r4
200013aa:	fbb5 f8f9 	udiv	r8, r5, r9
200013ae:	fa1f fe8c 	uxth.w	lr, ip
200013b2:	fb09 5518 	mls	r5, r9, r8, r5
200013b6:	0c1c      	lsrs	r4, r3, #16
200013b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
200013bc:	fb08 f50e 	mul.w	r5, r8, lr
200013c0:	42a5      	cmp	r5, r4
200013c2:	fa02 f201 	lsl.w	r2, r2, r1
200013c6:	fa00 f001 	lsl.w	r0, r0, r1
200013ca:	d90b      	bls.n	200013e4 <__udivmoddi4+0x1b0>
200013cc:	eb1c 0404 	adds.w	r4, ip, r4
200013d0:	f108 3aff 	add.w	sl, r8, #4294967295
200013d4:	f080 8088 	bcs.w	200014e8 <__udivmoddi4+0x2b4>
200013d8:	42a5      	cmp	r5, r4
200013da:	f240 8085 	bls.w	200014e8 <__udivmoddi4+0x2b4>
200013de:	f1a8 0802 	sub.w	r8, r8, #2
200013e2:	4464      	add	r4, ip
200013e4:	1b64      	subs	r4, r4, r5
200013e6:	b29d      	uxth	r5, r3
200013e8:	fbb4 f3f9 	udiv	r3, r4, r9
200013ec:	fb09 4413 	mls	r4, r9, r3, r4
200013f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
200013f4:	fb03 fe0e 	mul.w	lr, r3, lr
200013f8:	45a6      	cmp	lr, r4
200013fa:	d908      	bls.n	2000140e <__udivmoddi4+0x1da>
200013fc:	eb1c 0404 	adds.w	r4, ip, r4
20001400:	f103 35ff 	add.w	r5, r3, #4294967295
20001404:	d26c      	bcs.n	200014e0 <__udivmoddi4+0x2ac>
20001406:	45a6      	cmp	lr, r4
20001408:	d96a      	bls.n	200014e0 <__udivmoddi4+0x2ac>
2000140a:	3b02      	subs	r3, #2
2000140c:	4464      	add	r4, ip
2000140e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
20001412:	fba3 9502 	umull	r9, r5, r3, r2
20001416:	eba4 040e 	sub.w	r4, r4, lr
2000141a:	42ac      	cmp	r4, r5
2000141c:	46c8      	mov	r8, r9
2000141e:	46ae      	mov	lr, r5
20001420:	d356      	bcc.n	200014d0 <__udivmoddi4+0x29c>
20001422:	d053      	beq.n	200014cc <__udivmoddi4+0x298>
20001424:	b156      	cbz	r6, 2000143c <__udivmoddi4+0x208>
20001426:	ebb0 0208 	subs.w	r2, r0, r8
2000142a:	eb64 040e 	sbc.w	r4, r4, lr
2000142e:	fa04 f707 	lsl.w	r7, r4, r7
20001432:	40ca      	lsrs	r2, r1
20001434:	40cc      	lsrs	r4, r1
20001436:	4317      	orrs	r7, r2
20001438:	e9c6 7400 	strd	r7, r4, [r6]
2000143c:	4618      	mov	r0, r3
2000143e:	2100      	movs	r1, #0
20001440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20001444:	f1c3 0120 	rsb	r1, r3, #32
20001448:	fa02 fc03 	lsl.w	ip, r2, r3
2000144c:	fa20 f201 	lsr.w	r2, r0, r1
20001450:	fa25 f101 	lsr.w	r1, r5, r1
20001454:	409d      	lsls	r5, r3
20001456:	432a      	orrs	r2, r5
20001458:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000145c:	fa1f fe8c 	uxth.w	lr, ip
20001460:	fbb1 f0f7 	udiv	r0, r1, r7
20001464:	fb07 1510 	mls	r5, r7, r0, r1
20001468:	0c11      	lsrs	r1, r2, #16
2000146a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
2000146e:	fb00 f50e 	mul.w	r5, r0, lr
20001472:	428d      	cmp	r5, r1
20001474:	fa04 f403 	lsl.w	r4, r4, r3
20001478:	d908      	bls.n	2000148c <__udivmoddi4+0x258>
2000147a:	eb1c 0101 	adds.w	r1, ip, r1
2000147e:	f100 38ff 	add.w	r8, r0, #4294967295
20001482:	d22f      	bcs.n	200014e4 <__udivmoddi4+0x2b0>
20001484:	428d      	cmp	r5, r1
20001486:	d92d      	bls.n	200014e4 <__udivmoddi4+0x2b0>
20001488:	3802      	subs	r0, #2
2000148a:	4461      	add	r1, ip
2000148c:	1b49      	subs	r1, r1, r5
2000148e:	b292      	uxth	r2, r2
20001490:	fbb1 f5f7 	udiv	r5, r1, r7
20001494:	fb07 1115 	mls	r1, r7, r5, r1
20001498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
2000149c:	fb05 f10e 	mul.w	r1, r5, lr
200014a0:	4291      	cmp	r1, r2
200014a2:	d908      	bls.n	200014b6 <__udivmoddi4+0x282>
200014a4:	eb1c 0202 	adds.w	r2, ip, r2
200014a8:	f105 38ff 	add.w	r8, r5, #4294967295
200014ac:	d216      	bcs.n	200014dc <__udivmoddi4+0x2a8>
200014ae:	4291      	cmp	r1, r2
200014b0:	d914      	bls.n	200014dc <__udivmoddi4+0x2a8>
200014b2:	3d02      	subs	r5, #2
200014b4:	4462      	add	r2, ip
200014b6:	1a52      	subs	r2, r2, r1
200014b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
200014bc:	e738      	b.n	20001330 <__udivmoddi4+0xfc>
200014be:	4631      	mov	r1, r6
200014c0:	4630      	mov	r0, r6
200014c2:	e708      	b.n	200012d6 <__udivmoddi4+0xa2>
200014c4:	4639      	mov	r1, r7
200014c6:	e6e6      	b.n	20001296 <__udivmoddi4+0x62>
200014c8:	4610      	mov	r0, r2
200014ca:	e6fb      	b.n	200012c4 <__udivmoddi4+0x90>
200014cc:	4548      	cmp	r0, r9
200014ce:	d2a9      	bcs.n	20001424 <__udivmoddi4+0x1f0>
200014d0:	ebb9 0802 	subs.w	r8, r9, r2
200014d4:	eb65 0e0c 	sbc.w	lr, r5, ip
200014d8:	3b01      	subs	r3, #1
200014da:	e7a3      	b.n	20001424 <__udivmoddi4+0x1f0>
200014dc:	4645      	mov	r5, r8
200014de:	e7ea      	b.n	200014b6 <__udivmoddi4+0x282>
200014e0:	462b      	mov	r3, r5
200014e2:	e794      	b.n	2000140e <__udivmoddi4+0x1da>
200014e4:	4640      	mov	r0, r8
200014e6:	e7d1      	b.n	2000148c <__udivmoddi4+0x258>
200014e8:	46d0      	mov	r8, sl
200014ea:	e77b      	b.n	200013e4 <__udivmoddi4+0x1b0>
200014ec:	3d02      	subs	r5, #2
200014ee:	4462      	add	r2, ip
200014f0:	e732      	b.n	20001358 <__udivmoddi4+0x124>
200014f2:	4608      	mov	r0, r1
200014f4:	e70a      	b.n	2000130c <__udivmoddi4+0xd8>
200014f6:	4464      	add	r4, ip
200014f8:	3802      	subs	r0, #2
200014fa:	e742      	b.n	20001382 <__udivmoddi4+0x14e>

200014fc <__aeabi_idiv0>:
200014fc:	4770      	bx	lr
200014fe:	bf00      	nop

20001500 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
20001500:	b580      	push	{r7, lr}
20001502:	b08a      	sub	sp, #40	; 0x28
20001504:	af00      	add	r7, sp, #0
20001506:	4603      	mov	r3, r0
20001508:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
2000150a:	79fb      	ldrb	r3, [r7, #7]
2000150c:	2b00      	cmp	r3, #0
2000150e:	d10e      	bne.n	2000152e <BSP_LED_Init+0x2e>
20001510:	2300      	movs	r3, #0
20001512:	613b      	str	r3, [r7, #16]
20001514:	4b1f      	ldr	r3, [pc, #124]	; (20001594 <BSP_LED_Init+0x94>)
20001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001518:	4a1e      	ldr	r2, [pc, #120]	; (20001594 <BSP_LED_Init+0x94>)
2000151a:	f043 0302 	orr.w	r3, r3, #2
2000151e:	6313      	str	r3, [r2, #48]	; 0x30
20001520:	4b1c      	ldr	r3, [pc, #112]	; (20001594 <BSP_LED_Init+0x94>)
20001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001524:	f003 0302 	and.w	r3, r3, #2
20001528:	613b      	str	r3, [r7, #16]
2000152a:	693b      	ldr	r3, [r7, #16]
2000152c:	e00d      	b.n	2000154a <BSP_LED_Init+0x4a>
2000152e:	2300      	movs	r3, #0
20001530:	60fb      	str	r3, [r7, #12]
20001532:	4b18      	ldr	r3, [pc, #96]	; (20001594 <BSP_LED_Init+0x94>)
20001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001536:	4a17      	ldr	r2, [pc, #92]	; (20001594 <BSP_LED_Init+0x94>)
20001538:	f043 0302 	orr.w	r3, r3, #2
2000153c:	6313      	str	r3, [r2, #48]	; 0x30
2000153e:	4b15      	ldr	r3, [pc, #84]	; (20001594 <BSP_LED_Init+0x94>)
20001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001542:	f003 0302 	and.w	r3, r3, #2
20001546:	60fb      	str	r3, [r7, #12]
20001548:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
2000154a:	79fb      	ldrb	r3, [r7, #7]
2000154c:	4a12      	ldr	r2, [pc, #72]	; (20001598 <BSP_LED_Init+0x98>)
2000154e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
20001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20001554:	2301      	movs	r3, #1
20001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001558:	2300      	movs	r3, #0
2000155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
2000155c:	2302      	movs	r3, #2
2000155e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20001560:	79fb      	ldrb	r3, [r7, #7]
20001562:	4a0e      	ldr	r2, [pc, #56]	; (2000159c <BSP_LED_Init+0x9c>)
20001564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20001568:	f107 0214 	add.w	r2, r7, #20
2000156c:	4611      	mov	r1, r2
2000156e:	4618      	mov	r0, r3
20001570:	f000 fd14 	bl	20001f9c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
20001574:	79fb      	ldrb	r3, [r7, #7]
20001576:	4a09      	ldr	r2, [pc, #36]	; (2000159c <BSP_LED_Init+0x9c>)
20001578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
2000157c:	79fb      	ldrb	r3, [r7, #7]
2000157e:	4a06      	ldr	r2, [pc, #24]	; (20001598 <BSP_LED_Init+0x98>)
20001580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
20001584:	2200      	movs	r2, #0
20001586:	4619      	mov	r1, r3
20001588:	f000 fe9c 	bl	200022c4 <HAL_GPIO_WritePin>
}
2000158c:	bf00      	nop
2000158e:	3728      	adds	r7, #40	; 0x28
20001590:	46bd      	mov	sp, r7
20001592:	bd80      	pop	{r7, pc}
20001594:	40023800 	.word	0x40023800
20001598:	20004324 	.word	0x20004324
2000159c:	20004354 	.word	0x20004354

200015a0 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
200015a0:	b580      	push	{r7, lr}
200015a2:	b082      	sub	sp, #8
200015a4:	af00      	add	r7, sp, #0
200015a6:	4603      	mov	r3, r0
200015a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
200015aa:	79fb      	ldrb	r3, [r7, #7]
200015ac:	4a07      	ldr	r2, [pc, #28]	; (200015cc <BSP_LED_On+0x2c>)
200015ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
200015b2:	79fb      	ldrb	r3, [r7, #7]
200015b4:	4a06      	ldr	r2, [pc, #24]	; (200015d0 <BSP_LED_On+0x30>)
200015b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
200015ba:	2201      	movs	r2, #1
200015bc:	4619      	mov	r1, r3
200015be:	f000 fe81 	bl	200022c4 <HAL_GPIO_WritePin>
}
200015c2:	bf00      	nop
200015c4:	3708      	adds	r7, #8
200015c6:	46bd      	mov	sp, r7
200015c8:	bd80      	pop	{r7, pc}
200015ca:	bf00      	nop
200015cc:	20004354 	.word	0x20004354
200015d0:	20004324 	.word	0x20004324

200015d4 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
200015d4:	b580      	push	{r7, lr}
200015d6:	b082      	sub	sp, #8
200015d8:	af00      	add	r7, sp, #0
200015da:	4603      	mov	r3, r0
200015dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
200015de:	79fb      	ldrb	r3, [r7, #7]
200015e0:	4a07      	ldr	r2, [pc, #28]	; (20001600 <BSP_LED_Off+0x2c>)
200015e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
200015e6:	79fb      	ldrb	r3, [r7, #7]
200015e8:	4a06      	ldr	r2, [pc, #24]	; (20001604 <BSP_LED_Off+0x30>)
200015ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
200015ee:	2200      	movs	r2, #0
200015f0:	4619      	mov	r1, r3
200015f2:	f000 fe67 	bl	200022c4 <HAL_GPIO_WritePin>
}
200015f6:	bf00      	nop
200015f8:	3708      	adds	r7, #8
200015fa:	46bd      	mov	sp, r7
200015fc:	bd80      	pop	{r7, pc}
200015fe:	bf00      	nop
20001600:	20004354 	.word	0x20004354
20001604:	20004324 	.word	0x20004324

20001608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20001608:	b480      	push	{r7}
2000160a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
2000160c:	4b16      	ldr	r3, [pc, #88]	; (20001668 <SystemInit+0x60>)
2000160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20001612:	4a15      	ldr	r2, [pc, #84]	; (20001668 <SystemInit+0x60>)
20001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
2000161c:	4b13      	ldr	r3, [pc, #76]	; (2000166c <SystemInit+0x64>)
2000161e:	681b      	ldr	r3, [r3, #0]
20001620:	4a12      	ldr	r2, [pc, #72]	; (2000166c <SystemInit+0x64>)
20001622:	f043 0301 	orr.w	r3, r3, #1
20001626:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20001628:	4b10      	ldr	r3, [pc, #64]	; (2000166c <SystemInit+0x64>)
2000162a:	2200      	movs	r2, #0
2000162c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
2000162e:	4b0f      	ldr	r3, [pc, #60]	; (2000166c <SystemInit+0x64>)
20001630:	681b      	ldr	r3, [r3, #0]
20001632:	4a0e      	ldr	r2, [pc, #56]	; (2000166c <SystemInit+0x64>)
20001634:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
20001638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000163c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
2000163e:	4b0b      	ldr	r3, [pc, #44]	; (2000166c <SystemInit+0x64>)
20001640:	4a0b      	ldr	r2, [pc, #44]	; (20001670 <SystemInit+0x68>)
20001642:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20001644:	4b09      	ldr	r3, [pc, #36]	; (2000166c <SystemInit+0x64>)
20001646:	681b      	ldr	r3, [r3, #0]
20001648:	4a08      	ldr	r2, [pc, #32]	; (2000166c <SystemInit+0x64>)
2000164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000164e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20001650:	4b06      	ldr	r3, [pc, #24]	; (2000166c <SystemInit+0x64>)
20001652:	2200      	movs	r2, #0
20001654:	60da      	str	r2, [r3, #12]


  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
20001656:	4b04      	ldr	r3, [pc, #16]	; (20001668 <SystemInit+0x60>)
20001658:	4a06      	ldr	r2, [pc, #24]	; (20001674 <SystemInit+0x6c>)
2000165a:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
2000165c:	bf00      	nop
2000165e:	46bd      	mov	sp, r7
20001660:	f85d 7b04 	ldr.w	r7, [sp], #4
20001664:	4770      	bx	lr
20001666:	bf00      	nop
20001668:	e000ed00 	.word	0xe000ed00
2000166c:	40023800 	.word	0x40023800
20001670:	24003010 	.word	0x24003010
20001674:	20001000 	.word	0x20001000

20001678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20001678:	b580      	push	{r7, lr}
2000167a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
2000167c:	4b0b      	ldr	r3, [pc, #44]	; (200016ac <HAL_Init+0x34>)
2000167e:	681b      	ldr	r3, [r3, #0]
20001680:	4a0a      	ldr	r2, [pc, #40]	; (200016ac <HAL_Init+0x34>)
20001682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20001686:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20001688:	4b08      	ldr	r3, [pc, #32]	; (200016ac <HAL_Init+0x34>)
2000168a:	681b      	ldr	r3, [r3, #0]
2000168c:	4a07      	ldr	r2, [pc, #28]	; (200016ac <HAL_Init+0x34>)
2000168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20001694:	2003      	movs	r0, #3
20001696:	f000 f957 	bl	20001948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
2000169a:	200f      	movs	r0, #15
2000169c:	f000 f810 	bl	200016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
200016a0:	f000 f806 	bl	200016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
200016a4:	2300      	movs	r3, #0
}
200016a6:	4618      	mov	r0, r3
200016a8:	bd80      	pop	{r7, pc}
200016aa:	bf00      	nop
200016ac:	40023c00 	.word	0x40023c00

200016b0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
200016b0:	b480      	push	{r7}
200016b2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
200016b4:	bf00      	nop
200016b6:	46bd      	mov	sp, r7
200016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200016bc:	4770      	bx	lr
	...

200016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
200016c0:	b580      	push	{r7, lr}
200016c2:	b082      	sub	sp, #8
200016c4:	af00      	add	r7, sp, #0
200016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
200016c8:	4b12      	ldr	r3, [pc, #72]	; (20001714 <HAL_InitTick+0x54>)
200016ca:	681a      	ldr	r2, [r3, #0]
200016cc:	4b12      	ldr	r3, [pc, #72]	; (20001718 <HAL_InitTick+0x58>)
200016ce:	781b      	ldrb	r3, [r3, #0]
200016d0:	4619      	mov	r1, r3
200016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
200016d6:	fbb3 f3f1 	udiv	r3, r3, r1
200016da:	fbb2 f3f3 	udiv	r3, r2, r3
200016de:	4618      	mov	r0, r3
200016e0:	f000 f967 	bl	200019b2 <HAL_SYSTICK_Config>
200016e4:	4603      	mov	r3, r0
200016e6:	2b00      	cmp	r3, #0
200016e8:	d001      	beq.n	200016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
200016ea:	2301      	movs	r3, #1
200016ec:	e00e      	b.n	2000170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
200016ee:	687b      	ldr	r3, [r7, #4]
200016f0:	2b0f      	cmp	r3, #15
200016f2:	d80a      	bhi.n	2000170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
200016f4:	2200      	movs	r2, #0
200016f6:	6879      	ldr	r1, [r7, #4]
200016f8:	f04f 30ff 	mov.w	r0, #4294967295
200016fc:	f000 f92f 	bl	2000195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20001700:	4a06      	ldr	r2, [pc, #24]	; (2000171c <HAL_InitTick+0x5c>)
20001702:	687b      	ldr	r3, [r7, #4]
20001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
20001706:	2300      	movs	r3, #0
20001708:	e000      	b.n	2000170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
2000170a:	2301      	movs	r3, #1
}
2000170c:	4618      	mov	r0, r3
2000170e:	3708      	adds	r7, #8
20001710:	46bd      	mov	sp, r7
20001712:	bd80      	pop	{r7, pc}
20001714:	20004360 	.word	0x20004360
20001718:	20004368 	.word	0x20004368
2000171c:	20004364 	.word	0x20004364

20001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20001720:	b480      	push	{r7}
20001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20001724:	4b06      	ldr	r3, [pc, #24]	; (20001740 <HAL_IncTick+0x20>)
20001726:	781b      	ldrb	r3, [r3, #0]
20001728:	461a      	mov	r2, r3
2000172a:	4b06      	ldr	r3, [pc, #24]	; (20001744 <HAL_IncTick+0x24>)
2000172c:	681b      	ldr	r3, [r3, #0]
2000172e:	4413      	add	r3, r2
20001730:	4a04      	ldr	r2, [pc, #16]	; (20001744 <HAL_IncTick+0x24>)
20001732:	6013      	str	r3, [r2, #0]
}
20001734:	bf00      	nop
20001736:	46bd      	mov	sp, r7
20001738:	f85d 7b04 	ldr.w	r7, [sp], #4
2000173c:	4770      	bx	lr
2000173e:	bf00      	nop
20001740:	20004368 	.word	0x20004368
20001744:	20004388 	.word	0x20004388

20001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20001748:	b480      	push	{r7}
2000174a:	af00      	add	r7, sp, #0
  return uwTick;
2000174c:	4b03      	ldr	r3, [pc, #12]	; (2000175c <HAL_GetTick+0x14>)
2000174e:	681b      	ldr	r3, [r3, #0]
}
20001750:	4618      	mov	r0, r3
20001752:	46bd      	mov	sp, r7
20001754:	f85d 7b04 	ldr.w	r7, [sp], #4
20001758:	4770      	bx	lr
2000175a:	bf00      	nop
2000175c:	20004388 	.word	0x20004388

20001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20001760:	b580      	push	{r7, lr}
20001762:	b084      	sub	sp, #16
20001764:	af00      	add	r7, sp, #0
20001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20001768:	f7ff ffee 	bl	20001748 <HAL_GetTick>
2000176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
2000176e:	687b      	ldr	r3, [r7, #4]
20001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
20001772:	68fb      	ldr	r3, [r7, #12]
20001774:	f1b3 3fff 	cmp.w	r3, #4294967295
20001778:	d005      	beq.n	20001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
2000177a:	4b0a      	ldr	r3, [pc, #40]	; (200017a4 <HAL_Delay+0x44>)
2000177c:	781b      	ldrb	r3, [r3, #0]
2000177e:	461a      	mov	r2, r3
20001780:	68fb      	ldr	r3, [r7, #12]
20001782:	4413      	add	r3, r2
20001784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
20001786:	bf00      	nop
20001788:	f7ff ffde 	bl	20001748 <HAL_GetTick>
2000178c:	4602      	mov	r2, r0
2000178e:	68bb      	ldr	r3, [r7, #8]
20001790:	1ad3      	subs	r3, r2, r3
20001792:	68fa      	ldr	r2, [r7, #12]
20001794:	429a      	cmp	r2, r3
20001796:	d8f7      	bhi.n	20001788 <HAL_Delay+0x28>
  {
  }
}
20001798:	bf00      	nop
2000179a:	bf00      	nop
2000179c:	3710      	adds	r7, #16
2000179e:	46bd      	mov	sp, r7
200017a0:	bd80      	pop	{r7, pc}
200017a2:	bf00      	nop
200017a4:	20004368 	.word	0x20004368

200017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200017a8:	b480      	push	{r7}
200017aa:	b085      	sub	sp, #20
200017ac:	af00      	add	r7, sp, #0
200017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
200017b0:	687b      	ldr	r3, [r7, #4]
200017b2:	f003 0307 	and.w	r3, r3, #7
200017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
200017b8:	4b0c      	ldr	r3, [pc, #48]	; (200017ec <__NVIC_SetPriorityGrouping+0x44>)
200017ba:	68db      	ldr	r3, [r3, #12]
200017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200017be:	68ba      	ldr	r2, [r7, #8]
200017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
200017c4:	4013      	ands	r3, r2
200017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
200017c8:	68fb      	ldr	r3, [r7, #12]
200017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
200017cc:	68bb      	ldr	r3, [r7, #8]
200017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
200017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
200017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
200017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
200017da:	4a04      	ldr	r2, [pc, #16]	; (200017ec <__NVIC_SetPriorityGrouping+0x44>)
200017dc:	68bb      	ldr	r3, [r7, #8]
200017de:	60d3      	str	r3, [r2, #12]
}
200017e0:	bf00      	nop
200017e2:	3714      	adds	r7, #20
200017e4:	46bd      	mov	sp, r7
200017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200017ea:	4770      	bx	lr
200017ec:	e000ed00 	.word	0xe000ed00

200017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
200017f0:	b480      	push	{r7}
200017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200017f4:	4b04      	ldr	r3, [pc, #16]	; (20001808 <__NVIC_GetPriorityGrouping+0x18>)
200017f6:	68db      	ldr	r3, [r3, #12]
200017f8:	0a1b      	lsrs	r3, r3, #8
200017fa:	f003 0307 	and.w	r3, r3, #7
}
200017fe:	4618      	mov	r0, r3
20001800:	46bd      	mov	sp, r7
20001802:	f85d 7b04 	ldr.w	r7, [sp], #4
20001806:	4770      	bx	lr
20001808:	e000ed00 	.word	0xe000ed00

2000180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
2000180c:	b480      	push	{r7}
2000180e:	b083      	sub	sp, #12
20001810:	af00      	add	r7, sp, #0
20001812:	4603      	mov	r3, r0
20001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000181a:	2b00      	cmp	r3, #0
2000181c:	db0b      	blt.n	20001836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2000181e:	79fb      	ldrb	r3, [r7, #7]
20001820:	f003 021f 	and.w	r2, r3, #31
20001824:	4907      	ldr	r1, [pc, #28]	; (20001844 <__NVIC_EnableIRQ+0x38>)
20001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000182a:	095b      	lsrs	r3, r3, #5
2000182c:	2001      	movs	r0, #1
2000182e:	fa00 f202 	lsl.w	r2, r0, r2
20001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
20001836:	bf00      	nop
20001838:	370c      	adds	r7, #12
2000183a:	46bd      	mov	sp, r7
2000183c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001840:	4770      	bx	lr
20001842:	bf00      	nop
20001844:	e000e100 	.word	0xe000e100

20001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20001848:	b480      	push	{r7}
2000184a:	b083      	sub	sp, #12
2000184c:	af00      	add	r7, sp, #0
2000184e:	4603      	mov	r3, r0
20001850:	6039      	str	r1, [r7, #0]
20001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001858:	2b00      	cmp	r3, #0
2000185a:	db0a      	blt.n	20001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000185c:	683b      	ldr	r3, [r7, #0]
2000185e:	b2da      	uxtb	r2, r3
20001860:	490c      	ldr	r1, [pc, #48]	; (20001894 <__NVIC_SetPriority+0x4c>)
20001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001866:	0112      	lsls	r2, r2, #4
20001868:	b2d2      	uxtb	r2, r2
2000186a:	440b      	add	r3, r1
2000186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20001870:	e00a      	b.n	20001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001872:	683b      	ldr	r3, [r7, #0]
20001874:	b2da      	uxtb	r2, r3
20001876:	4908      	ldr	r1, [pc, #32]	; (20001898 <__NVIC_SetPriority+0x50>)
20001878:	79fb      	ldrb	r3, [r7, #7]
2000187a:	f003 030f 	and.w	r3, r3, #15
2000187e:	3b04      	subs	r3, #4
20001880:	0112      	lsls	r2, r2, #4
20001882:	b2d2      	uxtb	r2, r2
20001884:	440b      	add	r3, r1
20001886:	761a      	strb	r2, [r3, #24]
}
20001888:	bf00      	nop
2000188a:	370c      	adds	r7, #12
2000188c:	46bd      	mov	sp, r7
2000188e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001892:	4770      	bx	lr
20001894:	e000e100 	.word	0xe000e100
20001898:	e000ed00 	.word	0xe000ed00

2000189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2000189c:	b480      	push	{r7}
2000189e:	b089      	sub	sp, #36	; 0x24
200018a0:	af00      	add	r7, sp, #0
200018a2:	60f8      	str	r0, [r7, #12]
200018a4:	60b9      	str	r1, [r7, #8]
200018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
200018a8:	68fb      	ldr	r3, [r7, #12]
200018aa:	f003 0307 	and.w	r3, r3, #7
200018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200018b0:	69fb      	ldr	r3, [r7, #28]
200018b2:	f1c3 0307 	rsb	r3, r3, #7
200018b6:	2b04      	cmp	r3, #4
200018b8:	bf28      	it	cs
200018ba:	2304      	movcs	r3, #4
200018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200018be:	69fb      	ldr	r3, [r7, #28]
200018c0:	3304      	adds	r3, #4
200018c2:	2b06      	cmp	r3, #6
200018c4:	d902      	bls.n	200018cc <NVIC_EncodePriority+0x30>
200018c6:	69fb      	ldr	r3, [r7, #28]
200018c8:	3b03      	subs	r3, #3
200018ca:	e000      	b.n	200018ce <NVIC_EncodePriority+0x32>
200018cc:	2300      	movs	r3, #0
200018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200018d0:	f04f 32ff 	mov.w	r2, #4294967295
200018d4:	69bb      	ldr	r3, [r7, #24]
200018d6:	fa02 f303 	lsl.w	r3, r2, r3
200018da:	43da      	mvns	r2, r3
200018dc:	68bb      	ldr	r3, [r7, #8]
200018de:	401a      	ands	r2, r3
200018e0:	697b      	ldr	r3, [r7, #20]
200018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
200018e4:	f04f 31ff 	mov.w	r1, #4294967295
200018e8:	697b      	ldr	r3, [r7, #20]
200018ea:	fa01 f303 	lsl.w	r3, r1, r3
200018ee:	43d9      	mvns	r1, r3
200018f0:	687b      	ldr	r3, [r7, #4]
200018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200018f4:	4313      	orrs	r3, r2
         );
}
200018f6:	4618      	mov	r0, r3
200018f8:	3724      	adds	r7, #36	; 0x24
200018fa:	46bd      	mov	sp, r7
200018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001900:	4770      	bx	lr
	...

20001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20001904:	b580      	push	{r7, lr}
20001906:	b082      	sub	sp, #8
20001908:	af00      	add	r7, sp, #0
2000190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
2000190c:	687b      	ldr	r3, [r7, #4]
2000190e:	3b01      	subs	r3, #1
20001910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20001914:	d301      	bcc.n	2000191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
20001916:	2301      	movs	r3, #1
20001918:	e00f      	b.n	2000193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000191a:	4a0a      	ldr	r2, [pc, #40]	; (20001944 <SysTick_Config+0x40>)
2000191c:	687b      	ldr	r3, [r7, #4]
2000191e:	3b01      	subs	r3, #1
20001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20001922:	210f      	movs	r1, #15
20001924:	f04f 30ff 	mov.w	r0, #4294967295
20001928:	f7ff ff8e 	bl	20001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000192c:	4b05      	ldr	r3, [pc, #20]	; (20001944 <SysTick_Config+0x40>)
2000192e:	2200      	movs	r2, #0
20001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20001932:	4b04      	ldr	r3, [pc, #16]	; (20001944 <SysTick_Config+0x40>)
20001934:	2207      	movs	r2, #7
20001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20001938:	2300      	movs	r3, #0
}
2000193a:	4618      	mov	r0, r3
2000193c:	3708      	adds	r7, #8
2000193e:	46bd      	mov	sp, r7
20001940:	bd80      	pop	{r7, pc}
20001942:	bf00      	nop
20001944:	e000e010 	.word	0xe000e010

20001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20001948:	b580      	push	{r7, lr}
2000194a:	b082      	sub	sp, #8
2000194c:	af00      	add	r7, sp, #0
2000194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20001950:	6878      	ldr	r0, [r7, #4]
20001952:	f7ff ff29 	bl	200017a8 <__NVIC_SetPriorityGrouping>
}
20001956:	bf00      	nop
20001958:	3708      	adds	r7, #8
2000195a:	46bd      	mov	sp, r7
2000195c:	bd80      	pop	{r7, pc}

2000195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
2000195e:	b580      	push	{r7, lr}
20001960:	b086      	sub	sp, #24
20001962:	af00      	add	r7, sp, #0
20001964:	4603      	mov	r3, r0
20001966:	60b9      	str	r1, [r7, #8]
20001968:	607a      	str	r2, [r7, #4]
2000196a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
2000196c:	2300      	movs	r3, #0
2000196e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20001970:	f7ff ff3e 	bl	200017f0 <__NVIC_GetPriorityGrouping>
20001974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
20001976:	687a      	ldr	r2, [r7, #4]
20001978:	68b9      	ldr	r1, [r7, #8]
2000197a:	6978      	ldr	r0, [r7, #20]
2000197c:	f7ff ff8e 	bl	2000189c <NVIC_EncodePriority>
20001980:	4602      	mov	r2, r0
20001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001986:	4611      	mov	r1, r2
20001988:	4618      	mov	r0, r3
2000198a:	f7ff ff5d 	bl	20001848 <__NVIC_SetPriority>
}
2000198e:	bf00      	nop
20001990:	3718      	adds	r7, #24
20001992:	46bd      	mov	sp, r7
20001994:	bd80      	pop	{r7, pc}

20001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
20001996:	b580      	push	{r7, lr}
20001998:	b082      	sub	sp, #8
2000199a:	af00      	add	r7, sp, #0
2000199c:	4603      	mov	r3, r0
2000199e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
200019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
200019a4:	4618      	mov	r0, r3
200019a6:	f7ff ff31 	bl	2000180c <__NVIC_EnableIRQ>
}
200019aa:	bf00      	nop
200019ac:	3708      	adds	r7, #8
200019ae:	46bd      	mov	sp, r7
200019b0:	bd80      	pop	{r7, pc}

200019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
200019b2:	b580      	push	{r7, lr}
200019b4:	b082      	sub	sp, #8
200019b6:	af00      	add	r7, sp, #0
200019b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
200019ba:	6878      	ldr	r0, [r7, #4]
200019bc:	f7ff ffa2 	bl	20001904 <SysTick_Config>
200019c0:	4603      	mov	r3, r0
}
200019c2:	4618      	mov	r0, r3
200019c4:	3708      	adds	r7, #8
200019c6:	46bd      	mov	sp, r7
200019c8:	bd80      	pop	{r7, pc}
	...

200019cc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
200019cc:	b580      	push	{r7, lr}
200019ce:	b086      	sub	sp, #24
200019d0:	af00      	add	r7, sp, #0
200019d2:	60f8      	str	r0, [r7, #12]
200019d4:	60b9      	str	r1, [r7, #8]
200019d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
200019da:	2301      	movs	r3, #1
200019dc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
200019de:	4b23      	ldr	r3, [pc, #140]	; (20001a6c <HAL_FLASH_Program+0xa0>)
200019e0:	7e1b      	ldrb	r3, [r3, #24]
200019e2:	2b01      	cmp	r3, #1
200019e4:	d101      	bne.n	200019ea <HAL_FLASH_Program+0x1e>
200019e6:	2302      	movs	r3, #2
200019e8:	e03b      	b.n	20001a62 <HAL_FLASH_Program+0x96>
200019ea:	4b20      	ldr	r3, [pc, #128]	; (20001a6c <HAL_FLASH_Program+0xa0>)
200019ec:	2201      	movs	r2, #1
200019ee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200019f0:	f24c 3050 	movw	r0, #50000	; 0xc350
200019f4:	f000 f870 	bl	20001ad8 <FLASH_WaitForLastOperation>
200019f8:	4603      	mov	r3, r0
200019fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
200019fc:	7dfb      	ldrb	r3, [r7, #23]
200019fe:	2b00      	cmp	r3, #0
20001a00:	d12b      	bne.n	20001a5a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
20001a02:	68fb      	ldr	r3, [r7, #12]
20001a04:	2b00      	cmp	r3, #0
20001a06:	d105      	bne.n	20001a14 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
20001a08:	783b      	ldrb	r3, [r7, #0]
20001a0a:	4619      	mov	r1, r3
20001a0c:	68b8      	ldr	r0, [r7, #8]
20001a0e:	f000 f91b 	bl	20001c48 <FLASH_Program_Byte>
20001a12:	e016      	b.n	20001a42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
20001a14:	68fb      	ldr	r3, [r7, #12]
20001a16:	2b01      	cmp	r3, #1
20001a18:	d105      	bne.n	20001a26 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
20001a1a:	883b      	ldrh	r3, [r7, #0]
20001a1c:	4619      	mov	r1, r3
20001a1e:	68b8      	ldr	r0, [r7, #8]
20001a20:	f000 f8ee 	bl	20001c00 <FLASH_Program_HalfWord>
20001a24:	e00d      	b.n	20001a42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
20001a26:	68fb      	ldr	r3, [r7, #12]
20001a28:	2b02      	cmp	r3, #2
20001a2a:	d105      	bne.n	20001a38 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
20001a2c:	683b      	ldr	r3, [r7, #0]
20001a2e:	4619      	mov	r1, r3
20001a30:	68b8      	ldr	r0, [r7, #8]
20001a32:	f000 f8c3 	bl	20001bbc <FLASH_Program_Word>
20001a36:	e004      	b.n	20001a42 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
20001a38:	e9d7 2300 	ldrd	r2, r3, [r7]
20001a3c:	68b8      	ldr	r0, [r7, #8]
20001a3e:	f000 f88b 	bl	20001b58 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001a42:	f24c 3050 	movw	r0, #50000	; 0xc350
20001a46:	f000 f847 	bl	20001ad8 <FLASH_WaitForLastOperation>
20001a4a:	4603      	mov	r3, r0
20001a4c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
20001a4e:	4b08      	ldr	r3, [pc, #32]	; (20001a70 <HAL_FLASH_Program+0xa4>)
20001a50:	691b      	ldr	r3, [r3, #16]
20001a52:	4a07      	ldr	r2, [pc, #28]	; (20001a70 <HAL_FLASH_Program+0xa4>)
20001a54:	f023 0301 	bic.w	r3, r3, #1
20001a58:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20001a5a:	4b04      	ldr	r3, [pc, #16]	; (20001a6c <HAL_FLASH_Program+0xa0>)
20001a5c:	2200      	movs	r2, #0
20001a5e:	761a      	strb	r2, [r3, #24]
  
  return status;
20001a60:	7dfb      	ldrb	r3, [r7, #23]
}
20001a62:	4618      	mov	r0, r3
20001a64:	3718      	adds	r7, #24
20001a66:	46bd      	mov	sp, r7
20001a68:	bd80      	pop	{r7, pc}
20001a6a:	bf00      	nop
20001a6c:	2000438c 	.word	0x2000438c
20001a70:	40023c00 	.word	0x40023c00

20001a74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
20001a74:	b480      	push	{r7}
20001a76:	b083      	sub	sp, #12
20001a78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
20001a7a:	2300      	movs	r3, #0
20001a7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20001a7e:	4b0b      	ldr	r3, [pc, #44]	; (20001aac <HAL_FLASH_Unlock+0x38>)
20001a80:	691b      	ldr	r3, [r3, #16]
20001a82:	2b00      	cmp	r3, #0
20001a84:	da0b      	bge.n	20001a9e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
20001a86:	4b09      	ldr	r3, [pc, #36]	; (20001aac <HAL_FLASH_Unlock+0x38>)
20001a88:	4a09      	ldr	r2, [pc, #36]	; (20001ab0 <HAL_FLASH_Unlock+0x3c>)
20001a8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
20001a8c:	4b07      	ldr	r3, [pc, #28]	; (20001aac <HAL_FLASH_Unlock+0x38>)
20001a8e:	4a09      	ldr	r2, [pc, #36]	; (20001ab4 <HAL_FLASH_Unlock+0x40>)
20001a90:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20001a92:	4b06      	ldr	r3, [pc, #24]	; (20001aac <HAL_FLASH_Unlock+0x38>)
20001a94:	691b      	ldr	r3, [r3, #16]
20001a96:	2b00      	cmp	r3, #0
20001a98:	da01      	bge.n	20001a9e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
20001a9a:	2301      	movs	r3, #1
20001a9c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
20001a9e:	79fb      	ldrb	r3, [r7, #7]
}
20001aa0:	4618      	mov	r0, r3
20001aa2:	370c      	adds	r7, #12
20001aa4:	46bd      	mov	sp, r7
20001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
20001aaa:	4770      	bx	lr
20001aac:	40023c00 	.word	0x40023c00
20001ab0:	45670123 	.word	0x45670123
20001ab4:	cdef89ab 	.word	0xcdef89ab

20001ab8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
20001ab8:	b480      	push	{r7}
20001aba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
20001abc:	4b05      	ldr	r3, [pc, #20]	; (20001ad4 <HAL_FLASH_Lock+0x1c>)
20001abe:	691b      	ldr	r3, [r3, #16]
20001ac0:	4a04      	ldr	r2, [pc, #16]	; (20001ad4 <HAL_FLASH_Lock+0x1c>)
20001ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20001ac6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
20001ac8:	2300      	movs	r3, #0
}
20001aca:	4618      	mov	r0, r3
20001acc:	46bd      	mov	sp, r7
20001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ad2:	4770      	bx	lr
20001ad4:	40023c00 	.word	0x40023c00

20001ad8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
20001ad8:	b580      	push	{r7, lr}
20001ada:	b084      	sub	sp, #16
20001adc:	af00      	add	r7, sp, #0
20001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20001ae0:	2300      	movs	r3, #0
20001ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20001ae4:	4b1a      	ldr	r3, [pc, #104]	; (20001b50 <FLASH_WaitForLastOperation+0x78>)
20001ae6:	2200      	movs	r2, #0
20001ae8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
20001aea:	f7ff fe2d 	bl	20001748 <HAL_GetTick>
20001aee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20001af0:	e010      	b.n	20001b14 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
20001af2:	687b      	ldr	r3, [r7, #4]
20001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
20001af8:	d00c      	beq.n	20001b14 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
20001afa:	687b      	ldr	r3, [r7, #4]
20001afc:	2b00      	cmp	r3, #0
20001afe:	d007      	beq.n	20001b10 <FLASH_WaitForLastOperation+0x38>
20001b00:	f7ff fe22 	bl	20001748 <HAL_GetTick>
20001b04:	4602      	mov	r2, r0
20001b06:	68fb      	ldr	r3, [r7, #12]
20001b08:	1ad3      	subs	r3, r2, r3
20001b0a:	687a      	ldr	r2, [r7, #4]
20001b0c:	429a      	cmp	r2, r3
20001b0e:	d201      	bcs.n	20001b14 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
20001b10:	2303      	movs	r3, #3
20001b12:	e019      	b.n	20001b48 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20001b14:	4b0f      	ldr	r3, [pc, #60]	; (20001b54 <FLASH_WaitForLastOperation+0x7c>)
20001b16:	68db      	ldr	r3, [r3, #12]
20001b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20001b1c:	2b00      	cmp	r3, #0
20001b1e:	d1e8      	bne.n	20001af2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20001b20:	4b0c      	ldr	r3, [pc, #48]	; (20001b54 <FLASH_WaitForLastOperation+0x7c>)
20001b22:	68db      	ldr	r3, [r3, #12]
20001b24:	f003 0301 	and.w	r3, r3, #1
20001b28:	2b00      	cmp	r3, #0
20001b2a:	d002      	beq.n	20001b32 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20001b2c:	4b09      	ldr	r3, [pc, #36]	; (20001b54 <FLASH_WaitForLastOperation+0x7c>)
20001b2e:	2201      	movs	r2, #1
20001b30:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
20001b32:	4b08      	ldr	r3, [pc, #32]	; (20001b54 <FLASH_WaitForLastOperation+0x7c>)
20001b34:	68db      	ldr	r3, [r3, #12]
20001b36:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
20001b3a:	2b00      	cmp	r3, #0
20001b3c:	d003      	beq.n	20001b46 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
20001b3e:	f000 f8a5 	bl	20001c8c <FLASH_SetErrorCode>
    return HAL_ERROR;
20001b42:	2301      	movs	r3, #1
20001b44:	e000      	b.n	20001b48 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
20001b46:	2300      	movs	r3, #0
  
}  
20001b48:	4618      	mov	r0, r3
20001b4a:	3710      	adds	r7, #16
20001b4c:	46bd      	mov	sp, r7
20001b4e:	bd80      	pop	{r7, pc}
20001b50:	2000438c 	.word	0x2000438c
20001b54:	40023c00 	.word	0x40023c00

20001b58 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
20001b58:	b480      	push	{r7}
20001b5a:	b085      	sub	sp, #20
20001b5c:	af00      	add	r7, sp, #0
20001b5e:	60f8      	str	r0, [r7, #12]
20001b60:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001b64:	4b14      	ldr	r3, [pc, #80]	; (20001bb8 <FLASH_Program_DoubleWord+0x60>)
20001b66:	691b      	ldr	r3, [r3, #16]
20001b68:	4a13      	ldr	r2, [pc, #76]	; (20001bb8 <FLASH_Program_DoubleWord+0x60>)
20001b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20001b6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
20001b70:	4b11      	ldr	r3, [pc, #68]	; (20001bb8 <FLASH_Program_DoubleWord+0x60>)
20001b72:	691b      	ldr	r3, [r3, #16]
20001b74:	4a10      	ldr	r2, [pc, #64]	; (20001bb8 <FLASH_Program_DoubleWord+0x60>)
20001b76:	f443 7340 	orr.w	r3, r3, #768	; 0x300
20001b7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20001b7c:	4b0e      	ldr	r3, [pc, #56]	; (20001bb8 <FLASH_Program_DoubleWord+0x60>)
20001b7e:	691b      	ldr	r3, [r3, #16]
20001b80:	4a0d      	ldr	r2, [pc, #52]	; (20001bb8 <FLASH_Program_DoubleWord+0x60>)
20001b82:	f043 0301 	orr.w	r3, r3, #1
20001b86:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
20001b88:	68fb      	ldr	r3, [r7, #12]
20001b8a:	683a      	ldr	r2, [r7, #0]
20001b8c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
20001b8e:	f3bf 8f6f 	isb	sy
}
20001b92:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
20001b94:	e9d7 0100 	ldrd	r0, r1, [r7]
20001b98:	f04f 0200 	mov.w	r2, #0
20001b9c:	f04f 0300 	mov.w	r3, #0
20001ba0:	000a      	movs	r2, r1
20001ba2:	2300      	movs	r3, #0
20001ba4:	68f9      	ldr	r1, [r7, #12]
20001ba6:	3104      	adds	r1, #4
20001ba8:	4613      	mov	r3, r2
20001baa:	600b      	str	r3, [r1, #0]
}
20001bac:	bf00      	nop
20001bae:	3714      	adds	r7, #20
20001bb0:	46bd      	mov	sp, r7
20001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
20001bb6:	4770      	bx	lr
20001bb8:	40023c00 	.word	0x40023c00

20001bbc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
20001bbc:	b480      	push	{r7}
20001bbe:	b083      	sub	sp, #12
20001bc0:	af00      	add	r7, sp, #0
20001bc2:	6078      	str	r0, [r7, #4]
20001bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001bc6:	4b0d      	ldr	r3, [pc, #52]	; (20001bfc <FLASH_Program_Word+0x40>)
20001bc8:	691b      	ldr	r3, [r3, #16]
20001bca:	4a0c      	ldr	r2, [pc, #48]	; (20001bfc <FLASH_Program_Word+0x40>)
20001bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20001bd0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
20001bd2:	4b0a      	ldr	r3, [pc, #40]	; (20001bfc <FLASH_Program_Word+0x40>)
20001bd4:	691b      	ldr	r3, [r3, #16]
20001bd6:	4a09      	ldr	r2, [pc, #36]	; (20001bfc <FLASH_Program_Word+0x40>)
20001bd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20001bdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20001bde:	4b07      	ldr	r3, [pc, #28]	; (20001bfc <FLASH_Program_Word+0x40>)
20001be0:	691b      	ldr	r3, [r3, #16]
20001be2:	4a06      	ldr	r2, [pc, #24]	; (20001bfc <FLASH_Program_Word+0x40>)
20001be4:	f043 0301 	orr.w	r3, r3, #1
20001be8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
20001bea:	687b      	ldr	r3, [r7, #4]
20001bec:	683a      	ldr	r2, [r7, #0]
20001bee:	601a      	str	r2, [r3, #0]
}
20001bf0:	bf00      	nop
20001bf2:	370c      	adds	r7, #12
20001bf4:	46bd      	mov	sp, r7
20001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
20001bfa:	4770      	bx	lr
20001bfc:	40023c00 	.word	0x40023c00

20001c00 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
20001c00:	b480      	push	{r7}
20001c02:	b083      	sub	sp, #12
20001c04:	af00      	add	r7, sp, #0
20001c06:	6078      	str	r0, [r7, #4]
20001c08:	460b      	mov	r3, r1
20001c0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001c0c:	4b0d      	ldr	r3, [pc, #52]	; (20001c44 <FLASH_Program_HalfWord+0x44>)
20001c0e:	691b      	ldr	r3, [r3, #16]
20001c10:	4a0c      	ldr	r2, [pc, #48]	; (20001c44 <FLASH_Program_HalfWord+0x44>)
20001c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20001c16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
20001c18:	4b0a      	ldr	r3, [pc, #40]	; (20001c44 <FLASH_Program_HalfWord+0x44>)
20001c1a:	691b      	ldr	r3, [r3, #16]
20001c1c:	4a09      	ldr	r2, [pc, #36]	; (20001c44 <FLASH_Program_HalfWord+0x44>)
20001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001c22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20001c24:	4b07      	ldr	r3, [pc, #28]	; (20001c44 <FLASH_Program_HalfWord+0x44>)
20001c26:	691b      	ldr	r3, [r3, #16]
20001c28:	4a06      	ldr	r2, [pc, #24]	; (20001c44 <FLASH_Program_HalfWord+0x44>)
20001c2a:	f043 0301 	orr.w	r3, r3, #1
20001c2e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
20001c30:	687b      	ldr	r3, [r7, #4]
20001c32:	887a      	ldrh	r2, [r7, #2]
20001c34:	801a      	strh	r2, [r3, #0]
}
20001c36:	bf00      	nop
20001c38:	370c      	adds	r7, #12
20001c3a:	46bd      	mov	sp, r7
20001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c40:	4770      	bx	lr
20001c42:	bf00      	nop
20001c44:	40023c00 	.word	0x40023c00

20001c48 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
20001c48:	b480      	push	{r7}
20001c4a:	b083      	sub	sp, #12
20001c4c:	af00      	add	r7, sp, #0
20001c4e:	6078      	str	r0, [r7, #4]
20001c50:	460b      	mov	r3, r1
20001c52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001c54:	4b0c      	ldr	r3, [pc, #48]	; (20001c88 <FLASH_Program_Byte+0x40>)
20001c56:	691b      	ldr	r3, [r3, #16]
20001c58:	4a0b      	ldr	r2, [pc, #44]	; (20001c88 <FLASH_Program_Byte+0x40>)
20001c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20001c5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
20001c60:	4b09      	ldr	r3, [pc, #36]	; (20001c88 <FLASH_Program_Byte+0x40>)
20001c62:	4a09      	ldr	r2, [pc, #36]	; (20001c88 <FLASH_Program_Byte+0x40>)
20001c64:	691b      	ldr	r3, [r3, #16]
20001c66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20001c68:	4b07      	ldr	r3, [pc, #28]	; (20001c88 <FLASH_Program_Byte+0x40>)
20001c6a:	691b      	ldr	r3, [r3, #16]
20001c6c:	4a06      	ldr	r2, [pc, #24]	; (20001c88 <FLASH_Program_Byte+0x40>)
20001c6e:	f043 0301 	orr.w	r3, r3, #1
20001c72:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
20001c74:	687b      	ldr	r3, [r7, #4]
20001c76:	78fa      	ldrb	r2, [r7, #3]
20001c78:	701a      	strb	r2, [r3, #0]
}
20001c7a:	bf00      	nop
20001c7c:	370c      	adds	r7, #12
20001c7e:	46bd      	mov	sp, r7
20001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c84:	4770      	bx	lr
20001c86:	bf00      	nop
20001c88:	40023c00 	.word	0x40023c00

20001c8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
20001c8c:	b480      	push	{r7}
20001c8e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
20001c90:	4b2f      	ldr	r3, [pc, #188]	; (20001d50 <FLASH_SetErrorCode+0xc4>)
20001c92:	68db      	ldr	r3, [r3, #12]
20001c94:	f003 0310 	and.w	r3, r3, #16
20001c98:	2b00      	cmp	r3, #0
20001c9a:	d008      	beq.n	20001cae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
20001c9c:	4b2d      	ldr	r3, [pc, #180]	; (20001d54 <FLASH_SetErrorCode+0xc8>)
20001c9e:	69db      	ldr	r3, [r3, #28]
20001ca0:	f043 0310 	orr.w	r3, r3, #16
20001ca4:	4a2b      	ldr	r2, [pc, #172]	; (20001d54 <FLASH_SetErrorCode+0xc8>)
20001ca6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
20001ca8:	4b29      	ldr	r3, [pc, #164]	; (20001d50 <FLASH_SetErrorCode+0xc4>)
20001caa:	2210      	movs	r2, #16
20001cac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
20001cae:	4b28      	ldr	r3, [pc, #160]	; (20001d50 <FLASH_SetErrorCode+0xc4>)
20001cb0:	68db      	ldr	r3, [r3, #12]
20001cb2:	f003 0320 	and.w	r3, r3, #32
20001cb6:	2b00      	cmp	r3, #0
20001cb8:	d008      	beq.n	20001ccc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
20001cba:	4b26      	ldr	r3, [pc, #152]	; (20001d54 <FLASH_SetErrorCode+0xc8>)
20001cbc:	69db      	ldr	r3, [r3, #28]
20001cbe:	f043 0308 	orr.w	r3, r3, #8
20001cc2:	4a24      	ldr	r2, [pc, #144]	; (20001d54 <FLASH_SetErrorCode+0xc8>)
20001cc4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
20001cc6:	4b22      	ldr	r3, [pc, #136]	; (20001d50 <FLASH_SetErrorCode+0xc4>)
20001cc8:	2220      	movs	r2, #32
20001cca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
20001ccc:	4b20      	ldr	r3, [pc, #128]	; (20001d50 <FLASH_SetErrorCode+0xc4>)
20001cce:	68db      	ldr	r3, [r3, #12]
20001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001cd4:	2b00      	cmp	r3, #0
20001cd6:	d008      	beq.n	20001cea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
20001cd8:	4b1e      	ldr	r3, [pc, #120]	; (20001d54 <FLASH_SetErrorCode+0xc8>)
20001cda:	69db      	ldr	r3, [r3, #28]
20001cdc:	f043 0304 	orr.w	r3, r3, #4
20001ce0:	4a1c      	ldr	r2, [pc, #112]	; (20001d54 <FLASH_SetErrorCode+0xc8>)
20001ce2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
20001ce4:	4b1a      	ldr	r3, [pc, #104]	; (20001d50 <FLASH_SetErrorCode+0xc4>)
20001ce6:	2240      	movs	r2, #64	; 0x40
20001ce8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
20001cea:	4b19      	ldr	r3, [pc, #100]	; (20001d50 <FLASH_SetErrorCode+0xc4>)
20001cec:	68db      	ldr	r3, [r3, #12]
20001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
20001cf2:	2b00      	cmp	r3, #0
20001cf4:	d008      	beq.n	20001d08 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
20001cf6:	4b17      	ldr	r3, [pc, #92]	; (20001d54 <FLASH_SetErrorCode+0xc8>)
20001cf8:	69db      	ldr	r3, [r3, #28]
20001cfa:	f043 0302 	orr.w	r3, r3, #2
20001cfe:	4a15      	ldr	r2, [pc, #84]	; (20001d54 <FLASH_SetErrorCode+0xc8>)
20001d00:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
20001d02:	4b13      	ldr	r3, [pc, #76]	; (20001d50 <FLASH_SetErrorCode+0xc4>)
20001d04:	2280      	movs	r2, #128	; 0x80
20001d06:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
20001d08:	4b11      	ldr	r3, [pc, #68]	; (20001d50 <FLASH_SetErrorCode+0xc4>)
20001d0a:	68db      	ldr	r3, [r3, #12]
20001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001d10:	2b00      	cmp	r3, #0
20001d12:	d009      	beq.n	20001d28 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
20001d14:	4b0f      	ldr	r3, [pc, #60]	; (20001d54 <FLASH_SetErrorCode+0xc8>)
20001d16:	69db      	ldr	r3, [r3, #28]
20001d18:	f043 0301 	orr.w	r3, r3, #1
20001d1c:	4a0d      	ldr	r2, [pc, #52]	; (20001d54 <FLASH_SetErrorCode+0xc8>)
20001d1e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
20001d20:	4b0b      	ldr	r3, [pc, #44]	; (20001d50 <FLASH_SetErrorCode+0xc4>)
20001d22:	f44f 7280 	mov.w	r2, #256	; 0x100
20001d26:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
20001d28:	4b09      	ldr	r3, [pc, #36]	; (20001d50 <FLASH_SetErrorCode+0xc4>)
20001d2a:	68db      	ldr	r3, [r3, #12]
20001d2c:	f003 0302 	and.w	r3, r3, #2
20001d30:	2b00      	cmp	r3, #0
20001d32:	d008      	beq.n	20001d46 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
20001d34:	4b07      	ldr	r3, [pc, #28]	; (20001d54 <FLASH_SetErrorCode+0xc8>)
20001d36:	69db      	ldr	r3, [r3, #28]
20001d38:	f043 0320 	orr.w	r3, r3, #32
20001d3c:	4a05      	ldr	r2, [pc, #20]	; (20001d54 <FLASH_SetErrorCode+0xc8>)
20001d3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
20001d40:	4b03      	ldr	r3, [pc, #12]	; (20001d50 <FLASH_SetErrorCode+0xc4>)
20001d42:	2202      	movs	r2, #2
20001d44:	60da      	str	r2, [r3, #12]
  }
}
20001d46:	bf00      	nop
20001d48:	46bd      	mov	sp, r7
20001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d4e:	4770      	bx	lr
20001d50:	40023c00 	.word	0x40023c00
20001d54:	2000438c 	.word	0x2000438c

20001d58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
20001d58:	b580      	push	{r7, lr}
20001d5a:	b084      	sub	sp, #16
20001d5c:	af00      	add	r7, sp, #0
20001d5e:	6078      	str	r0, [r7, #4]
20001d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
20001d62:	2301      	movs	r3, #1
20001d64:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
20001d66:	2300      	movs	r3, #0
20001d68:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
20001d6a:	4b31      	ldr	r3, [pc, #196]	; (20001e30 <HAL_FLASHEx_Erase+0xd8>)
20001d6c:	7e1b      	ldrb	r3, [r3, #24]
20001d6e:	2b01      	cmp	r3, #1
20001d70:	d101      	bne.n	20001d76 <HAL_FLASHEx_Erase+0x1e>
20001d72:	2302      	movs	r3, #2
20001d74:	e058      	b.n	20001e28 <HAL_FLASHEx_Erase+0xd0>
20001d76:	4b2e      	ldr	r3, [pc, #184]	; (20001e30 <HAL_FLASHEx_Erase+0xd8>)
20001d78:	2201      	movs	r2, #1
20001d7a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001d7c:	f24c 3050 	movw	r0, #50000	; 0xc350
20001d80:	f7ff feaa 	bl	20001ad8 <FLASH_WaitForLastOperation>
20001d84:	4603      	mov	r3, r0
20001d86:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
20001d88:	7bfb      	ldrb	r3, [r7, #15]
20001d8a:	2b00      	cmp	r3, #0
20001d8c:	d148      	bne.n	20001e20 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
20001d8e:	683b      	ldr	r3, [r7, #0]
20001d90:	f04f 32ff 	mov.w	r2, #4294967295
20001d94:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
20001d96:	687b      	ldr	r3, [r7, #4]
20001d98:	681b      	ldr	r3, [r3, #0]
20001d9a:	2b01      	cmp	r3, #1
20001d9c:	d115      	bne.n	20001dca <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
20001d9e:	687b      	ldr	r3, [r7, #4]
20001da0:	691b      	ldr	r3, [r3, #16]
20001da2:	b2da      	uxtb	r2, r3
20001da4:	687b      	ldr	r3, [r7, #4]
20001da6:	685b      	ldr	r3, [r3, #4]
20001da8:	4619      	mov	r1, r3
20001daa:	4610      	mov	r0, r2
20001dac:	f000 f844 	bl	20001e38 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001db0:	f24c 3050 	movw	r0, #50000	; 0xc350
20001db4:	f7ff fe90 	bl	20001ad8 <FLASH_WaitForLastOperation>
20001db8:	4603      	mov	r3, r0
20001dba:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
20001dbc:	4b1d      	ldr	r3, [pc, #116]	; (20001e34 <HAL_FLASHEx_Erase+0xdc>)
20001dbe:	691b      	ldr	r3, [r3, #16]
20001dc0:	4a1c      	ldr	r2, [pc, #112]	; (20001e34 <HAL_FLASHEx_Erase+0xdc>)
20001dc2:	f023 0304 	bic.w	r3, r3, #4
20001dc6:	6113      	str	r3, [r2, #16]
20001dc8:	e028      	b.n	20001e1c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20001dca:	687b      	ldr	r3, [r7, #4]
20001dcc:	689b      	ldr	r3, [r3, #8]
20001dce:	60bb      	str	r3, [r7, #8]
20001dd0:	e01c      	b.n	20001e0c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
20001dd2:	687b      	ldr	r3, [r7, #4]
20001dd4:	691b      	ldr	r3, [r3, #16]
20001dd6:	b2db      	uxtb	r3, r3
20001dd8:	4619      	mov	r1, r3
20001dda:	68b8      	ldr	r0, [r7, #8]
20001ddc:	f000 f850 	bl	20001e80 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001de0:	f24c 3050 	movw	r0, #50000	; 0xc350
20001de4:	f7ff fe78 	bl	20001ad8 <FLASH_WaitForLastOperation>
20001de8:	4603      	mov	r3, r0
20001dea:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
20001dec:	4b11      	ldr	r3, [pc, #68]	; (20001e34 <HAL_FLASHEx_Erase+0xdc>)
20001dee:	691b      	ldr	r3, [r3, #16]
20001df0:	4a10      	ldr	r2, [pc, #64]	; (20001e34 <HAL_FLASHEx_Erase+0xdc>)
20001df2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
20001df6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
20001df8:	7bfb      	ldrb	r3, [r7, #15]
20001dfa:	2b00      	cmp	r3, #0
20001dfc:	d003      	beq.n	20001e06 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
20001dfe:	683b      	ldr	r3, [r7, #0]
20001e00:	68ba      	ldr	r2, [r7, #8]
20001e02:	601a      	str	r2, [r3, #0]
          break;
20001e04:	e00a      	b.n	20001e1c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20001e06:	68bb      	ldr	r3, [r7, #8]
20001e08:	3301      	adds	r3, #1
20001e0a:	60bb      	str	r3, [r7, #8]
20001e0c:	687b      	ldr	r3, [r7, #4]
20001e0e:	68da      	ldr	r2, [r3, #12]
20001e10:	687b      	ldr	r3, [r7, #4]
20001e12:	689b      	ldr	r3, [r3, #8]
20001e14:	4413      	add	r3, r2
20001e16:	68ba      	ldr	r2, [r7, #8]
20001e18:	429a      	cmp	r2, r3
20001e1a:	d3da      	bcc.n	20001dd2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
20001e1c:	f000 f878 	bl	20001f10 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20001e20:	4b03      	ldr	r3, [pc, #12]	; (20001e30 <HAL_FLASHEx_Erase+0xd8>)
20001e22:	2200      	movs	r2, #0
20001e24:	761a      	strb	r2, [r3, #24]

  return status;
20001e26:	7bfb      	ldrb	r3, [r7, #15]
}
20001e28:	4618      	mov	r0, r3
20001e2a:	3710      	adds	r7, #16
20001e2c:	46bd      	mov	sp, r7
20001e2e:	bd80      	pop	{r7, pc}
20001e30:	2000438c 	.word	0x2000438c
20001e34:	40023c00 	.word	0x40023c00

20001e38 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
20001e38:	b480      	push	{r7}
20001e3a:	b083      	sub	sp, #12
20001e3c:	af00      	add	r7, sp, #0
20001e3e:	4603      	mov	r3, r0
20001e40:	6039      	str	r1, [r7, #0]
20001e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001e44:	4b0d      	ldr	r3, [pc, #52]	; (20001e7c <FLASH_MassErase+0x44>)
20001e46:	691b      	ldr	r3, [r3, #16]
20001e48:	4a0c      	ldr	r2, [pc, #48]	; (20001e7c <FLASH_MassErase+0x44>)
20001e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20001e4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
20001e50:	4b0a      	ldr	r3, [pc, #40]	; (20001e7c <FLASH_MassErase+0x44>)
20001e52:	691b      	ldr	r3, [r3, #16]
20001e54:	4a09      	ldr	r2, [pc, #36]	; (20001e7c <FLASH_MassErase+0x44>)
20001e56:	f043 0304 	orr.w	r3, r3, #4
20001e5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
20001e5c:	4b07      	ldr	r3, [pc, #28]	; (20001e7c <FLASH_MassErase+0x44>)
20001e5e:	691a      	ldr	r2, [r3, #16]
20001e60:	79fb      	ldrb	r3, [r7, #7]
20001e62:	021b      	lsls	r3, r3, #8
20001e64:	4313      	orrs	r3, r2
20001e66:	4a05      	ldr	r2, [pc, #20]	; (20001e7c <FLASH_MassErase+0x44>)
20001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20001e6c:	6113      	str	r3, [r2, #16]
}
20001e6e:	bf00      	nop
20001e70:	370c      	adds	r7, #12
20001e72:	46bd      	mov	sp, r7
20001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e78:	4770      	bx	lr
20001e7a:	bf00      	nop
20001e7c:	40023c00 	.word	0x40023c00

20001e80 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
20001e80:	b480      	push	{r7}
20001e82:	b085      	sub	sp, #20
20001e84:	af00      	add	r7, sp, #0
20001e86:	6078      	str	r0, [r7, #4]
20001e88:	460b      	mov	r3, r1
20001e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
20001e8c:	2300      	movs	r3, #0
20001e8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
20001e90:	78fb      	ldrb	r3, [r7, #3]
20001e92:	2b00      	cmp	r3, #0
20001e94:	d102      	bne.n	20001e9c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
20001e96:	2300      	movs	r3, #0
20001e98:	60fb      	str	r3, [r7, #12]
20001e9a:	e010      	b.n	20001ebe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
20001e9c:	78fb      	ldrb	r3, [r7, #3]
20001e9e:	2b01      	cmp	r3, #1
20001ea0:	d103      	bne.n	20001eaa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
20001ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
20001ea6:	60fb      	str	r3, [r7, #12]
20001ea8:	e009      	b.n	20001ebe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
20001eaa:	78fb      	ldrb	r3, [r7, #3]
20001eac:	2b02      	cmp	r3, #2
20001eae:	d103      	bne.n	20001eb8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
20001eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
20001eb4:	60fb      	str	r3, [r7, #12]
20001eb6:	e002      	b.n	20001ebe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
20001eb8:	f44f 7340 	mov.w	r3, #768	; 0x300
20001ebc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001ebe:	4b13      	ldr	r3, [pc, #76]	; (20001f0c <FLASH_Erase_Sector+0x8c>)
20001ec0:	691b      	ldr	r3, [r3, #16]
20001ec2:	4a12      	ldr	r2, [pc, #72]	; (20001f0c <FLASH_Erase_Sector+0x8c>)
20001ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20001ec8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
20001eca:	4b10      	ldr	r3, [pc, #64]	; (20001f0c <FLASH_Erase_Sector+0x8c>)
20001ecc:	691a      	ldr	r2, [r3, #16]
20001ece:	490f      	ldr	r1, [pc, #60]	; (20001f0c <FLASH_Erase_Sector+0x8c>)
20001ed0:	68fb      	ldr	r3, [r7, #12]
20001ed2:	4313      	orrs	r3, r2
20001ed4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
20001ed6:	4b0d      	ldr	r3, [pc, #52]	; (20001f0c <FLASH_Erase_Sector+0x8c>)
20001ed8:	691b      	ldr	r3, [r3, #16]
20001eda:	4a0c      	ldr	r2, [pc, #48]	; (20001f0c <FLASH_Erase_Sector+0x8c>)
20001edc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
20001ee0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
20001ee2:	4b0a      	ldr	r3, [pc, #40]	; (20001f0c <FLASH_Erase_Sector+0x8c>)
20001ee4:	691a      	ldr	r2, [r3, #16]
20001ee6:	687b      	ldr	r3, [r7, #4]
20001ee8:	00db      	lsls	r3, r3, #3
20001eea:	4313      	orrs	r3, r2
20001eec:	4a07      	ldr	r2, [pc, #28]	; (20001f0c <FLASH_Erase_Sector+0x8c>)
20001eee:	f043 0302 	orr.w	r3, r3, #2
20001ef2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
20001ef4:	4b05      	ldr	r3, [pc, #20]	; (20001f0c <FLASH_Erase_Sector+0x8c>)
20001ef6:	691b      	ldr	r3, [r3, #16]
20001ef8:	4a04      	ldr	r2, [pc, #16]	; (20001f0c <FLASH_Erase_Sector+0x8c>)
20001efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20001efe:	6113      	str	r3, [r2, #16]
}
20001f00:	bf00      	nop
20001f02:	3714      	adds	r7, #20
20001f04:	46bd      	mov	sp, r7
20001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f0a:	4770      	bx	lr
20001f0c:	40023c00 	.word	0x40023c00

20001f10 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
20001f10:	b480      	push	{r7}
20001f12:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
20001f14:	4b20      	ldr	r3, [pc, #128]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f16:	681b      	ldr	r3, [r3, #0]
20001f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
20001f1c:	2b00      	cmp	r3, #0
20001f1e:	d017      	beq.n	20001f50 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
20001f20:	4b1d      	ldr	r3, [pc, #116]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f22:	681b      	ldr	r3, [r3, #0]
20001f24:	4a1c      	ldr	r2, [pc, #112]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
20001f2a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
20001f2c:	4b1a      	ldr	r3, [pc, #104]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f2e:	681b      	ldr	r3, [r3, #0]
20001f30:	4a19      	ldr	r2, [pc, #100]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
20001f36:	6013      	str	r3, [r2, #0]
20001f38:	4b17      	ldr	r3, [pc, #92]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f3a:	681b      	ldr	r3, [r3, #0]
20001f3c:	4a16      	ldr	r2, [pc, #88]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
20001f42:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20001f44:	4b14      	ldr	r3, [pc, #80]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f46:	681b      	ldr	r3, [r3, #0]
20001f48:	4a13      	ldr	r2, [pc, #76]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20001f4e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
20001f50:	4b11      	ldr	r3, [pc, #68]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f52:	681b      	ldr	r3, [r3, #0]
20001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
20001f58:	2b00      	cmp	r3, #0
20001f5a:	d017      	beq.n	20001f8c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
20001f5c:	4b0e      	ldr	r3, [pc, #56]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f5e:	681b      	ldr	r3, [r3, #0]
20001f60:	4a0d      	ldr	r2, [pc, #52]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
20001f66:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
20001f68:	4b0b      	ldr	r3, [pc, #44]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f6a:	681b      	ldr	r3, [r3, #0]
20001f6c:	4a0a      	ldr	r2, [pc, #40]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
20001f72:	6013      	str	r3, [r2, #0]
20001f74:	4b08      	ldr	r3, [pc, #32]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f76:	681b      	ldr	r3, [r3, #0]
20001f78:	4a07      	ldr	r2, [pc, #28]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
20001f7e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
20001f80:	4b05      	ldr	r3, [pc, #20]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f82:	681b      	ldr	r3, [r3, #0]
20001f84:	4a04      	ldr	r2, [pc, #16]	; (20001f98 <FLASH_FlushCaches+0x88>)
20001f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20001f8a:	6013      	str	r3, [r2, #0]
  }
}
20001f8c:	bf00      	nop
20001f8e:	46bd      	mov	sp, r7
20001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f94:	4770      	bx	lr
20001f96:	bf00      	nop
20001f98:	40023c00 	.word	0x40023c00

20001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20001f9c:	b480      	push	{r7}
20001f9e:	b089      	sub	sp, #36	; 0x24
20001fa0:	af00      	add	r7, sp, #0
20001fa2:	6078      	str	r0, [r7, #4]
20001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
20001fa6:	2300      	movs	r3, #0
20001fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
20001faa:	2300      	movs	r3, #0
20001fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
20001fae:	2300      	movs	r3, #0
20001fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
20001fb2:	2300      	movs	r3, #0
20001fb4:	61fb      	str	r3, [r7, #28]
20001fb6:	e165      	b.n	20002284 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
20001fb8:	2201      	movs	r2, #1
20001fba:	69fb      	ldr	r3, [r7, #28]
20001fbc:	fa02 f303 	lsl.w	r3, r2, r3
20001fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
20001fc2:	683b      	ldr	r3, [r7, #0]
20001fc4:	681b      	ldr	r3, [r3, #0]
20001fc6:	697a      	ldr	r2, [r7, #20]
20001fc8:	4013      	ands	r3, r2
20001fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
20001fcc:	693a      	ldr	r2, [r7, #16]
20001fce:	697b      	ldr	r3, [r7, #20]
20001fd0:	429a      	cmp	r2, r3
20001fd2:	f040 8154 	bne.w	2000227e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001fd6:	683b      	ldr	r3, [r7, #0]
20001fd8:	685b      	ldr	r3, [r3, #4]
20001fda:	f003 0303 	and.w	r3, r3, #3
20001fde:	2b01      	cmp	r3, #1
20001fe0:	d005      	beq.n	20001fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20001fe2:	683b      	ldr	r3, [r7, #0]
20001fe4:	685b      	ldr	r3, [r3, #4]
20001fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001fea:	2b02      	cmp	r3, #2
20001fec:	d130      	bne.n	20002050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
20001fee:	687b      	ldr	r3, [r7, #4]
20001ff0:	689b      	ldr	r3, [r3, #8]
20001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20001ff4:	69fb      	ldr	r3, [r7, #28]
20001ff6:	005b      	lsls	r3, r3, #1
20001ff8:	2203      	movs	r2, #3
20001ffa:	fa02 f303 	lsl.w	r3, r2, r3
20001ffe:	43db      	mvns	r3, r3
20002000:	69ba      	ldr	r2, [r7, #24]
20002002:	4013      	ands	r3, r2
20002004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
20002006:	683b      	ldr	r3, [r7, #0]
20002008:	68da      	ldr	r2, [r3, #12]
2000200a:	69fb      	ldr	r3, [r7, #28]
2000200c:	005b      	lsls	r3, r3, #1
2000200e:	fa02 f303 	lsl.w	r3, r2, r3
20002012:	69ba      	ldr	r2, [r7, #24]
20002014:	4313      	orrs	r3, r2
20002016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
20002018:	687b      	ldr	r3, [r7, #4]
2000201a:	69ba      	ldr	r2, [r7, #24]
2000201c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2000201e:	687b      	ldr	r3, [r7, #4]
20002020:	685b      	ldr	r3, [r3, #4]
20002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
20002024:	2201      	movs	r2, #1
20002026:	69fb      	ldr	r3, [r7, #28]
20002028:	fa02 f303 	lsl.w	r3, r2, r3
2000202c:	43db      	mvns	r3, r3
2000202e:	69ba      	ldr	r2, [r7, #24]
20002030:	4013      	ands	r3, r2
20002032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
20002034:	683b      	ldr	r3, [r7, #0]
20002036:	685b      	ldr	r3, [r3, #4]
20002038:	091b      	lsrs	r3, r3, #4
2000203a:	f003 0201 	and.w	r2, r3, #1
2000203e:	69fb      	ldr	r3, [r7, #28]
20002040:	fa02 f303 	lsl.w	r3, r2, r3
20002044:	69ba      	ldr	r2, [r7, #24]
20002046:	4313      	orrs	r3, r2
20002048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2000204a:	687b      	ldr	r3, [r7, #4]
2000204c:	69ba      	ldr	r2, [r7, #24]
2000204e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20002050:	683b      	ldr	r3, [r7, #0]
20002052:	685b      	ldr	r3, [r3, #4]
20002054:	f003 0303 	and.w	r3, r3, #3
20002058:	2b03      	cmp	r3, #3
2000205a:	d017      	beq.n	2000208c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
2000205c:	687b      	ldr	r3, [r7, #4]
2000205e:	68db      	ldr	r3, [r3, #12]
20002060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
20002062:	69fb      	ldr	r3, [r7, #28]
20002064:	005b      	lsls	r3, r3, #1
20002066:	2203      	movs	r2, #3
20002068:	fa02 f303 	lsl.w	r3, r2, r3
2000206c:	43db      	mvns	r3, r3
2000206e:	69ba      	ldr	r2, [r7, #24]
20002070:	4013      	ands	r3, r2
20002072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
20002074:	683b      	ldr	r3, [r7, #0]
20002076:	689a      	ldr	r2, [r3, #8]
20002078:	69fb      	ldr	r3, [r7, #28]
2000207a:	005b      	lsls	r3, r3, #1
2000207c:	fa02 f303 	lsl.w	r3, r2, r3
20002080:	69ba      	ldr	r2, [r7, #24]
20002082:	4313      	orrs	r3, r2
20002084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
20002086:	687b      	ldr	r3, [r7, #4]
20002088:	69ba      	ldr	r2, [r7, #24]
2000208a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
2000208c:	683b      	ldr	r3, [r7, #0]
2000208e:	685b      	ldr	r3, [r3, #4]
20002090:	f003 0303 	and.w	r3, r3, #3
20002094:	2b02      	cmp	r3, #2
20002096:	d123      	bne.n	200020e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
20002098:	69fb      	ldr	r3, [r7, #28]
2000209a:	08da      	lsrs	r2, r3, #3
2000209c:	687b      	ldr	r3, [r7, #4]
2000209e:	3208      	adds	r2, #8
200020a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
200020a6:	69fb      	ldr	r3, [r7, #28]
200020a8:	f003 0307 	and.w	r3, r3, #7
200020ac:	009b      	lsls	r3, r3, #2
200020ae:	220f      	movs	r2, #15
200020b0:	fa02 f303 	lsl.w	r3, r2, r3
200020b4:	43db      	mvns	r3, r3
200020b6:	69ba      	ldr	r2, [r7, #24]
200020b8:	4013      	ands	r3, r2
200020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
200020bc:	683b      	ldr	r3, [r7, #0]
200020be:	691a      	ldr	r2, [r3, #16]
200020c0:	69fb      	ldr	r3, [r7, #28]
200020c2:	f003 0307 	and.w	r3, r3, #7
200020c6:	009b      	lsls	r3, r3, #2
200020c8:	fa02 f303 	lsl.w	r3, r2, r3
200020cc:	69ba      	ldr	r2, [r7, #24]
200020ce:	4313      	orrs	r3, r2
200020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
200020d2:	69fb      	ldr	r3, [r7, #28]
200020d4:	08da      	lsrs	r2, r3, #3
200020d6:	687b      	ldr	r3, [r7, #4]
200020d8:	3208      	adds	r2, #8
200020da:	69b9      	ldr	r1, [r7, #24]
200020dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
200020e0:	687b      	ldr	r3, [r7, #4]
200020e2:	681b      	ldr	r3, [r3, #0]
200020e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
200020e6:	69fb      	ldr	r3, [r7, #28]
200020e8:	005b      	lsls	r3, r3, #1
200020ea:	2203      	movs	r2, #3
200020ec:	fa02 f303 	lsl.w	r3, r2, r3
200020f0:	43db      	mvns	r3, r3
200020f2:	69ba      	ldr	r2, [r7, #24]
200020f4:	4013      	ands	r3, r2
200020f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
200020f8:	683b      	ldr	r3, [r7, #0]
200020fa:	685b      	ldr	r3, [r3, #4]
200020fc:	f003 0203 	and.w	r2, r3, #3
20002100:	69fb      	ldr	r3, [r7, #28]
20002102:	005b      	lsls	r3, r3, #1
20002104:	fa02 f303 	lsl.w	r3, r2, r3
20002108:	69ba      	ldr	r2, [r7, #24]
2000210a:	4313      	orrs	r3, r2
2000210c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2000210e:	687b      	ldr	r3, [r7, #4]
20002110:	69ba      	ldr	r2, [r7, #24]
20002112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
20002114:	683b      	ldr	r3, [r7, #0]
20002116:	685b      	ldr	r3, [r3, #4]
20002118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
2000211c:	2b00      	cmp	r3, #0
2000211e:	f000 80ae 	beq.w	2000227e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20002122:	2300      	movs	r3, #0
20002124:	60fb      	str	r3, [r7, #12]
20002126:	4b5d      	ldr	r3, [pc, #372]	; (2000229c <HAL_GPIO_Init+0x300>)
20002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000212a:	4a5c      	ldr	r2, [pc, #368]	; (2000229c <HAL_GPIO_Init+0x300>)
2000212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20002130:	6453      	str	r3, [r2, #68]	; 0x44
20002132:	4b5a      	ldr	r3, [pc, #360]	; (2000229c <HAL_GPIO_Init+0x300>)
20002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000213a:	60fb      	str	r3, [r7, #12]
2000213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2000213e:	4a58      	ldr	r2, [pc, #352]	; (200022a0 <HAL_GPIO_Init+0x304>)
20002140:	69fb      	ldr	r3, [r7, #28]
20002142:	089b      	lsrs	r3, r3, #2
20002144:	3302      	adds	r3, #2
20002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2000214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
2000214c:	69fb      	ldr	r3, [r7, #28]
2000214e:	f003 0303 	and.w	r3, r3, #3
20002152:	009b      	lsls	r3, r3, #2
20002154:	220f      	movs	r2, #15
20002156:	fa02 f303 	lsl.w	r3, r2, r3
2000215a:	43db      	mvns	r3, r3
2000215c:	69ba      	ldr	r2, [r7, #24]
2000215e:	4013      	ands	r3, r2
20002160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20002162:	687b      	ldr	r3, [r7, #4]
20002164:	4a4f      	ldr	r2, [pc, #316]	; (200022a4 <HAL_GPIO_Init+0x308>)
20002166:	4293      	cmp	r3, r2
20002168:	d025      	beq.n	200021b6 <HAL_GPIO_Init+0x21a>
2000216a:	687b      	ldr	r3, [r7, #4]
2000216c:	4a4e      	ldr	r2, [pc, #312]	; (200022a8 <HAL_GPIO_Init+0x30c>)
2000216e:	4293      	cmp	r3, r2
20002170:	d01f      	beq.n	200021b2 <HAL_GPIO_Init+0x216>
20002172:	687b      	ldr	r3, [r7, #4]
20002174:	4a4d      	ldr	r2, [pc, #308]	; (200022ac <HAL_GPIO_Init+0x310>)
20002176:	4293      	cmp	r3, r2
20002178:	d019      	beq.n	200021ae <HAL_GPIO_Init+0x212>
2000217a:	687b      	ldr	r3, [r7, #4]
2000217c:	4a4c      	ldr	r2, [pc, #304]	; (200022b0 <HAL_GPIO_Init+0x314>)
2000217e:	4293      	cmp	r3, r2
20002180:	d013      	beq.n	200021aa <HAL_GPIO_Init+0x20e>
20002182:	687b      	ldr	r3, [r7, #4]
20002184:	4a4b      	ldr	r2, [pc, #300]	; (200022b4 <HAL_GPIO_Init+0x318>)
20002186:	4293      	cmp	r3, r2
20002188:	d00d      	beq.n	200021a6 <HAL_GPIO_Init+0x20a>
2000218a:	687b      	ldr	r3, [r7, #4]
2000218c:	4a4a      	ldr	r2, [pc, #296]	; (200022b8 <HAL_GPIO_Init+0x31c>)
2000218e:	4293      	cmp	r3, r2
20002190:	d007      	beq.n	200021a2 <HAL_GPIO_Init+0x206>
20002192:	687b      	ldr	r3, [r7, #4]
20002194:	4a49      	ldr	r2, [pc, #292]	; (200022bc <HAL_GPIO_Init+0x320>)
20002196:	4293      	cmp	r3, r2
20002198:	d101      	bne.n	2000219e <HAL_GPIO_Init+0x202>
2000219a:	2306      	movs	r3, #6
2000219c:	e00c      	b.n	200021b8 <HAL_GPIO_Init+0x21c>
2000219e:	2307      	movs	r3, #7
200021a0:	e00a      	b.n	200021b8 <HAL_GPIO_Init+0x21c>
200021a2:	2305      	movs	r3, #5
200021a4:	e008      	b.n	200021b8 <HAL_GPIO_Init+0x21c>
200021a6:	2304      	movs	r3, #4
200021a8:	e006      	b.n	200021b8 <HAL_GPIO_Init+0x21c>
200021aa:	2303      	movs	r3, #3
200021ac:	e004      	b.n	200021b8 <HAL_GPIO_Init+0x21c>
200021ae:	2302      	movs	r3, #2
200021b0:	e002      	b.n	200021b8 <HAL_GPIO_Init+0x21c>
200021b2:	2301      	movs	r3, #1
200021b4:	e000      	b.n	200021b8 <HAL_GPIO_Init+0x21c>
200021b6:	2300      	movs	r3, #0
200021b8:	69fa      	ldr	r2, [r7, #28]
200021ba:	f002 0203 	and.w	r2, r2, #3
200021be:	0092      	lsls	r2, r2, #2
200021c0:	4093      	lsls	r3, r2
200021c2:	69ba      	ldr	r2, [r7, #24]
200021c4:	4313      	orrs	r3, r2
200021c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
200021c8:	4935      	ldr	r1, [pc, #212]	; (200022a0 <HAL_GPIO_Init+0x304>)
200021ca:	69fb      	ldr	r3, [r7, #28]
200021cc:	089b      	lsrs	r3, r3, #2
200021ce:	3302      	adds	r3, #2
200021d0:	69ba      	ldr	r2, [r7, #24]
200021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
200021d6:	4b3a      	ldr	r3, [pc, #232]	; (200022c0 <HAL_GPIO_Init+0x324>)
200021d8:	689b      	ldr	r3, [r3, #8]
200021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200021dc:	693b      	ldr	r3, [r7, #16]
200021de:	43db      	mvns	r3, r3
200021e0:	69ba      	ldr	r2, [r7, #24]
200021e2:	4013      	ands	r3, r2
200021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
200021e6:	683b      	ldr	r3, [r7, #0]
200021e8:	685b      	ldr	r3, [r3, #4]
200021ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
200021ee:	2b00      	cmp	r3, #0
200021f0:	d003      	beq.n	200021fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
200021f2:	69ba      	ldr	r2, [r7, #24]
200021f4:	693b      	ldr	r3, [r7, #16]
200021f6:	4313      	orrs	r3, r2
200021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
200021fa:	4a31      	ldr	r2, [pc, #196]	; (200022c0 <HAL_GPIO_Init+0x324>)
200021fc:	69bb      	ldr	r3, [r7, #24]
200021fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20002200:	4b2f      	ldr	r3, [pc, #188]	; (200022c0 <HAL_GPIO_Init+0x324>)
20002202:	68db      	ldr	r3, [r3, #12]
20002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20002206:	693b      	ldr	r3, [r7, #16]
20002208:	43db      	mvns	r3, r3
2000220a:	69ba      	ldr	r2, [r7, #24]
2000220c:	4013      	ands	r3, r2
2000220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
20002210:	683b      	ldr	r3, [r7, #0]
20002212:	685b      	ldr	r3, [r3, #4]
20002214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
20002218:	2b00      	cmp	r3, #0
2000221a:	d003      	beq.n	20002224 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
2000221c:	69ba      	ldr	r2, [r7, #24]
2000221e:	693b      	ldr	r3, [r7, #16]
20002220:	4313      	orrs	r3, r2
20002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20002224:	4a26      	ldr	r2, [pc, #152]	; (200022c0 <HAL_GPIO_Init+0x324>)
20002226:	69bb      	ldr	r3, [r7, #24]
20002228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
2000222a:	4b25      	ldr	r3, [pc, #148]	; (200022c0 <HAL_GPIO_Init+0x324>)
2000222c:	685b      	ldr	r3, [r3, #4]
2000222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20002230:	693b      	ldr	r3, [r7, #16]
20002232:	43db      	mvns	r3, r3
20002234:	69ba      	ldr	r2, [r7, #24]
20002236:	4013      	ands	r3, r2
20002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
2000223a:	683b      	ldr	r3, [r7, #0]
2000223c:	685b      	ldr	r3, [r3, #4]
2000223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20002242:	2b00      	cmp	r3, #0
20002244:	d003      	beq.n	2000224e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
20002246:	69ba      	ldr	r2, [r7, #24]
20002248:	693b      	ldr	r3, [r7, #16]
2000224a:	4313      	orrs	r3, r2
2000224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
2000224e:	4a1c      	ldr	r2, [pc, #112]	; (200022c0 <HAL_GPIO_Init+0x324>)
20002250:	69bb      	ldr	r3, [r7, #24]
20002252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20002254:	4b1a      	ldr	r3, [pc, #104]	; (200022c0 <HAL_GPIO_Init+0x324>)
20002256:	681b      	ldr	r3, [r3, #0]
20002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000225a:	693b      	ldr	r3, [r7, #16]
2000225c:	43db      	mvns	r3, r3
2000225e:	69ba      	ldr	r2, [r7, #24]
20002260:	4013      	ands	r3, r2
20002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
20002264:	683b      	ldr	r3, [r7, #0]
20002266:	685b      	ldr	r3, [r3, #4]
20002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000226c:	2b00      	cmp	r3, #0
2000226e:	d003      	beq.n	20002278 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
20002270:	69ba      	ldr	r2, [r7, #24]
20002272:	693b      	ldr	r3, [r7, #16]
20002274:	4313      	orrs	r3, r2
20002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20002278:	4a11      	ldr	r2, [pc, #68]	; (200022c0 <HAL_GPIO_Init+0x324>)
2000227a:	69bb      	ldr	r3, [r7, #24]
2000227c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
2000227e:	69fb      	ldr	r3, [r7, #28]
20002280:	3301      	adds	r3, #1
20002282:	61fb      	str	r3, [r7, #28]
20002284:	69fb      	ldr	r3, [r7, #28]
20002286:	2b0f      	cmp	r3, #15
20002288:	f67f ae96 	bls.w	20001fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
2000228c:	bf00      	nop
2000228e:	bf00      	nop
20002290:	3724      	adds	r7, #36	; 0x24
20002292:	46bd      	mov	sp, r7
20002294:	f85d 7b04 	ldr.w	r7, [sp], #4
20002298:	4770      	bx	lr
2000229a:	bf00      	nop
2000229c:	40023800 	.word	0x40023800
200022a0:	40013800 	.word	0x40013800
200022a4:	40020000 	.word	0x40020000
200022a8:	40020400 	.word	0x40020400
200022ac:	40020800 	.word	0x40020800
200022b0:	40020c00 	.word	0x40020c00
200022b4:	40021000 	.word	0x40021000
200022b8:	40021400 	.word	0x40021400
200022bc:	40021800 	.word	0x40021800
200022c0:	40013c00 	.word	0x40013c00

200022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
200022c4:	b480      	push	{r7}
200022c6:	b083      	sub	sp, #12
200022c8:	af00      	add	r7, sp, #0
200022ca:	6078      	str	r0, [r7, #4]
200022cc:	460b      	mov	r3, r1
200022ce:	807b      	strh	r3, [r7, #2]
200022d0:	4613      	mov	r3, r2
200022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
200022d4:	787b      	ldrb	r3, [r7, #1]
200022d6:	2b00      	cmp	r3, #0
200022d8:	d003      	beq.n	200022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
200022da:	887a      	ldrh	r2, [r7, #2]
200022dc:	687b      	ldr	r3, [r7, #4]
200022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
200022e0:	e003      	b.n	200022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
200022e2:	887b      	ldrh	r3, [r7, #2]
200022e4:	041a      	lsls	r2, r3, #16
200022e6:	687b      	ldr	r3, [r7, #4]
200022e8:	619a      	str	r2, [r3, #24]
}
200022ea:	bf00      	nop
200022ec:	370c      	adds	r7, #12
200022ee:	46bd      	mov	sp, r7
200022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
200022f4:	4770      	bx	lr

200022f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200022f6:	b480      	push	{r7}
200022f8:	b085      	sub	sp, #20
200022fa:	af00      	add	r7, sp, #0
200022fc:	6078      	str	r0, [r7, #4]
200022fe:	460b      	mov	r3, r1
20002300:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
20002302:	687b      	ldr	r3, [r7, #4]
20002304:	695b      	ldr	r3, [r3, #20]
20002306:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
20002308:	887a      	ldrh	r2, [r7, #2]
2000230a:	68fb      	ldr	r3, [r7, #12]
2000230c:	4013      	ands	r3, r2
2000230e:	041a      	lsls	r2, r3, #16
20002310:	68fb      	ldr	r3, [r7, #12]
20002312:	43d9      	mvns	r1, r3
20002314:	887b      	ldrh	r3, [r7, #2]
20002316:	400b      	ands	r3, r1
20002318:	431a      	orrs	r2, r3
2000231a:	687b      	ldr	r3, [r7, #4]
2000231c:	619a      	str	r2, [r3, #24]
}
2000231e:	bf00      	nop
20002320:	3714      	adds	r7, #20
20002322:	46bd      	mov	sp, r7
20002324:	f85d 7b04 	ldr.w	r7, [sp], #4
20002328:	4770      	bx	lr
	...

2000232c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
2000232c:	b580      	push	{r7, lr}
2000232e:	b082      	sub	sp, #8
20002330:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
20002332:	2300      	movs	r3, #0
20002334:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
20002336:	2300      	movs	r3, #0
20002338:	603b      	str	r3, [r7, #0]
2000233a:	4b20      	ldr	r3, [pc, #128]	; (200023bc <HAL_PWREx_EnableOverDrive+0x90>)
2000233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000233e:	4a1f      	ldr	r2, [pc, #124]	; (200023bc <HAL_PWREx_EnableOverDrive+0x90>)
20002340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20002344:	6413      	str	r3, [r2, #64]	; 0x40
20002346:	4b1d      	ldr	r3, [pc, #116]	; (200023bc <HAL_PWREx_EnableOverDrive+0x90>)
20002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000234e:	603b      	str	r3, [r7, #0]
20002350:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
20002352:	4b1b      	ldr	r3, [pc, #108]	; (200023c0 <HAL_PWREx_EnableOverDrive+0x94>)
20002354:	2201      	movs	r2, #1
20002356:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20002358:	f7ff f9f6 	bl	20001748 <HAL_GetTick>
2000235c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
2000235e:	e009      	b.n	20002374 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20002360:	f7ff f9f2 	bl	20001748 <HAL_GetTick>
20002364:	4602      	mov	r2, r0
20002366:	687b      	ldr	r3, [r7, #4]
20002368:	1ad3      	subs	r3, r2, r3
2000236a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000236e:	d901      	bls.n	20002374 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
20002370:	2303      	movs	r3, #3
20002372:	e01f      	b.n	200023b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20002374:	4b13      	ldr	r3, [pc, #76]	; (200023c4 <HAL_PWREx_EnableOverDrive+0x98>)
20002376:	685b      	ldr	r3, [r3, #4]
20002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000237c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20002380:	d1ee      	bne.n	20002360 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20002382:	4b11      	ldr	r3, [pc, #68]	; (200023c8 <HAL_PWREx_EnableOverDrive+0x9c>)
20002384:	2201      	movs	r2, #1
20002386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20002388:	f7ff f9de 	bl	20001748 <HAL_GetTick>
2000238c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
2000238e:	e009      	b.n	200023a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20002390:	f7ff f9da 	bl	20001748 <HAL_GetTick>
20002394:	4602      	mov	r2, r0
20002396:	687b      	ldr	r3, [r7, #4]
20002398:	1ad3      	subs	r3, r2, r3
2000239a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000239e:	d901      	bls.n	200023a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
200023a0:	2303      	movs	r3, #3
200023a2:	e007      	b.n	200023b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
200023a4:	4b07      	ldr	r3, [pc, #28]	; (200023c4 <HAL_PWREx_EnableOverDrive+0x98>)
200023a6:	685b      	ldr	r3, [r3, #4]
200023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200023ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
200023b0:	d1ee      	bne.n	20002390 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
200023b2:	2300      	movs	r3, #0
}
200023b4:	4618      	mov	r0, r3
200023b6:	3708      	adds	r7, #8
200023b8:	46bd      	mov	sp, r7
200023ba:	bd80      	pop	{r7, pc}
200023bc:	40023800 	.word	0x40023800
200023c0:	420e0040 	.word	0x420e0040
200023c4:	40007000 	.word	0x40007000
200023c8:	420e0044 	.word	0x420e0044

200023cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
200023cc:	b580      	push	{r7, lr}
200023ce:	b086      	sub	sp, #24
200023d0:	af00      	add	r7, sp, #0
200023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
200023d4:	687b      	ldr	r3, [r7, #4]
200023d6:	2b00      	cmp	r3, #0
200023d8:	d101      	bne.n	200023de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
200023da:	2301      	movs	r3, #1
200023dc:	e26f      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
200023de:	687b      	ldr	r3, [r7, #4]
200023e0:	681b      	ldr	r3, [r3, #0]
200023e2:	f003 0301 	and.w	r3, r3, #1
200023e6:	2b00      	cmp	r3, #0
200023e8:	d075      	beq.n	200024d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
200023ea:	4b88      	ldr	r3, [pc, #544]	; (2000260c <HAL_RCC_OscConfig+0x240>)
200023ec:	689b      	ldr	r3, [r3, #8]
200023ee:	f003 030c 	and.w	r3, r3, #12
200023f2:	2b04      	cmp	r3, #4
200023f4:	d00c      	beq.n	20002410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200023f6:	4b85      	ldr	r3, [pc, #532]	; (2000260c <HAL_RCC_OscConfig+0x240>)
200023f8:	689b      	ldr	r3, [r3, #8]
200023fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
200023fe:	2b08      	cmp	r3, #8
20002400:	d112      	bne.n	20002428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20002402:	4b82      	ldr	r3, [pc, #520]	; (2000260c <HAL_RCC_OscConfig+0x240>)
20002404:	685b      	ldr	r3, [r3, #4]
20002406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000240a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000240e:	d10b      	bne.n	20002428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20002410:	4b7e      	ldr	r3, [pc, #504]	; (2000260c <HAL_RCC_OscConfig+0x240>)
20002412:	681b      	ldr	r3, [r3, #0]
20002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20002418:	2b00      	cmp	r3, #0
2000241a:	d05b      	beq.n	200024d4 <HAL_RCC_OscConfig+0x108>
2000241c:	687b      	ldr	r3, [r7, #4]
2000241e:	685b      	ldr	r3, [r3, #4]
20002420:	2b00      	cmp	r3, #0
20002422:	d157      	bne.n	200024d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
20002424:	2301      	movs	r3, #1
20002426:	e24a      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20002428:	687b      	ldr	r3, [r7, #4]
2000242a:	685b      	ldr	r3, [r3, #4]
2000242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20002430:	d106      	bne.n	20002440 <HAL_RCC_OscConfig+0x74>
20002432:	4b76      	ldr	r3, [pc, #472]	; (2000260c <HAL_RCC_OscConfig+0x240>)
20002434:	681b      	ldr	r3, [r3, #0]
20002436:	4a75      	ldr	r2, [pc, #468]	; (2000260c <HAL_RCC_OscConfig+0x240>)
20002438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000243c:	6013      	str	r3, [r2, #0]
2000243e:	e01d      	b.n	2000247c <HAL_RCC_OscConfig+0xb0>
20002440:	687b      	ldr	r3, [r7, #4]
20002442:	685b      	ldr	r3, [r3, #4]
20002444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20002448:	d10c      	bne.n	20002464 <HAL_RCC_OscConfig+0x98>
2000244a:	4b70      	ldr	r3, [pc, #448]	; (2000260c <HAL_RCC_OscConfig+0x240>)
2000244c:	681b      	ldr	r3, [r3, #0]
2000244e:	4a6f      	ldr	r2, [pc, #444]	; (2000260c <HAL_RCC_OscConfig+0x240>)
20002450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20002454:	6013      	str	r3, [r2, #0]
20002456:	4b6d      	ldr	r3, [pc, #436]	; (2000260c <HAL_RCC_OscConfig+0x240>)
20002458:	681b      	ldr	r3, [r3, #0]
2000245a:	4a6c      	ldr	r2, [pc, #432]	; (2000260c <HAL_RCC_OscConfig+0x240>)
2000245c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20002460:	6013      	str	r3, [r2, #0]
20002462:	e00b      	b.n	2000247c <HAL_RCC_OscConfig+0xb0>
20002464:	4b69      	ldr	r3, [pc, #420]	; (2000260c <HAL_RCC_OscConfig+0x240>)
20002466:	681b      	ldr	r3, [r3, #0]
20002468:	4a68      	ldr	r2, [pc, #416]	; (2000260c <HAL_RCC_OscConfig+0x240>)
2000246a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000246e:	6013      	str	r3, [r2, #0]
20002470:	4b66      	ldr	r3, [pc, #408]	; (2000260c <HAL_RCC_OscConfig+0x240>)
20002472:	681b      	ldr	r3, [r3, #0]
20002474:	4a65      	ldr	r2, [pc, #404]	; (2000260c <HAL_RCC_OscConfig+0x240>)
20002476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000247a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
2000247c:	687b      	ldr	r3, [r7, #4]
2000247e:	685b      	ldr	r3, [r3, #4]
20002480:	2b00      	cmp	r3, #0
20002482:	d013      	beq.n	200024ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20002484:	f7ff f960 	bl	20001748 <HAL_GetTick>
20002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000248a:	e008      	b.n	2000249e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000248c:	f7ff f95c 	bl	20001748 <HAL_GetTick>
20002490:	4602      	mov	r2, r0
20002492:	693b      	ldr	r3, [r7, #16]
20002494:	1ad3      	subs	r3, r2, r3
20002496:	2b64      	cmp	r3, #100	; 0x64
20002498:	d901      	bls.n	2000249e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
2000249a:	2303      	movs	r3, #3
2000249c:	e20f      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000249e:	4b5b      	ldr	r3, [pc, #364]	; (2000260c <HAL_RCC_OscConfig+0x240>)
200024a0:	681b      	ldr	r3, [r3, #0]
200024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200024a6:	2b00      	cmp	r3, #0
200024a8:	d0f0      	beq.n	2000248c <HAL_RCC_OscConfig+0xc0>
200024aa:	e014      	b.n	200024d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
200024ac:	f7ff f94c 	bl	20001748 <HAL_GetTick>
200024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
200024b2:	e008      	b.n	200024c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
200024b4:	f7ff f948 	bl	20001748 <HAL_GetTick>
200024b8:	4602      	mov	r2, r0
200024ba:	693b      	ldr	r3, [r7, #16]
200024bc:	1ad3      	subs	r3, r2, r3
200024be:	2b64      	cmp	r3, #100	; 0x64
200024c0:	d901      	bls.n	200024c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
200024c2:	2303      	movs	r3, #3
200024c4:	e1fb      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
200024c6:	4b51      	ldr	r3, [pc, #324]	; (2000260c <HAL_RCC_OscConfig+0x240>)
200024c8:	681b      	ldr	r3, [r3, #0]
200024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200024ce:	2b00      	cmp	r3, #0
200024d0:	d1f0      	bne.n	200024b4 <HAL_RCC_OscConfig+0xe8>
200024d2:	e000      	b.n	200024d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200024d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
200024d6:	687b      	ldr	r3, [r7, #4]
200024d8:	681b      	ldr	r3, [r3, #0]
200024da:	f003 0302 	and.w	r3, r3, #2
200024de:	2b00      	cmp	r3, #0
200024e0:	d063      	beq.n	200025aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
200024e2:	4b4a      	ldr	r3, [pc, #296]	; (2000260c <HAL_RCC_OscConfig+0x240>)
200024e4:	689b      	ldr	r3, [r3, #8]
200024e6:	f003 030c 	and.w	r3, r3, #12
200024ea:	2b00      	cmp	r3, #0
200024ec:	d00b      	beq.n	20002506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200024ee:	4b47      	ldr	r3, [pc, #284]	; (2000260c <HAL_RCC_OscConfig+0x240>)
200024f0:	689b      	ldr	r3, [r3, #8]
200024f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
200024f6:	2b08      	cmp	r3, #8
200024f8:	d11c      	bne.n	20002534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200024fa:	4b44      	ldr	r3, [pc, #272]	; (2000260c <HAL_RCC_OscConfig+0x240>)
200024fc:	685b      	ldr	r3, [r3, #4]
200024fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20002502:	2b00      	cmp	r3, #0
20002504:	d116      	bne.n	20002534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20002506:	4b41      	ldr	r3, [pc, #260]	; (2000260c <HAL_RCC_OscConfig+0x240>)
20002508:	681b      	ldr	r3, [r3, #0]
2000250a:	f003 0302 	and.w	r3, r3, #2
2000250e:	2b00      	cmp	r3, #0
20002510:	d005      	beq.n	2000251e <HAL_RCC_OscConfig+0x152>
20002512:	687b      	ldr	r3, [r7, #4]
20002514:	68db      	ldr	r3, [r3, #12]
20002516:	2b01      	cmp	r3, #1
20002518:	d001      	beq.n	2000251e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
2000251a:	2301      	movs	r3, #1
2000251c:	e1cf      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000251e:	4b3b      	ldr	r3, [pc, #236]	; (2000260c <HAL_RCC_OscConfig+0x240>)
20002520:	681b      	ldr	r3, [r3, #0]
20002522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20002526:	687b      	ldr	r3, [r7, #4]
20002528:	691b      	ldr	r3, [r3, #16]
2000252a:	00db      	lsls	r3, r3, #3
2000252c:	4937      	ldr	r1, [pc, #220]	; (2000260c <HAL_RCC_OscConfig+0x240>)
2000252e:	4313      	orrs	r3, r2
20002530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20002532:	e03a      	b.n	200025aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
20002534:	687b      	ldr	r3, [r7, #4]
20002536:	68db      	ldr	r3, [r3, #12]
20002538:	2b00      	cmp	r3, #0
2000253a:	d020      	beq.n	2000257e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
2000253c:	4b34      	ldr	r3, [pc, #208]	; (20002610 <HAL_RCC_OscConfig+0x244>)
2000253e:	2201      	movs	r2, #1
20002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20002542:	f7ff f901 	bl	20001748 <HAL_GetTick>
20002546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20002548:	e008      	b.n	2000255c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000254a:	f7ff f8fd 	bl	20001748 <HAL_GetTick>
2000254e:	4602      	mov	r2, r0
20002550:	693b      	ldr	r3, [r7, #16]
20002552:	1ad3      	subs	r3, r2, r3
20002554:	2b02      	cmp	r3, #2
20002556:	d901      	bls.n	2000255c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
20002558:	2303      	movs	r3, #3
2000255a:	e1b0      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000255c:	4b2b      	ldr	r3, [pc, #172]	; (2000260c <HAL_RCC_OscConfig+0x240>)
2000255e:	681b      	ldr	r3, [r3, #0]
20002560:	f003 0302 	and.w	r3, r3, #2
20002564:	2b00      	cmp	r3, #0
20002566:	d0f0      	beq.n	2000254a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20002568:	4b28      	ldr	r3, [pc, #160]	; (2000260c <HAL_RCC_OscConfig+0x240>)
2000256a:	681b      	ldr	r3, [r3, #0]
2000256c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20002570:	687b      	ldr	r3, [r7, #4]
20002572:	691b      	ldr	r3, [r3, #16]
20002574:	00db      	lsls	r3, r3, #3
20002576:	4925      	ldr	r1, [pc, #148]	; (2000260c <HAL_RCC_OscConfig+0x240>)
20002578:	4313      	orrs	r3, r2
2000257a:	600b      	str	r3, [r1, #0]
2000257c:	e015      	b.n	200025aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2000257e:	4b24      	ldr	r3, [pc, #144]	; (20002610 <HAL_RCC_OscConfig+0x244>)
20002580:	2200      	movs	r2, #0
20002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20002584:	f7ff f8e0 	bl	20001748 <HAL_GetTick>
20002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000258a:	e008      	b.n	2000259e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000258c:	f7ff f8dc 	bl	20001748 <HAL_GetTick>
20002590:	4602      	mov	r2, r0
20002592:	693b      	ldr	r3, [r7, #16]
20002594:	1ad3      	subs	r3, r2, r3
20002596:	2b02      	cmp	r3, #2
20002598:	d901      	bls.n	2000259e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
2000259a:	2303      	movs	r3, #3
2000259c:	e18f      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000259e:	4b1b      	ldr	r3, [pc, #108]	; (2000260c <HAL_RCC_OscConfig+0x240>)
200025a0:	681b      	ldr	r3, [r3, #0]
200025a2:	f003 0302 	and.w	r3, r3, #2
200025a6:	2b00      	cmp	r3, #0
200025a8:	d1f0      	bne.n	2000258c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
200025aa:	687b      	ldr	r3, [r7, #4]
200025ac:	681b      	ldr	r3, [r3, #0]
200025ae:	f003 0308 	and.w	r3, r3, #8
200025b2:	2b00      	cmp	r3, #0
200025b4:	d036      	beq.n	20002624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
200025b6:	687b      	ldr	r3, [r7, #4]
200025b8:	695b      	ldr	r3, [r3, #20]
200025ba:	2b00      	cmp	r3, #0
200025bc:	d016      	beq.n	200025ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
200025be:	4b15      	ldr	r3, [pc, #84]	; (20002614 <HAL_RCC_OscConfig+0x248>)
200025c0:	2201      	movs	r2, #1
200025c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200025c4:	f7ff f8c0 	bl	20001748 <HAL_GetTick>
200025c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200025ca:	e008      	b.n	200025de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
200025cc:	f7ff f8bc 	bl	20001748 <HAL_GetTick>
200025d0:	4602      	mov	r2, r0
200025d2:	693b      	ldr	r3, [r7, #16]
200025d4:	1ad3      	subs	r3, r2, r3
200025d6:	2b02      	cmp	r3, #2
200025d8:	d901      	bls.n	200025de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
200025da:	2303      	movs	r3, #3
200025dc:	e16f      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200025de:	4b0b      	ldr	r3, [pc, #44]	; (2000260c <HAL_RCC_OscConfig+0x240>)
200025e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200025e2:	f003 0302 	and.w	r3, r3, #2
200025e6:	2b00      	cmp	r3, #0
200025e8:	d0f0      	beq.n	200025cc <HAL_RCC_OscConfig+0x200>
200025ea:	e01b      	b.n	20002624 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
200025ec:	4b09      	ldr	r3, [pc, #36]	; (20002614 <HAL_RCC_OscConfig+0x248>)
200025ee:	2200      	movs	r2, #0
200025f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
200025f2:	f7ff f8a9 	bl	20001748 <HAL_GetTick>
200025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200025f8:	e00e      	b.n	20002618 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
200025fa:	f7ff f8a5 	bl	20001748 <HAL_GetTick>
200025fe:	4602      	mov	r2, r0
20002600:	693b      	ldr	r3, [r7, #16]
20002602:	1ad3      	subs	r3, r2, r3
20002604:	2b02      	cmp	r3, #2
20002606:	d907      	bls.n	20002618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
20002608:	2303      	movs	r3, #3
2000260a:	e158      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
2000260c:	40023800 	.word	0x40023800
20002610:	42470000 	.word	0x42470000
20002614:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20002618:	4b88      	ldr	r3, [pc, #544]	; (2000283c <HAL_RCC_OscConfig+0x470>)
2000261a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000261c:	f003 0302 	and.w	r3, r3, #2
20002620:	2b00      	cmp	r3, #0
20002622:	d1ea      	bne.n	200025fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20002624:	687b      	ldr	r3, [r7, #4]
20002626:	681b      	ldr	r3, [r3, #0]
20002628:	f003 0304 	and.w	r3, r3, #4
2000262c:	2b00      	cmp	r3, #0
2000262e:	f000 8097 	beq.w	20002760 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
20002632:	2300      	movs	r3, #0
20002634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
20002636:	4b81      	ldr	r3, [pc, #516]	; (2000283c <HAL_RCC_OscConfig+0x470>)
20002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000263e:	2b00      	cmp	r3, #0
20002640:	d10f      	bne.n	20002662 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
20002642:	2300      	movs	r3, #0
20002644:	60bb      	str	r3, [r7, #8]
20002646:	4b7d      	ldr	r3, [pc, #500]	; (2000283c <HAL_RCC_OscConfig+0x470>)
20002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000264a:	4a7c      	ldr	r2, [pc, #496]	; (2000283c <HAL_RCC_OscConfig+0x470>)
2000264c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20002650:	6413      	str	r3, [r2, #64]	; 0x40
20002652:	4b7a      	ldr	r3, [pc, #488]	; (2000283c <HAL_RCC_OscConfig+0x470>)
20002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000265a:	60bb      	str	r3, [r7, #8]
2000265c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
2000265e:	2301      	movs	r3, #1
20002660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20002662:	4b77      	ldr	r3, [pc, #476]	; (20002840 <HAL_RCC_OscConfig+0x474>)
20002664:	681b      	ldr	r3, [r3, #0]
20002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000266a:	2b00      	cmp	r3, #0
2000266c:	d118      	bne.n	200026a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
2000266e:	4b74      	ldr	r3, [pc, #464]	; (20002840 <HAL_RCC_OscConfig+0x474>)
20002670:	681b      	ldr	r3, [r3, #0]
20002672:	4a73      	ldr	r2, [pc, #460]	; (20002840 <HAL_RCC_OscConfig+0x474>)
20002674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20002678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000267a:	f7ff f865 	bl	20001748 <HAL_GetTick>
2000267e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20002680:	e008      	b.n	20002694 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20002682:	f7ff f861 	bl	20001748 <HAL_GetTick>
20002686:	4602      	mov	r2, r0
20002688:	693b      	ldr	r3, [r7, #16]
2000268a:	1ad3      	subs	r3, r2, r3
2000268c:	2b02      	cmp	r3, #2
2000268e:	d901      	bls.n	20002694 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
20002690:	2303      	movs	r3, #3
20002692:	e114      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20002694:	4b6a      	ldr	r3, [pc, #424]	; (20002840 <HAL_RCC_OscConfig+0x474>)
20002696:	681b      	ldr	r3, [r3, #0]
20002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000269c:	2b00      	cmp	r3, #0
2000269e:	d0f0      	beq.n	20002682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
200026a0:	687b      	ldr	r3, [r7, #4]
200026a2:	689b      	ldr	r3, [r3, #8]
200026a4:	2b01      	cmp	r3, #1
200026a6:	d106      	bne.n	200026b6 <HAL_RCC_OscConfig+0x2ea>
200026a8:	4b64      	ldr	r3, [pc, #400]	; (2000283c <HAL_RCC_OscConfig+0x470>)
200026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200026ac:	4a63      	ldr	r2, [pc, #396]	; (2000283c <HAL_RCC_OscConfig+0x470>)
200026ae:	f043 0301 	orr.w	r3, r3, #1
200026b2:	6713      	str	r3, [r2, #112]	; 0x70
200026b4:	e01c      	b.n	200026f0 <HAL_RCC_OscConfig+0x324>
200026b6:	687b      	ldr	r3, [r7, #4]
200026b8:	689b      	ldr	r3, [r3, #8]
200026ba:	2b05      	cmp	r3, #5
200026bc:	d10c      	bne.n	200026d8 <HAL_RCC_OscConfig+0x30c>
200026be:	4b5f      	ldr	r3, [pc, #380]	; (2000283c <HAL_RCC_OscConfig+0x470>)
200026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200026c2:	4a5e      	ldr	r2, [pc, #376]	; (2000283c <HAL_RCC_OscConfig+0x470>)
200026c4:	f043 0304 	orr.w	r3, r3, #4
200026c8:	6713      	str	r3, [r2, #112]	; 0x70
200026ca:	4b5c      	ldr	r3, [pc, #368]	; (2000283c <HAL_RCC_OscConfig+0x470>)
200026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200026ce:	4a5b      	ldr	r2, [pc, #364]	; (2000283c <HAL_RCC_OscConfig+0x470>)
200026d0:	f043 0301 	orr.w	r3, r3, #1
200026d4:	6713      	str	r3, [r2, #112]	; 0x70
200026d6:	e00b      	b.n	200026f0 <HAL_RCC_OscConfig+0x324>
200026d8:	4b58      	ldr	r3, [pc, #352]	; (2000283c <HAL_RCC_OscConfig+0x470>)
200026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200026dc:	4a57      	ldr	r2, [pc, #348]	; (2000283c <HAL_RCC_OscConfig+0x470>)
200026de:	f023 0301 	bic.w	r3, r3, #1
200026e2:	6713      	str	r3, [r2, #112]	; 0x70
200026e4:	4b55      	ldr	r3, [pc, #340]	; (2000283c <HAL_RCC_OscConfig+0x470>)
200026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200026e8:	4a54      	ldr	r2, [pc, #336]	; (2000283c <HAL_RCC_OscConfig+0x470>)
200026ea:	f023 0304 	bic.w	r3, r3, #4
200026ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
200026f0:	687b      	ldr	r3, [r7, #4]
200026f2:	689b      	ldr	r3, [r3, #8]
200026f4:	2b00      	cmp	r3, #0
200026f6:	d015      	beq.n	20002724 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200026f8:	f7ff f826 	bl	20001748 <HAL_GetTick>
200026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200026fe:	e00a      	b.n	20002716 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20002700:	f7ff f822 	bl	20001748 <HAL_GetTick>
20002704:	4602      	mov	r2, r0
20002706:	693b      	ldr	r3, [r7, #16]
20002708:	1ad3      	subs	r3, r2, r3
2000270a:	f241 3288 	movw	r2, #5000	; 0x1388
2000270e:	4293      	cmp	r3, r2
20002710:	d901      	bls.n	20002716 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
20002712:	2303      	movs	r3, #3
20002714:	e0d3      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20002716:	4b49      	ldr	r3, [pc, #292]	; (2000283c <HAL_RCC_OscConfig+0x470>)
20002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000271a:	f003 0302 	and.w	r3, r3, #2
2000271e:	2b00      	cmp	r3, #0
20002720:	d0ee      	beq.n	20002700 <HAL_RCC_OscConfig+0x334>
20002722:	e014      	b.n	2000274e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
20002724:	f7ff f810 	bl	20001748 <HAL_GetTick>
20002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000272a:	e00a      	b.n	20002742 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000272c:	f7ff f80c 	bl	20001748 <HAL_GetTick>
20002730:	4602      	mov	r2, r0
20002732:	693b      	ldr	r3, [r7, #16]
20002734:	1ad3      	subs	r3, r2, r3
20002736:	f241 3288 	movw	r2, #5000	; 0x1388
2000273a:	4293      	cmp	r3, r2
2000273c:	d901      	bls.n	20002742 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
2000273e:	2303      	movs	r3, #3
20002740:	e0bd      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20002742:	4b3e      	ldr	r3, [pc, #248]	; (2000283c <HAL_RCC_OscConfig+0x470>)
20002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20002746:	f003 0302 	and.w	r3, r3, #2
2000274a:	2b00      	cmp	r3, #0
2000274c:	d1ee      	bne.n	2000272c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
2000274e:	7dfb      	ldrb	r3, [r7, #23]
20002750:	2b01      	cmp	r3, #1
20002752:	d105      	bne.n	20002760 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
20002754:	4b39      	ldr	r3, [pc, #228]	; (2000283c <HAL_RCC_OscConfig+0x470>)
20002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002758:	4a38      	ldr	r2, [pc, #224]	; (2000283c <HAL_RCC_OscConfig+0x470>)
2000275a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000275e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20002760:	687b      	ldr	r3, [r7, #4]
20002762:	699b      	ldr	r3, [r3, #24]
20002764:	2b00      	cmp	r3, #0
20002766:	f000 80a9 	beq.w	200028bc <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2000276a:	4b34      	ldr	r3, [pc, #208]	; (2000283c <HAL_RCC_OscConfig+0x470>)
2000276c:	689b      	ldr	r3, [r3, #8]
2000276e:	f003 030c 	and.w	r3, r3, #12
20002772:	2b08      	cmp	r3, #8
20002774:	d05c      	beq.n	20002830 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20002776:	687b      	ldr	r3, [r7, #4]
20002778:	699b      	ldr	r3, [r3, #24]
2000277a:	2b02      	cmp	r3, #2
2000277c:	d141      	bne.n	20002802 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000277e:	4b31      	ldr	r3, [pc, #196]	; (20002844 <HAL_RCC_OscConfig+0x478>)
20002780:	2200      	movs	r2, #0
20002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
20002784:	f7fe ffe0 	bl	20001748 <HAL_GetTick>
20002788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000278a:	e008      	b.n	2000279e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000278c:	f7fe ffdc 	bl	20001748 <HAL_GetTick>
20002790:	4602      	mov	r2, r0
20002792:	693b      	ldr	r3, [r7, #16]
20002794:	1ad3      	subs	r3, r2, r3
20002796:	2b02      	cmp	r3, #2
20002798:	d901      	bls.n	2000279e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
2000279a:	2303      	movs	r3, #3
2000279c:	e08f      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000279e:	4b27      	ldr	r3, [pc, #156]	; (2000283c <HAL_RCC_OscConfig+0x470>)
200027a0:	681b      	ldr	r3, [r3, #0]
200027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200027a6:	2b00      	cmp	r3, #0
200027a8:	d1f0      	bne.n	2000278c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
200027aa:	687b      	ldr	r3, [r7, #4]
200027ac:	69da      	ldr	r2, [r3, #28]
200027ae:	687b      	ldr	r3, [r7, #4]
200027b0:	6a1b      	ldr	r3, [r3, #32]
200027b2:	431a      	orrs	r2, r3
200027b4:	687b      	ldr	r3, [r7, #4]
200027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200027b8:	019b      	lsls	r3, r3, #6
200027ba:	431a      	orrs	r2, r3
200027bc:	687b      	ldr	r3, [r7, #4]
200027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200027c0:	085b      	lsrs	r3, r3, #1
200027c2:	3b01      	subs	r3, #1
200027c4:	041b      	lsls	r3, r3, #16
200027c6:	431a      	orrs	r2, r3
200027c8:	687b      	ldr	r3, [r7, #4]
200027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200027cc:	061b      	lsls	r3, r3, #24
200027ce:	491b      	ldr	r1, [pc, #108]	; (2000283c <HAL_RCC_OscConfig+0x470>)
200027d0:	4313      	orrs	r3, r2
200027d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
200027d4:	4b1b      	ldr	r3, [pc, #108]	; (20002844 <HAL_RCC_OscConfig+0x478>)
200027d6:	2201      	movs	r2, #1
200027d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200027da:	f7fe ffb5 	bl	20001748 <HAL_GetTick>
200027de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200027e0:	e008      	b.n	200027f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200027e2:	f7fe ffb1 	bl	20001748 <HAL_GetTick>
200027e6:	4602      	mov	r2, r0
200027e8:	693b      	ldr	r3, [r7, #16]
200027ea:	1ad3      	subs	r3, r2, r3
200027ec:	2b02      	cmp	r3, #2
200027ee:	d901      	bls.n	200027f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
200027f0:	2303      	movs	r3, #3
200027f2:	e064      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200027f4:	4b11      	ldr	r3, [pc, #68]	; (2000283c <HAL_RCC_OscConfig+0x470>)
200027f6:	681b      	ldr	r3, [r3, #0]
200027f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200027fc:	2b00      	cmp	r3, #0
200027fe:	d0f0      	beq.n	200027e2 <HAL_RCC_OscConfig+0x416>
20002800:	e05c      	b.n	200028bc <HAL_RCC_OscConfig+0x4f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20002802:	4b10      	ldr	r3, [pc, #64]	; (20002844 <HAL_RCC_OscConfig+0x478>)
20002804:	2200      	movs	r2, #0
20002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
20002808:	f7fe ff9e 	bl	20001748 <HAL_GetTick>
2000280c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000280e:	e008      	b.n	20002822 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20002810:	f7fe ff9a 	bl	20001748 <HAL_GetTick>
20002814:	4602      	mov	r2, r0
20002816:	693b      	ldr	r3, [r7, #16]
20002818:	1ad3      	subs	r3, r2, r3
2000281a:	2b02      	cmp	r3, #2
2000281c:	d901      	bls.n	20002822 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
2000281e:	2303      	movs	r3, #3
20002820:	e04d      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20002822:	4b06      	ldr	r3, [pc, #24]	; (2000283c <HAL_RCC_OscConfig+0x470>)
20002824:	681b      	ldr	r3, [r3, #0]
20002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000282a:	2b00      	cmp	r3, #0
2000282c:	d1f0      	bne.n	20002810 <HAL_RCC_OscConfig+0x444>
2000282e:	e045      	b.n	200028bc <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
20002830:	687b      	ldr	r3, [r7, #4]
20002832:	699b      	ldr	r3, [r3, #24]
20002834:	2b01      	cmp	r3, #1
20002836:	d107      	bne.n	20002848 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
20002838:	2301      	movs	r3, #1
2000283a:	e040      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
2000283c:	40023800 	.word	0x40023800
20002840:	40007000 	.word	0x40007000
20002844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
20002848:	4b1f      	ldr	r3, [pc, #124]	; (200028c8 <HAL_RCC_OscConfig+0x4fc>)
2000284a:	685b      	ldr	r3, [r3, #4]
2000284c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2000284e:	687b      	ldr	r3, [r7, #4]
20002850:	699b      	ldr	r3, [r3, #24]
20002852:	2b01      	cmp	r3, #1
20002854:	d030      	beq.n	200028b8 <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20002856:	68fb      	ldr	r3, [r7, #12]
20002858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
2000285c:	687b      	ldr	r3, [r7, #4]
2000285e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20002860:	429a      	cmp	r2, r3
20002862:	d129      	bne.n	200028b8 <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20002864:	68fb      	ldr	r3, [r7, #12]
20002866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000286a:	687b      	ldr	r3, [r7, #4]
2000286c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000286e:	429a      	cmp	r2, r3
20002870:	d122      	bne.n	200028b8 <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20002872:	68fa      	ldr	r2, [r7, #12]
20002874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
20002878:	4013      	ands	r3, r2
2000287a:	687a      	ldr	r2, [r7, #4]
2000287c:	6a52      	ldr	r2, [r2, #36]	; 0x24
2000287e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20002880:	4293      	cmp	r3, r2
20002882:	d119      	bne.n	200028b8 <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20002884:	68fb      	ldr	r3, [r7, #12]
20002886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2000288a:	687b      	ldr	r3, [r7, #4]
2000288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000288e:	085b      	lsrs	r3, r3, #1
20002890:	3b01      	subs	r3, #1
20002892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20002894:	429a      	cmp	r2, r3
20002896:	d10f      	bne.n	200028b8 <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20002898:	68fb      	ldr	r3, [r7, #12]
2000289a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
2000289e:	687b      	ldr	r3, [r7, #4]
200028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200028a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
200028a4:	429a      	cmp	r2, r3
200028a6:	d107      	bne.n	200028b8 <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
200028a8:	68fb      	ldr	r3, [r7, #12]
200028aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
200028ae:	687b      	ldr	r3, [r7, #4]
200028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200028b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
200028b4:	429a      	cmp	r2, r3
200028b6:	d001      	beq.n	200028bc <HAL_RCC_OscConfig+0x4f0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
200028b8:	2301      	movs	r3, #1
200028ba:	e000      	b.n	200028be <HAL_RCC_OscConfig+0x4f2>
        }
      }
    }
  }
  return HAL_OK;
200028bc:	2300      	movs	r3, #0
}
200028be:	4618      	mov	r0, r3
200028c0:	3718      	adds	r7, #24
200028c2:	46bd      	mov	sp, r7
200028c4:	bd80      	pop	{r7, pc}
200028c6:	bf00      	nop
200028c8:	40023800 	.word	0x40023800

200028cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
200028cc:	b580      	push	{r7, lr}
200028ce:	b084      	sub	sp, #16
200028d0:	af00      	add	r7, sp, #0
200028d2:	6078      	str	r0, [r7, #4]
200028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
200028d6:	687b      	ldr	r3, [r7, #4]
200028d8:	2b00      	cmp	r3, #0
200028da:	d101      	bne.n	200028e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
200028dc:	2301      	movs	r3, #1
200028de:	e0cc      	b.n	20002a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
200028e0:	4b68      	ldr	r3, [pc, #416]	; (20002a84 <HAL_RCC_ClockConfig+0x1b8>)
200028e2:	681b      	ldr	r3, [r3, #0]
200028e4:	f003 030f 	and.w	r3, r3, #15
200028e8:	683a      	ldr	r2, [r7, #0]
200028ea:	429a      	cmp	r2, r3
200028ec:	d90c      	bls.n	20002908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200028ee:	4b65      	ldr	r3, [pc, #404]	; (20002a84 <HAL_RCC_ClockConfig+0x1b8>)
200028f0:	683a      	ldr	r2, [r7, #0]
200028f2:	b2d2      	uxtb	r2, r2
200028f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
200028f6:	4b63      	ldr	r3, [pc, #396]	; (20002a84 <HAL_RCC_ClockConfig+0x1b8>)
200028f8:	681b      	ldr	r3, [r3, #0]
200028fa:	f003 030f 	and.w	r3, r3, #15
200028fe:	683a      	ldr	r2, [r7, #0]
20002900:	429a      	cmp	r2, r3
20002902:	d001      	beq.n	20002908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
20002904:	2301      	movs	r3, #1
20002906:	e0b8      	b.n	20002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20002908:	687b      	ldr	r3, [r7, #4]
2000290a:	681b      	ldr	r3, [r3, #0]
2000290c:	f003 0302 	and.w	r3, r3, #2
20002910:	2b00      	cmp	r3, #0
20002912:	d020      	beq.n	20002956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20002914:	687b      	ldr	r3, [r7, #4]
20002916:	681b      	ldr	r3, [r3, #0]
20002918:	f003 0304 	and.w	r3, r3, #4
2000291c:	2b00      	cmp	r3, #0
2000291e:	d005      	beq.n	2000292c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20002920:	4b59      	ldr	r3, [pc, #356]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
20002922:	689b      	ldr	r3, [r3, #8]
20002924:	4a58      	ldr	r2, [pc, #352]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
20002926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2000292a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000292c:	687b      	ldr	r3, [r7, #4]
2000292e:	681b      	ldr	r3, [r3, #0]
20002930:	f003 0308 	and.w	r3, r3, #8
20002934:	2b00      	cmp	r3, #0
20002936:	d005      	beq.n	20002944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20002938:	4b53      	ldr	r3, [pc, #332]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
2000293a:	689b      	ldr	r3, [r3, #8]
2000293c:	4a52      	ldr	r2, [pc, #328]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
2000293e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
20002942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20002944:	4b50      	ldr	r3, [pc, #320]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
20002946:	689b      	ldr	r3, [r3, #8]
20002948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
2000294c:	687b      	ldr	r3, [r7, #4]
2000294e:	689b      	ldr	r3, [r3, #8]
20002950:	494d      	ldr	r1, [pc, #308]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
20002952:	4313      	orrs	r3, r2
20002954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20002956:	687b      	ldr	r3, [r7, #4]
20002958:	681b      	ldr	r3, [r3, #0]
2000295a:	f003 0301 	and.w	r3, r3, #1
2000295e:	2b00      	cmp	r3, #0
20002960:	d044      	beq.n	200029ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20002962:	687b      	ldr	r3, [r7, #4]
20002964:	685b      	ldr	r3, [r3, #4]
20002966:	2b01      	cmp	r3, #1
20002968:	d107      	bne.n	2000297a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000296a:	4b47      	ldr	r3, [pc, #284]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
2000296c:	681b      	ldr	r3, [r3, #0]
2000296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20002972:	2b00      	cmp	r3, #0
20002974:	d119      	bne.n	200029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20002976:	2301      	movs	r3, #1
20002978:	e07f      	b.n	20002a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000297a:	687b      	ldr	r3, [r7, #4]
2000297c:	685b      	ldr	r3, [r3, #4]
2000297e:	2b02      	cmp	r3, #2
20002980:	d003      	beq.n	2000298a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
20002982:	687b      	ldr	r3, [r7, #4]
20002984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20002986:	2b03      	cmp	r3, #3
20002988:	d107      	bne.n	2000299a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000298a:	4b3f      	ldr	r3, [pc, #252]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
2000298c:	681b      	ldr	r3, [r3, #0]
2000298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20002992:	2b00      	cmp	r3, #0
20002994:	d109      	bne.n	200029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20002996:	2301      	movs	r3, #1
20002998:	e06f      	b.n	20002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000299a:	4b3b      	ldr	r3, [pc, #236]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
2000299c:	681b      	ldr	r3, [r3, #0]
2000299e:	f003 0302 	and.w	r3, r3, #2
200029a2:	2b00      	cmp	r3, #0
200029a4:	d101      	bne.n	200029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
200029a6:	2301      	movs	r3, #1
200029a8:	e067      	b.n	20002a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
200029aa:	4b37      	ldr	r3, [pc, #220]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
200029ac:	689b      	ldr	r3, [r3, #8]
200029ae:	f023 0203 	bic.w	r2, r3, #3
200029b2:	687b      	ldr	r3, [r7, #4]
200029b4:	685b      	ldr	r3, [r3, #4]
200029b6:	4934      	ldr	r1, [pc, #208]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
200029b8:	4313      	orrs	r3, r2
200029ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
200029bc:	f7fe fec4 	bl	20001748 <HAL_GetTick>
200029c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
200029c2:	e00a      	b.n	200029da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
200029c4:	f7fe fec0 	bl	20001748 <HAL_GetTick>
200029c8:	4602      	mov	r2, r0
200029ca:	68fb      	ldr	r3, [r7, #12]
200029cc:	1ad3      	subs	r3, r2, r3
200029ce:	f241 3288 	movw	r2, #5000	; 0x1388
200029d2:	4293      	cmp	r3, r2
200029d4:	d901      	bls.n	200029da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
200029d6:	2303      	movs	r3, #3
200029d8:	e04f      	b.n	20002a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
200029da:	4b2b      	ldr	r3, [pc, #172]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
200029dc:	689b      	ldr	r3, [r3, #8]
200029de:	f003 020c 	and.w	r2, r3, #12
200029e2:	687b      	ldr	r3, [r7, #4]
200029e4:	685b      	ldr	r3, [r3, #4]
200029e6:	009b      	lsls	r3, r3, #2
200029e8:	429a      	cmp	r2, r3
200029ea:	d1eb      	bne.n	200029c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
200029ec:	4b25      	ldr	r3, [pc, #148]	; (20002a84 <HAL_RCC_ClockConfig+0x1b8>)
200029ee:	681b      	ldr	r3, [r3, #0]
200029f0:	f003 030f 	and.w	r3, r3, #15
200029f4:	683a      	ldr	r2, [r7, #0]
200029f6:	429a      	cmp	r2, r3
200029f8:	d20c      	bcs.n	20002a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200029fa:	4b22      	ldr	r3, [pc, #136]	; (20002a84 <HAL_RCC_ClockConfig+0x1b8>)
200029fc:	683a      	ldr	r2, [r7, #0]
200029fe:	b2d2      	uxtb	r2, r2
20002a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20002a02:	4b20      	ldr	r3, [pc, #128]	; (20002a84 <HAL_RCC_ClockConfig+0x1b8>)
20002a04:	681b      	ldr	r3, [r3, #0]
20002a06:	f003 030f 	and.w	r3, r3, #15
20002a0a:	683a      	ldr	r2, [r7, #0]
20002a0c:	429a      	cmp	r2, r3
20002a0e:	d001      	beq.n	20002a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
20002a10:	2301      	movs	r3, #1
20002a12:	e032      	b.n	20002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20002a14:	687b      	ldr	r3, [r7, #4]
20002a16:	681b      	ldr	r3, [r3, #0]
20002a18:	f003 0304 	and.w	r3, r3, #4
20002a1c:	2b00      	cmp	r3, #0
20002a1e:	d008      	beq.n	20002a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20002a20:	4b19      	ldr	r3, [pc, #100]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
20002a22:	689b      	ldr	r3, [r3, #8]
20002a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
20002a28:	687b      	ldr	r3, [r7, #4]
20002a2a:	68db      	ldr	r3, [r3, #12]
20002a2c:	4916      	ldr	r1, [pc, #88]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
20002a2e:	4313      	orrs	r3, r2
20002a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20002a32:	687b      	ldr	r3, [r7, #4]
20002a34:	681b      	ldr	r3, [r3, #0]
20002a36:	f003 0308 	and.w	r3, r3, #8
20002a3a:	2b00      	cmp	r3, #0
20002a3c:	d009      	beq.n	20002a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
20002a3e:	4b12      	ldr	r3, [pc, #72]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
20002a40:	689b      	ldr	r3, [r3, #8]
20002a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
20002a46:	687b      	ldr	r3, [r7, #4]
20002a48:	691b      	ldr	r3, [r3, #16]
20002a4a:	00db      	lsls	r3, r3, #3
20002a4c:	490e      	ldr	r1, [pc, #56]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
20002a4e:	4313      	orrs	r3, r2
20002a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
20002a52:	f000 f821 	bl	20002a98 <HAL_RCC_GetSysClockFreq>
20002a56:	4602      	mov	r2, r0
20002a58:	4b0b      	ldr	r3, [pc, #44]	; (20002a88 <HAL_RCC_ClockConfig+0x1bc>)
20002a5a:	689b      	ldr	r3, [r3, #8]
20002a5c:	091b      	lsrs	r3, r3, #4
20002a5e:	f003 030f 	and.w	r3, r3, #15
20002a62:	490a      	ldr	r1, [pc, #40]	; (20002a8c <HAL_RCC_ClockConfig+0x1c0>)
20002a64:	5ccb      	ldrb	r3, [r1, r3]
20002a66:	fa22 f303 	lsr.w	r3, r2, r3
20002a6a:	4a09      	ldr	r2, [pc, #36]	; (20002a90 <HAL_RCC_ClockConfig+0x1c4>)
20002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
20002a6e:	4b09      	ldr	r3, [pc, #36]	; (20002a94 <HAL_RCC_ClockConfig+0x1c8>)
20002a70:	681b      	ldr	r3, [r3, #0]
20002a72:	4618      	mov	r0, r3
20002a74:	f7fe fe24 	bl	200016c0 <HAL_InitTick>

  return HAL_OK;
20002a78:	2300      	movs	r3, #0
}
20002a7a:	4618      	mov	r0, r3
20002a7c:	3710      	adds	r7, #16
20002a7e:	46bd      	mov	sp, r7
20002a80:	bd80      	pop	{r7, pc}
20002a82:	bf00      	nop
20002a84:	40023c00 	.word	0x40023c00
20002a88:	40023800 	.word	0x40023800
20002a8c:	2000432c 	.word	0x2000432c
20002a90:	20004360 	.word	0x20004360
20002a94:	20004364 	.word	0x20004364

20002a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
20002a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20002a9c:	b094      	sub	sp, #80	; 0x50
20002a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
20002aa0:	2300      	movs	r3, #0
20002aa2:	647b      	str	r3, [r7, #68]	; 0x44
20002aa4:	2300      	movs	r3, #0
20002aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
20002aa8:	2300      	movs	r3, #0
20002aaa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
20002aac:	2300      	movs	r3, #0
20002aae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20002ab0:	4b79      	ldr	r3, [pc, #484]	; (20002c98 <HAL_RCC_GetSysClockFreq+0x200>)
20002ab2:	689b      	ldr	r3, [r3, #8]
20002ab4:	f003 030c 	and.w	r3, r3, #12
20002ab8:	2b08      	cmp	r3, #8
20002aba:	d00d      	beq.n	20002ad8 <HAL_RCC_GetSysClockFreq+0x40>
20002abc:	2b08      	cmp	r3, #8
20002abe:	f200 80e1 	bhi.w	20002c84 <HAL_RCC_GetSysClockFreq+0x1ec>
20002ac2:	2b00      	cmp	r3, #0
20002ac4:	d002      	beq.n	20002acc <HAL_RCC_GetSysClockFreq+0x34>
20002ac6:	2b04      	cmp	r3, #4
20002ac8:	d003      	beq.n	20002ad2 <HAL_RCC_GetSysClockFreq+0x3a>
20002aca:	e0db      	b.n	20002c84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20002acc:	4b73      	ldr	r3, [pc, #460]	; (20002c9c <HAL_RCC_GetSysClockFreq+0x204>)
20002ace:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
20002ad0:	e0db      	b.n	20002c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20002ad2:	4b73      	ldr	r3, [pc, #460]	; (20002ca0 <HAL_RCC_GetSysClockFreq+0x208>)
20002ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
20002ad6:	e0d8      	b.n	20002c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20002ad8:	4b6f      	ldr	r3, [pc, #444]	; (20002c98 <HAL_RCC_GetSysClockFreq+0x200>)
20002ada:	685b      	ldr	r3, [r3, #4]
20002adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20002ae0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20002ae2:	4b6d      	ldr	r3, [pc, #436]	; (20002c98 <HAL_RCC_GetSysClockFreq+0x200>)
20002ae4:	685b      	ldr	r3, [r3, #4]
20002ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20002aea:	2b00      	cmp	r3, #0
20002aec:	d063      	beq.n	20002bb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20002aee:	4b6a      	ldr	r3, [pc, #424]	; (20002c98 <HAL_RCC_GetSysClockFreq+0x200>)
20002af0:	685b      	ldr	r3, [r3, #4]
20002af2:	099b      	lsrs	r3, r3, #6
20002af4:	2200      	movs	r2, #0
20002af6:	63bb      	str	r3, [r7, #56]	; 0x38
20002af8:	63fa      	str	r2, [r7, #60]	; 0x3c
20002afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
20002b00:	633b      	str	r3, [r7, #48]	; 0x30
20002b02:	2300      	movs	r3, #0
20002b04:	637b      	str	r3, [r7, #52]	; 0x34
20002b06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
20002b0a:	4622      	mov	r2, r4
20002b0c:	462b      	mov	r3, r5
20002b0e:	f04f 0000 	mov.w	r0, #0
20002b12:	f04f 0100 	mov.w	r1, #0
20002b16:	0159      	lsls	r1, r3, #5
20002b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20002b1c:	0150      	lsls	r0, r2, #5
20002b1e:	4602      	mov	r2, r0
20002b20:	460b      	mov	r3, r1
20002b22:	4621      	mov	r1, r4
20002b24:	1a51      	subs	r1, r2, r1
20002b26:	6139      	str	r1, [r7, #16]
20002b28:	4629      	mov	r1, r5
20002b2a:	eb63 0301 	sbc.w	r3, r3, r1
20002b2e:	617b      	str	r3, [r7, #20]
20002b30:	f04f 0200 	mov.w	r2, #0
20002b34:	f04f 0300 	mov.w	r3, #0
20002b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
20002b3c:	4659      	mov	r1, fp
20002b3e:	018b      	lsls	r3, r1, #6
20002b40:	4651      	mov	r1, sl
20002b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
20002b46:	4651      	mov	r1, sl
20002b48:	018a      	lsls	r2, r1, #6
20002b4a:	4651      	mov	r1, sl
20002b4c:	ebb2 0801 	subs.w	r8, r2, r1
20002b50:	4659      	mov	r1, fp
20002b52:	eb63 0901 	sbc.w	r9, r3, r1
20002b56:	f04f 0200 	mov.w	r2, #0
20002b5a:	f04f 0300 	mov.w	r3, #0
20002b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
20002b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
20002b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
20002b6a:	4690      	mov	r8, r2
20002b6c:	4699      	mov	r9, r3
20002b6e:	4623      	mov	r3, r4
20002b70:	eb18 0303 	adds.w	r3, r8, r3
20002b74:	60bb      	str	r3, [r7, #8]
20002b76:	462b      	mov	r3, r5
20002b78:	eb49 0303 	adc.w	r3, r9, r3
20002b7c:	60fb      	str	r3, [r7, #12]
20002b7e:	f04f 0200 	mov.w	r2, #0
20002b82:	f04f 0300 	mov.w	r3, #0
20002b86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
20002b8a:	4629      	mov	r1, r5
20002b8c:	024b      	lsls	r3, r1, #9
20002b8e:	4621      	mov	r1, r4
20002b90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
20002b94:	4621      	mov	r1, r4
20002b96:	024a      	lsls	r2, r1, #9
20002b98:	4610      	mov	r0, r2
20002b9a:	4619      	mov	r1, r3
20002b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20002b9e:	2200      	movs	r2, #0
20002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
20002ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
20002ba4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
20002ba8:	f7fe fb2c 	bl	20001204 <__aeabi_uldivmod>
20002bac:	4602      	mov	r2, r0
20002bae:	460b      	mov	r3, r1
20002bb0:	4613      	mov	r3, r2
20002bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
20002bb4:	e058      	b.n	20002c68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20002bb6:	4b38      	ldr	r3, [pc, #224]	; (20002c98 <HAL_RCC_GetSysClockFreq+0x200>)
20002bb8:	685b      	ldr	r3, [r3, #4]
20002bba:	099b      	lsrs	r3, r3, #6
20002bbc:	2200      	movs	r2, #0
20002bbe:	4618      	mov	r0, r3
20002bc0:	4611      	mov	r1, r2
20002bc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
20002bc6:	623b      	str	r3, [r7, #32]
20002bc8:	2300      	movs	r3, #0
20002bca:	627b      	str	r3, [r7, #36]	; 0x24
20002bcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
20002bd0:	4642      	mov	r2, r8
20002bd2:	464b      	mov	r3, r9
20002bd4:	f04f 0000 	mov.w	r0, #0
20002bd8:	f04f 0100 	mov.w	r1, #0
20002bdc:	0159      	lsls	r1, r3, #5
20002bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20002be2:	0150      	lsls	r0, r2, #5
20002be4:	4602      	mov	r2, r0
20002be6:	460b      	mov	r3, r1
20002be8:	4641      	mov	r1, r8
20002bea:	ebb2 0a01 	subs.w	sl, r2, r1
20002bee:	4649      	mov	r1, r9
20002bf0:	eb63 0b01 	sbc.w	fp, r3, r1
20002bf4:	f04f 0200 	mov.w	r2, #0
20002bf8:	f04f 0300 	mov.w	r3, #0
20002bfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
20002c00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
20002c04:	ea4f 128a 	mov.w	r2, sl, lsl #6
20002c08:	ebb2 040a 	subs.w	r4, r2, sl
20002c0c:	eb63 050b 	sbc.w	r5, r3, fp
20002c10:	f04f 0200 	mov.w	r2, #0
20002c14:	f04f 0300 	mov.w	r3, #0
20002c18:	00eb      	lsls	r3, r5, #3
20002c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20002c1e:	00e2      	lsls	r2, r4, #3
20002c20:	4614      	mov	r4, r2
20002c22:	461d      	mov	r5, r3
20002c24:	4643      	mov	r3, r8
20002c26:	18e3      	adds	r3, r4, r3
20002c28:	603b      	str	r3, [r7, #0]
20002c2a:	464b      	mov	r3, r9
20002c2c:	eb45 0303 	adc.w	r3, r5, r3
20002c30:	607b      	str	r3, [r7, #4]
20002c32:	f04f 0200 	mov.w	r2, #0
20002c36:	f04f 0300 	mov.w	r3, #0
20002c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
20002c3e:	4629      	mov	r1, r5
20002c40:	028b      	lsls	r3, r1, #10
20002c42:	4621      	mov	r1, r4
20002c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20002c48:	4621      	mov	r1, r4
20002c4a:	028a      	lsls	r2, r1, #10
20002c4c:	4610      	mov	r0, r2
20002c4e:	4619      	mov	r1, r3
20002c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20002c52:	2200      	movs	r2, #0
20002c54:	61bb      	str	r3, [r7, #24]
20002c56:	61fa      	str	r2, [r7, #28]
20002c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20002c5c:	f7fe fad2 	bl	20001204 <__aeabi_uldivmod>
20002c60:	4602      	mov	r2, r0
20002c62:	460b      	mov	r3, r1
20002c64:	4613      	mov	r3, r2
20002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
20002c68:	4b0b      	ldr	r3, [pc, #44]	; (20002c98 <HAL_RCC_GetSysClockFreq+0x200>)
20002c6a:	685b      	ldr	r3, [r3, #4]
20002c6c:	0c1b      	lsrs	r3, r3, #16
20002c6e:	f003 0303 	and.w	r3, r3, #3
20002c72:	3301      	adds	r3, #1
20002c74:	005b      	lsls	r3, r3, #1
20002c76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
20002c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
20002c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
20002c80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
20002c82:	e002      	b.n	20002c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20002c84:	4b05      	ldr	r3, [pc, #20]	; (20002c9c <HAL_RCC_GetSysClockFreq+0x204>)
20002c86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
20002c88:	bf00      	nop
    }
  }
  return sysclockfreq;
20002c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
20002c8c:	4618      	mov	r0, r3
20002c8e:	3750      	adds	r7, #80	; 0x50
20002c90:	46bd      	mov	sp, r7
20002c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20002c96:	bf00      	nop
20002c98:	40023800 	.word	0x40023800
20002c9c:	00f42400 	.word	0x00f42400
20002ca0:	007a1200 	.word	0x007a1200

20002ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20002ca4:	b480      	push	{r7}
20002ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
20002ca8:	4b03      	ldr	r3, [pc, #12]	; (20002cb8 <HAL_RCC_GetHCLKFreq+0x14>)
20002caa:	681b      	ldr	r3, [r3, #0]
}
20002cac:	4618      	mov	r0, r3
20002cae:	46bd      	mov	sp, r7
20002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
20002cb4:	4770      	bx	lr
20002cb6:	bf00      	nop
20002cb8:	20004360 	.word	0x20004360

20002cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
20002cbc:	b580      	push	{r7, lr}
20002cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
20002cc0:	f7ff fff0 	bl	20002ca4 <HAL_RCC_GetHCLKFreq>
20002cc4:	4602      	mov	r2, r0
20002cc6:	4b05      	ldr	r3, [pc, #20]	; (20002cdc <HAL_RCC_GetPCLK1Freq+0x20>)
20002cc8:	689b      	ldr	r3, [r3, #8]
20002cca:	0a9b      	lsrs	r3, r3, #10
20002ccc:	f003 0307 	and.w	r3, r3, #7
20002cd0:	4903      	ldr	r1, [pc, #12]	; (20002ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
20002cd2:	5ccb      	ldrb	r3, [r1, r3]
20002cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
20002cd8:	4618      	mov	r0, r3
20002cda:	bd80      	pop	{r7, pc}
20002cdc:	40023800 	.word	0x40023800
20002ce0:	2000433c 	.word	0x2000433c

20002ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
20002ce4:	b580      	push	{r7, lr}
20002ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
20002ce8:	f7ff ffdc 	bl	20002ca4 <HAL_RCC_GetHCLKFreq>
20002cec:	4602      	mov	r2, r0
20002cee:	4b05      	ldr	r3, [pc, #20]	; (20002d04 <HAL_RCC_GetPCLK2Freq+0x20>)
20002cf0:	689b      	ldr	r3, [r3, #8]
20002cf2:	0b5b      	lsrs	r3, r3, #13
20002cf4:	f003 0307 	and.w	r3, r3, #7
20002cf8:	4903      	ldr	r1, [pc, #12]	; (20002d08 <HAL_RCC_GetPCLK2Freq+0x24>)
20002cfa:	5ccb      	ldrb	r3, [r1, r3]
20002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
20002d00:	4618      	mov	r0, r3
20002d02:	bd80      	pop	{r7, pc}
20002d04:	40023800 	.word	0x40023800
20002d08:	2000433c 	.word	0x2000433c

20002d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
20002d0c:	b580      	push	{r7, lr}
20002d0e:	b082      	sub	sp, #8
20002d10:	af00      	add	r7, sp, #0
20002d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
20002d14:	687b      	ldr	r3, [r7, #4]
20002d16:	2b00      	cmp	r3, #0
20002d18:	d101      	bne.n	20002d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
20002d1a:	2301      	movs	r3, #1
20002d1c:	e041      	b.n	20002da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
20002d1e:	687b      	ldr	r3, [r7, #4]
20002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
20002d24:	b2db      	uxtb	r3, r3
20002d26:	2b00      	cmp	r3, #0
20002d28:	d106      	bne.n	20002d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
20002d2a:	687b      	ldr	r3, [r7, #4]
20002d2c:	2200      	movs	r2, #0
20002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
20002d32:	6878      	ldr	r0, [r7, #4]
20002d34:	f001 fa44 	bl	200041c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
20002d38:	687b      	ldr	r3, [r7, #4]
20002d3a:	2202      	movs	r2, #2
20002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
20002d40:	687b      	ldr	r3, [r7, #4]
20002d42:	681a      	ldr	r2, [r3, #0]
20002d44:	687b      	ldr	r3, [r7, #4]
20002d46:	3304      	adds	r3, #4
20002d48:	4619      	mov	r1, r3
20002d4a:	4610      	mov	r0, r2
20002d4c:	f000 f9b6 	bl	200030bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
20002d50:	687b      	ldr	r3, [r7, #4]
20002d52:	2201      	movs	r2, #1
20002d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
20002d58:	687b      	ldr	r3, [r7, #4]
20002d5a:	2201      	movs	r2, #1
20002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
20002d60:	687b      	ldr	r3, [r7, #4]
20002d62:	2201      	movs	r2, #1
20002d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
20002d68:	687b      	ldr	r3, [r7, #4]
20002d6a:	2201      	movs	r2, #1
20002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
20002d70:	687b      	ldr	r3, [r7, #4]
20002d72:	2201      	movs	r2, #1
20002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
20002d78:	687b      	ldr	r3, [r7, #4]
20002d7a:	2201      	movs	r2, #1
20002d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
20002d80:	687b      	ldr	r3, [r7, #4]
20002d82:	2201      	movs	r2, #1
20002d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
20002d88:	687b      	ldr	r3, [r7, #4]
20002d8a:	2201      	movs	r2, #1
20002d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20002d90:	687b      	ldr	r3, [r7, #4]
20002d92:	2201      	movs	r2, #1
20002d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
20002d98:	687b      	ldr	r3, [r7, #4]
20002d9a:	2201      	movs	r2, #1
20002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
20002da0:	2300      	movs	r3, #0
}
20002da2:	4618      	mov	r0, r3
20002da4:	3708      	adds	r7, #8
20002da6:	46bd      	mov	sp, r7
20002da8:	bd80      	pop	{r7, pc}
	...

20002dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
20002dac:	b480      	push	{r7}
20002dae:	b085      	sub	sp, #20
20002db0:	af00      	add	r7, sp, #0
20002db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
20002db4:	687b      	ldr	r3, [r7, #4]
20002db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
20002dba:	b2db      	uxtb	r3, r3
20002dbc:	2b01      	cmp	r3, #1
20002dbe:	d001      	beq.n	20002dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
20002dc0:	2301      	movs	r3, #1
20002dc2:	e04e      	b.n	20002e62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
20002dc4:	687b      	ldr	r3, [r7, #4]
20002dc6:	2202      	movs	r2, #2
20002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
20002dcc:	687b      	ldr	r3, [r7, #4]
20002dce:	681b      	ldr	r3, [r3, #0]
20002dd0:	68da      	ldr	r2, [r3, #12]
20002dd2:	687b      	ldr	r3, [r7, #4]
20002dd4:	681b      	ldr	r3, [r3, #0]
20002dd6:	f042 0201 	orr.w	r2, r2, #1
20002dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
20002ddc:	687b      	ldr	r3, [r7, #4]
20002dde:	681b      	ldr	r3, [r3, #0]
20002de0:	4a23      	ldr	r2, [pc, #140]	; (20002e70 <HAL_TIM_Base_Start_IT+0xc4>)
20002de2:	4293      	cmp	r3, r2
20002de4:	d022      	beq.n	20002e2c <HAL_TIM_Base_Start_IT+0x80>
20002de6:	687b      	ldr	r3, [r7, #4]
20002de8:	681b      	ldr	r3, [r3, #0]
20002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
20002dee:	d01d      	beq.n	20002e2c <HAL_TIM_Base_Start_IT+0x80>
20002df0:	687b      	ldr	r3, [r7, #4]
20002df2:	681b      	ldr	r3, [r3, #0]
20002df4:	4a1f      	ldr	r2, [pc, #124]	; (20002e74 <HAL_TIM_Base_Start_IT+0xc8>)
20002df6:	4293      	cmp	r3, r2
20002df8:	d018      	beq.n	20002e2c <HAL_TIM_Base_Start_IT+0x80>
20002dfa:	687b      	ldr	r3, [r7, #4]
20002dfc:	681b      	ldr	r3, [r3, #0]
20002dfe:	4a1e      	ldr	r2, [pc, #120]	; (20002e78 <HAL_TIM_Base_Start_IT+0xcc>)
20002e00:	4293      	cmp	r3, r2
20002e02:	d013      	beq.n	20002e2c <HAL_TIM_Base_Start_IT+0x80>
20002e04:	687b      	ldr	r3, [r7, #4]
20002e06:	681b      	ldr	r3, [r3, #0]
20002e08:	4a1c      	ldr	r2, [pc, #112]	; (20002e7c <HAL_TIM_Base_Start_IT+0xd0>)
20002e0a:	4293      	cmp	r3, r2
20002e0c:	d00e      	beq.n	20002e2c <HAL_TIM_Base_Start_IT+0x80>
20002e0e:	687b      	ldr	r3, [r7, #4]
20002e10:	681b      	ldr	r3, [r3, #0]
20002e12:	4a1b      	ldr	r2, [pc, #108]	; (20002e80 <HAL_TIM_Base_Start_IT+0xd4>)
20002e14:	4293      	cmp	r3, r2
20002e16:	d009      	beq.n	20002e2c <HAL_TIM_Base_Start_IT+0x80>
20002e18:	687b      	ldr	r3, [r7, #4]
20002e1a:	681b      	ldr	r3, [r3, #0]
20002e1c:	4a19      	ldr	r2, [pc, #100]	; (20002e84 <HAL_TIM_Base_Start_IT+0xd8>)
20002e1e:	4293      	cmp	r3, r2
20002e20:	d004      	beq.n	20002e2c <HAL_TIM_Base_Start_IT+0x80>
20002e22:	687b      	ldr	r3, [r7, #4]
20002e24:	681b      	ldr	r3, [r3, #0]
20002e26:	4a18      	ldr	r2, [pc, #96]	; (20002e88 <HAL_TIM_Base_Start_IT+0xdc>)
20002e28:	4293      	cmp	r3, r2
20002e2a:	d111      	bne.n	20002e50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
20002e2c:	687b      	ldr	r3, [r7, #4]
20002e2e:	681b      	ldr	r3, [r3, #0]
20002e30:	689b      	ldr	r3, [r3, #8]
20002e32:	f003 0307 	and.w	r3, r3, #7
20002e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
20002e38:	68fb      	ldr	r3, [r7, #12]
20002e3a:	2b06      	cmp	r3, #6
20002e3c:	d010      	beq.n	20002e60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
20002e3e:	687b      	ldr	r3, [r7, #4]
20002e40:	681b      	ldr	r3, [r3, #0]
20002e42:	681a      	ldr	r2, [r3, #0]
20002e44:	687b      	ldr	r3, [r7, #4]
20002e46:	681b      	ldr	r3, [r3, #0]
20002e48:	f042 0201 	orr.w	r2, r2, #1
20002e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
20002e4e:	e007      	b.n	20002e60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
20002e50:	687b      	ldr	r3, [r7, #4]
20002e52:	681b      	ldr	r3, [r3, #0]
20002e54:	681a      	ldr	r2, [r3, #0]
20002e56:	687b      	ldr	r3, [r7, #4]
20002e58:	681b      	ldr	r3, [r3, #0]
20002e5a:	f042 0201 	orr.w	r2, r2, #1
20002e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
20002e60:	2300      	movs	r3, #0
}
20002e62:	4618      	mov	r0, r3
20002e64:	3714      	adds	r7, #20
20002e66:	46bd      	mov	sp, r7
20002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
20002e6c:	4770      	bx	lr
20002e6e:	bf00      	nop
20002e70:	40010000 	.word	0x40010000
20002e74:	40000400 	.word	0x40000400
20002e78:	40000800 	.word	0x40000800
20002e7c:	40000c00 	.word	0x40000c00
20002e80:	40010400 	.word	0x40010400
20002e84:	40014000 	.word	0x40014000
20002e88:	40001800 	.word	0x40001800

20002e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
20002e8c:	b580      	push	{r7, lr}
20002e8e:	b084      	sub	sp, #16
20002e90:	af00      	add	r7, sp, #0
20002e92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
20002e94:	687b      	ldr	r3, [r7, #4]
20002e96:	681b      	ldr	r3, [r3, #0]
20002e98:	68db      	ldr	r3, [r3, #12]
20002e9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
20002e9c:	687b      	ldr	r3, [r7, #4]
20002e9e:	681b      	ldr	r3, [r3, #0]
20002ea0:	691b      	ldr	r3, [r3, #16]
20002ea2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
20002ea4:	68bb      	ldr	r3, [r7, #8]
20002ea6:	f003 0302 	and.w	r3, r3, #2
20002eaa:	2b00      	cmp	r3, #0
20002eac:	d020      	beq.n	20002ef0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
20002eae:	68fb      	ldr	r3, [r7, #12]
20002eb0:	f003 0302 	and.w	r3, r3, #2
20002eb4:	2b00      	cmp	r3, #0
20002eb6:	d01b      	beq.n	20002ef0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
20002eb8:	687b      	ldr	r3, [r7, #4]
20002eba:	681b      	ldr	r3, [r3, #0]
20002ebc:	f06f 0202 	mvn.w	r2, #2
20002ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
20002ec2:	687b      	ldr	r3, [r7, #4]
20002ec4:	2201      	movs	r2, #1
20002ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
20002ec8:	687b      	ldr	r3, [r7, #4]
20002eca:	681b      	ldr	r3, [r3, #0]
20002ecc:	699b      	ldr	r3, [r3, #24]
20002ece:	f003 0303 	and.w	r3, r3, #3
20002ed2:	2b00      	cmp	r3, #0
20002ed4:	d003      	beq.n	20002ede <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
20002ed6:	6878      	ldr	r0, [r7, #4]
20002ed8:	f000 f8d2 	bl	20003080 <HAL_TIM_IC_CaptureCallback>
20002edc:	e005      	b.n	20002eea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
20002ede:	6878      	ldr	r0, [r7, #4]
20002ee0:	f000 f8c4 	bl	2000306c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
20002ee4:	6878      	ldr	r0, [r7, #4]
20002ee6:	f000 f8d5 	bl	20003094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20002eea:	687b      	ldr	r3, [r7, #4]
20002eec:	2200      	movs	r2, #0
20002eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
20002ef0:	68bb      	ldr	r3, [r7, #8]
20002ef2:	f003 0304 	and.w	r3, r3, #4
20002ef6:	2b00      	cmp	r3, #0
20002ef8:	d020      	beq.n	20002f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
20002efa:	68fb      	ldr	r3, [r7, #12]
20002efc:	f003 0304 	and.w	r3, r3, #4
20002f00:	2b00      	cmp	r3, #0
20002f02:	d01b      	beq.n	20002f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
20002f04:	687b      	ldr	r3, [r7, #4]
20002f06:	681b      	ldr	r3, [r3, #0]
20002f08:	f06f 0204 	mvn.w	r2, #4
20002f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
20002f0e:	687b      	ldr	r3, [r7, #4]
20002f10:	2202      	movs	r2, #2
20002f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
20002f14:	687b      	ldr	r3, [r7, #4]
20002f16:	681b      	ldr	r3, [r3, #0]
20002f18:	699b      	ldr	r3, [r3, #24]
20002f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
20002f1e:	2b00      	cmp	r3, #0
20002f20:	d003      	beq.n	20002f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
20002f22:	6878      	ldr	r0, [r7, #4]
20002f24:	f000 f8ac 	bl	20003080 <HAL_TIM_IC_CaptureCallback>
20002f28:	e005      	b.n	20002f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
20002f2a:	6878      	ldr	r0, [r7, #4]
20002f2c:	f000 f89e 	bl	2000306c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
20002f30:	6878      	ldr	r0, [r7, #4]
20002f32:	f000 f8af 	bl	20003094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20002f36:	687b      	ldr	r3, [r7, #4]
20002f38:	2200      	movs	r2, #0
20002f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
20002f3c:	68bb      	ldr	r3, [r7, #8]
20002f3e:	f003 0308 	and.w	r3, r3, #8
20002f42:	2b00      	cmp	r3, #0
20002f44:	d020      	beq.n	20002f88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
20002f46:	68fb      	ldr	r3, [r7, #12]
20002f48:	f003 0308 	and.w	r3, r3, #8
20002f4c:	2b00      	cmp	r3, #0
20002f4e:	d01b      	beq.n	20002f88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
20002f50:	687b      	ldr	r3, [r7, #4]
20002f52:	681b      	ldr	r3, [r3, #0]
20002f54:	f06f 0208 	mvn.w	r2, #8
20002f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
20002f5a:	687b      	ldr	r3, [r7, #4]
20002f5c:	2204      	movs	r2, #4
20002f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
20002f60:	687b      	ldr	r3, [r7, #4]
20002f62:	681b      	ldr	r3, [r3, #0]
20002f64:	69db      	ldr	r3, [r3, #28]
20002f66:	f003 0303 	and.w	r3, r3, #3
20002f6a:	2b00      	cmp	r3, #0
20002f6c:	d003      	beq.n	20002f76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
20002f6e:	6878      	ldr	r0, [r7, #4]
20002f70:	f000 f886 	bl	20003080 <HAL_TIM_IC_CaptureCallback>
20002f74:	e005      	b.n	20002f82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
20002f76:	6878      	ldr	r0, [r7, #4]
20002f78:	f000 f878 	bl	2000306c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
20002f7c:	6878      	ldr	r0, [r7, #4]
20002f7e:	f000 f889 	bl	20003094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20002f82:	687b      	ldr	r3, [r7, #4]
20002f84:	2200      	movs	r2, #0
20002f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
20002f88:	68bb      	ldr	r3, [r7, #8]
20002f8a:	f003 0310 	and.w	r3, r3, #16
20002f8e:	2b00      	cmp	r3, #0
20002f90:	d020      	beq.n	20002fd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
20002f92:	68fb      	ldr	r3, [r7, #12]
20002f94:	f003 0310 	and.w	r3, r3, #16
20002f98:	2b00      	cmp	r3, #0
20002f9a:	d01b      	beq.n	20002fd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
20002f9c:	687b      	ldr	r3, [r7, #4]
20002f9e:	681b      	ldr	r3, [r3, #0]
20002fa0:	f06f 0210 	mvn.w	r2, #16
20002fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
20002fa6:	687b      	ldr	r3, [r7, #4]
20002fa8:	2208      	movs	r2, #8
20002faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
20002fac:	687b      	ldr	r3, [r7, #4]
20002fae:	681b      	ldr	r3, [r3, #0]
20002fb0:	69db      	ldr	r3, [r3, #28]
20002fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
20002fb6:	2b00      	cmp	r3, #0
20002fb8:	d003      	beq.n	20002fc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
20002fba:	6878      	ldr	r0, [r7, #4]
20002fbc:	f000 f860 	bl	20003080 <HAL_TIM_IC_CaptureCallback>
20002fc0:	e005      	b.n	20002fce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
20002fc2:	6878      	ldr	r0, [r7, #4]
20002fc4:	f000 f852 	bl	2000306c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
20002fc8:	6878      	ldr	r0, [r7, #4]
20002fca:	f000 f863 	bl	20003094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20002fce:	687b      	ldr	r3, [r7, #4]
20002fd0:	2200      	movs	r2, #0
20002fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
20002fd4:	68bb      	ldr	r3, [r7, #8]
20002fd6:	f003 0301 	and.w	r3, r3, #1
20002fda:	2b00      	cmp	r3, #0
20002fdc:	d00c      	beq.n	20002ff8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
20002fde:	68fb      	ldr	r3, [r7, #12]
20002fe0:	f003 0301 	and.w	r3, r3, #1
20002fe4:	2b00      	cmp	r3, #0
20002fe6:	d007      	beq.n	20002ff8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
20002fe8:	687b      	ldr	r3, [r7, #4]
20002fea:	681b      	ldr	r3, [r3, #0]
20002fec:	f06f 0201 	mvn.w	r2, #1
20002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
20002ff2:	6878      	ldr	r0, [r7, #4]
20002ff4:	f001 f87e 	bl	200040f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
20002ff8:	68bb      	ldr	r3, [r7, #8]
20002ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
20002ffe:	2b00      	cmp	r3, #0
20003000:	d00c      	beq.n	2000301c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
20003002:	68fb      	ldr	r3, [r7, #12]
20003004:	f003 0380 	and.w	r3, r3, #128	; 0x80
20003008:	2b00      	cmp	r3, #0
2000300a:	d007      	beq.n	2000301c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
2000300c:	687b      	ldr	r3, [r7, #4]
2000300e:	681b      	ldr	r3, [r3, #0]
20003010:	f06f 0280 	mvn.w	r2, #128	; 0x80
20003014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
20003016:	6878      	ldr	r0, [r7, #4]
20003018:	f000 f982 	bl	20003320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
2000301c:	68bb      	ldr	r3, [r7, #8]
2000301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
20003022:	2b00      	cmp	r3, #0
20003024:	d00c      	beq.n	20003040 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
20003026:	68fb      	ldr	r3, [r7, #12]
20003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000302c:	2b00      	cmp	r3, #0
2000302e:	d007      	beq.n	20003040 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
20003030:	687b      	ldr	r3, [r7, #4]
20003032:	681b      	ldr	r3, [r3, #0]
20003034:	f06f 0240 	mvn.w	r2, #64	; 0x40
20003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
2000303a:	6878      	ldr	r0, [r7, #4]
2000303c:	f000 f834 	bl	200030a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
20003040:	68bb      	ldr	r3, [r7, #8]
20003042:	f003 0320 	and.w	r3, r3, #32
20003046:	2b00      	cmp	r3, #0
20003048:	d00c      	beq.n	20003064 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
2000304a:	68fb      	ldr	r3, [r7, #12]
2000304c:	f003 0320 	and.w	r3, r3, #32
20003050:	2b00      	cmp	r3, #0
20003052:	d007      	beq.n	20003064 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
20003054:	687b      	ldr	r3, [r7, #4]
20003056:	681b      	ldr	r3, [r3, #0]
20003058:	f06f 0220 	mvn.w	r2, #32
2000305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
2000305e:	6878      	ldr	r0, [r7, #4]
20003060:	f000 f954 	bl	2000330c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
20003064:	bf00      	nop
20003066:	3710      	adds	r7, #16
20003068:	46bd      	mov	sp, r7
2000306a:	bd80      	pop	{r7, pc}

2000306c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
2000306c:	b480      	push	{r7}
2000306e:	b083      	sub	sp, #12
20003070:	af00      	add	r7, sp, #0
20003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
20003074:	bf00      	nop
20003076:	370c      	adds	r7, #12
20003078:	46bd      	mov	sp, r7
2000307a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000307e:	4770      	bx	lr

20003080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
20003080:	b480      	push	{r7}
20003082:	b083      	sub	sp, #12
20003084:	af00      	add	r7, sp, #0
20003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
20003088:	bf00      	nop
2000308a:	370c      	adds	r7, #12
2000308c:	46bd      	mov	sp, r7
2000308e:	f85d 7b04 	ldr.w	r7, [sp], #4
20003092:	4770      	bx	lr

20003094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
20003094:	b480      	push	{r7}
20003096:	b083      	sub	sp, #12
20003098:	af00      	add	r7, sp, #0
2000309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
2000309c:	bf00      	nop
2000309e:	370c      	adds	r7, #12
200030a0:	46bd      	mov	sp, r7
200030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200030a6:	4770      	bx	lr

200030a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
200030a8:	b480      	push	{r7}
200030aa:	b083      	sub	sp, #12
200030ac:	af00      	add	r7, sp, #0
200030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
200030b0:	bf00      	nop
200030b2:	370c      	adds	r7, #12
200030b4:	46bd      	mov	sp, r7
200030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200030ba:	4770      	bx	lr

200030bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
200030bc:	b480      	push	{r7}
200030be:	b085      	sub	sp, #20
200030c0:	af00      	add	r7, sp, #0
200030c2:	6078      	str	r0, [r7, #4]
200030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
200030c6:	687b      	ldr	r3, [r7, #4]
200030c8:	681b      	ldr	r3, [r3, #0]
200030ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
200030cc:	687b      	ldr	r3, [r7, #4]
200030ce:	4a46      	ldr	r2, [pc, #280]	; (200031e8 <TIM_Base_SetConfig+0x12c>)
200030d0:	4293      	cmp	r3, r2
200030d2:	d013      	beq.n	200030fc <TIM_Base_SetConfig+0x40>
200030d4:	687b      	ldr	r3, [r7, #4]
200030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
200030da:	d00f      	beq.n	200030fc <TIM_Base_SetConfig+0x40>
200030dc:	687b      	ldr	r3, [r7, #4]
200030de:	4a43      	ldr	r2, [pc, #268]	; (200031ec <TIM_Base_SetConfig+0x130>)
200030e0:	4293      	cmp	r3, r2
200030e2:	d00b      	beq.n	200030fc <TIM_Base_SetConfig+0x40>
200030e4:	687b      	ldr	r3, [r7, #4]
200030e6:	4a42      	ldr	r2, [pc, #264]	; (200031f0 <TIM_Base_SetConfig+0x134>)
200030e8:	4293      	cmp	r3, r2
200030ea:	d007      	beq.n	200030fc <TIM_Base_SetConfig+0x40>
200030ec:	687b      	ldr	r3, [r7, #4]
200030ee:	4a41      	ldr	r2, [pc, #260]	; (200031f4 <TIM_Base_SetConfig+0x138>)
200030f0:	4293      	cmp	r3, r2
200030f2:	d003      	beq.n	200030fc <TIM_Base_SetConfig+0x40>
200030f4:	687b      	ldr	r3, [r7, #4]
200030f6:	4a40      	ldr	r2, [pc, #256]	; (200031f8 <TIM_Base_SetConfig+0x13c>)
200030f8:	4293      	cmp	r3, r2
200030fa:	d108      	bne.n	2000310e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
200030fc:	68fb      	ldr	r3, [r7, #12]
200030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
20003102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
20003104:	683b      	ldr	r3, [r7, #0]
20003106:	685b      	ldr	r3, [r3, #4]
20003108:	68fa      	ldr	r2, [r7, #12]
2000310a:	4313      	orrs	r3, r2
2000310c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
2000310e:	687b      	ldr	r3, [r7, #4]
20003110:	4a35      	ldr	r2, [pc, #212]	; (200031e8 <TIM_Base_SetConfig+0x12c>)
20003112:	4293      	cmp	r3, r2
20003114:	d02b      	beq.n	2000316e <TIM_Base_SetConfig+0xb2>
20003116:	687b      	ldr	r3, [r7, #4]
20003118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2000311c:	d027      	beq.n	2000316e <TIM_Base_SetConfig+0xb2>
2000311e:	687b      	ldr	r3, [r7, #4]
20003120:	4a32      	ldr	r2, [pc, #200]	; (200031ec <TIM_Base_SetConfig+0x130>)
20003122:	4293      	cmp	r3, r2
20003124:	d023      	beq.n	2000316e <TIM_Base_SetConfig+0xb2>
20003126:	687b      	ldr	r3, [r7, #4]
20003128:	4a31      	ldr	r2, [pc, #196]	; (200031f0 <TIM_Base_SetConfig+0x134>)
2000312a:	4293      	cmp	r3, r2
2000312c:	d01f      	beq.n	2000316e <TIM_Base_SetConfig+0xb2>
2000312e:	687b      	ldr	r3, [r7, #4]
20003130:	4a30      	ldr	r2, [pc, #192]	; (200031f4 <TIM_Base_SetConfig+0x138>)
20003132:	4293      	cmp	r3, r2
20003134:	d01b      	beq.n	2000316e <TIM_Base_SetConfig+0xb2>
20003136:	687b      	ldr	r3, [r7, #4]
20003138:	4a2f      	ldr	r2, [pc, #188]	; (200031f8 <TIM_Base_SetConfig+0x13c>)
2000313a:	4293      	cmp	r3, r2
2000313c:	d017      	beq.n	2000316e <TIM_Base_SetConfig+0xb2>
2000313e:	687b      	ldr	r3, [r7, #4]
20003140:	4a2e      	ldr	r2, [pc, #184]	; (200031fc <TIM_Base_SetConfig+0x140>)
20003142:	4293      	cmp	r3, r2
20003144:	d013      	beq.n	2000316e <TIM_Base_SetConfig+0xb2>
20003146:	687b      	ldr	r3, [r7, #4]
20003148:	4a2d      	ldr	r2, [pc, #180]	; (20003200 <TIM_Base_SetConfig+0x144>)
2000314a:	4293      	cmp	r3, r2
2000314c:	d00f      	beq.n	2000316e <TIM_Base_SetConfig+0xb2>
2000314e:	687b      	ldr	r3, [r7, #4]
20003150:	4a2c      	ldr	r2, [pc, #176]	; (20003204 <TIM_Base_SetConfig+0x148>)
20003152:	4293      	cmp	r3, r2
20003154:	d00b      	beq.n	2000316e <TIM_Base_SetConfig+0xb2>
20003156:	687b      	ldr	r3, [r7, #4]
20003158:	4a2b      	ldr	r2, [pc, #172]	; (20003208 <TIM_Base_SetConfig+0x14c>)
2000315a:	4293      	cmp	r3, r2
2000315c:	d007      	beq.n	2000316e <TIM_Base_SetConfig+0xb2>
2000315e:	687b      	ldr	r3, [r7, #4]
20003160:	4a2a      	ldr	r2, [pc, #168]	; (2000320c <TIM_Base_SetConfig+0x150>)
20003162:	4293      	cmp	r3, r2
20003164:	d003      	beq.n	2000316e <TIM_Base_SetConfig+0xb2>
20003166:	687b      	ldr	r3, [r7, #4]
20003168:	4a29      	ldr	r2, [pc, #164]	; (20003210 <TIM_Base_SetConfig+0x154>)
2000316a:	4293      	cmp	r3, r2
2000316c:	d108      	bne.n	20003180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
2000316e:	68fb      	ldr	r3, [r7, #12]
20003170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20003174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
20003176:	683b      	ldr	r3, [r7, #0]
20003178:	68db      	ldr	r3, [r3, #12]
2000317a:	68fa      	ldr	r2, [r7, #12]
2000317c:	4313      	orrs	r3, r2
2000317e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
20003180:	68fb      	ldr	r3, [r7, #12]
20003182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
20003186:	683b      	ldr	r3, [r7, #0]
20003188:	695b      	ldr	r3, [r3, #20]
2000318a:	4313      	orrs	r3, r2
2000318c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
2000318e:	687b      	ldr	r3, [r7, #4]
20003190:	68fa      	ldr	r2, [r7, #12]
20003192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
20003194:	683b      	ldr	r3, [r7, #0]
20003196:	689a      	ldr	r2, [r3, #8]
20003198:	687b      	ldr	r3, [r7, #4]
2000319a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
2000319c:	683b      	ldr	r3, [r7, #0]
2000319e:	681a      	ldr	r2, [r3, #0]
200031a0:	687b      	ldr	r3, [r7, #4]
200031a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
200031a4:	687b      	ldr	r3, [r7, #4]
200031a6:	4a10      	ldr	r2, [pc, #64]	; (200031e8 <TIM_Base_SetConfig+0x12c>)
200031a8:	4293      	cmp	r3, r2
200031aa:	d003      	beq.n	200031b4 <TIM_Base_SetConfig+0xf8>
200031ac:	687b      	ldr	r3, [r7, #4]
200031ae:	4a12      	ldr	r2, [pc, #72]	; (200031f8 <TIM_Base_SetConfig+0x13c>)
200031b0:	4293      	cmp	r3, r2
200031b2:	d103      	bne.n	200031bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
200031b4:	683b      	ldr	r3, [r7, #0]
200031b6:	691a      	ldr	r2, [r3, #16]
200031b8:	687b      	ldr	r3, [r7, #4]
200031ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
200031bc:	687b      	ldr	r3, [r7, #4]
200031be:	2201      	movs	r2, #1
200031c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
200031c2:	687b      	ldr	r3, [r7, #4]
200031c4:	691b      	ldr	r3, [r3, #16]
200031c6:	f003 0301 	and.w	r3, r3, #1
200031ca:	2b01      	cmp	r3, #1
200031cc:	d105      	bne.n	200031da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
200031ce:	687b      	ldr	r3, [r7, #4]
200031d0:	691b      	ldr	r3, [r3, #16]
200031d2:	f023 0201 	bic.w	r2, r3, #1
200031d6:	687b      	ldr	r3, [r7, #4]
200031d8:	611a      	str	r2, [r3, #16]
  }
}
200031da:	bf00      	nop
200031dc:	3714      	adds	r7, #20
200031de:	46bd      	mov	sp, r7
200031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
200031e4:	4770      	bx	lr
200031e6:	bf00      	nop
200031e8:	40010000 	.word	0x40010000
200031ec:	40000400 	.word	0x40000400
200031f0:	40000800 	.word	0x40000800
200031f4:	40000c00 	.word	0x40000c00
200031f8:	40010400 	.word	0x40010400
200031fc:	40014000 	.word	0x40014000
20003200:	40014400 	.word	0x40014400
20003204:	40014800 	.word	0x40014800
20003208:	40001800 	.word	0x40001800
2000320c:	40001c00 	.word	0x40001c00
20003210:	40002000 	.word	0x40002000

20003214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
20003214:	b480      	push	{r7}
20003216:	b085      	sub	sp, #20
20003218:	af00      	add	r7, sp, #0
2000321a:	6078      	str	r0, [r7, #4]
2000321c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
2000321e:	687b      	ldr	r3, [r7, #4]
20003220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20003224:	2b01      	cmp	r3, #1
20003226:	d101      	bne.n	2000322c <HAL_TIMEx_MasterConfigSynchronization+0x18>
20003228:	2302      	movs	r3, #2
2000322a:	e05a      	b.n	200032e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
2000322c:	687b      	ldr	r3, [r7, #4]
2000322e:	2201      	movs	r2, #1
20003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
20003234:	687b      	ldr	r3, [r7, #4]
20003236:	2202      	movs	r2, #2
20003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
2000323c:	687b      	ldr	r3, [r7, #4]
2000323e:	681b      	ldr	r3, [r3, #0]
20003240:	685b      	ldr	r3, [r3, #4]
20003242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
20003244:	687b      	ldr	r3, [r7, #4]
20003246:	681b      	ldr	r3, [r3, #0]
20003248:	689b      	ldr	r3, [r3, #8]
2000324a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
2000324c:	68fb      	ldr	r3, [r7, #12]
2000324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
20003252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
20003254:	683b      	ldr	r3, [r7, #0]
20003256:	681b      	ldr	r3, [r3, #0]
20003258:	68fa      	ldr	r2, [r7, #12]
2000325a:	4313      	orrs	r3, r2
2000325c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
2000325e:	687b      	ldr	r3, [r7, #4]
20003260:	681b      	ldr	r3, [r3, #0]
20003262:	68fa      	ldr	r2, [r7, #12]
20003264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
20003266:	687b      	ldr	r3, [r7, #4]
20003268:	681b      	ldr	r3, [r3, #0]
2000326a:	4a21      	ldr	r2, [pc, #132]	; (200032f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
2000326c:	4293      	cmp	r3, r2
2000326e:	d022      	beq.n	200032b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
20003270:	687b      	ldr	r3, [r7, #4]
20003272:	681b      	ldr	r3, [r3, #0]
20003274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
20003278:	d01d      	beq.n	200032b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
2000327a:	687b      	ldr	r3, [r7, #4]
2000327c:	681b      	ldr	r3, [r3, #0]
2000327e:	4a1d      	ldr	r2, [pc, #116]	; (200032f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
20003280:	4293      	cmp	r3, r2
20003282:	d018      	beq.n	200032b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
20003284:	687b      	ldr	r3, [r7, #4]
20003286:	681b      	ldr	r3, [r3, #0]
20003288:	4a1b      	ldr	r2, [pc, #108]	; (200032f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
2000328a:	4293      	cmp	r3, r2
2000328c:	d013      	beq.n	200032b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
2000328e:	687b      	ldr	r3, [r7, #4]
20003290:	681b      	ldr	r3, [r3, #0]
20003292:	4a1a      	ldr	r2, [pc, #104]	; (200032fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
20003294:	4293      	cmp	r3, r2
20003296:	d00e      	beq.n	200032b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
20003298:	687b      	ldr	r3, [r7, #4]
2000329a:	681b      	ldr	r3, [r3, #0]
2000329c:	4a18      	ldr	r2, [pc, #96]	; (20003300 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
2000329e:	4293      	cmp	r3, r2
200032a0:	d009      	beq.n	200032b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
200032a2:	687b      	ldr	r3, [r7, #4]
200032a4:	681b      	ldr	r3, [r3, #0]
200032a6:	4a17      	ldr	r2, [pc, #92]	; (20003304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
200032a8:	4293      	cmp	r3, r2
200032aa:	d004      	beq.n	200032b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
200032ac:	687b      	ldr	r3, [r7, #4]
200032ae:	681b      	ldr	r3, [r3, #0]
200032b0:	4a15      	ldr	r2, [pc, #84]	; (20003308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
200032b2:	4293      	cmp	r3, r2
200032b4:	d10c      	bne.n	200032d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
200032b6:	68bb      	ldr	r3, [r7, #8]
200032b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
200032bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
200032be:	683b      	ldr	r3, [r7, #0]
200032c0:	685b      	ldr	r3, [r3, #4]
200032c2:	68ba      	ldr	r2, [r7, #8]
200032c4:	4313      	orrs	r3, r2
200032c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
200032c8:	687b      	ldr	r3, [r7, #4]
200032ca:	681b      	ldr	r3, [r3, #0]
200032cc:	68ba      	ldr	r2, [r7, #8]
200032ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
200032d0:	687b      	ldr	r3, [r7, #4]
200032d2:	2201      	movs	r2, #1
200032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
200032d8:	687b      	ldr	r3, [r7, #4]
200032da:	2200      	movs	r2, #0
200032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
200032e0:	2300      	movs	r3, #0
}
200032e2:	4618      	mov	r0, r3
200032e4:	3714      	adds	r7, #20
200032e6:	46bd      	mov	sp, r7
200032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
200032ec:	4770      	bx	lr
200032ee:	bf00      	nop
200032f0:	40010000 	.word	0x40010000
200032f4:	40000400 	.word	0x40000400
200032f8:	40000800 	.word	0x40000800
200032fc:	40000c00 	.word	0x40000c00
20003300:	40010400 	.word	0x40010400
20003304:	40014000 	.word	0x40014000
20003308:	40001800 	.word	0x40001800

2000330c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
2000330c:	b480      	push	{r7}
2000330e:	b083      	sub	sp, #12
20003310:	af00      	add	r7, sp, #0
20003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
20003314:	bf00      	nop
20003316:	370c      	adds	r7, #12
20003318:	46bd      	mov	sp, r7
2000331a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000331e:	4770      	bx	lr

20003320 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
20003320:	b480      	push	{r7}
20003322:	b083      	sub	sp, #12
20003324:	af00      	add	r7, sp, #0
20003326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
20003328:	bf00      	nop
2000332a:	370c      	adds	r7, #12
2000332c:	46bd      	mov	sp, r7
2000332e:	f85d 7b04 	ldr.w	r7, [sp], #4
20003332:	4770      	bx	lr

20003334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
20003334:	b580      	push	{r7, lr}
20003336:	b082      	sub	sp, #8
20003338:	af00      	add	r7, sp, #0
2000333a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
2000333c:	687b      	ldr	r3, [r7, #4]
2000333e:	2b00      	cmp	r3, #0
20003340:	d101      	bne.n	20003346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
20003342:	2301      	movs	r3, #1
20003344:	e042      	b.n	200033cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
20003346:	687b      	ldr	r3, [r7, #4]
20003348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000334c:	b2db      	uxtb	r3, r3
2000334e:	2b00      	cmp	r3, #0
20003350:	d106      	bne.n	20003360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
20003352:	687b      	ldr	r3, [r7, #4]
20003354:	2200      	movs	r2, #0
20003356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
2000335a:	6878      	ldr	r0, [r7, #4]
2000335c:	f000 fede 	bl	2000411c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
20003360:	687b      	ldr	r3, [r7, #4]
20003362:	2224      	movs	r2, #36	; 0x24
20003364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
20003368:	687b      	ldr	r3, [r7, #4]
2000336a:	681b      	ldr	r3, [r3, #0]
2000336c:	68da      	ldr	r2, [r3, #12]
2000336e:	687b      	ldr	r3, [r7, #4]
20003370:	681b      	ldr	r3, [r3, #0]
20003372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
20003376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
20003378:	6878      	ldr	r0, [r7, #4]
2000337a:	f000 f82b 	bl	200033d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2000337e:	687b      	ldr	r3, [r7, #4]
20003380:	681b      	ldr	r3, [r3, #0]
20003382:	691a      	ldr	r2, [r3, #16]
20003384:	687b      	ldr	r3, [r7, #4]
20003386:	681b      	ldr	r3, [r3, #0]
20003388:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
2000338c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
2000338e:	687b      	ldr	r3, [r7, #4]
20003390:	681b      	ldr	r3, [r3, #0]
20003392:	695a      	ldr	r2, [r3, #20]
20003394:	687b      	ldr	r3, [r7, #4]
20003396:	681b      	ldr	r3, [r3, #0]
20003398:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
2000339c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
2000339e:	687b      	ldr	r3, [r7, #4]
200033a0:	681b      	ldr	r3, [r3, #0]
200033a2:	68da      	ldr	r2, [r3, #12]
200033a4:	687b      	ldr	r3, [r7, #4]
200033a6:	681b      	ldr	r3, [r3, #0]
200033a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
200033ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
200033ae:	687b      	ldr	r3, [r7, #4]
200033b0:	2200      	movs	r2, #0
200033b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
200033b4:	687b      	ldr	r3, [r7, #4]
200033b6:	2220      	movs	r2, #32
200033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
200033bc:	687b      	ldr	r3, [r7, #4]
200033be:	2220      	movs	r2, #32
200033c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
200033c4:	687b      	ldr	r3, [r7, #4]
200033c6:	2200      	movs	r2, #0
200033c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
200033ca:	2300      	movs	r3, #0
}
200033cc:	4618      	mov	r0, r3
200033ce:	3708      	adds	r7, #8
200033d0:	46bd      	mov	sp, r7
200033d2:	bd80      	pop	{r7, pc}

200033d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
200033d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
200033d8:	b0c0      	sub	sp, #256	; 0x100
200033da:	af00      	add	r7, sp, #0
200033dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
200033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200033e4:	681b      	ldr	r3, [r3, #0]
200033e6:	691b      	ldr	r3, [r3, #16]
200033e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
200033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200033f0:	68d9      	ldr	r1, [r3, #12]
200033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200033f6:	681a      	ldr	r2, [r3, #0]
200033f8:	ea40 0301 	orr.w	r3, r0, r1
200033fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
200033fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003402:	689a      	ldr	r2, [r3, #8]
20003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003408:	691b      	ldr	r3, [r3, #16]
2000340a:	431a      	orrs	r2, r3
2000340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003410:	695b      	ldr	r3, [r3, #20]
20003412:	431a      	orrs	r2, r3
20003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003418:	69db      	ldr	r3, [r3, #28]
2000341a:	4313      	orrs	r3, r2
2000341c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
20003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003424:	681b      	ldr	r3, [r3, #0]
20003426:	68db      	ldr	r3, [r3, #12]
20003428:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
2000342c:	f021 010c 	bic.w	r1, r1, #12
20003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003434:	681a      	ldr	r2, [r3, #0]
20003436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
2000343a:	430b      	orrs	r3, r1
2000343c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
2000343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003442:	681b      	ldr	r3, [r3, #0]
20003444:	695b      	ldr	r3, [r3, #20]
20003446:	f423 7040 	bic.w	r0, r3, #768	; 0x300
2000344a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
2000344e:	6999      	ldr	r1, [r3, #24]
20003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003454:	681a      	ldr	r2, [r3, #0]
20003456:	ea40 0301 	orr.w	r3, r0, r1
2000345a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
2000345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003460:	681a      	ldr	r2, [r3, #0]
20003462:	4b8f      	ldr	r3, [pc, #572]	; (200036a0 <UART_SetConfig+0x2cc>)
20003464:	429a      	cmp	r2, r3
20003466:	d005      	beq.n	20003474 <UART_SetConfig+0xa0>
20003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
2000346c:	681a      	ldr	r2, [r3, #0]
2000346e:	4b8d      	ldr	r3, [pc, #564]	; (200036a4 <UART_SetConfig+0x2d0>)
20003470:	429a      	cmp	r2, r3
20003472:	d104      	bne.n	2000347e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
20003474:	f7ff fc36 	bl	20002ce4 <HAL_RCC_GetPCLK2Freq>
20003478:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
2000347c:	e003      	b.n	20003486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
2000347e:	f7ff fc1d 	bl	20002cbc <HAL_RCC_GetPCLK1Freq>
20003482:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
20003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
2000348a:	69db      	ldr	r3, [r3, #28]
2000348c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20003490:	f040 810c 	bne.w	200036ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
20003494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20003498:	2200      	movs	r2, #0
2000349a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
2000349e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
200034a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
200034a6:	4622      	mov	r2, r4
200034a8:	462b      	mov	r3, r5
200034aa:	1891      	adds	r1, r2, r2
200034ac:	65b9      	str	r1, [r7, #88]	; 0x58
200034ae:	415b      	adcs	r3, r3
200034b0:	65fb      	str	r3, [r7, #92]	; 0x5c
200034b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
200034b6:	4621      	mov	r1, r4
200034b8:	eb12 0801 	adds.w	r8, r2, r1
200034bc:	4629      	mov	r1, r5
200034be:	eb43 0901 	adc.w	r9, r3, r1
200034c2:	f04f 0200 	mov.w	r2, #0
200034c6:	f04f 0300 	mov.w	r3, #0
200034ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
200034ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
200034d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
200034d6:	4690      	mov	r8, r2
200034d8:	4699      	mov	r9, r3
200034da:	4623      	mov	r3, r4
200034dc:	eb18 0303 	adds.w	r3, r8, r3
200034e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
200034e4:	462b      	mov	r3, r5
200034e6:	eb49 0303 	adc.w	r3, r9, r3
200034ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
200034ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200034f2:	685b      	ldr	r3, [r3, #4]
200034f4:	2200      	movs	r2, #0
200034f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
200034fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
200034fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
20003502:	460b      	mov	r3, r1
20003504:	18db      	adds	r3, r3, r3
20003506:	653b      	str	r3, [r7, #80]	; 0x50
20003508:	4613      	mov	r3, r2
2000350a:	eb42 0303 	adc.w	r3, r2, r3
2000350e:	657b      	str	r3, [r7, #84]	; 0x54
20003510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
20003514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
20003518:	f7fd fe74 	bl	20001204 <__aeabi_uldivmod>
2000351c:	4602      	mov	r2, r0
2000351e:	460b      	mov	r3, r1
20003520:	4b61      	ldr	r3, [pc, #388]	; (200036a8 <UART_SetConfig+0x2d4>)
20003522:	fba3 2302 	umull	r2, r3, r3, r2
20003526:	095b      	lsrs	r3, r3, #5
20003528:	011c      	lsls	r4, r3, #4
2000352a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
2000352e:	2200      	movs	r2, #0
20003530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
20003534:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
20003538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
2000353c:	4642      	mov	r2, r8
2000353e:	464b      	mov	r3, r9
20003540:	1891      	adds	r1, r2, r2
20003542:	64b9      	str	r1, [r7, #72]	; 0x48
20003544:	415b      	adcs	r3, r3
20003546:	64fb      	str	r3, [r7, #76]	; 0x4c
20003548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
2000354c:	4641      	mov	r1, r8
2000354e:	eb12 0a01 	adds.w	sl, r2, r1
20003552:	4649      	mov	r1, r9
20003554:	eb43 0b01 	adc.w	fp, r3, r1
20003558:	f04f 0200 	mov.w	r2, #0
2000355c:	f04f 0300 	mov.w	r3, #0
20003560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
20003564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
20003568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
2000356c:	4692      	mov	sl, r2
2000356e:	469b      	mov	fp, r3
20003570:	4643      	mov	r3, r8
20003572:	eb1a 0303 	adds.w	r3, sl, r3
20003576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
2000357a:	464b      	mov	r3, r9
2000357c:	eb4b 0303 	adc.w	r3, fp, r3
20003580:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
20003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003588:	685b      	ldr	r3, [r3, #4]
2000358a:	2200      	movs	r2, #0
2000358c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
20003590:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
20003594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
20003598:	460b      	mov	r3, r1
2000359a:	18db      	adds	r3, r3, r3
2000359c:	643b      	str	r3, [r7, #64]	; 0x40
2000359e:	4613      	mov	r3, r2
200035a0:	eb42 0303 	adc.w	r3, r2, r3
200035a4:	647b      	str	r3, [r7, #68]	; 0x44
200035a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
200035aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
200035ae:	f7fd fe29 	bl	20001204 <__aeabi_uldivmod>
200035b2:	4602      	mov	r2, r0
200035b4:	460b      	mov	r3, r1
200035b6:	4611      	mov	r1, r2
200035b8:	4b3b      	ldr	r3, [pc, #236]	; (200036a8 <UART_SetConfig+0x2d4>)
200035ba:	fba3 2301 	umull	r2, r3, r3, r1
200035be:	095b      	lsrs	r3, r3, #5
200035c0:	2264      	movs	r2, #100	; 0x64
200035c2:	fb02 f303 	mul.w	r3, r2, r3
200035c6:	1acb      	subs	r3, r1, r3
200035c8:	00db      	lsls	r3, r3, #3
200035ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
200035ce:	4b36      	ldr	r3, [pc, #216]	; (200036a8 <UART_SetConfig+0x2d4>)
200035d0:	fba3 2302 	umull	r2, r3, r3, r2
200035d4:	095b      	lsrs	r3, r3, #5
200035d6:	005b      	lsls	r3, r3, #1
200035d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
200035dc:	441c      	add	r4, r3
200035de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
200035e2:	2200      	movs	r2, #0
200035e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
200035e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
200035ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
200035f0:	4642      	mov	r2, r8
200035f2:	464b      	mov	r3, r9
200035f4:	1891      	adds	r1, r2, r2
200035f6:	63b9      	str	r1, [r7, #56]	; 0x38
200035f8:	415b      	adcs	r3, r3
200035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
200035fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
20003600:	4641      	mov	r1, r8
20003602:	1851      	adds	r1, r2, r1
20003604:	6339      	str	r1, [r7, #48]	; 0x30
20003606:	4649      	mov	r1, r9
20003608:	414b      	adcs	r3, r1
2000360a:	637b      	str	r3, [r7, #52]	; 0x34
2000360c:	f04f 0200 	mov.w	r2, #0
20003610:	f04f 0300 	mov.w	r3, #0
20003614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
20003618:	4659      	mov	r1, fp
2000361a:	00cb      	lsls	r3, r1, #3
2000361c:	4651      	mov	r1, sl
2000361e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
20003622:	4651      	mov	r1, sl
20003624:	00ca      	lsls	r2, r1, #3
20003626:	4610      	mov	r0, r2
20003628:	4619      	mov	r1, r3
2000362a:	4603      	mov	r3, r0
2000362c:	4642      	mov	r2, r8
2000362e:	189b      	adds	r3, r3, r2
20003630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
20003634:	464b      	mov	r3, r9
20003636:	460a      	mov	r2, r1
20003638:	eb42 0303 	adc.w	r3, r2, r3
2000363c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
20003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003644:	685b      	ldr	r3, [r3, #4]
20003646:	2200      	movs	r2, #0
20003648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
2000364c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
20003650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
20003654:	460b      	mov	r3, r1
20003656:	18db      	adds	r3, r3, r3
20003658:	62bb      	str	r3, [r7, #40]	; 0x28
2000365a:	4613      	mov	r3, r2
2000365c:	eb42 0303 	adc.w	r3, r2, r3
20003660:	62fb      	str	r3, [r7, #44]	; 0x2c
20003662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
20003666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
2000366a:	f7fd fdcb 	bl	20001204 <__aeabi_uldivmod>
2000366e:	4602      	mov	r2, r0
20003670:	460b      	mov	r3, r1
20003672:	4b0d      	ldr	r3, [pc, #52]	; (200036a8 <UART_SetConfig+0x2d4>)
20003674:	fba3 1302 	umull	r1, r3, r3, r2
20003678:	095b      	lsrs	r3, r3, #5
2000367a:	2164      	movs	r1, #100	; 0x64
2000367c:	fb01 f303 	mul.w	r3, r1, r3
20003680:	1ad3      	subs	r3, r2, r3
20003682:	00db      	lsls	r3, r3, #3
20003684:	3332      	adds	r3, #50	; 0x32
20003686:	4a08      	ldr	r2, [pc, #32]	; (200036a8 <UART_SetConfig+0x2d4>)
20003688:	fba2 2303 	umull	r2, r3, r2, r3
2000368c:	095b      	lsrs	r3, r3, #5
2000368e:	f003 0207 	and.w	r2, r3, #7
20003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003696:	681b      	ldr	r3, [r3, #0]
20003698:	4422      	add	r2, r4
2000369a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
2000369c:	e106      	b.n	200038ac <UART_SetConfig+0x4d8>
2000369e:	bf00      	nop
200036a0:	40011000 	.word	0x40011000
200036a4:	40011400 	.word	0x40011400
200036a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
200036ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
200036b0:	2200      	movs	r2, #0
200036b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
200036b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
200036ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
200036be:	4642      	mov	r2, r8
200036c0:	464b      	mov	r3, r9
200036c2:	1891      	adds	r1, r2, r2
200036c4:	6239      	str	r1, [r7, #32]
200036c6:	415b      	adcs	r3, r3
200036c8:	627b      	str	r3, [r7, #36]	; 0x24
200036ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
200036ce:	4641      	mov	r1, r8
200036d0:	1854      	adds	r4, r2, r1
200036d2:	4649      	mov	r1, r9
200036d4:	eb43 0501 	adc.w	r5, r3, r1
200036d8:	f04f 0200 	mov.w	r2, #0
200036dc:	f04f 0300 	mov.w	r3, #0
200036e0:	00eb      	lsls	r3, r5, #3
200036e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
200036e6:	00e2      	lsls	r2, r4, #3
200036e8:	4614      	mov	r4, r2
200036ea:	461d      	mov	r5, r3
200036ec:	4643      	mov	r3, r8
200036ee:	18e3      	adds	r3, r4, r3
200036f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
200036f4:	464b      	mov	r3, r9
200036f6:	eb45 0303 	adc.w	r3, r5, r3
200036fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
200036fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003702:	685b      	ldr	r3, [r3, #4]
20003704:	2200      	movs	r2, #0
20003706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
2000370a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
2000370e:	f04f 0200 	mov.w	r2, #0
20003712:	f04f 0300 	mov.w	r3, #0
20003716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
2000371a:	4629      	mov	r1, r5
2000371c:	008b      	lsls	r3, r1, #2
2000371e:	4621      	mov	r1, r4
20003720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
20003724:	4621      	mov	r1, r4
20003726:	008a      	lsls	r2, r1, #2
20003728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
2000372c:	f7fd fd6a 	bl	20001204 <__aeabi_uldivmod>
20003730:	4602      	mov	r2, r0
20003732:	460b      	mov	r3, r1
20003734:	4b60      	ldr	r3, [pc, #384]	; (200038b8 <UART_SetConfig+0x4e4>)
20003736:	fba3 2302 	umull	r2, r3, r3, r2
2000373a:	095b      	lsrs	r3, r3, #5
2000373c:	011c      	lsls	r4, r3, #4
2000373e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20003742:	2200      	movs	r2, #0
20003744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
20003748:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
2000374c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
20003750:	4642      	mov	r2, r8
20003752:	464b      	mov	r3, r9
20003754:	1891      	adds	r1, r2, r2
20003756:	61b9      	str	r1, [r7, #24]
20003758:	415b      	adcs	r3, r3
2000375a:	61fb      	str	r3, [r7, #28]
2000375c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20003760:	4641      	mov	r1, r8
20003762:	1851      	adds	r1, r2, r1
20003764:	6139      	str	r1, [r7, #16]
20003766:	4649      	mov	r1, r9
20003768:	414b      	adcs	r3, r1
2000376a:	617b      	str	r3, [r7, #20]
2000376c:	f04f 0200 	mov.w	r2, #0
20003770:	f04f 0300 	mov.w	r3, #0
20003774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
20003778:	4659      	mov	r1, fp
2000377a:	00cb      	lsls	r3, r1, #3
2000377c:	4651      	mov	r1, sl
2000377e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
20003782:	4651      	mov	r1, sl
20003784:	00ca      	lsls	r2, r1, #3
20003786:	4610      	mov	r0, r2
20003788:	4619      	mov	r1, r3
2000378a:	4603      	mov	r3, r0
2000378c:	4642      	mov	r2, r8
2000378e:	189b      	adds	r3, r3, r2
20003790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
20003794:	464b      	mov	r3, r9
20003796:	460a      	mov	r2, r1
20003798:	eb42 0303 	adc.w	r3, r2, r3
2000379c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
200037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200037a4:	685b      	ldr	r3, [r3, #4]
200037a6:	2200      	movs	r2, #0
200037a8:	67bb      	str	r3, [r7, #120]	; 0x78
200037aa:	67fa      	str	r2, [r7, #124]	; 0x7c
200037ac:	f04f 0200 	mov.w	r2, #0
200037b0:	f04f 0300 	mov.w	r3, #0
200037b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
200037b8:	4649      	mov	r1, r9
200037ba:	008b      	lsls	r3, r1, #2
200037bc:	4641      	mov	r1, r8
200037be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
200037c2:	4641      	mov	r1, r8
200037c4:	008a      	lsls	r2, r1, #2
200037c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
200037ca:	f7fd fd1b 	bl	20001204 <__aeabi_uldivmod>
200037ce:	4602      	mov	r2, r0
200037d0:	460b      	mov	r3, r1
200037d2:	4611      	mov	r1, r2
200037d4:	4b38      	ldr	r3, [pc, #224]	; (200038b8 <UART_SetConfig+0x4e4>)
200037d6:	fba3 2301 	umull	r2, r3, r3, r1
200037da:	095b      	lsrs	r3, r3, #5
200037dc:	2264      	movs	r2, #100	; 0x64
200037de:	fb02 f303 	mul.w	r3, r2, r3
200037e2:	1acb      	subs	r3, r1, r3
200037e4:	011b      	lsls	r3, r3, #4
200037e6:	3332      	adds	r3, #50	; 0x32
200037e8:	4a33      	ldr	r2, [pc, #204]	; (200038b8 <UART_SetConfig+0x4e4>)
200037ea:	fba2 2303 	umull	r2, r3, r2, r3
200037ee:	095b      	lsrs	r3, r3, #5
200037f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
200037f4:	441c      	add	r4, r3
200037f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
200037fa:	2200      	movs	r2, #0
200037fc:	673b      	str	r3, [r7, #112]	; 0x70
200037fe:	677a      	str	r2, [r7, #116]	; 0x74
20003800:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
20003804:	4642      	mov	r2, r8
20003806:	464b      	mov	r3, r9
20003808:	1891      	adds	r1, r2, r2
2000380a:	60b9      	str	r1, [r7, #8]
2000380c:	415b      	adcs	r3, r3
2000380e:	60fb      	str	r3, [r7, #12]
20003810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
20003814:	4641      	mov	r1, r8
20003816:	1851      	adds	r1, r2, r1
20003818:	6039      	str	r1, [r7, #0]
2000381a:	4649      	mov	r1, r9
2000381c:	414b      	adcs	r3, r1
2000381e:	607b      	str	r3, [r7, #4]
20003820:	f04f 0200 	mov.w	r2, #0
20003824:	f04f 0300 	mov.w	r3, #0
20003828:	e9d7 ab00 	ldrd	sl, fp, [r7]
2000382c:	4659      	mov	r1, fp
2000382e:	00cb      	lsls	r3, r1, #3
20003830:	4651      	mov	r1, sl
20003832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
20003836:	4651      	mov	r1, sl
20003838:	00ca      	lsls	r2, r1, #3
2000383a:	4610      	mov	r0, r2
2000383c:	4619      	mov	r1, r3
2000383e:	4603      	mov	r3, r0
20003840:	4642      	mov	r2, r8
20003842:	189b      	adds	r3, r3, r2
20003844:	66bb      	str	r3, [r7, #104]	; 0x68
20003846:	464b      	mov	r3, r9
20003848:	460a      	mov	r2, r1
2000384a:	eb42 0303 	adc.w	r3, r2, r3
2000384e:	66fb      	str	r3, [r7, #108]	; 0x6c
20003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20003854:	685b      	ldr	r3, [r3, #4]
20003856:	2200      	movs	r2, #0
20003858:	663b      	str	r3, [r7, #96]	; 0x60
2000385a:	667a      	str	r2, [r7, #100]	; 0x64
2000385c:	f04f 0200 	mov.w	r2, #0
20003860:	f04f 0300 	mov.w	r3, #0
20003864:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
20003868:	4649      	mov	r1, r9
2000386a:	008b      	lsls	r3, r1, #2
2000386c:	4641      	mov	r1, r8
2000386e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
20003872:	4641      	mov	r1, r8
20003874:	008a      	lsls	r2, r1, #2
20003876:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
2000387a:	f7fd fcc3 	bl	20001204 <__aeabi_uldivmod>
2000387e:	4602      	mov	r2, r0
20003880:	460b      	mov	r3, r1
20003882:	4b0d      	ldr	r3, [pc, #52]	; (200038b8 <UART_SetConfig+0x4e4>)
20003884:	fba3 1302 	umull	r1, r3, r3, r2
20003888:	095b      	lsrs	r3, r3, #5
2000388a:	2164      	movs	r1, #100	; 0x64
2000388c:	fb01 f303 	mul.w	r3, r1, r3
20003890:	1ad3      	subs	r3, r2, r3
20003892:	011b      	lsls	r3, r3, #4
20003894:	3332      	adds	r3, #50	; 0x32
20003896:	4a08      	ldr	r2, [pc, #32]	; (200038b8 <UART_SetConfig+0x4e4>)
20003898:	fba2 2303 	umull	r2, r3, r2, r3
2000389c:	095b      	lsrs	r3, r3, #5
2000389e:	f003 020f 	and.w	r2, r3, #15
200038a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200038a6:	681b      	ldr	r3, [r3, #0]
200038a8:	4422      	add	r2, r4
200038aa:	609a      	str	r2, [r3, #8]
}
200038ac:	bf00      	nop
200038ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
200038b2:	46bd      	mov	sp, r7
200038b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
200038b8:	51eb851f 	.word	0x51eb851f

200038bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
200038bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 200038f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
200038c0:	480d      	ldr	r0, [pc, #52]	; (200038f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
200038c2:	490e      	ldr	r1, [pc, #56]	; (200038fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
200038c4:	4a0e      	ldr	r2, [pc, #56]	; (20003900 <LoopFillZerobss+0x1e>)
  movs r3, #0
200038c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
200038c8:	e002      	b.n	200038d0 <LoopCopyDataInit>

200038ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
200038ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
200038cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
200038ce:	3304      	adds	r3, #4

200038d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
200038d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
200038d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
200038d4:	d3f9      	bcc.n	200038ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
200038d6:	4a0b      	ldr	r2, [pc, #44]	; (20003904 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
200038d8:	4c0b      	ldr	r4, [pc, #44]	; (20003908 <LoopFillZerobss+0x26>)
  movs r3, #0
200038da:	2300      	movs	r3, #0
  b LoopFillZerobss
200038dc:	e001      	b.n	200038e2 <LoopFillZerobss>

200038de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
200038de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
200038e0:	3204      	adds	r2, #4

200038e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
200038e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
200038e4:	d3fb      	bcc.n	200038de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
200038e6:	f7fd fe8f 	bl	20001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
200038ea:	f000 fcd1 	bl	20004290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
200038ee:	f000 fa85 	bl	20003dfc <main>
  bx  lr    
200038f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
200038f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
200038f8:	20004354 	.word	0x20004354
  ldr r1, =_edata
200038fc:	2000436c 	.word	0x2000436c
  ldr r2, =_sidata
20003900:	20004354 	.word	0x20004354
  ldr r2, =_sbss
20003904:	2000436c 	.word	0x2000436c
  ldr r4, =_ebss
20003908:	200044ec 	.word	0x200044ec

2000390c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
2000390c:	e7fe      	b.n	2000390c <ADC_IRQHandler>

2000390e <HEXQueueInit>:
	uint8_t next; //array index of the next element to write
	uint8_t buf[HEX_QUEUE_LEN];
	uint8_t len;
} HEXQueue;

void HEXQueueInit(HEXQueue *q) {
2000390e:	b480      	push	{r7}
20003910:	b083      	sub	sp, #12
20003912:	af00      	add	r7, sp, #0
20003914:	6078      	str	r0, [r7, #4]
	q->start = 0;
20003916:	687b      	ldr	r3, [r7, #4]
20003918:	2200      	movs	r2, #0
2000391a:	701a      	strb	r2, [r3, #0]
	q->next = 0;
2000391c:	687b      	ldr	r3, [r7, #4]
2000391e:	2200      	movs	r2, #0
20003920:	705a      	strb	r2, [r3, #1]
	q->len = 0;
20003922:	687b      	ldr	r3, [r7, #4]
20003924:	2200      	movs	r2, #0
20003926:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
2000392a:	bf00      	nop
2000392c:	370c      	adds	r7, #12
2000392e:	46bd      	mov	sp, r7
20003930:	f85d 7b04 	ldr.w	r7, [sp], #4
20003934:	4770      	bx	lr

20003936 <HEXQueueFixBounds>:

void HEXQueueFixBounds(HEXQueue *q) {
20003936:	b480      	push	{r7}
20003938:	b083      	sub	sp, #12
2000393a:	af00      	add	r7, sp, #0
2000393c:	6078      	str	r0, [r7, #4]
	if(q->start >= HEX_QUEUE_LEN)
2000393e:	687b      	ldr	r3, [r7, #4]
20003940:	781b      	ldrb	r3, [r3, #0]
20003942:	2bc7      	cmp	r3, #199	; 0xc7
20003944:	d905      	bls.n	20003952 <HEXQueueFixBounds+0x1c>
		q->start -= HEX_QUEUE_LEN;
20003946:	687b      	ldr	r3, [r7, #4]
20003948:	781b      	ldrb	r3, [r3, #0]
2000394a:	3338      	adds	r3, #56	; 0x38
2000394c:	b2da      	uxtb	r2, r3
2000394e:	687b      	ldr	r3, [r7, #4]
20003950:	701a      	strb	r2, [r3, #0]
	if(q->next >= HEX_QUEUE_LEN)
20003952:	687b      	ldr	r3, [r7, #4]
20003954:	785b      	ldrb	r3, [r3, #1]
20003956:	2bc7      	cmp	r3, #199	; 0xc7
20003958:	d905      	bls.n	20003966 <HEXQueueFixBounds+0x30>
		q->next -= HEX_QUEUE_LEN;
2000395a:	687b      	ldr	r3, [r7, #4]
2000395c:	785b      	ldrb	r3, [r3, #1]
2000395e:	3338      	adds	r3, #56	; 0x38
20003960:	b2da      	uxtb	r2, r3
20003962:	687b      	ldr	r3, [r7, #4]
20003964:	705a      	strb	r2, [r3, #1]
	if(q->len > HEX_QUEUE_LEN)
20003966:	687b      	ldr	r3, [r7, #4]
20003968:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
2000396c:	2bc8      	cmp	r3, #200	; 0xc8
2000396e:	d903      	bls.n	20003978 <HEXQueueFixBounds+0x42>
		q->len = HEX_QUEUE_LEN;
20003970:	687b      	ldr	r3, [r7, #4]
20003972:	22c8      	movs	r2, #200	; 0xc8
20003974:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
20003978:	bf00      	nop
2000397a:	370c      	adds	r7, #12
2000397c:	46bd      	mov	sp, r7
2000397e:	f85d 7b04 	ldr.w	r7, [sp], #4
20003982:	4770      	bx	lr

20003984 <HEXQueueAdd>:

void HEXQueueAdd(HEXQueue *q, uint8_t element) {
20003984:	b580      	push	{r7, lr}
20003986:	b082      	sub	sp, #8
20003988:	af00      	add	r7, sp, #0
2000398a:	6078      	str	r0, [r7, #4]
2000398c:	460b      	mov	r3, r1
2000398e:	70fb      	strb	r3, [r7, #3]
	q->buf[q->next] = element;
20003990:	687b      	ldr	r3, [r7, #4]
20003992:	785b      	ldrb	r3, [r3, #1]
20003994:	461a      	mov	r2, r3
20003996:	687b      	ldr	r3, [r7, #4]
20003998:	4413      	add	r3, r2
2000399a:	78fa      	ldrb	r2, [r7, #3]
2000399c:	709a      	strb	r2, [r3, #2]
	q->next++;
2000399e:	687b      	ldr	r3, [r7, #4]
200039a0:	785b      	ldrb	r3, [r3, #1]
200039a2:	3301      	adds	r3, #1
200039a4:	b2da      	uxtb	r2, r3
200039a6:	687b      	ldr	r3, [r7, #4]
200039a8:	705a      	strb	r2, [r3, #1]
	q->len++;
200039aa:	687b      	ldr	r3, [r7, #4]
200039ac:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
200039b0:	3301      	adds	r3, #1
200039b2:	b2da      	uxtb	r2, r3
200039b4:	687b      	ldr	r3, [r7, #4]
200039b6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca

	if(q->len == HEX_QUEUE_LEN)
200039ba:	687b      	ldr	r3, [r7, #4]
200039bc:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
200039c0:	2bc8      	cmp	r3, #200	; 0xc8
200039c2:	d105      	bne.n	200039d0 <HEXQueueAdd+0x4c>
		q->start++;
200039c4:	687b      	ldr	r3, [r7, #4]
200039c6:	781b      	ldrb	r3, [r3, #0]
200039c8:	3301      	adds	r3, #1
200039ca:	b2da      	uxtb	r2, r3
200039cc:	687b      	ldr	r3, [r7, #4]
200039ce:	701a      	strb	r2, [r3, #0]

	HEXQueueFixBounds(q);
200039d0:	6878      	ldr	r0, [r7, #4]
200039d2:	f7ff ffb0 	bl	20003936 <HEXQueueFixBounds>
}
200039d6:	bf00      	nop
200039d8:	3708      	adds	r7, #8
200039da:	46bd      	mov	sp, r7
200039dc:	bd80      	pop	{r7, pc}
	...

200039e0 <HEXQueueGetIdx>:
void HEXQueueAddArray(HEXQueue *q, uint8_t *inbuf, uint8_t len) {
	for(uint8_t i = 0; i < len; i++)
		HEXQueueAdd(q, inbuf[i]);
}

uint8_t HEXQueueGetIdx(HEXQueue *q, uint8_t idx) {
200039e0:	b480      	push	{r7}
200039e2:	b085      	sub	sp, #20
200039e4:	af00      	add	r7, sp, #0
200039e6:	6078      	str	r0, [r7, #4]
200039e8:	460b      	mov	r3, r1
200039ea:	70fb      	strb	r3, [r7, #3]
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
200039ec:	78fb      	ldrb	r3, [r7, #3]
200039ee:	687a      	ldr	r2, [r7, #4]
200039f0:	7812      	ldrb	r2, [r2, #0]
200039f2:	4413      	add	r3, r2
200039f4:	4a0a      	ldr	r2, [pc, #40]	; (20003a20 <HEXQueueGetIdx+0x40>)
200039f6:	fb82 1203 	smull	r1, r2, r2, r3
200039fa:	1191      	asrs	r1, r2, #6
200039fc:	17da      	asrs	r2, r3, #31
200039fe:	1a8a      	subs	r2, r1, r2
20003a00:	21c8      	movs	r1, #200	; 0xc8
20003a02:	fb01 f202 	mul.w	r2, r1, r2
20003a06:	1a9a      	subs	r2, r3, r2
20003a08:	4613      	mov	r3, r2
20003a0a:	73fb      	strb	r3, [r7, #15]
	return q->buf[retIdx];
20003a0c:	7bfb      	ldrb	r3, [r7, #15]
20003a0e:	687a      	ldr	r2, [r7, #4]
20003a10:	4413      	add	r3, r2
20003a12:	789b      	ldrb	r3, [r3, #2]
}
20003a14:	4618      	mov	r0, r3
20003a16:	3714      	adds	r7, #20
20003a18:	46bd      	mov	sp, r7
20003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
20003a1e:	4770      	bx	lr
20003a20:	51eb851f 	.word	0x51eb851f

20003a24 <HEXQueueExtractHex>:


//pulls an Intel hex command out of the buffer if one exists
	//returns 1 if command extracted, 0 if none found
uint8_t HEXQueueExtractHex(HEXQueue *q, uint8_t *outBuf) {
20003a24:	b590      	push	{r4, r7, lr}
20003a26:	b085      	sub	sp, #20
20003a28:	af00      	add	r7, sp, #0
20003a2a:	6078      	str	r0, [r7, #4]
20003a2c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < q->len - 5; i++) { //scan where queue is full enough for minimum len hex command
20003a2e:	2300      	movs	r3, #0
20003a30:	73fb      	strb	r3, [r7, #15]
20003a32:	e064      	b.n	20003afe <HEXQueueExtractHex+0xda>
		if(HEXQueueGetIdx(q, i) == ':') {
20003a34:	7bfb      	ldrb	r3, [r7, #15]
20003a36:	4619      	mov	r1, r3
20003a38:	6878      	ldr	r0, [r7, #4]
20003a3a:	f7ff ffd1 	bl	200039e0 <HEXQueueGetIdx>
20003a3e:	4603      	mov	r3, r0
20003a40:	2b3a      	cmp	r3, #58	; 0x3a
20003a42:	d159      	bne.n	20003af8 <HEXQueueExtractHex+0xd4>
			//check if complete hex command
			uint8_t dataLen = HEXQueueGetIdx(q, i+1);
20003a44:	7bfb      	ldrb	r3, [r7, #15]
20003a46:	3301      	adds	r3, #1
20003a48:	b2db      	uxtb	r3, r3
20003a4a:	4619      	mov	r1, r3
20003a4c:	6878      	ldr	r0, [r7, #4]
20003a4e:	f7ff ffc7 	bl	200039e0 <HEXQueueGetIdx>
20003a52:	4603      	mov	r3, r0
20003a54:	72fb      	strb	r3, [r7, #11]
			if((q->len - i) >= 5 + dataLen) { //if hex fully received
20003a56:	7afb      	ldrb	r3, [r7, #11]
20003a58:	1d1a      	adds	r2, r3, #4
20003a5a:	687b      	ldr	r3, [r7, #4]
20003a5c:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
20003a60:	4619      	mov	r1, r3
20003a62:	7bfb      	ldrb	r3, [r7, #15]
20003a64:	1acb      	subs	r3, r1, r3
20003a66:	429a      	cmp	r2, r3
20003a68:	da46      	bge.n	20003af8 <HEXQueueExtractHex+0xd4>
				//check checksum
				uint8_t checksum = 0;
20003a6a:	2300      	movs	r3, #0
20003a6c:	73bb      	strb	r3, [r7, #14]
				for(uint8_t j = 1; j < dataLen + 5; j++) {
20003a6e:	2301      	movs	r3, #1
20003a70:	737b      	strb	r3, [r7, #13]
20003a72:	e00f      	b.n	20003a94 <HEXQueueExtractHex+0x70>
					checksum += HEXQueueGetIdx(q, i+j);
20003a74:	7bfa      	ldrb	r2, [r7, #15]
20003a76:	7b7b      	ldrb	r3, [r7, #13]
20003a78:	4413      	add	r3, r2
20003a7a:	b2db      	uxtb	r3, r3
20003a7c:	4619      	mov	r1, r3
20003a7e:	6878      	ldr	r0, [r7, #4]
20003a80:	f7ff ffae 	bl	200039e0 <HEXQueueGetIdx>
20003a84:	4603      	mov	r3, r0
20003a86:	461a      	mov	r2, r3
20003a88:	7bbb      	ldrb	r3, [r7, #14]
20003a8a:	4413      	add	r3, r2
20003a8c:	73bb      	strb	r3, [r7, #14]
				for(uint8_t j = 1; j < dataLen + 5; j++) {
20003a8e:	7b7b      	ldrb	r3, [r7, #13]
20003a90:	3301      	adds	r3, #1
20003a92:	737b      	strb	r3, [r7, #13]
20003a94:	7afb      	ldrb	r3, [r7, #11]
20003a96:	1d1a      	adds	r2, r3, #4
20003a98:	7b7b      	ldrb	r3, [r7, #13]
20003a9a:	429a      	cmp	r2, r3
20003a9c:	daea      	bge.n	20003a74 <HEXQueueExtractHex+0x50>
				}
				checksum = (~checksum)+1; //2's compliment
20003a9e:	7bbb      	ldrb	r3, [r7, #14]
20003aa0:	425b      	negs	r3, r3
20003aa2:	73bb      	strb	r3, [r7, #14]
				if(checksum != HEXQueueGetIdx(q, i+dataLen+5)) {
20003aa4:	7bfa      	ldrb	r2, [r7, #15]
20003aa6:	7afb      	ldrb	r3, [r7, #11]
20003aa8:	4413      	add	r3, r2
20003aaa:	b2db      	uxtb	r3, r3
20003aac:	3305      	adds	r3, #5
20003aae:	b2db      	uxtb	r3, r3
20003ab0:	4619      	mov	r1, r3
20003ab2:	6878      	ldr	r0, [r7, #4]
20003ab4:	f7ff ff94 	bl	200039e0 <HEXQueueGetIdx>
20003ab8:	4603      	mov	r3, r0
20003aba:	461a      	mov	r2, r3
20003abc:	7bbb      	ldrb	r3, [r7, #14]
20003abe:	4293      	cmp	r3, r2
20003ac0:	d119      	bne.n	20003af6 <HEXQueueExtractHex+0xd2>
					continue;
				}

				//copy hex command to out buffer
				for(uint8_t j = 1; j < dataLen + 6; j++)
20003ac2:	2301      	movs	r3, #1
20003ac4:	733b      	strb	r3, [r7, #12]
20003ac6:	e00f      	b.n	20003ae8 <HEXQueueExtractHex+0xc4>
					outBuf[j-1] = HEXQueueGetIdx(q, i+j);
20003ac8:	7bfa      	ldrb	r2, [r7, #15]
20003aca:	7b3b      	ldrb	r3, [r7, #12]
20003acc:	4413      	add	r3, r2
20003ace:	b2d9      	uxtb	r1, r3
20003ad0:	7b3b      	ldrb	r3, [r7, #12]
20003ad2:	3b01      	subs	r3, #1
20003ad4:	683a      	ldr	r2, [r7, #0]
20003ad6:	18d4      	adds	r4, r2, r3
20003ad8:	6878      	ldr	r0, [r7, #4]
20003ada:	f7ff ff81 	bl	200039e0 <HEXQueueGetIdx>
20003ade:	4603      	mov	r3, r0
20003ae0:	7023      	strb	r3, [r4, #0]
				for(uint8_t j = 1; j < dataLen + 6; j++)
20003ae2:	7b3b      	ldrb	r3, [r7, #12]
20003ae4:	3301      	adds	r3, #1
20003ae6:	733b      	strb	r3, [r7, #12]
20003ae8:	7afb      	ldrb	r3, [r7, #11]
20003aea:	1d5a      	adds	r2, r3, #5
20003aec:	7b3b      	ldrb	r3, [r7, #12]
20003aee:	429a      	cmp	r2, r3
20003af0:	daea      	bge.n	20003ac8 <HEXQueueExtractHex+0xa4>
				return 1;
20003af2:	2301      	movs	r3, #1
20003af4:	e00b      	b.n	20003b0e <HEXQueueExtractHex+0xea>
					continue;
20003af6:	bf00      	nop
	for(uint8_t i = 0; i < q->len - 5; i++) { //scan where queue is full enough for minimum len hex command
20003af8:	7bfb      	ldrb	r3, [r7, #15]
20003afa:	3301      	adds	r3, #1
20003afc:	73fb      	strb	r3, [r7, #15]
20003afe:	7bfa      	ldrb	r2, [r7, #15]
20003b00:	687b      	ldr	r3, [r7, #4]
20003b02:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
20003b06:	3b05      	subs	r3, #5
20003b08:	429a      	cmp	r2, r3
20003b0a:	db93      	blt.n	20003a34 <HEXQueueExtractHex+0x10>
			}
		}
	}
	return 0;
20003b0c:	2300      	movs	r3, #0
}
20003b0e:	4618      	mov	r0, r3
20003b10:	3714      	adds	r7, #20
20003b12:	46bd      	mov	sp, r7
20003b14:	bd90      	pop	{r4, r7, pc}
	...

20003b18 <MX_TIM7_Init>:
static uint32_t GetSector(uint32_t Address);
static uint32_t GetSectorSize(uint32_t Sector);
/* Private functions ---------------------------------------------------------*/

static void MX_TIM7_Init(void)
{
20003b18:	b580      	push	{r7, lr}
20003b1a:	b082      	sub	sp, #8
20003b1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
20003b1e:	463b      	mov	r3, r7
20003b20:	2200      	movs	r2, #0
20003b22:	601a      	str	r2, [r3, #0]
20003b24:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
20003b26:	4b14      	ldr	r3, [pc, #80]	; (20003b78 <MX_TIM7_Init+0x60>)
20003b28:	4a14      	ldr	r2, [pc, #80]	; (20003b7c <MX_TIM7_Init+0x64>)
20003b2a:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 17999;
20003b2c:	4b12      	ldr	r3, [pc, #72]	; (20003b78 <MX_TIM7_Init+0x60>)
20003b2e:	f244 624f 	movw	r2, #17999	; 0x464f
20003b32:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
20003b34:	4b10      	ldr	r3, [pc, #64]	; (20003b78 <MX_TIM7_Init+0x60>)
20003b36:	2200      	movs	r2, #0
20003b38:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 4999;
20003b3a:	4b0f      	ldr	r3, [pc, #60]	; (20003b78 <MX_TIM7_Init+0x60>)
20003b3c:	f241 3287 	movw	r2, #4999	; 0x1387
20003b40:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
20003b42:	4b0d      	ldr	r3, [pc, #52]	; (20003b78 <MX_TIM7_Init+0x60>)
20003b44:	2200      	movs	r2, #0
20003b46:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
20003b48:	480b      	ldr	r0, [pc, #44]	; (20003b78 <MX_TIM7_Init+0x60>)
20003b4a:	f7ff f8df 	bl	20002d0c <HAL_TIM_Base_Init>
20003b4e:	4603      	mov	r3, r0
20003b50:	2b00      	cmp	r3, #0
20003b52:	d000      	beq.n	20003b56 <MX_TIM7_Init+0x3e>
	{
		for(;;);
20003b54:	e7fe      	b.n	20003b54 <MX_TIM7_Init+0x3c>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
20003b56:	2300      	movs	r3, #0
20003b58:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
20003b5a:	2300      	movs	r3, #0
20003b5c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
20003b5e:	463b      	mov	r3, r7
20003b60:	4619      	mov	r1, r3
20003b62:	4805      	ldr	r0, [pc, #20]	; (20003b78 <MX_TIM7_Init+0x60>)
20003b64:	f7ff fb56 	bl	20003214 <HAL_TIMEx_MasterConfigSynchronization>
20003b68:	4603      	mov	r3, r0
20003b6a:	2b00      	cmp	r3, #0
20003b6c:	d000      	beq.n	20003b70 <MX_TIM7_Init+0x58>
	{
		for(;;);
20003b6e:	e7fe      	b.n	20003b6e <MX_TIM7_Init+0x56>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
20003b70:	bf00      	nop
20003b72:	3708      	adds	r7, #8
20003b74:	46bd      	mov	sp, r7
20003b76:	bd80      	pop	{r7, pc}
20003b78:	20004414 	.word	0x20004414
20003b7c:	40001400 	.word	0x40001400

20003b80 <TinyBLInit>:

void TinyBLInit(void) {
20003b80:	b580      	push	{r7, lr}
20003b82:	b094      	sub	sp, #80	; 0x50
20003b84:	af00      	add	r7, sp, #0
	HAL_Init();
20003b86:	f7fd fd77 	bl	20001678 <HAL_Init>

	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20003b8a:	f107 031c 	add.w	r3, r7, #28
20003b8e:	2234      	movs	r2, #52	; 0x34
20003b90:	2100      	movs	r1, #0
20003b92:	4618      	mov	r0, r3
20003b94:	f000 fb74 	bl	20004280 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20003b98:	f107 0308 	add.w	r3, r7, #8
20003b9c:	2200      	movs	r2, #0
20003b9e:	601a      	str	r2, [r3, #0]
20003ba0:	605a      	str	r2, [r3, #4]
20003ba2:	609a      	str	r2, [r3, #8]
20003ba4:	60da      	str	r2, [r3, #12]
20003ba6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
20003ba8:	2300      	movs	r3, #0
20003baa:	607b      	str	r3, [r7, #4]
20003bac:	4b3b      	ldr	r3, [pc, #236]	; (20003c9c <TinyBLInit+0x11c>)
20003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20003bb0:	4a3a      	ldr	r2, [pc, #232]	; (20003c9c <TinyBLInit+0x11c>)
20003bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20003bb6:	6413      	str	r3, [r2, #64]	; 0x40
20003bb8:	4b38      	ldr	r3, [pc, #224]	; (20003c9c <TinyBLInit+0x11c>)
20003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20003bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20003bc0:	607b      	str	r3, [r7, #4]
20003bc2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20003bc4:	2300      	movs	r3, #0
20003bc6:	603b      	str	r3, [r7, #0]
20003bc8:	4b35      	ldr	r3, [pc, #212]	; (20003ca0 <TinyBLInit+0x120>)
20003bca:	681b      	ldr	r3, [r3, #0]
20003bcc:	4a34      	ldr	r2, [pc, #208]	; (20003ca0 <TinyBLInit+0x120>)
20003bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
20003bd2:	6013      	str	r3, [r2, #0]
20003bd4:	4b32      	ldr	r3, [pc, #200]	; (20003ca0 <TinyBLInit+0x120>)
20003bd6:	681b      	ldr	r3, [r3, #0]
20003bd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
20003bdc:	603b      	str	r3, [r7, #0]
20003bde:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
20003be0:	2302      	movs	r3, #2
20003be2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
20003be4:	2301      	movs	r3, #1
20003be6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
20003be8:	2310      	movs	r3, #16
20003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20003bec:	2302      	movs	r3, #2
20003bee:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
20003bf0:	2300      	movs	r3, #0
20003bf2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
20003bf4:	2308      	movs	r3, #8
20003bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
20003bf8:	23b4      	movs	r3, #180	; 0xb4
20003bfa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
20003bfc:	2302      	movs	r3, #2
20003bfe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
20003c00:	2302      	movs	r3, #2
20003c02:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
20003c04:	2302      	movs	r3, #2
20003c06:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20003c08:	f107 031c 	add.w	r3, r7, #28
20003c0c:	4618      	mov	r0, r3
20003c0e:	f7fe fbdd 	bl	200023cc <HAL_RCC_OscConfig>
20003c12:	4603      	mov	r3, r0
20003c14:	2b00      	cmp	r3, #0
20003c16:	d000      	beq.n	20003c1a <TinyBLInit+0x9a>
	{
		for(;;);
20003c18:	e7fe      	b.n	20003c18 <TinyBLInit+0x98>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
20003c1a:	f7fe fb87 	bl	2000232c <HAL_PWREx_EnableOverDrive>
20003c1e:	4603      	mov	r3, r0
20003c20:	2b00      	cmp	r3, #0
20003c22:	d000      	beq.n	20003c26 <TinyBLInit+0xa6>
	{
		for(;;);
20003c24:	e7fe      	b.n	20003c24 <TinyBLInit+0xa4>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20003c26:	230f      	movs	r3, #15
20003c28:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20003c2a:	2302      	movs	r3, #2
20003c2c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20003c2e:	2300      	movs	r3, #0
20003c30:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
20003c32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
20003c36:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
20003c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20003c3c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
20003c3e:	f107 0308 	add.w	r3, r7, #8
20003c42:	2105      	movs	r1, #5
20003c44:	4618      	mov	r0, r3
20003c46:	f7fe fe41 	bl	200028cc <HAL_RCC_ClockConfig>
20003c4a:	4603      	mov	r3, r0
20003c4c:	2b00      	cmp	r3, #0
20003c4e:	d000      	beq.n	20003c52 <TinyBLInit+0xd2>
	{
		for(;;);
20003c50:	e7fe      	b.n	20003c50 <TinyBLInit+0xd0>
	GPIO_InitStruct.Pin = GPIO_PIN_9;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);*/


	UartHandle.Instance        = USART3;
20003c52:	4b14      	ldr	r3, [pc, #80]	; (20003ca4 <TinyBLInit+0x124>)
20003c54:	4a14      	ldr	r2, [pc, #80]	; (20003ca8 <TinyBLInit+0x128>)
20003c56:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 57600;
20003c58:	4b12      	ldr	r3, [pc, #72]	; (20003ca4 <TinyBLInit+0x124>)
20003c5a:	f44f 4261 	mov.w	r2, #57600	; 0xe100
20003c5e:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
20003c60:	4b10      	ldr	r3, [pc, #64]	; (20003ca4 <TinyBLInit+0x124>)
20003c62:	2200      	movs	r2, #0
20003c64:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
20003c66:	4b0f      	ldr	r3, [pc, #60]	; (20003ca4 <TinyBLInit+0x124>)
20003c68:	2200      	movs	r2, #0
20003c6a:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
20003c6c:	4b0d      	ldr	r3, [pc, #52]	; (20003ca4 <TinyBLInit+0x124>)
20003c6e:	2200      	movs	r2, #0
20003c70:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
20003c72:	4b0c      	ldr	r3, [pc, #48]	; (20003ca4 <TinyBLInit+0x124>)
20003c74:	2200      	movs	r2, #0
20003c76:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
20003c78:	4b0a      	ldr	r3, [pc, #40]	; (20003ca4 <TinyBLInit+0x124>)
20003c7a:	220c      	movs	r2, #12
20003c7c:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
20003c7e:	4b09      	ldr	r3, [pc, #36]	; (20003ca4 <TinyBLInit+0x124>)
20003c80:	2200      	movs	r2, #0
20003c82:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
20003c84:	4807      	ldr	r0, [pc, #28]	; (20003ca4 <TinyBLInit+0x124>)
20003c86:	f7ff fb55 	bl	20003334 <HAL_UART_Init>
20003c8a:	4603      	mov	r3, r0
20003c8c:	2b00      	cmp	r3, #0
20003c8e:	d000      	beq.n	20003c92 <TinyBLInit+0x112>
	{
		//Initialization Error
		for(;;);
20003c90:	e7fe      	b.n	20003c90 <TinyBLInit+0x110>
	}

}
20003c92:	bf00      	nop
20003c94:	3750      	adds	r7, #80	; 0x50
20003c96:	46bd      	mov	sp, r7
20003c98:	bd80      	pop	{r7, pc}
20003c9a:	bf00      	nop
20003c9c:	40023800 	.word	0x40023800
20003ca0:	40007000 	.word	0x40007000
20003ca4:	200043b8 	.word	0x200043b8
20003ca8:	40004800 	.word	0x40004800

20003cac <FlashEraseSectorIfNeeded>:

uint32_t erasedSectors[8];
uint8_t erasedSectorsLen = 0;
//erase sector if not already erased
void FlashEraseSectorIfNeeded(uint32_t addr) {
20003cac:	b580      	push	{r7, lr}
20003cae:	b084      	sub	sp, #16
20003cb0:	af00      	add	r7, sp, #0
20003cb2:	6078      	str	r0, [r7, #4]
	//get current flash sector
	uint32_t sector = GetSector(addr);
20003cb4:	6878      	ldr	r0, [r7, #4]
20003cb6:	f000 f98b 	bl	20003fd0 <GetSector>
20003cba:	60b8      	str	r0, [r7, #8]
	for(uint8_t i = 0; i < erasedSectorsLen; i++) {
20003cbc:	2300      	movs	r3, #0
20003cbe:	73fb      	strb	r3, [r7, #15]
20003cc0:	e009      	b.n	20003cd6 <FlashEraseSectorIfNeeded+0x2a>
		if(sector == erasedSectors[i])
20003cc2:	7bfb      	ldrb	r3, [r7, #15]
20003cc4:	4a1b      	ldr	r2, [pc, #108]	; (20003d34 <FlashEraseSectorIfNeeded+0x88>)
20003cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20003cca:	68ba      	ldr	r2, [r7, #8]
20003ccc:	429a      	cmp	r2, r3
20003cce:	d02c      	beq.n	20003d2a <FlashEraseSectorIfNeeded+0x7e>
	for(uint8_t i = 0; i < erasedSectorsLen; i++) {
20003cd0:	7bfb      	ldrb	r3, [r7, #15]
20003cd2:	3301      	adds	r3, #1
20003cd4:	73fb      	strb	r3, [r7, #15]
20003cd6:	4b18      	ldr	r3, [pc, #96]	; (20003d38 <FlashEraseSectorIfNeeded+0x8c>)
20003cd8:	781b      	ldrb	r3, [r3, #0]
20003cda:	7bfa      	ldrb	r2, [r7, #15]
20003cdc:	429a      	cmp	r2, r3
20003cde:	d3f0      	bcc.n	20003cc2 <FlashEraseSectorIfNeeded+0x16>
			return;
	}

	//erasing sector
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
20003ce0:	4b16      	ldr	r3, [pc, #88]	; (20003d3c <FlashEraseSectorIfNeeded+0x90>)
20003ce2:	2200      	movs	r2, #0
20003ce4:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
20003ce6:	4b15      	ldr	r3, [pc, #84]	; (20003d3c <FlashEraseSectorIfNeeded+0x90>)
20003ce8:	2202      	movs	r2, #2
20003cea:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = sector;
20003cec:	4a13      	ldr	r2, [pc, #76]	; (20003d3c <FlashEraseSectorIfNeeded+0x90>)
20003cee:	68bb      	ldr	r3, [r7, #8]
20003cf0:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = 1;
20003cf2:	4b12      	ldr	r3, [pc, #72]	; (20003d3c <FlashEraseSectorIfNeeded+0x90>)
20003cf4:	2201      	movs	r2, #1
20003cf6:	60da      	str	r2, [r3, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
20003cf8:	4911      	ldr	r1, [pc, #68]	; (20003d40 <FlashEraseSectorIfNeeded+0x94>)
20003cfa:	4810      	ldr	r0, [pc, #64]	; (20003d3c <FlashEraseSectorIfNeeded+0x90>)
20003cfc:	f7fe f82c 	bl	20001d58 <HAL_FLASHEx_Erase>
20003d00:	4603      	mov	r3, r0
20003d02:	2b00      	cmp	r3, #0
20003d04:	d003      	beq.n	20003d0e <FlashEraseSectorIfNeeded+0x62>
		//Error occurred while sector erase.
		//User can add here some code to deal with this error.
		//SECTORError will contain the faulty sector and then to know the code error on this sector,
		//user can call function 'HAL_FLASH_GetError()'
		while (1) {
			BSP_LED_On(LED3);
20003d06:	2002      	movs	r0, #2
20003d08:	f7fd fc4a 	bl	200015a0 <BSP_LED_On>
20003d0c:	e7fb      	b.n	20003d06 <FlashEraseSectorIfNeeded+0x5a>
		}
	}
	erasedSectors[erasedSectorsLen] = sector;
20003d0e:	4b0a      	ldr	r3, [pc, #40]	; (20003d38 <FlashEraseSectorIfNeeded+0x8c>)
20003d10:	781b      	ldrb	r3, [r3, #0]
20003d12:	4619      	mov	r1, r3
20003d14:	4a07      	ldr	r2, [pc, #28]	; (20003d34 <FlashEraseSectorIfNeeded+0x88>)
20003d16:	68bb      	ldr	r3, [r7, #8]
20003d18:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	erasedSectorsLen++;
20003d1c:	4b06      	ldr	r3, [pc, #24]	; (20003d38 <FlashEraseSectorIfNeeded+0x8c>)
20003d1e:	781b      	ldrb	r3, [r3, #0]
20003d20:	3301      	adds	r3, #1
20003d22:	b2da      	uxtb	r2, r3
20003d24:	4b04      	ldr	r3, [pc, #16]	; (20003d38 <FlashEraseSectorIfNeeded+0x8c>)
20003d26:	701a      	strb	r2, [r3, #0]
	return;
20003d28:	e000      	b.n	20003d2c <FlashEraseSectorIfNeeded+0x80>
			return;
20003d2a:	bf00      	nop
}
20003d2c:	3710      	adds	r7, #16
20003d2e:	46bd      	mov	sp, r7
20003d30:	bd80      	pop	{r7, pc}
20003d32:	bf00      	nop
20003d34:	2000445c 	.word	0x2000445c
20003d38:	2000447c 	.word	0x2000447c
20003d3c:	20004400 	.word	0x20004400
20003d40:	200043b4 	.word	0x200043b4

20003d44 <ProcessHexFlash>:

uint8_t hexBuf[100];
uint32_t addrOffset = 0;
//process hex and flash
//returns 0 if success, 1 if end of flashing, -1 if error
uint8_t ProcessHexFlash() {
20003d44:	b5b0      	push	{r4, r5, r7, lr}
20003d46:	b082      	sub	sp, #8
20003d48:	af00      	add	r7, sp, #0
	uint8_t dataLen = hexBuf[0];
20003d4a:	4b2a      	ldr	r3, [pc, #168]	; (20003df4 <ProcessHexFlash+0xb0>)
20003d4c:	781b      	ldrb	r3, [r3, #0]
20003d4e:	71bb      	strb	r3, [r7, #6]
	uint8_t cmdType = hexBuf[3];
20003d50:	4b28      	ldr	r3, [pc, #160]	; (20003df4 <ProcessHexFlash+0xb0>)
20003d52:	78db      	ldrb	r3, [r3, #3]
20003d54:	717b      	strb	r3, [r7, #5]
	if(cmdType == 0) { //data
20003d56:	797b      	ldrb	r3, [r7, #5]
20003d58:	2b00      	cmp	r3, #0
20003d5a:	d12e      	bne.n	20003dba <ProcessHexFlash+0x76>
		uint32_t flashAddr = addrOffset + (((uint32_t)hexBuf[1])<<8) + (uint32_t)hexBuf[2];
20003d5c:	4b25      	ldr	r3, [pc, #148]	; (20003df4 <ProcessHexFlash+0xb0>)
20003d5e:	785b      	ldrb	r3, [r3, #1]
20003d60:	021a      	lsls	r2, r3, #8
20003d62:	4b25      	ldr	r3, [pc, #148]	; (20003df8 <ProcessHexFlash+0xb4>)
20003d64:	681b      	ldr	r3, [r3, #0]
20003d66:	4413      	add	r3, r2
20003d68:	4a22      	ldr	r2, [pc, #136]	; (20003df4 <ProcessHexFlash+0xb0>)
20003d6a:	7892      	ldrb	r2, [r2, #2]
20003d6c:	4413      	add	r3, r2
20003d6e:	603b      	str	r3, [r7, #0]
		//I'm making a brave assumption here. I'm assuming a single data record won't extend between
		//multiple sectors. Is this a safe assumption? I dunno. But it'll save more clock cycles than
		//a half-baked solution
		FlashEraseSectorIfNeeded(flashAddr);
20003d70:	6838      	ldr	r0, [r7, #0]
20003d72:	f7ff ff9b 	bl	20003cac <FlashEraseSectorIfNeeded>

		for(uint8_t i = 0; i < dataLen; i++) {
20003d76:	2300      	movs	r3, #0
20003d78:	71fb      	strb	r3, [r7, #7]
20003d7a:	e019      	b.n	20003db0 <ProcessHexFlash+0x6c>
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddr+i, hexBuf[i+4]) != HAL_OK) {
20003d7c:	79fa      	ldrb	r2, [r7, #7]
20003d7e:	683b      	ldr	r3, [r7, #0]
20003d80:	18d1      	adds	r1, r2, r3
20003d82:	79fb      	ldrb	r3, [r7, #7]
20003d84:	3304      	adds	r3, #4
20003d86:	4a1b      	ldr	r2, [pc, #108]	; (20003df4 <ProcessHexFlash+0xb0>)
20003d88:	5cd3      	ldrb	r3, [r2, r3]
20003d8a:	b2db      	uxtb	r3, r3
20003d8c:	2200      	movs	r2, #0
20003d8e:	461c      	mov	r4, r3
20003d90:	4615      	mov	r5, r2
20003d92:	4622      	mov	r2, r4
20003d94:	462b      	mov	r3, r5
20003d96:	2000      	movs	r0, #0
20003d98:	f7fd fe18 	bl	200019cc <HAL_FLASH_Program>
20003d9c:	4603      	mov	r3, r0
20003d9e:	2b00      	cmp	r3, #0
20003da0:	d003      	beq.n	20003daa <ProcessHexFlash+0x66>
				// Error occurred while writing data in Flash memory.
				//User can add here some code to deal with this error
				while (1)
				{
					BSP_LED_On(LED3);
20003da2:	2002      	movs	r0, #2
20003da4:	f7fd fbfc 	bl	200015a0 <BSP_LED_On>
20003da8:	e7fb      	b.n	20003da2 <ProcessHexFlash+0x5e>
		for(uint8_t i = 0; i < dataLen; i++) {
20003daa:	79fb      	ldrb	r3, [r7, #7]
20003dac:	3301      	adds	r3, #1
20003dae:	71fb      	strb	r3, [r7, #7]
20003db0:	79fa      	ldrb	r2, [r7, #7]
20003db2:	79bb      	ldrb	r3, [r7, #6]
20003db4:	429a      	cmp	r2, r3
20003db6:	d3e1      	bcc.n	20003d7c <ProcessHexFlash+0x38>
20003db8:	e016      	b.n	20003de8 <ProcessHexFlash+0xa4>
				}
			}

		}
	}
	else if(cmdType == 1) { //EOF
20003dba:	797b      	ldrb	r3, [r7, #5]
20003dbc:	2b01      	cmp	r3, #1
20003dbe:	d101      	bne.n	20003dc4 <ProcessHexFlash+0x80>
		return 1;
20003dc0:	2301      	movs	r3, #1
20003dc2:	e012      	b.n	20003dea <ProcessHexFlash+0xa6>
	}
	else if (cmdType == 2) { //extended segment address
20003dc4:	797b      	ldrb	r3, [r7, #5]
20003dc6:	2b02      	cmp	r3, #2
20003dc8:	d00e      	beq.n	20003de8 <ProcessHexFlash+0xa4>
		//should not be used so don't bother
	}
	else if (cmdType == 3) { //start segment address
20003dca:	797b      	ldrb	r3, [r7, #5]
20003dcc:	2b03      	cmp	r3, #3
20003dce:	d00b      	beq.n	20003de8 <ProcessHexFlash+0xa4>
		//we shouldn't need to care about entry address
	}
	else if (cmdType == 4) { //extended linear address
20003dd0:	797b      	ldrb	r3, [r7, #5]
20003dd2:	2b04      	cmp	r3, #4
20003dd4:	d108      	bne.n	20003de8 <ProcessHexFlash+0xa4>
		//printf("Address Command: %s\r\n", hexCmdBuf);
		addrOffset = (((uint32_t)hexBuf[4]) << 24) + (((uint32_t)hexBuf[5]) << 16);
20003dd6:	4b07      	ldr	r3, [pc, #28]	; (20003df4 <ProcessHexFlash+0xb0>)
20003dd8:	791b      	ldrb	r3, [r3, #4]
20003dda:	061a      	lsls	r2, r3, #24
20003ddc:	4b05      	ldr	r3, [pc, #20]	; (20003df4 <ProcessHexFlash+0xb0>)
20003dde:	795b      	ldrb	r3, [r3, #5]
20003de0:	041b      	lsls	r3, r3, #16
20003de2:	4413      	add	r3, r2
20003de4:	4a04      	ldr	r2, [pc, #16]	; (20003df8 <ProcessHexFlash+0xb4>)
20003de6:	6013      	str	r3, [r2, #0]
	}
	else if (cmdType == 5) { //start linear address
		//we shouldn't need to care about entry address
	}
	return 0;
20003de8:	2300      	movs	r3, #0
}
20003dea:	4618      	mov	r0, r3
20003dec:	3708      	adds	r7, #8
20003dee:	46bd      	mov	sp, r7
20003df0:	bdb0      	pop	{r4, r5, r7, pc}
20003df2:	bf00      	nop
20003df4:	20004480 	.word	0x20004480
20003df8:	200044e4 	.word	0x200044e4

20003dfc <main>:
 * @retval None
 */

uint32_t recMsgCount = 0;
int main(void)
{  
20003dfc:	b5b0      	push	{r4, r5, r7, lr}
20003dfe:	b0c8      	sub	sp, #288	; 0x120
20003e00:	af00      	add	r7, sp, #0
	TinyBLInit();
20003e02:	f7ff febd 	bl	20003b80 <TinyBLInit>


	GPIO_InitTypeDef  GPIO_InitStruct;

	__HAL_RCC_GPIOB_CLK_ENABLE();
20003e06:	f507 7390 	add.w	r3, r7, #288	; 0x120
20003e0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
20003e0e:	2200      	movs	r2, #0
20003e10:	601a      	str	r2, [r3, #0]
20003e12:	4b62      	ldr	r3, [pc, #392]	; (20003f9c <main+0x1a0>)
20003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003e16:	4a61      	ldr	r2, [pc, #388]	; (20003f9c <main+0x1a0>)
20003e18:	f043 0302 	orr.w	r3, r3, #2
20003e1c:	6313      	str	r3, [r2, #48]	; 0x30
20003e1e:	4b5f      	ldr	r3, [pc, #380]	; (20003f9c <main+0x1a0>)
20003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003e22:	f003 0202 	and.w	r2, r3, #2
20003e26:	f507 7390 	add.w	r3, r7, #288	; 0x120
20003e2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
20003e2e:	601a      	str	r2, [r3, #0]
20003e30:	f507 7390 	add.w	r3, r7, #288	; 0x120
20003e34:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
20003e38:	681b      	ldr	r3, [r3, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0;
20003e3a:	2301      	movs	r3, #1
20003e3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20003e40:	2301      	movs	r3, #1
20003e42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
20003e46:	2300      	movs	r3, #0
20003e48:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
20003e4c:	2302      	movs	r3, #2
20003e4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20003e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
20003e56:	4619      	mov	r1, r3
20003e58:	4851      	ldr	r0, [pc, #324]	; (20003fa0 <main+0x1a4>)
20003e5a:	f7fe f89f 	bl	20001f9c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
20003e5e:	2200      	movs	r2, #0
20003e60:	2101      	movs	r1, #1
20003e62:	484f      	ldr	r0, [pc, #316]	; (20003fa0 <main+0x1a4>)
20003e64:	f7fe fa2e 	bl	200022c4 <HAL_GPIO_WritePin>

	MX_TIM7_Init();
20003e68:	f7ff fe56 	bl	20003b18 <MX_TIM7_Init>
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_SR_UIF);
20003e6c:	4b4d      	ldr	r3, [pc, #308]	; (20003fa4 <main+0x1a8>)
20003e6e:	681b      	ldr	r3, [r3, #0]
20003e70:	f06f 0201 	mvn.w	r2, #1
20003e74:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim7);
20003e76:	484b      	ldr	r0, [pc, #300]	; (20003fa4 <main+0x1a8>)
20003e78:	f7fe ff98 	bl	20002dac <HAL_TIM_Base_Start_IT>

	/* Configure the system clock to 180 MHz */
	//SystemClock_Config();

	/* Initialize LED1, LED2 and LED3 */
	BSP_LED_Init(LED1);
20003e7c:	2000      	movs	r0, #0
20003e7e:	f7fd fb3f 	bl	20001500 <BSP_LED_Init>
	BSP_LED_Init(LED2);
20003e82:	2001      	movs	r0, #1
20003e84:	f7fd fb3c 	bl	20001500 <BSP_LED_Init>
	BSP_LED_Init(LED3);
20003e88:	2002      	movs	r0, #2
20003e8a:	f7fd fb39 	bl	20001500 <BSP_LED_Init>
		for(;;);
	}*/


	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
20003e8e:	f7fd fdf1 	bl	20001a74 <HAL_FLASH_Unlock>

	/* Erase the user Flash area
    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	/* Get the 1st sector to erase */
	FirstSector = GetSector(FLASH_USER_START_ADDR);
20003e92:	4845      	ldr	r0, [pc, #276]	; (20003fa8 <main+0x1ac>)
20003e94:	f000 f89c 	bl	20003fd0 <GetSector>
20003e98:	4603      	mov	r3, r0
20003e9a:	4a44      	ldr	r2, [pc, #272]	; (20003fac <main+0x1b0>)
20003e9c:	6013      	str	r3, [r2, #0]
	/* Get the number of sector to erase from 1st sector*/
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
20003e9e:	4844      	ldr	r0, [pc, #272]	; (20003fb0 <main+0x1b4>)
20003ea0:	f000 f900 	bl	200040a4 <GetSectorSize>
20003ea4:	4602      	mov	r2, r0
20003ea6:	4b43      	ldr	r3, [pc, #268]	; (20003fb4 <main+0x1b8>)
20003ea8:	4413      	add	r3, r2
20003eaa:	4618      	mov	r0, r3
20003eac:	f000 f890 	bl	20003fd0 <GetSector>
20003eb0:	4602      	mov	r2, r0
20003eb2:	4b3e      	ldr	r3, [pc, #248]	; (20003fac <main+0x1b0>)
20003eb4:	681b      	ldr	r3, [r3, #0]
20003eb6:	1ad3      	subs	r3, r2, r3
20003eb8:	3301      	adds	r3, #1
20003eba:	4a3f      	ldr	r2, [pc, #252]	; (20003fb8 <main+0x1bc>)
20003ebc:	6013      	str	r3, [r2, #0]
	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
20003ebe:	4b3f      	ldr	r3, [pc, #252]	; (20003fbc <main+0x1c0>)
20003ec0:	2200      	movs	r2, #0
20003ec2:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
20003ec4:	4b3d      	ldr	r3, [pc, #244]	; (20003fbc <main+0x1c0>)
20003ec6:	2202      	movs	r2, #2
20003ec8:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FirstSector;
20003eca:	4b38      	ldr	r3, [pc, #224]	; (20003fac <main+0x1b0>)
20003ecc:	681b      	ldr	r3, [r3, #0]
20003ece:	4a3b      	ldr	r2, [pc, #236]	; (20003fbc <main+0x1c0>)
20003ed0:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
20003ed2:	4b39      	ldr	r3, [pc, #228]	; (20003fb8 <main+0x1bc>)
20003ed4:	681b      	ldr	r3, [r3, #0]
20003ed6:	4a39      	ldr	r2, [pc, #228]	; (20003fbc <main+0x1c0>)
20003ed8:	60d3      	str	r3, [r2, #12]


	uint8_t printout[50] = "Ready to receive FLASH data\r\n";
20003eda:	4b39      	ldr	r3, [pc, #228]	; (20003fc0 <main+0x1c4>)
20003edc:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
20003ee0:	461d      	mov	r5, r3
20003ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
20003ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
20003ee6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
20003eea:	c407      	stmia	r4!, {r0, r1, r2}
20003eec:	8023      	strh	r3, [r4, #0]
20003eee:	f107 03f2 	add.w	r3, r7, #242	; 0xf2
20003ef2:	2200      	movs	r2, #0
20003ef4:	601a      	str	r2, [r3, #0]
20003ef6:	605a      	str	r2, [r3, #4]
20003ef8:	609a      	str	r2, [r3, #8]
20003efa:	60da      	str	r2, [r3, #12]
20003efc:	611a      	str	r2, [r3, #16]
	//HAL_UART_Transmit(&UartHandle, printout, 31, HAL_MAX_DELAY);

	/* Infinite loop */
	HEXQueue q;
	HEXQueueInit(&q);
20003efe:	f107 0308 	add.w	r3, r7, #8
20003f02:	4618      	mov	r0, r3
20003f04:	f7ff fd03 	bl	2000390e <HEXQueueInit>
	while(1) {
		uint16_t count = 0;
20003f08:	2300      	movs	r3, #0
20003f0a:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
		//HAL_UARTEx_ReceiveToIdle(&UartHandle, uartInBuf, 17, &count, 200);
		if((UartHandle.Instance->SR & UART_FLAG_RXNE) == UART_FLAG_RXNE) {
20003f0e:	4b2d      	ldr	r3, [pc, #180]	; (20003fc4 <main+0x1c8>)
20003f10:	681b      	ldr	r3, [r3, #0]
20003f12:	681b      	ldr	r3, [r3, #0]
20003f14:	f003 0320 	and.w	r3, r3, #32
20003f18:	2b20      	cmp	r3, #32
20003f1a:	d1f5      	bne.n	20003f08 <main+0x10c>
			HEXQueueAdd(&q, (uint8_t)UartHandle.Instance->DR);
20003f1c:	4b29      	ldr	r3, [pc, #164]	; (20003fc4 <main+0x1c8>)
20003f1e:	681b      	ldr	r3, [r3, #0]
20003f20:	685b      	ldr	r3, [r3, #4]
20003f22:	b2da      	uxtb	r2, r3
20003f24:	f107 0308 	add.w	r3, r7, #8
20003f28:	4611      	mov	r1, r2
20003f2a:	4618      	mov	r0, r3
20003f2c:	f7ff fd2a 	bl	20003984 <HEXQueueAdd>
			//asm("nop");
			if(HEXQueueExtractHex(&q, hexBuf)) {
20003f30:	f107 0308 	add.w	r3, r7, #8
20003f34:	4924      	ldr	r1, [pc, #144]	; (20003fc8 <main+0x1cc>)
20003f36:	4618      	mov	r0, r3
20003f38:	f7ff fd74 	bl	20003a24 <HEXQueueExtractHex>
20003f3c:	4603      	mov	r3, r0
20003f3e:	2b00      	cmp	r3, #0
20003f40:	d0e2      	beq.n	20003f08 <main+0x10c>
				recMsgCount++;
20003f42:	4b22      	ldr	r3, [pc, #136]	; (20003fcc <main+0x1d0>)
20003f44:	681b      	ldr	r3, [r3, #0]
20003f46:	3301      	adds	r3, #1
20003f48:	4a20      	ldr	r2, [pc, #128]	; (20003fcc <main+0x1d0>)
20003f4a:	6013      	str	r3, [r2, #0]
				HEXQueueInit(&q);
20003f4c:	f107 0308 	add.w	r3, r7, #8
20003f50:	4618      	mov	r0, r3
20003f52:	f7ff fcdc 	bl	2000390e <HEXQueueInit>
				uint8_t result = ProcessHexFlash();
20003f56:	f7ff fef5 	bl	20003d44 <ProcessHexFlash>
20003f5a:	4603      	mov	r3, r0
20003f5c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
				if(result == 1)
20003f60:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
20003f64:	2b01      	cmp	r3, #1
20003f66:	d000      	beq.n	20003f6a <main+0x16e>
	while(1) {
20003f68:	e7ce      	b.n	20003f08 <main+0x10c>
					break;
20003f6a:	bf00      	nop
			}
		}

	}
	HAL_FLASH_Lock();
20003f6c:	f7fd fda4 	bl	20001ab8 <HAL_FLASH_Lock>
	while (1)
	{
		HAL_Delay(500);
20003f70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
20003f74:	f7fd fbf4 	bl	20001760 <HAL_Delay>
		BSP_LED_On(LED1);
20003f78:	2000      	movs	r0, #0
20003f7a:	f7fd fb11 	bl	200015a0 <BSP_LED_On>
		//BSP_LED_On(LED2);
		BSP_LED_On(LED3);
20003f7e:	2002      	movs	r0, #2
20003f80:	f7fd fb0e 	bl	200015a0 <BSP_LED_On>
		HAL_Delay(500);
20003f84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
20003f88:	f7fd fbea 	bl	20001760 <HAL_Delay>
		BSP_LED_Off(LED1);
20003f8c:	2000      	movs	r0, #0
20003f8e:	f7fd fb21 	bl	200015d4 <BSP_LED_Off>
		//BSP_LED_Off(LED2);
		BSP_LED_Off(LED3);
20003f92:	2002      	movs	r0, #2
20003f94:	f7fd fb1e 	bl	200015d4 <BSP_LED_Off>
		HAL_Delay(500);
20003f98:	e7ea      	b.n	20003f70 <main+0x174>
20003f9a:	bf00      	nop
20003f9c:	40023800 	.word	0x40023800
20003fa0:	40020400 	.word	0x40020400
20003fa4:	20004414 	.word	0x20004414
20003fa8:	08008000 	.word	0x08008000
20003fac:	200043ac 	.word	0x200043ac
20003fb0:	08060000 	.word	0x08060000
20003fb4:	0805ffff 	.word	0x0805ffff
20003fb8:	200043b0 	.word	0x200043b0
20003fbc:	20004400 	.word	0x20004400
20003fc0:	200042f0 	.word	0x200042f0
20003fc4:	200043b8 	.word	0x200043b8
20003fc8:	20004480 	.word	0x20004480
20003fcc:	200044e8 	.word	0x200044e8

20003fd0 <GetSector>:
 * @brief  Gets the sector of a given address
 * @param  None
 * @retval The sector of a given address
 */
static uint32_t GetSector(uint32_t Address)
{
20003fd0:	b480      	push	{r7}
20003fd2:	b085      	sub	sp, #20
20003fd4:	af00      	add	r7, sp, #0
20003fd6:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
20003fd8:	2300      	movs	r3, #0
20003fda:	60fb      	str	r3, [r7, #12]

	if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
20003fdc:	687b      	ldr	r3, [r7, #4]
20003fde:	4a2a      	ldr	r2, [pc, #168]	; (20004088 <GetSector+0xb8>)
20003fe0:	4293      	cmp	r3, r2
20003fe2:	d206      	bcs.n	20003ff2 <GetSector+0x22>
20003fe4:	687b      	ldr	r3, [r7, #4]
20003fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
20003fea:	d302      	bcc.n	20003ff2 <GetSector+0x22>
	{
		sector = FLASH_SECTOR_0;
20003fec:	2300      	movs	r3, #0
20003fee:	60fb      	str	r3, [r7, #12]
20003ff0:	e043      	b.n	2000407a <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
20003ff2:	687b      	ldr	r3, [r7, #4]
20003ff4:	4a25      	ldr	r2, [pc, #148]	; (2000408c <GetSector+0xbc>)
20003ff6:	4293      	cmp	r3, r2
20003ff8:	d206      	bcs.n	20004008 <GetSector+0x38>
20003ffa:	687b      	ldr	r3, [r7, #4]
20003ffc:	4a22      	ldr	r2, [pc, #136]	; (20004088 <GetSector+0xb8>)
20003ffe:	4293      	cmp	r3, r2
20004000:	d302      	bcc.n	20004008 <GetSector+0x38>
	{
		sector = FLASH_SECTOR_1;
20004002:	2301      	movs	r3, #1
20004004:	60fb      	str	r3, [r7, #12]
20004006:	e038      	b.n	2000407a <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
20004008:	687b      	ldr	r3, [r7, #4]
2000400a:	4a21      	ldr	r2, [pc, #132]	; (20004090 <GetSector+0xc0>)
2000400c:	4293      	cmp	r3, r2
2000400e:	d206      	bcs.n	2000401e <GetSector+0x4e>
20004010:	687b      	ldr	r3, [r7, #4]
20004012:	4a1e      	ldr	r2, [pc, #120]	; (2000408c <GetSector+0xbc>)
20004014:	4293      	cmp	r3, r2
20004016:	d302      	bcc.n	2000401e <GetSector+0x4e>
	{
		sector = FLASH_SECTOR_2;
20004018:	2302      	movs	r3, #2
2000401a:	60fb      	str	r3, [r7, #12]
2000401c:	e02d      	b.n	2000407a <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
2000401e:	687b      	ldr	r3, [r7, #4]
20004020:	4a1c      	ldr	r2, [pc, #112]	; (20004094 <GetSector+0xc4>)
20004022:	4293      	cmp	r3, r2
20004024:	d806      	bhi.n	20004034 <GetSector+0x64>
20004026:	687b      	ldr	r3, [r7, #4]
20004028:	4a19      	ldr	r2, [pc, #100]	; (20004090 <GetSector+0xc0>)
2000402a:	4293      	cmp	r3, r2
2000402c:	d302      	bcc.n	20004034 <GetSector+0x64>
	{
		sector = FLASH_SECTOR_3;
2000402e:	2303      	movs	r3, #3
20004030:	60fb      	str	r3, [r7, #12]
20004032:	e022      	b.n	2000407a <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
20004034:	687b      	ldr	r3, [r7, #4]
20004036:	4a18      	ldr	r2, [pc, #96]	; (20004098 <GetSector+0xc8>)
20004038:	4293      	cmp	r3, r2
2000403a:	d806      	bhi.n	2000404a <GetSector+0x7a>
2000403c:	687b      	ldr	r3, [r7, #4]
2000403e:	4a15      	ldr	r2, [pc, #84]	; (20004094 <GetSector+0xc4>)
20004040:	4293      	cmp	r3, r2
20004042:	d902      	bls.n	2000404a <GetSector+0x7a>
	{
		sector = FLASH_SECTOR_4;
20004044:	2304      	movs	r3, #4
20004046:	60fb      	str	r3, [r7, #12]
20004048:	e017      	b.n	2000407a <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
2000404a:	687b      	ldr	r3, [r7, #4]
2000404c:	4a13      	ldr	r2, [pc, #76]	; (2000409c <GetSector+0xcc>)
2000404e:	4293      	cmp	r3, r2
20004050:	d806      	bhi.n	20004060 <GetSector+0x90>
20004052:	687b      	ldr	r3, [r7, #4]
20004054:	4a10      	ldr	r2, [pc, #64]	; (20004098 <GetSector+0xc8>)
20004056:	4293      	cmp	r3, r2
20004058:	d902      	bls.n	20004060 <GetSector+0x90>
	{
		sector = FLASH_SECTOR_5;
2000405a:	2305      	movs	r3, #5
2000405c:	60fb      	str	r3, [r7, #12]
2000405e:	e00c      	b.n	2000407a <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
20004060:	687b      	ldr	r3, [r7, #4]
20004062:	4a0f      	ldr	r2, [pc, #60]	; (200040a0 <GetSector+0xd0>)
20004064:	4293      	cmp	r3, r2
20004066:	d806      	bhi.n	20004076 <GetSector+0xa6>
20004068:	687b      	ldr	r3, [r7, #4]
2000406a:	4a0c      	ldr	r2, [pc, #48]	; (2000409c <GetSector+0xcc>)
2000406c:	4293      	cmp	r3, r2
2000406e:	d902      	bls.n	20004076 <GetSector+0xa6>
	{
		sector = FLASH_SECTOR_6;
20004070:	2306      	movs	r3, #6
20004072:	60fb      	str	r3, [r7, #12]
20004074:	e001      	b.n	2000407a <GetSector+0xaa>
	}
	else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7) */
	{
		sector = FLASH_SECTOR_7;
20004076:	2307      	movs	r3, #7
20004078:	60fb      	str	r3, [r7, #12]
	}
	return sector;
2000407a:	68fb      	ldr	r3, [r7, #12]
}
2000407c:	4618      	mov	r0, r3
2000407e:	3714      	adds	r7, #20
20004080:	46bd      	mov	sp, r7
20004082:	f85d 7b04 	ldr.w	r7, [sp], #4
20004086:	4770      	bx	lr
20004088:	08004000 	.word	0x08004000
2000408c:	08008000 	.word	0x08008000
20004090:	0800c000 	.word	0x0800c000
20004094:	0800ffff 	.word	0x0800ffff
20004098:	0801ffff 	.word	0x0801ffff
2000409c:	0803ffff 	.word	0x0803ffff
200040a0:	0805ffff 	.word	0x0805ffff

200040a4 <GetSectorSize>:
 * @brief  Gets sector Size
 * @param  None
 * @retval The size of a given sector
 */
static uint32_t GetSectorSize(uint32_t Sector)
{
200040a4:	b480      	push	{r7}
200040a6:	b085      	sub	sp, #20
200040a8:	af00      	add	r7, sp, #0
200040aa:	6078      	str	r0, [r7, #4]
	uint32_t sectorsize = 0x00;
200040ac:	2300      	movs	r3, #0
200040ae:	60fb      	str	r3, [r7, #12]
	if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) || (Sector == FLASH_SECTOR_3))
200040b0:	687b      	ldr	r3, [r7, #4]
200040b2:	2b00      	cmp	r3, #0
200040b4:	d008      	beq.n	200040c8 <GetSectorSize+0x24>
200040b6:	687b      	ldr	r3, [r7, #4]
200040b8:	2b01      	cmp	r3, #1
200040ba:	d005      	beq.n	200040c8 <GetSectorSize+0x24>
200040bc:	687b      	ldr	r3, [r7, #4]
200040be:	2b02      	cmp	r3, #2
200040c0:	d002      	beq.n	200040c8 <GetSectorSize+0x24>
200040c2:	687b      	ldr	r3, [r7, #4]
200040c4:	2b03      	cmp	r3, #3
200040c6:	d103      	bne.n	200040d0 <GetSectorSize+0x2c>
	{
		sectorsize = 16 * 1024;
200040c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
200040cc:	60fb      	str	r3, [r7, #12]
200040ce:	e009      	b.n	200040e4 <GetSectorSize+0x40>
	}
	else if(Sector == FLASH_SECTOR_4)
200040d0:	687b      	ldr	r3, [r7, #4]
200040d2:	2b04      	cmp	r3, #4
200040d4:	d103      	bne.n	200040de <GetSectorSize+0x3a>
	{
		sectorsize = 64 * 1024;
200040d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200040da:	60fb      	str	r3, [r7, #12]
200040dc:	e002      	b.n	200040e4 <GetSectorSize+0x40>
	}
	else
	{
		sectorsize = 128 * 1024;
200040de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
200040e2:	60fb      	str	r3, [r7, #12]
	}
	return sectorsize;
200040e4:	68fb      	ldr	r3, [r7, #12]
}
200040e6:	4618      	mov	r0, r3
200040e8:	3714      	adds	r7, #20
200040ea:	46bd      	mov	sp, r7
200040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200040f0:	4770      	bx	lr
	...

200040f4 <HAL_TIM_PeriodElapsedCallback>:
		while(1) { ; }
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
200040f4:	b580      	push	{r7, lr}
200040f6:	b082      	sub	sp, #8
200040f8:	af00      	add	r7, sp, #0
200040fa:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim7)
200040fc:	687b      	ldr	r3, [r7, #4]
200040fe:	4a05      	ldr	r2, [pc, #20]	; (20004114 <HAL_TIM_PeriodElapsedCallback+0x20>)
20004100:	4293      	cmp	r3, r2
20004102:	d103      	bne.n	2000410c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
20004104:	2101      	movs	r1, #1
20004106:	4804      	ldr	r0, [pc, #16]	; (20004118 <HAL_TIM_PeriodElapsedCallback+0x24>)
20004108:	f7fe f8f5 	bl	200022f6 <HAL_GPIO_TogglePin>
	}
}
2000410c:	bf00      	nop
2000410e:	3708      	adds	r7, #8
20004110:	46bd      	mov	sp, r7
20004112:	bd80      	pop	{r7, pc}
20004114:	20004414 	.word	0x20004414
20004118:	40020400 	.word	0x40020400

2000411c <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
2000411c:	b580      	push	{r7, lr}
2000411e:	b08a      	sub	sp, #40	; 0x28
20004120:	af00      	add	r7, sp, #0
20004122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
20004124:	2300      	movs	r3, #0
20004126:	613b      	str	r3, [r7, #16]
20004128:	4b23      	ldr	r3, [pc, #140]	; (200041b8 <HAL_UART_MspInit+0x9c>)
2000412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000412c:	4a22      	ldr	r2, [pc, #136]	; (200041b8 <HAL_UART_MspInit+0x9c>)
2000412e:	f043 0308 	orr.w	r3, r3, #8
20004132:	6313      	str	r3, [r2, #48]	; 0x30
20004134:	4b20      	ldr	r3, [pc, #128]	; (200041b8 <HAL_UART_MspInit+0x9c>)
20004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20004138:	f003 0308 	and.w	r3, r3, #8
2000413c:	613b      	str	r3, [r7, #16]
2000413e:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
20004140:	2300      	movs	r3, #0
20004142:	60fb      	str	r3, [r7, #12]
20004144:	4b1c      	ldr	r3, [pc, #112]	; (200041b8 <HAL_UART_MspInit+0x9c>)
20004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20004148:	4a1b      	ldr	r2, [pc, #108]	; (200041b8 <HAL_UART_MspInit+0x9c>)
2000414a:	f043 0308 	orr.w	r3, r3, #8
2000414e:	6313      	str	r3, [r2, #48]	; 0x30
20004150:	4b19      	ldr	r3, [pc, #100]	; (200041b8 <HAL_UART_MspInit+0x9c>)
20004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20004154:	f003 0308 	and.w	r3, r3, #8
20004158:	60fb      	str	r3, [r7, #12]
2000415a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
2000415c:	2300      	movs	r3, #0
2000415e:	60bb      	str	r3, [r7, #8]
20004160:	4b15      	ldr	r3, [pc, #84]	; (200041b8 <HAL_UART_MspInit+0x9c>)
20004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20004164:	4a14      	ldr	r2, [pc, #80]	; (200041b8 <HAL_UART_MspInit+0x9c>)
20004166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2000416a:	6413      	str	r3, [r2, #64]	; 0x40
2000416c:	4b12      	ldr	r3, [pc, #72]	; (200041b8 <HAL_UART_MspInit+0x9c>)
2000416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20004170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20004174:	60bb      	str	r3, [r7, #8]
20004176:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
20004178:	f44f 7380 	mov.w	r3, #256	; 0x100
2000417c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
2000417e:	2302      	movs	r3, #2
20004180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
20004182:	2301      	movs	r3, #1
20004184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
20004186:	2303      	movs	r3, #3
20004188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
2000418a:	2307      	movs	r3, #7
2000418c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
2000418e:	f107 0314 	add.w	r3, r7, #20
20004192:	4619      	mov	r1, r3
20004194:	4809      	ldr	r0, [pc, #36]	; (200041bc <HAL_UART_MspInit+0xa0>)
20004196:	f7fd ff01 	bl	20001f9c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
2000419a:	f44f 7300 	mov.w	r3, #512	; 0x200
2000419e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
200041a0:	2307      	movs	r3, #7
200041a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
200041a4:	f107 0314 	add.w	r3, r7, #20
200041a8:	4619      	mov	r1, r3
200041aa:	4804      	ldr	r0, [pc, #16]	; (200041bc <HAL_UART_MspInit+0xa0>)
200041ac:	f7fd fef6 	bl	20001f9c <HAL_GPIO_Init>
}
200041b0:	bf00      	nop
200041b2:	3728      	adds	r7, #40	; 0x28
200041b4:	46bd      	mov	sp, r7
200041b6:	bd80      	pop	{r7, pc}
200041b8:	40023800 	.word	0x40023800
200041bc:	40020c00 	.word	0x40020c00

200041c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
200041c0:	b580      	push	{r7, lr}
200041c2:	b084      	sub	sp, #16
200041c4:	af00      	add	r7, sp, #0
200041c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
200041c8:	687b      	ldr	r3, [r7, #4]
200041ca:	681b      	ldr	r3, [r3, #0]
200041cc:	4a0e      	ldr	r2, [pc, #56]	; (20004208 <HAL_TIM_Base_MspInit+0x48>)
200041ce:	4293      	cmp	r3, r2
200041d0:	d115      	bne.n	200041fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
200041d2:	2300      	movs	r3, #0
200041d4:	60fb      	str	r3, [r7, #12]
200041d6:	4b0d      	ldr	r3, [pc, #52]	; (2000420c <HAL_TIM_Base_MspInit+0x4c>)
200041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200041da:	4a0c      	ldr	r2, [pc, #48]	; (2000420c <HAL_TIM_Base_MspInit+0x4c>)
200041dc:	f043 0320 	orr.w	r3, r3, #32
200041e0:	6413      	str	r3, [r2, #64]	; 0x40
200041e2:	4b0a      	ldr	r3, [pc, #40]	; (2000420c <HAL_TIM_Base_MspInit+0x4c>)
200041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200041e6:	f003 0320 	and.w	r3, r3, #32
200041ea:	60fb      	str	r3, [r7, #12]
200041ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
200041ee:	2200      	movs	r2, #0
200041f0:	2100      	movs	r1, #0
200041f2:	2037      	movs	r0, #55	; 0x37
200041f4:	f7fd fbb3 	bl	2000195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
200041f8:	2037      	movs	r0, #55	; 0x37
200041fa:	f7fd fbcc 	bl	20001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
200041fe:	bf00      	nop
20004200:	3710      	adds	r7, #16
20004202:	46bd      	mov	sp, r7
20004204:	bd80      	pop	{r7, pc}
20004206:	bf00      	nop
20004208:	40001400 	.word	0x40001400
2000420c:	40023800 	.word	0x40023800

20004210 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
20004210:	b480      	push	{r7}
20004212:	af00      	add	r7, sp, #0
}
20004214:	bf00      	nop
20004216:	46bd      	mov	sp, r7
20004218:	f85d 7b04 	ldr.w	r7, [sp], #4
2000421c:	4770      	bx	lr

2000421e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
2000421e:	b480      	push	{r7}
20004220:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
20004222:	e7fe      	b.n	20004222 <HardFault_Handler+0x4>

20004224 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
20004224:	b480      	push	{r7}
20004226:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
20004228:	e7fe      	b.n	20004228 <MemManage_Handler+0x4>

2000422a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
2000422a:	b480      	push	{r7}
2000422c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
2000422e:	e7fe      	b.n	2000422e <BusFault_Handler+0x4>

20004230 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
20004230:	b480      	push	{r7}
20004232:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
20004234:	e7fe      	b.n	20004234 <UsageFault_Handler+0x4>

20004236 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
20004236:	b480      	push	{r7}
20004238:	af00      	add	r7, sp, #0
}
2000423a:	bf00      	nop
2000423c:	46bd      	mov	sp, r7
2000423e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004242:	4770      	bx	lr

20004244 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
20004244:	b480      	push	{r7}
20004246:	af00      	add	r7, sp, #0
}
20004248:	bf00      	nop
2000424a:	46bd      	mov	sp, r7
2000424c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004250:	4770      	bx	lr

20004252 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
20004252:	b480      	push	{r7}
20004254:	af00      	add	r7, sp, #0
}
20004256:	bf00      	nop
20004258:	46bd      	mov	sp, r7
2000425a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000425e:	4770      	bx	lr

20004260 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
20004260:	b580      	push	{r7, lr}
20004262:	af00      	add	r7, sp, #0
  HAL_IncTick();
20004264:	f7fd fa5c 	bl	20001720 <HAL_IncTick>
}
20004268:	bf00      	nop
2000426a:	bd80      	pop	{r7, pc}

2000426c <TIM7_IRQHandler>:


void TIM7_IRQHandler(void)
{
2000426c:	b580      	push	{r7, lr}
2000426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
20004270:	4802      	ldr	r0, [pc, #8]	; (2000427c <TIM7_IRQHandler+0x10>)
20004272:	f7fe fe0b 	bl	20002e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
20004276:	bf00      	nop
20004278:	bd80      	pop	{r7, pc}
2000427a:	bf00      	nop
2000427c:	20004414 	.word	0x20004414

20004280 <memset>:
20004280:	4402      	add	r2, r0
20004282:	4603      	mov	r3, r0
20004284:	4293      	cmp	r3, r2
20004286:	d100      	bne.n	2000428a <memset+0xa>
20004288:	4770      	bx	lr
2000428a:	f803 1b01 	strb.w	r1, [r3], #1
2000428e:	e7f9      	b.n	20004284 <memset+0x4>

20004290 <__libc_init_array>:
20004290:	b570      	push	{r4, r5, r6, lr}
20004292:	4d0d      	ldr	r5, [pc, #52]	; (200042c8 <__libc_init_array+0x38>)
20004294:	4c0d      	ldr	r4, [pc, #52]	; (200042cc <__libc_init_array+0x3c>)
20004296:	1b64      	subs	r4, r4, r5
20004298:	10a4      	asrs	r4, r4, #2
2000429a:	2600      	movs	r6, #0
2000429c:	42a6      	cmp	r6, r4
2000429e:	d109      	bne.n	200042b4 <__libc_init_array+0x24>
200042a0:	4d0b      	ldr	r5, [pc, #44]	; (200042d0 <__libc_init_array+0x40>)
200042a2:	4c0c      	ldr	r4, [pc, #48]	; (200042d4 <__libc_init_array+0x44>)
200042a4:	f000 f818 	bl	200042d8 <_init>
200042a8:	1b64      	subs	r4, r4, r5
200042aa:	10a4      	asrs	r4, r4, #2
200042ac:	2600      	movs	r6, #0
200042ae:	42a6      	cmp	r6, r4
200042b0:	d105      	bne.n	200042be <__libc_init_array+0x2e>
200042b2:	bd70      	pop	{r4, r5, r6, pc}
200042b4:	f855 3b04 	ldr.w	r3, [r5], #4
200042b8:	4798      	blx	r3
200042ba:	3601      	adds	r6, #1
200042bc:	e7ee      	b.n	2000429c <__libc_init_array+0xc>
200042be:	f855 3b04 	ldr.w	r3, [r5], #4
200042c2:	4798      	blx	r3
200042c4:	3601      	adds	r6, #1
200042c6:	e7f2      	b.n	200042ae <__libc_init_array+0x1e>
200042c8:	2000434c 	.word	0x2000434c
200042cc:	2000434c 	.word	0x2000434c
200042d0:	2000434c 	.word	0x2000434c
200042d4:	20004350 	.word	0x20004350

200042d8 <_init>:
200042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200042da:	bf00      	nop
200042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
200042de:	bc08      	pop	{r3}
200042e0:	469e      	mov	lr, r3
200042e2:	4770      	bx	lr

200042e4 <_fini>:
200042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200042e6:	bf00      	nop
200042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
200042ea:	bc08      	pop	{r3}
200042ec:	469e      	mov	lr, r3
200042ee:	4770      	bx	lr
