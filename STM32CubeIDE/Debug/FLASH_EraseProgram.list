
FLASH_EraseProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  20001000  20001000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002124  200011c4  200011c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  200032e8  200032e8  000032e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2000333c  2000333c  00003364  2**0
                  CONTENTS
  4 .ARM          00000008  2000333c  2000333c  0000333c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20003344  20003364  00003364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20003344  20003344  00003344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  20003348  20003348  00003348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  2000334c  2000334c  0000334c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20003364  20003364  00003364  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200033e8  200033e8  00003364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003364  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00003394  2**0
                  CONTENTS, READONLY
 13 .debug_info   000084de  00000000  00000000  000033d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000170b  00000000  00000000  0000b8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  0000cfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000554  00000000  00000000  0000d6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021224  00000000  00000000  0000dc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009786  00000000  00000000  0002ee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cab42  00000000  00000000  000385be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b78  00000000  00000000  00103100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00104c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200011c4 <__do_global_dtors_aux>:
200011c4:	b510      	push	{r4, lr}
200011c6:	4c05      	ldr	r4, [pc, #20]	; (200011dc <__do_global_dtors_aux+0x18>)
200011c8:	7823      	ldrb	r3, [r4, #0]
200011ca:	b933      	cbnz	r3, 200011da <__do_global_dtors_aux+0x16>
200011cc:	4b04      	ldr	r3, [pc, #16]	; (200011e0 <__do_global_dtors_aux+0x1c>)
200011ce:	b113      	cbz	r3, 200011d6 <__do_global_dtors_aux+0x12>
200011d0:	4804      	ldr	r0, [pc, #16]	; (200011e4 <__do_global_dtors_aux+0x20>)
200011d2:	f3af 8000 	nop.w
200011d6:	2301      	movs	r3, #1
200011d8:	7023      	strb	r3, [r4, #0]
200011da:	bd10      	pop	{r4, pc}
200011dc:	20003364 	.word	0x20003364
200011e0:	00000000 	.word	0x00000000
200011e4:	200032d0 	.word	0x200032d0

200011e8 <frame_dummy>:
200011e8:	b508      	push	{r3, lr}
200011ea:	4b03      	ldr	r3, [pc, #12]	; (200011f8 <frame_dummy+0x10>)
200011ec:	b11b      	cbz	r3, 200011f6 <frame_dummy+0xe>
200011ee:	4903      	ldr	r1, [pc, #12]	; (200011fc <frame_dummy+0x14>)
200011f0:	4803      	ldr	r0, [pc, #12]	; (20001200 <frame_dummy+0x18>)
200011f2:	f3af 8000 	nop.w
200011f6:	bd08      	pop	{r3, pc}
200011f8:	00000000 	.word	0x00000000
200011fc:	20003368 	.word	0x20003368
20001200:	200032d0 	.word	0x200032d0

20001204 <__aeabi_uldivmod>:
20001204:	b953      	cbnz	r3, 2000121c <__aeabi_uldivmod+0x18>
20001206:	b94a      	cbnz	r2, 2000121c <__aeabi_uldivmod+0x18>
20001208:	2900      	cmp	r1, #0
2000120a:	bf08      	it	eq
2000120c:	2800      	cmpeq	r0, #0
2000120e:	bf1c      	itt	ne
20001210:	f04f 31ff 	movne.w	r1, #4294967295
20001214:	f04f 30ff 	movne.w	r0, #4294967295
20001218:	f000 b970 	b.w	200014fc <__aeabi_idiv0>
2000121c:	f1ad 0c08 	sub.w	ip, sp, #8
20001220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20001224:	f000 f806 	bl	20001234 <__udivmoddi4>
20001228:	f8dd e004 	ldr.w	lr, [sp, #4]
2000122c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20001230:	b004      	add	sp, #16
20001232:	4770      	bx	lr

20001234 <__udivmoddi4>:
20001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20001238:	9e08      	ldr	r6, [sp, #32]
2000123a:	460d      	mov	r5, r1
2000123c:	4604      	mov	r4, r0
2000123e:	460f      	mov	r7, r1
20001240:	2b00      	cmp	r3, #0
20001242:	d14a      	bne.n	200012da <__udivmoddi4+0xa6>
20001244:	428a      	cmp	r2, r1
20001246:	4694      	mov	ip, r2
20001248:	d965      	bls.n	20001316 <__udivmoddi4+0xe2>
2000124a:	fab2 f382 	clz	r3, r2
2000124e:	b143      	cbz	r3, 20001262 <__udivmoddi4+0x2e>
20001250:	fa02 fc03 	lsl.w	ip, r2, r3
20001254:	f1c3 0220 	rsb	r2, r3, #32
20001258:	409f      	lsls	r7, r3
2000125a:	fa20 f202 	lsr.w	r2, r0, r2
2000125e:	4317      	orrs	r7, r2
20001260:	409c      	lsls	r4, r3
20001262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
20001266:	fa1f f58c 	uxth.w	r5, ip
2000126a:	fbb7 f1fe 	udiv	r1, r7, lr
2000126e:	0c22      	lsrs	r2, r4, #16
20001270:	fb0e 7711 	mls	r7, lr, r1, r7
20001274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
20001278:	fb01 f005 	mul.w	r0, r1, r5
2000127c:	4290      	cmp	r0, r2
2000127e:	d90a      	bls.n	20001296 <__udivmoddi4+0x62>
20001280:	eb1c 0202 	adds.w	r2, ip, r2
20001284:	f101 37ff 	add.w	r7, r1, #4294967295
20001288:	f080 811c 	bcs.w	200014c4 <__udivmoddi4+0x290>
2000128c:	4290      	cmp	r0, r2
2000128e:	f240 8119 	bls.w	200014c4 <__udivmoddi4+0x290>
20001292:	3902      	subs	r1, #2
20001294:	4462      	add	r2, ip
20001296:	1a12      	subs	r2, r2, r0
20001298:	b2a4      	uxth	r4, r4
2000129a:	fbb2 f0fe 	udiv	r0, r2, lr
2000129e:	fb0e 2210 	mls	r2, lr, r0, r2
200012a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
200012a6:	fb00 f505 	mul.w	r5, r0, r5
200012aa:	42a5      	cmp	r5, r4
200012ac:	d90a      	bls.n	200012c4 <__udivmoddi4+0x90>
200012ae:	eb1c 0404 	adds.w	r4, ip, r4
200012b2:	f100 32ff 	add.w	r2, r0, #4294967295
200012b6:	f080 8107 	bcs.w	200014c8 <__udivmoddi4+0x294>
200012ba:	42a5      	cmp	r5, r4
200012bc:	f240 8104 	bls.w	200014c8 <__udivmoddi4+0x294>
200012c0:	4464      	add	r4, ip
200012c2:	3802      	subs	r0, #2
200012c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
200012c8:	1b64      	subs	r4, r4, r5
200012ca:	2100      	movs	r1, #0
200012cc:	b11e      	cbz	r6, 200012d6 <__udivmoddi4+0xa2>
200012ce:	40dc      	lsrs	r4, r3
200012d0:	2300      	movs	r3, #0
200012d2:	e9c6 4300 	strd	r4, r3, [r6]
200012d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200012da:	428b      	cmp	r3, r1
200012dc:	d908      	bls.n	200012f0 <__udivmoddi4+0xbc>
200012de:	2e00      	cmp	r6, #0
200012e0:	f000 80ed 	beq.w	200014be <__udivmoddi4+0x28a>
200012e4:	2100      	movs	r1, #0
200012e6:	e9c6 0500 	strd	r0, r5, [r6]
200012ea:	4608      	mov	r0, r1
200012ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200012f0:	fab3 f183 	clz	r1, r3
200012f4:	2900      	cmp	r1, #0
200012f6:	d149      	bne.n	2000138c <__udivmoddi4+0x158>
200012f8:	42ab      	cmp	r3, r5
200012fa:	d302      	bcc.n	20001302 <__udivmoddi4+0xce>
200012fc:	4282      	cmp	r2, r0
200012fe:	f200 80f8 	bhi.w	200014f2 <__udivmoddi4+0x2be>
20001302:	1a84      	subs	r4, r0, r2
20001304:	eb65 0203 	sbc.w	r2, r5, r3
20001308:	2001      	movs	r0, #1
2000130a:	4617      	mov	r7, r2
2000130c:	2e00      	cmp	r6, #0
2000130e:	d0e2      	beq.n	200012d6 <__udivmoddi4+0xa2>
20001310:	e9c6 4700 	strd	r4, r7, [r6]
20001314:	e7df      	b.n	200012d6 <__udivmoddi4+0xa2>
20001316:	b902      	cbnz	r2, 2000131a <__udivmoddi4+0xe6>
20001318:	deff      	udf	#255	; 0xff
2000131a:	fab2 f382 	clz	r3, r2
2000131e:	2b00      	cmp	r3, #0
20001320:	f040 8090 	bne.w	20001444 <__udivmoddi4+0x210>
20001324:	1a8a      	subs	r2, r1, r2
20001326:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000132a:	fa1f fe8c 	uxth.w	lr, ip
2000132e:	2101      	movs	r1, #1
20001330:	fbb2 f5f7 	udiv	r5, r2, r7
20001334:	fb07 2015 	mls	r0, r7, r5, r2
20001338:	0c22      	lsrs	r2, r4, #16
2000133a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
2000133e:	fb0e f005 	mul.w	r0, lr, r5
20001342:	4290      	cmp	r0, r2
20001344:	d908      	bls.n	20001358 <__udivmoddi4+0x124>
20001346:	eb1c 0202 	adds.w	r2, ip, r2
2000134a:	f105 38ff 	add.w	r8, r5, #4294967295
2000134e:	d202      	bcs.n	20001356 <__udivmoddi4+0x122>
20001350:	4290      	cmp	r0, r2
20001352:	f200 80cb 	bhi.w	200014ec <__udivmoddi4+0x2b8>
20001356:	4645      	mov	r5, r8
20001358:	1a12      	subs	r2, r2, r0
2000135a:	b2a4      	uxth	r4, r4
2000135c:	fbb2 f0f7 	udiv	r0, r2, r7
20001360:	fb07 2210 	mls	r2, r7, r0, r2
20001364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
20001368:	fb0e fe00 	mul.w	lr, lr, r0
2000136c:	45a6      	cmp	lr, r4
2000136e:	d908      	bls.n	20001382 <__udivmoddi4+0x14e>
20001370:	eb1c 0404 	adds.w	r4, ip, r4
20001374:	f100 32ff 	add.w	r2, r0, #4294967295
20001378:	d202      	bcs.n	20001380 <__udivmoddi4+0x14c>
2000137a:	45a6      	cmp	lr, r4
2000137c:	f200 80bb 	bhi.w	200014f6 <__udivmoddi4+0x2c2>
20001380:	4610      	mov	r0, r2
20001382:	eba4 040e 	sub.w	r4, r4, lr
20001386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
2000138a:	e79f      	b.n	200012cc <__udivmoddi4+0x98>
2000138c:	f1c1 0720 	rsb	r7, r1, #32
20001390:	408b      	lsls	r3, r1
20001392:	fa22 fc07 	lsr.w	ip, r2, r7
20001396:	ea4c 0c03 	orr.w	ip, ip, r3
2000139a:	fa05 f401 	lsl.w	r4, r5, r1
2000139e:	fa20 f307 	lsr.w	r3, r0, r7
200013a2:	40fd      	lsrs	r5, r7
200013a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
200013a8:	4323      	orrs	r3, r4
200013aa:	fbb5 f8f9 	udiv	r8, r5, r9
200013ae:	fa1f fe8c 	uxth.w	lr, ip
200013b2:	fb09 5518 	mls	r5, r9, r8, r5
200013b6:	0c1c      	lsrs	r4, r3, #16
200013b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
200013bc:	fb08 f50e 	mul.w	r5, r8, lr
200013c0:	42a5      	cmp	r5, r4
200013c2:	fa02 f201 	lsl.w	r2, r2, r1
200013c6:	fa00 f001 	lsl.w	r0, r0, r1
200013ca:	d90b      	bls.n	200013e4 <__udivmoddi4+0x1b0>
200013cc:	eb1c 0404 	adds.w	r4, ip, r4
200013d0:	f108 3aff 	add.w	sl, r8, #4294967295
200013d4:	f080 8088 	bcs.w	200014e8 <__udivmoddi4+0x2b4>
200013d8:	42a5      	cmp	r5, r4
200013da:	f240 8085 	bls.w	200014e8 <__udivmoddi4+0x2b4>
200013de:	f1a8 0802 	sub.w	r8, r8, #2
200013e2:	4464      	add	r4, ip
200013e4:	1b64      	subs	r4, r4, r5
200013e6:	b29d      	uxth	r5, r3
200013e8:	fbb4 f3f9 	udiv	r3, r4, r9
200013ec:	fb09 4413 	mls	r4, r9, r3, r4
200013f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
200013f4:	fb03 fe0e 	mul.w	lr, r3, lr
200013f8:	45a6      	cmp	lr, r4
200013fa:	d908      	bls.n	2000140e <__udivmoddi4+0x1da>
200013fc:	eb1c 0404 	adds.w	r4, ip, r4
20001400:	f103 35ff 	add.w	r5, r3, #4294967295
20001404:	d26c      	bcs.n	200014e0 <__udivmoddi4+0x2ac>
20001406:	45a6      	cmp	lr, r4
20001408:	d96a      	bls.n	200014e0 <__udivmoddi4+0x2ac>
2000140a:	3b02      	subs	r3, #2
2000140c:	4464      	add	r4, ip
2000140e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
20001412:	fba3 9502 	umull	r9, r5, r3, r2
20001416:	eba4 040e 	sub.w	r4, r4, lr
2000141a:	42ac      	cmp	r4, r5
2000141c:	46c8      	mov	r8, r9
2000141e:	46ae      	mov	lr, r5
20001420:	d356      	bcc.n	200014d0 <__udivmoddi4+0x29c>
20001422:	d053      	beq.n	200014cc <__udivmoddi4+0x298>
20001424:	b156      	cbz	r6, 2000143c <__udivmoddi4+0x208>
20001426:	ebb0 0208 	subs.w	r2, r0, r8
2000142a:	eb64 040e 	sbc.w	r4, r4, lr
2000142e:	fa04 f707 	lsl.w	r7, r4, r7
20001432:	40ca      	lsrs	r2, r1
20001434:	40cc      	lsrs	r4, r1
20001436:	4317      	orrs	r7, r2
20001438:	e9c6 7400 	strd	r7, r4, [r6]
2000143c:	4618      	mov	r0, r3
2000143e:	2100      	movs	r1, #0
20001440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20001444:	f1c3 0120 	rsb	r1, r3, #32
20001448:	fa02 fc03 	lsl.w	ip, r2, r3
2000144c:	fa20 f201 	lsr.w	r2, r0, r1
20001450:	fa25 f101 	lsr.w	r1, r5, r1
20001454:	409d      	lsls	r5, r3
20001456:	432a      	orrs	r2, r5
20001458:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000145c:	fa1f fe8c 	uxth.w	lr, ip
20001460:	fbb1 f0f7 	udiv	r0, r1, r7
20001464:	fb07 1510 	mls	r5, r7, r0, r1
20001468:	0c11      	lsrs	r1, r2, #16
2000146a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
2000146e:	fb00 f50e 	mul.w	r5, r0, lr
20001472:	428d      	cmp	r5, r1
20001474:	fa04 f403 	lsl.w	r4, r4, r3
20001478:	d908      	bls.n	2000148c <__udivmoddi4+0x258>
2000147a:	eb1c 0101 	adds.w	r1, ip, r1
2000147e:	f100 38ff 	add.w	r8, r0, #4294967295
20001482:	d22f      	bcs.n	200014e4 <__udivmoddi4+0x2b0>
20001484:	428d      	cmp	r5, r1
20001486:	d92d      	bls.n	200014e4 <__udivmoddi4+0x2b0>
20001488:	3802      	subs	r0, #2
2000148a:	4461      	add	r1, ip
2000148c:	1b49      	subs	r1, r1, r5
2000148e:	b292      	uxth	r2, r2
20001490:	fbb1 f5f7 	udiv	r5, r1, r7
20001494:	fb07 1115 	mls	r1, r7, r5, r1
20001498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
2000149c:	fb05 f10e 	mul.w	r1, r5, lr
200014a0:	4291      	cmp	r1, r2
200014a2:	d908      	bls.n	200014b6 <__udivmoddi4+0x282>
200014a4:	eb1c 0202 	adds.w	r2, ip, r2
200014a8:	f105 38ff 	add.w	r8, r5, #4294967295
200014ac:	d216      	bcs.n	200014dc <__udivmoddi4+0x2a8>
200014ae:	4291      	cmp	r1, r2
200014b0:	d914      	bls.n	200014dc <__udivmoddi4+0x2a8>
200014b2:	3d02      	subs	r5, #2
200014b4:	4462      	add	r2, ip
200014b6:	1a52      	subs	r2, r2, r1
200014b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
200014bc:	e738      	b.n	20001330 <__udivmoddi4+0xfc>
200014be:	4631      	mov	r1, r6
200014c0:	4630      	mov	r0, r6
200014c2:	e708      	b.n	200012d6 <__udivmoddi4+0xa2>
200014c4:	4639      	mov	r1, r7
200014c6:	e6e6      	b.n	20001296 <__udivmoddi4+0x62>
200014c8:	4610      	mov	r0, r2
200014ca:	e6fb      	b.n	200012c4 <__udivmoddi4+0x90>
200014cc:	4548      	cmp	r0, r9
200014ce:	d2a9      	bcs.n	20001424 <__udivmoddi4+0x1f0>
200014d0:	ebb9 0802 	subs.w	r8, r9, r2
200014d4:	eb65 0e0c 	sbc.w	lr, r5, ip
200014d8:	3b01      	subs	r3, #1
200014da:	e7a3      	b.n	20001424 <__udivmoddi4+0x1f0>
200014dc:	4645      	mov	r5, r8
200014de:	e7ea      	b.n	200014b6 <__udivmoddi4+0x282>
200014e0:	462b      	mov	r3, r5
200014e2:	e794      	b.n	2000140e <__udivmoddi4+0x1da>
200014e4:	4640      	mov	r0, r8
200014e6:	e7d1      	b.n	2000148c <__udivmoddi4+0x258>
200014e8:	46d0      	mov	r8, sl
200014ea:	e77b      	b.n	200013e4 <__udivmoddi4+0x1b0>
200014ec:	3d02      	subs	r5, #2
200014ee:	4462      	add	r2, ip
200014f0:	e732      	b.n	20001358 <__udivmoddi4+0x124>
200014f2:	4608      	mov	r0, r1
200014f4:	e70a      	b.n	2000130c <__udivmoddi4+0xd8>
200014f6:	4464      	add	r4, ip
200014f8:	3802      	subs	r0, #2
200014fa:	e742      	b.n	20001382 <__udivmoddi4+0x14e>

200014fc <__aeabi_idiv0>:
200014fc:	4770      	bx	lr
200014fe:	bf00      	nop

20001500 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
20001500:	b580      	push	{r7, lr}
20001502:	b08a      	sub	sp, #40	; 0x28
20001504:	af00      	add	r7, sp, #0
20001506:	4603      	mov	r3, r0
20001508:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
2000150a:	79fb      	ldrb	r3, [r7, #7]
2000150c:	2b00      	cmp	r3, #0
2000150e:	d10e      	bne.n	2000152e <BSP_LED_Init+0x2e>
20001510:	2300      	movs	r3, #0
20001512:	613b      	str	r3, [r7, #16]
20001514:	4b1f      	ldr	r3, [pc, #124]	; (20001594 <BSP_LED_Init+0x94>)
20001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001518:	4a1e      	ldr	r2, [pc, #120]	; (20001594 <BSP_LED_Init+0x94>)
2000151a:	f043 0302 	orr.w	r3, r3, #2
2000151e:	6313      	str	r3, [r2, #48]	; 0x30
20001520:	4b1c      	ldr	r3, [pc, #112]	; (20001594 <BSP_LED_Init+0x94>)
20001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001524:	f003 0302 	and.w	r3, r3, #2
20001528:	613b      	str	r3, [r7, #16]
2000152a:	693b      	ldr	r3, [r7, #16]
2000152c:	e00d      	b.n	2000154a <BSP_LED_Init+0x4a>
2000152e:	2300      	movs	r3, #0
20001530:	60fb      	str	r3, [r7, #12]
20001532:	4b18      	ldr	r3, [pc, #96]	; (20001594 <BSP_LED_Init+0x94>)
20001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001536:	4a17      	ldr	r2, [pc, #92]	; (20001594 <BSP_LED_Init+0x94>)
20001538:	f043 0302 	orr.w	r3, r3, #2
2000153c:	6313      	str	r3, [r2, #48]	; 0x30
2000153e:	4b15      	ldr	r3, [pc, #84]	; (20001594 <BSP_LED_Init+0x94>)
20001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001542:	f003 0302 	and.w	r3, r3, #2
20001546:	60fb      	str	r3, [r7, #12]
20001548:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
2000154a:	79fb      	ldrb	r3, [r7, #7]
2000154c:	4a12      	ldr	r2, [pc, #72]	; (20001598 <BSP_LED_Init+0x98>)
2000154e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
20001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20001554:	2301      	movs	r3, #1
20001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001558:	2300      	movs	r3, #0
2000155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
2000155c:	2302      	movs	r3, #2
2000155e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20001560:	79fb      	ldrb	r3, [r7, #7]
20001562:	4a0e      	ldr	r2, [pc, #56]	; (2000159c <BSP_LED_Init+0x9c>)
20001564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20001568:	f107 0214 	add.w	r2, r7, #20
2000156c:	4611      	mov	r1, r2
2000156e:	4618      	mov	r0, r3
20001570:	f000 f9a8 	bl	200018c4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
20001574:	79fb      	ldrb	r3, [r7, #7]
20001576:	4a09      	ldr	r2, [pc, #36]	; (2000159c <BSP_LED_Init+0x9c>)
20001578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
2000157c:	79fb      	ldrb	r3, [r7, #7]
2000157e:	4a06      	ldr	r2, [pc, #24]	; (20001598 <BSP_LED_Init+0x98>)
20001580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
20001584:	2200      	movs	r2, #0
20001586:	4619      	mov	r1, r3
20001588:	f000 fb30 	bl	20001bec <HAL_GPIO_WritePin>
}
2000158c:	bf00      	nop
2000158e:	3728      	adds	r7, #40	; 0x28
20001590:	46bd      	mov	sp, r7
20001592:	bd80      	pop	{r7, pc}
20001594:	40023800 	.word	0x40023800
20001598:	2000331c 	.word	0x2000331c
2000159c:	2000334c 	.word	0x2000334c

200015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
200015a0:	b480      	push	{r7}
200015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
200015a4:	4b16      	ldr	r3, [pc, #88]	; (20001600 <SystemInit+0x60>)
200015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
200015aa:	4a15      	ldr	r2, [pc, #84]	; (20001600 <SystemInit+0x60>)
200015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
200015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200015b4:	4b13      	ldr	r3, [pc, #76]	; (20001604 <SystemInit+0x64>)
200015b6:	681b      	ldr	r3, [r3, #0]
200015b8:	4a12      	ldr	r2, [pc, #72]	; (20001604 <SystemInit+0x64>)
200015ba:	f043 0301 	orr.w	r3, r3, #1
200015be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200015c0:	4b10      	ldr	r3, [pc, #64]	; (20001604 <SystemInit+0x64>)
200015c2:	2200      	movs	r2, #0
200015c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
200015c6:	4b0f      	ldr	r3, [pc, #60]	; (20001604 <SystemInit+0x64>)
200015c8:	681b      	ldr	r3, [r3, #0]
200015ca:	4a0e      	ldr	r2, [pc, #56]	; (20001604 <SystemInit+0x64>)
200015cc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
200015d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
200015d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200015d6:	4b0b      	ldr	r3, [pc, #44]	; (20001604 <SystemInit+0x64>)
200015d8:	4a0b      	ldr	r2, [pc, #44]	; (20001608 <SystemInit+0x68>)
200015da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200015dc:	4b09      	ldr	r3, [pc, #36]	; (20001604 <SystemInit+0x64>)
200015de:	681b      	ldr	r3, [r3, #0]
200015e0:	4a08      	ldr	r2, [pc, #32]	; (20001604 <SystemInit+0x64>)
200015e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
200015e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200015e8:	4b06      	ldr	r3, [pc, #24]	; (20001604 <SystemInit+0x64>)
200015ea:	2200      	movs	r2, #0
200015ec:	60da      	str	r2, [r3, #12]


  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
200015ee:	4b04      	ldr	r3, [pc, #16]	; (20001600 <SystemInit+0x60>)
200015f0:	4a06      	ldr	r2, [pc, #24]	; (2000160c <SystemInit+0x6c>)
200015f2:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
200015f4:	bf00      	nop
200015f6:	46bd      	mov	sp, r7
200015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
200015fc:	4770      	bx	lr
200015fe:	bf00      	nop
20001600:	e000ed00 	.word	0xe000ed00
20001604:	40023800 	.word	0x40023800
20001608:	24003010 	.word	0x24003010
2000160c:	20001000 	.word	0x20001000

20001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20001610:	b580      	push	{r7, lr}
20001612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20001614:	4b0b      	ldr	r3, [pc, #44]	; (20001644 <HAL_Init+0x34>)
20001616:	681b      	ldr	r3, [r3, #0]
20001618:	4a0a      	ldr	r2, [pc, #40]	; (20001644 <HAL_Init+0x34>)
2000161a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000161e:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20001620:	4b08      	ldr	r3, [pc, #32]	; (20001644 <HAL_Init+0x34>)
20001622:	681b      	ldr	r3, [r3, #0]
20001624:	4a07      	ldr	r2, [pc, #28]	; (20001644 <HAL_Init+0x34>)
20001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000162a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2000162c:	2003      	movs	r0, #3
2000162e:	f000 f915 	bl	2000185c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20001632:	200f      	movs	r0, #15
20001634:	f000 f810 	bl	20001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20001638:	f000 f806 	bl	20001648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
2000163c:	2300      	movs	r3, #0
}
2000163e:	4618      	mov	r0, r3
20001640:	bd80      	pop	{r7, pc}
20001642:	bf00      	nop
20001644:	40023c00 	.word	0x40023c00

20001648 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
20001648:	b480      	push	{r7}
2000164a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
2000164c:	bf00      	nop
2000164e:	46bd      	mov	sp, r7
20001650:	f85d 7b04 	ldr.w	r7, [sp], #4
20001654:	4770      	bx	lr
	...

20001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20001658:	b580      	push	{r7, lr}
2000165a:	b082      	sub	sp, #8
2000165c:	af00      	add	r7, sp, #0
2000165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20001660:	4b12      	ldr	r3, [pc, #72]	; (200016ac <HAL_InitTick+0x54>)
20001662:	681a      	ldr	r2, [r3, #0]
20001664:	4b12      	ldr	r3, [pc, #72]	; (200016b0 <HAL_InitTick+0x58>)
20001666:	781b      	ldrb	r3, [r3, #0]
20001668:	4619      	mov	r1, r3
2000166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
2000166e:	fbb3 f3f1 	udiv	r3, r3, r1
20001672:	fbb2 f3f3 	udiv	r3, r2, r3
20001676:	4618      	mov	r0, r3
20001678:	f000 f917 	bl	200018aa <HAL_SYSTICK_Config>
2000167c:	4603      	mov	r3, r0
2000167e:	2b00      	cmp	r3, #0
20001680:	d001      	beq.n	20001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
20001682:	2301      	movs	r3, #1
20001684:	e00e      	b.n	200016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20001686:	687b      	ldr	r3, [r7, #4]
20001688:	2b0f      	cmp	r3, #15
2000168a:	d80a      	bhi.n	200016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2000168c:	2200      	movs	r2, #0
2000168e:	6879      	ldr	r1, [r7, #4]
20001690:	f04f 30ff 	mov.w	r0, #4294967295
20001694:	f000 f8ed 	bl	20001872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20001698:	4a06      	ldr	r2, [pc, #24]	; (200016b4 <HAL_InitTick+0x5c>)
2000169a:	687b      	ldr	r3, [r7, #4]
2000169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2000169e:	2300      	movs	r3, #0
200016a0:	e000      	b.n	200016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
200016a2:	2301      	movs	r3, #1
}
200016a4:	4618      	mov	r0, r3
200016a6:	3708      	adds	r7, #8
200016a8:	46bd      	mov	sp, r7
200016aa:	bd80      	pop	{r7, pc}
200016ac:	20003358 	.word	0x20003358
200016b0:	20003360 	.word	0x20003360
200016b4:	2000335c 	.word	0x2000335c

200016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
200016b8:	b480      	push	{r7}
200016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
200016bc:	4b06      	ldr	r3, [pc, #24]	; (200016d8 <HAL_IncTick+0x20>)
200016be:	781b      	ldrb	r3, [r3, #0]
200016c0:	461a      	mov	r2, r3
200016c2:	4b06      	ldr	r3, [pc, #24]	; (200016dc <HAL_IncTick+0x24>)
200016c4:	681b      	ldr	r3, [r3, #0]
200016c6:	4413      	add	r3, r2
200016c8:	4a04      	ldr	r2, [pc, #16]	; (200016dc <HAL_IncTick+0x24>)
200016ca:	6013      	str	r3, [r2, #0]
}
200016cc:	bf00      	nop
200016ce:	46bd      	mov	sp, r7
200016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
200016d4:	4770      	bx	lr
200016d6:	bf00      	nop
200016d8:	20003360 	.word	0x20003360
200016dc:	20003380 	.word	0x20003380

200016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
200016e0:	b480      	push	{r7}
200016e2:	af00      	add	r7, sp, #0
  return uwTick;
200016e4:	4b03      	ldr	r3, [pc, #12]	; (200016f4 <HAL_GetTick+0x14>)
200016e6:	681b      	ldr	r3, [r3, #0]
}
200016e8:	4618      	mov	r0, r3
200016ea:	46bd      	mov	sp, r7
200016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200016f0:	4770      	bx	lr
200016f2:	bf00      	nop
200016f4:	20003380 	.word	0x20003380

200016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200016f8:	b480      	push	{r7}
200016fa:	b085      	sub	sp, #20
200016fc:	af00      	add	r7, sp, #0
200016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20001700:	687b      	ldr	r3, [r7, #4]
20001702:	f003 0307 	and.w	r3, r3, #7
20001706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20001708:	4b0c      	ldr	r3, [pc, #48]	; (2000173c <__NVIC_SetPriorityGrouping+0x44>)
2000170a:	68db      	ldr	r3, [r3, #12]
2000170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000170e:	68ba      	ldr	r2, [r7, #8]
20001710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
20001714:	4013      	ands	r3, r2
20001716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20001718:	68fb      	ldr	r3, [r7, #12]
2000171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2000171c:	68bb      	ldr	r3, [r7, #8]
2000171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
20001720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
20001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000172a:	4a04      	ldr	r2, [pc, #16]	; (2000173c <__NVIC_SetPriorityGrouping+0x44>)
2000172c:	68bb      	ldr	r3, [r7, #8]
2000172e:	60d3      	str	r3, [r2, #12]
}
20001730:	bf00      	nop
20001732:	3714      	adds	r7, #20
20001734:	46bd      	mov	sp, r7
20001736:	f85d 7b04 	ldr.w	r7, [sp], #4
2000173a:	4770      	bx	lr
2000173c:	e000ed00 	.word	0xe000ed00

20001740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20001740:	b480      	push	{r7}
20001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20001744:	4b04      	ldr	r3, [pc, #16]	; (20001758 <__NVIC_GetPriorityGrouping+0x18>)
20001746:	68db      	ldr	r3, [r3, #12]
20001748:	0a1b      	lsrs	r3, r3, #8
2000174a:	f003 0307 	and.w	r3, r3, #7
}
2000174e:	4618      	mov	r0, r3
20001750:	46bd      	mov	sp, r7
20001752:	f85d 7b04 	ldr.w	r7, [sp], #4
20001756:	4770      	bx	lr
20001758:	e000ed00 	.word	0xe000ed00

2000175c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
2000175c:	b480      	push	{r7}
2000175e:	b083      	sub	sp, #12
20001760:	af00      	add	r7, sp, #0
20001762:	4603      	mov	r3, r0
20001764:	6039      	str	r1, [r7, #0]
20001766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000176c:	2b00      	cmp	r3, #0
2000176e:	db0a      	blt.n	20001786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001770:	683b      	ldr	r3, [r7, #0]
20001772:	b2da      	uxtb	r2, r3
20001774:	490c      	ldr	r1, [pc, #48]	; (200017a8 <__NVIC_SetPriority+0x4c>)
20001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000177a:	0112      	lsls	r2, r2, #4
2000177c:	b2d2      	uxtb	r2, r2
2000177e:	440b      	add	r3, r1
20001780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20001784:	e00a      	b.n	2000179c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001786:	683b      	ldr	r3, [r7, #0]
20001788:	b2da      	uxtb	r2, r3
2000178a:	4908      	ldr	r1, [pc, #32]	; (200017ac <__NVIC_SetPriority+0x50>)
2000178c:	79fb      	ldrb	r3, [r7, #7]
2000178e:	f003 030f 	and.w	r3, r3, #15
20001792:	3b04      	subs	r3, #4
20001794:	0112      	lsls	r2, r2, #4
20001796:	b2d2      	uxtb	r2, r2
20001798:	440b      	add	r3, r1
2000179a:	761a      	strb	r2, [r3, #24]
}
2000179c:	bf00      	nop
2000179e:	370c      	adds	r7, #12
200017a0:	46bd      	mov	sp, r7
200017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200017a6:	4770      	bx	lr
200017a8:	e000e100 	.word	0xe000e100
200017ac:	e000ed00 	.word	0xe000ed00

200017b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
200017b0:	b480      	push	{r7}
200017b2:	b089      	sub	sp, #36	; 0x24
200017b4:	af00      	add	r7, sp, #0
200017b6:	60f8      	str	r0, [r7, #12]
200017b8:	60b9      	str	r1, [r7, #8]
200017ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
200017bc:	68fb      	ldr	r3, [r7, #12]
200017be:	f003 0307 	and.w	r3, r3, #7
200017c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200017c4:	69fb      	ldr	r3, [r7, #28]
200017c6:	f1c3 0307 	rsb	r3, r3, #7
200017ca:	2b04      	cmp	r3, #4
200017cc:	bf28      	it	cs
200017ce:	2304      	movcs	r3, #4
200017d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200017d2:	69fb      	ldr	r3, [r7, #28]
200017d4:	3304      	adds	r3, #4
200017d6:	2b06      	cmp	r3, #6
200017d8:	d902      	bls.n	200017e0 <NVIC_EncodePriority+0x30>
200017da:	69fb      	ldr	r3, [r7, #28]
200017dc:	3b03      	subs	r3, #3
200017de:	e000      	b.n	200017e2 <NVIC_EncodePriority+0x32>
200017e0:	2300      	movs	r3, #0
200017e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200017e4:	f04f 32ff 	mov.w	r2, #4294967295
200017e8:	69bb      	ldr	r3, [r7, #24]
200017ea:	fa02 f303 	lsl.w	r3, r2, r3
200017ee:	43da      	mvns	r2, r3
200017f0:	68bb      	ldr	r3, [r7, #8]
200017f2:	401a      	ands	r2, r3
200017f4:	697b      	ldr	r3, [r7, #20]
200017f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
200017f8:	f04f 31ff 	mov.w	r1, #4294967295
200017fc:	697b      	ldr	r3, [r7, #20]
200017fe:	fa01 f303 	lsl.w	r3, r1, r3
20001802:	43d9      	mvns	r1, r3
20001804:	687b      	ldr	r3, [r7, #4]
20001806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001808:	4313      	orrs	r3, r2
         );
}
2000180a:	4618      	mov	r0, r3
2000180c:	3724      	adds	r7, #36	; 0x24
2000180e:	46bd      	mov	sp, r7
20001810:	f85d 7b04 	ldr.w	r7, [sp], #4
20001814:	4770      	bx	lr
	...

20001818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20001818:	b580      	push	{r7, lr}
2000181a:	b082      	sub	sp, #8
2000181c:	af00      	add	r7, sp, #0
2000181e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20001820:	687b      	ldr	r3, [r7, #4]
20001822:	3b01      	subs	r3, #1
20001824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20001828:	d301      	bcc.n	2000182e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
2000182a:	2301      	movs	r3, #1
2000182c:	e00f      	b.n	2000184e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000182e:	4a0a      	ldr	r2, [pc, #40]	; (20001858 <SysTick_Config+0x40>)
20001830:	687b      	ldr	r3, [r7, #4]
20001832:	3b01      	subs	r3, #1
20001834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20001836:	210f      	movs	r1, #15
20001838:	f04f 30ff 	mov.w	r0, #4294967295
2000183c:	f7ff ff8e 	bl	2000175c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20001840:	4b05      	ldr	r3, [pc, #20]	; (20001858 <SysTick_Config+0x40>)
20001842:	2200      	movs	r2, #0
20001844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20001846:	4b04      	ldr	r3, [pc, #16]	; (20001858 <SysTick_Config+0x40>)
20001848:	2207      	movs	r2, #7
2000184a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
2000184c:	2300      	movs	r3, #0
}
2000184e:	4618      	mov	r0, r3
20001850:	3708      	adds	r7, #8
20001852:	46bd      	mov	sp, r7
20001854:	bd80      	pop	{r7, pc}
20001856:	bf00      	nop
20001858:	e000e010 	.word	0xe000e010

2000185c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000185c:	b580      	push	{r7, lr}
2000185e:	b082      	sub	sp, #8
20001860:	af00      	add	r7, sp, #0
20001862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20001864:	6878      	ldr	r0, [r7, #4]
20001866:	f7ff ff47 	bl	200016f8 <__NVIC_SetPriorityGrouping>
}
2000186a:	bf00      	nop
2000186c:	3708      	adds	r7, #8
2000186e:	46bd      	mov	sp, r7
20001870:	bd80      	pop	{r7, pc}

20001872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
20001872:	b580      	push	{r7, lr}
20001874:	b086      	sub	sp, #24
20001876:	af00      	add	r7, sp, #0
20001878:	4603      	mov	r3, r0
2000187a:	60b9      	str	r1, [r7, #8]
2000187c:	607a      	str	r2, [r7, #4]
2000187e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
20001880:	2300      	movs	r3, #0
20001882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20001884:	f7ff ff5c 	bl	20001740 <__NVIC_GetPriorityGrouping>
20001888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2000188a:	687a      	ldr	r2, [r7, #4]
2000188c:	68b9      	ldr	r1, [r7, #8]
2000188e:	6978      	ldr	r0, [r7, #20]
20001890:	f7ff ff8e 	bl	200017b0 <NVIC_EncodePriority>
20001894:	4602      	mov	r2, r0
20001896:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000189a:	4611      	mov	r1, r2
2000189c:	4618      	mov	r0, r3
2000189e:	f7ff ff5d 	bl	2000175c <__NVIC_SetPriority>
}
200018a2:	bf00      	nop
200018a4:	3718      	adds	r7, #24
200018a6:	46bd      	mov	sp, r7
200018a8:	bd80      	pop	{r7, pc}

200018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
200018aa:	b580      	push	{r7, lr}
200018ac:	b082      	sub	sp, #8
200018ae:	af00      	add	r7, sp, #0
200018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
200018b2:	6878      	ldr	r0, [r7, #4]
200018b4:	f7ff ffb0 	bl	20001818 <SysTick_Config>
200018b8:	4603      	mov	r3, r0
}
200018ba:	4618      	mov	r0, r3
200018bc:	3708      	adds	r7, #8
200018be:	46bd      	mov	sp, r7
200018c0:	bd80      	pop	{r7, pc}
	...

200018c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
200018c4:	b480      	push	{r7}
200018c6:	b089      	sub	sp, #36	; 0x24
200018c8:	af00      	add	r7, sp, #0
200018ca:	6078      	str	r0, [r7, #4]
200018cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
200018ce:	2300      	movs	r3, #0
200018d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
200018d2:	2300      	movs	r3, #0
200018d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
200018d6:	2300      	movs	r3, #0
200018d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
200018da:	2300      	movs	r3, #0
200018dc:	61fb      	str	r3, [r7, #28]
200018de:	e165      	b.n	20001bac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
200018e0:	2201      	movs	r2, #1
200018e2:	69fb      	ldr	r3, [r7, #28]
200018e4:	fa02 f303 	lsl.w	r3, r2, r3
200018e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
200018ea:	683b      	ldr	r3, [r7, #0]
200018ec:	681b      	ldr	r3, [r3, #0]
200018ee:	697a      	ldr	r2, [r7, #20]
200018f0:	4013      	ands	r3, r2
200018f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
200018f4:	693a      	ldr	r2, [r7, #16]
200018f6:	697b      	ldr	r3, [r7, #20]
200018f8:	429a      	cmp	r2, r3
200018fa:	f040 8154 	bne.w	20001ba6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
200018fe:	683b      	ldr	r3, [r7, #0]
20001900:	685b      	ldr	r3, [r3, #4]
20001902:	f003 0303 	and.w	r3, r3, #3
20001906:	2b01      	cmp	r3, #1
20001908:	d005      	beq.n	20001916 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
2000190a:	683b      	ldr	r3, [r7, #0]
2000190c:	685b      	ldr	r3, [r3, #4]
2000190e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001912:	2b02      	cmp	r3, #2
20001914:	d130      	bne.n	20001978 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
20001916:	687b      	ldr	r3, [r7, #4]
20001918:	689b      	ldr	r3, [r3, #8]
2000191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
2000191c:	69fb      	ldr	r3, [r7, #28]
2000191e:	005b      	lsls	r3, r3, #1
20001920:	2203      	movs	r2, #3
20001922:	fa02 f303 	lsl.w	r3, r2, r3
20001926:	43db      	mvns	r3, r3
20001928:	69ba      	ldr	r2, [r7, #24]
2000192a:	4013      	ands	r3, r2
2000192c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2000192e:	683b      	ldr	r3, [r7, #0]
20001930:	68da      	ldr	r2, [r3, #12]
20001932:	69fb      	ldr	r3, [r7, #28]
20001934:	005b      	lsls	r3, r3, #1
20001936:	fa02 f303 	lsl.w	r3, r2, r3
2000193a:	69ba      	ldr	r2, [r7, #24]
2000193c:	4313      	orrs	r3, r2
2000193e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
20001940:	687b      	ldr	r3, [r7, #4]
20001942:	69ba      	ldr	r2, [r7, #24]
20001944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
20001946:	687b      	ldr	r3, [r7, #4]
20001948:	685b      	ldr	r3, [r3, #4]
2000194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
2000194c:	2201      	movs	r2, #1
2000194e:	69fb      	ldr	r3, [r7, #28]
20001950:	fa02 f303 	lsl.w	r3, r2, r3
20001954:	43db      	mvns	r3, r3
20001956:	69ba      	ldr	r2, [r7, #24]
20001958:	4013      	ands	r3, r2
2000195a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
2000195c:	683b      	ldr	r3, [r7, #0]
2000195e:	685b      	ldr	r3, [r3, #4]
20001960:	091b      	lsrs	r3, r3, #4
20001962:	f003 0201 	and.w	r2, r3, #1
20001966:	69fb      	ldr	r3, [r7, #28]
20001968:	fa02 f303 	lsl.w	r3, r2, r3
2000196c:	69ba      	ldr	r2, [r7, #24]
2000196e:	4313      	orrs	r3, r2
20001970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
20001972:	687b      	ldr	r3, [r7, #4]
20001974:	69ba      	ldr	r2, [r7, #24]
20001976:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20001978:	683b      	ldr	r3, [r7, #0]
2000197a:	685b      	ldr	r3, [r3, #4]
2000197c:	f003 0303 	and.w	r3, r3, #3
20001980:	2b03      	cmp	r3, #3
20001982:	d017      	beq.n	200019b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
20001984:	687b      	ldr	r3, [r7, #4]
20001986:	68db      	ldr	r3, [r3, #12]
20001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2000198a:	69fb      	ldr	r3, [r7, #28]
2000198c:	005b      	lsls	r3, r3, #1
2000198e:	2203      	movs	r2, #3
20001990:	fa02 f303 	lsl.w	r3, r2, r3
20001994:	43db      	mvns	r3, r3
20001996:	69ba      	ldr	r2, [r7, #24]
20001998:	4013      	ands	r3, r2
2000199a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
2000199c:	683b      	ldr	r3, [r7, #0]
2000199e:	689a      	ldr	r2, [r3, #8]
200019a0:	69fb      	ldr	r3, [r7, #28]
200019a2:	005b      	lsls	r3, r3, #1
200019a4:	fa02 f303 	lsl.w	r3, r2, r3
200019a8:	69ba      	ldr	r2, [r7, #24]
200019aa:	4313      	orrs	r3, r2
200019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
200019ae:	687b      	ldr	r3, [r7, #4]
200019b0:	69ba      	ldr	r2, [r7, #24]
200019b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
200019b4:	683b      	ldr	r3, [r7, #0]
200019b6:	685b      	ldr	r3, [r3, #4]
200019b8:	f003 0303 	and.w	r3, r3, #3
200019bc:	2b02      	cmp	r3, #2
200019be:	d123      	bne.n	20001a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
200019c0:	69fb      	ldr	r3, [r7, #28]
200019c2:	08da      	lsrs	r2, r3, #3
200019c4:	687b      	ldr	r3, [r7, #4]
200019c6:	3208      	adds	r2, #8
200019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
200019ce:	69fb      	ldr	r3, [r7, #28]
200019d0:	f003 0307 	and.w	r3, r3, #7
200019d4:	009b      	lsls	r3, r3, #2
200019d6:	220f      	movs	r2, #15
200019d8:	fa02 f303 	lsl.w	r3, r2, r3
200019dc:	43db      	mvns	r3, r3
200019de:	69ba      	ldr	r2, [r7, #24]
200019e0:	4013      	ands	r3, r2
200019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
200019e4:	683b      	ldr	r3, [r7, #0]
200019e6:	691a      	ldr	r2, [r3, #16]
200019e8:	69fb      	ldr	r3, [r7, #28]
200019ea:	f003 0307 	and.w	r3, r3, #7
200019ee:	009b      	lsls	r3, r3, #2
200019f0:	fa02 f303 	lsl.w	r3, r2, r3
200019f4:	69ba      	ldr	r2, [r7, #24]
200019f6:	4313      	orrs	r3, r2
200019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
200019fa:	69fb      	ldr	r3, [r7, #28]
200019fc:	08da      	lsrs	r2, r3, #3
200019fe:	687b      	ldr	r3, [r7, #4]
20001a00:	3208      	adds	r2, #8
20001a02:	69b9      	ldr	r1, [r7, #24]
20001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20001a08:	687b      	ldr	r3, [r7, #4]
20001a0a:	681b      	ldr	r3, [r3, #0]
20001a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
20001a0e:	69fb      	ldr	r3, [r7, #28]
20001a10:	005b      	lsls	r3, r3, #1
20001a12:	2203      	movs	r2, #3
20001a14:	fa02 f303 	lsl.w	r3, r2, r3
20001a18:	43db      	mvns	r3, r3
20001a1a:	69ba      	ldr	r2, [r7, #24]
20001a1c:	4013      	ands	r3, r2
20001a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
20001a20:	683b      	ldr	r3, [r7, #0]
20001a22:	685b      	ldr	r3, [r3, #4]
20001a24:	f003 0203 	and.w	r2, r3, #3
20001a28:	69fb      	ldr	r3, [r7, #28]
20001a2a:	005b      	lsls	r3, r3, #1
20001a2c:	fa02 f303 	lsl.w	r3, r2, r3
20001a30:	69ba      	ldr	r2, [r7, #24]
20001a32:	4313      	orrs	r3, r2
20001a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
20001a36:	687b      	ldr	r3, [r7, #4]
20001a38:	69ba      	ldr	r2, [r7, #24]
20001a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
20001a3c:	683b      	ldr	r3, [r7, #0]
20001a3e:	685b      	ldr	r3, [r3, #4]
20001a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
20001a44:	2b00      	cmp	r3, #0
20001a46:	f000 80ae 	beq.w	20001ba6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20001a4a:	2300      	movs	r3, #0
20001a4c:	60fb      	str	r3, [r7, #12]
20001a4e:	4b5d      	ldr	r3, [pc, #372]	; (20001bc4 <HAL_GPIO_Init+0x300>)
20001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20001a52:	4a5c      	ldr	r2, [pc, #368]	; (20001bc4 <HAL_GPIO_Init+0x300>)
20001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20001a58:	6453      	str	r3, [r2, #68]	; 0x44
20001a5a:	4b5a      	ldr	r3, [pc, #360]	; (20001bc4 <HAL_GPIO_Init+0x300>)
20001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20001a62:	60fb      	str	r3, [r7, #12]
20001a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
20001a66:	4a58      	ldr	r2, [pc, #352]	; (20001bc8 <HAL_GPIO_Init+0x304>)
20001a68:	69fb      	ldr	r3, [r7, #28]
20001a6a:	089b      	lsrs	r3, r3, #2
20001a6c:	3302      	adds	r3, #2
20001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20001a74:	69fb      	ldr	r3, [r7, #28]
20001a76:	f003 0303 	and.w	r3, r3, #3
20001a7a:	009b      	lsls	r3, r3, #2
20001a7c:	220f      	movs	r2, #15
20001a7e:	fa02 f303 	lsl.w	r3, r2, r3
20001a82:	43db      	mvns	r3, r3
20001a84:	69ba      	ldr	r2, [r7, #24]
20001a86:	4013      	ands	r3, r2
20001a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20001a8a:	687b      	ldr	r3, [r7, #4]
20001a8c:	4a4f      	ldr	r2, [pc, #316]	; (20001bcc <HAL_GPIO_Init+0x308>)
20001a8e:	4293      	cmp	r3, r2
20001a90:	d025      	beq.n	20001ade <HAL_GPIO_Init+0x21a>
20001a92:	687b      	ldr	r3, [r7, #4]
20001a94:	4a4e      	ldr	r2, [pc, #312]	; (20001bd0 <HAL_GPIO_Init+0x30c>)
20001a96:	4293      	cmp	r3, r2
20001a98:	d01f      	beq.n	20001ada <HAL_GPIO_Init+0x216>
20001a9a:	687b      	ldr	r3, [r7, #4]
20001a9c:	4a4d      	ldr	r2, [pc, #308]	; (20001bd4 <HAL_GPIO_Init+0x310>)
20001a9e:	4293      	cmp	r3, r2
20001aa0:	d019      	beq.n	20001ad6 <HAL_GPIO_Init+0x212>
20001aa2:	687b      	ldr	r3, [r7, #4]
20001aa4:	4a4c      	ldr	r2, [pc, #304]	; (20001bd8 <HAL_GPIO_Init+0x314>)
20001aa6:	4293      	cmp	r3, r2
20001aa8:	d013      	beq.n	20001ad2 <HAL_GPIO_Init+0x20e>
20001aaa:	687b      	ldr	r3, [r7, #4]
20001aac:	4a4b      	ldr	r2, [pc, #300]	; (20001bdc <HAL_GPIO_Init+0x318>)
20001aae:	4293      	cmp	r3, r2
20001ab0:	d00d      	beq.n	20001ace <HAL_GPIO_Init+0x20a>
20001ab2:	687b      	ldr	r3, [r7, #4]
20001ab4:	4a4a      	ldr	r2, [pc, #296]	; (20001be0 <HAL_GPIO_Init+0x31c>)
20001ab6:	4293      	cmp	r3, r2
20001ab8:	d007      	beq.n	20001aca <HAL_GPIO_Init+0x206>
20001aba:	687b      	ldr	r3, [r7, #4]
20001abc:	4a49      	ldr	r2, [pc, #292]	; (20001be4 <HAL_GPIO_Init+0x320>)
20001abe:	4293      	cmp	r3, r2
20001ac0:	d101      	bne.n	20001ac6 <HAL_GPIO_Init+0x202>
20001ac2:	2306      	movs	r3, #6
20001ac4:	e00c      	b.n	20001ae0 <HAL_GPIO_Init+0x21c>
20001ac6:	2307      	movs	r3, #7
20001ac8:	e00a      	b.n	20001ae0 <HAL_GPIO_Init+0x21c>
20001aca:	2305      	movs	r3, #5
20001acc:	e008      	b.n	20001ae0 <HAL_GPIO_Init+0x21c>
20001ace:	2304      	movs	r3, #4
20001ad0:	e006      	b.n	20001ae0 <HAL_GPIO_Init+0x21c>
20001ad2:	2303      	movs	r3, #3
20001ad4:	e004      	b.n	20001ae0 <HAL_GPIO_Init+0x21c>
20001ad6:	2302      	movs	r3, #2
20001ad8:	e002      	b.n	20001ae0 <HAL_GPIO_Init+0x21c>
20001ada:	2301      	movs	r3, #1
20001adc:	e000      	b.n	20001ae0 <HAL_GPIO_Init+0x21c>
20001ade:	2300      	movs	r3, #0
20001ae0:	69fa      	ldr	r2, [r7, #28]
20001ae2:	f002 0203 	and.w	r2, r2, #3
20001ae6:	0092      	lsls	r2, r2, #2
20001ae8:	4093      	lsls	r3, r2
20001aea:	69ba      	ldr	r2, [r7, #24]
20001aec:	4313      	orrs	r3, r2
20001aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
20001af0:	4935      	ldr	r1, [pc, #212]	; (20001bc8 <HAL_GPIO_Init+0x304>)
20001af2:	69fb      	ldr	r3, [r7, #28]
20001af4:	089b      	lsrs	r3, r3, #2
20001af6:	3302      	adds	r3, #2
20001af8:	69ba      	ldr	r2, [r7, #24]
20001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20001afe:	4b3a      	ldr	r3, [pc, #232]	; (20001be8 <HAL_GPIO_Init+0x324>)
20001b00:	689b      	ldr	r3, [r3, #8]
20001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20001b04:	693b      	ldr	r3, [r7, #16]
20001b06:	43db      	mvns	r3, r3
20001b08:	69ba      	ldr	r2, [r7, #24]
20001b0a:	4013      	ands	r3, r2
20001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
20001b0e:	683b      	ldr	r3, [r7, #0]
20001b10:	685b      	ldr	r3, [r3, #4]
20001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
20001b16:	2b00      	cmp	r3, #0
20001b18:	d003      	beq.n	20001b22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
20001b1a:	69ba      	ldr	r2, [r7, #24]
20001b1c:	693b      	ldr	r3, [r7, #16]
20001b1e:	4313      	orrs	r3, r2
20001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
20001b22:	4a31      	ldr	r2, [pc, #196]	; (20001be8 <HAL_GPIO_Init+0x324>)
20001b24:	69bb      	ldr	r3, [r7, #24]
20001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20001b28:	4b2f      	ldr	r3, [pc, #188]	; (20001be8 <HAL_GPIO_Init+0x324>)
20001b2a:	68db      	ldr	r3, [r3, #12]
20001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20001b2e:	693b      	ldr	r3, [r7, #16]
20001b30:	43db      	mvns	r3, r3
20001b32:	69ba      	ldr	r2, [r7, #24]
20001b34:	4013      	ands	r3, r2
20001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
20001b38:	683b      	ldr	r3, [r7, #0]
20001b3a:	685b      	ldr	r3, [r3, #4]
20001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
20001b40:	2b00      	cmp	r3, #0
20001b42:	d003      	beq.n	20001b4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
20001b44:	69ba      	ldr	r2, [r7, #24]
20001b46:	693b      	ldr	r3, [r7, #16]
20001b48:	4313      	orrs	r3, r2
20001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20001b4c:	4a26      	ldr	r2, [pc, #152]	; (20001be8 <HAL_GPIO_Init+0x324>)
20001b4e:	69bb      	ldr	r3, [r7, #24]
20001b50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
20001b52:	4b25      	ldr	r3, [pc, #148]	; (20001be8 <HAL_GPIO_Init+0x324>)
20001b54:	685b      	ldr	r3, [r3, #4]
20001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20001b58:	693b      	ldr	r3, [r7, #16]
20001b5a:	43db      	mvns	r3, r3
20001b5c:	69ba      	ldr	r2, [r7, #24]
20001b5e:	4013      	ands	r3, r2
20001b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
20001b62:	683b      	ldr	r3, [r7, #0]
20001b64:	685b      	ldr	r3, [r3, #4]
20001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20001b6a:	2b00      	cmp	r3, #0
20001b6c:	d003      	beq.n	20001b76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
20001b6e:	69ba      	ldr	r2, [r7, #24]
20001b70:	693b      	ldr	r3, [r7, #16]
20001b72:	4313      	orrs	r3, r2
20001b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
20001b76:	4a1c      	ldr	r2, [pc, #112]	; (20001be8 <HAL_GPIO_Init+0x324>)
20001b78:	69bb      	ldr	r3, [r7, #24]
20001b7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20001b7c:	4b1a      	ldr	r3, [pc, #104]	; (20001be8 <HAL_GPIO_Init+0x324>)
20001b7e:	681b      	ldr	r3, [r3, #0]
20001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20001b82:	693b      	ldr	r3, [r7, #16]
20001b84:	43db      	mvns	r3, r3
20001b86:	69ba      	ldr	r2, [r7, #24]
20001b88:	4013      	ands	r3, r2
20001b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
20001b8c:	683b      	ldr	r3, [r7, #0]
20001b8e:	685b      	ldr	r3, [r3, #4]
20001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20001b94:	2b00      	cmp	r3, #0
20001b96:	d003      	beq.n	20001ba0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
20001b98:	69ba      	ldr	r2, [r7, #24]
20001b9a:	693b      	ldr	r3, [r7, #16]
20001b9c:	4313      	orrs	r3, r2
20001b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20001ba0:	4a11      	ldr	r2, [pc, #68]	; (20001be8 <HAL_GPIO_Init+0x324>)
20001ba2:	69bb      	ldr	r3, [r7, #24]
20001ba4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
20001ba6:	69fb      	ldr	r3, [r7, #28]
20001ba8:	3301      	adds	r3, #1
20001baa:	61fb      	str	r3, [r7, #28]
20001bac:	69fb      	ldr	r3, [r7, #28]
20001bae:	2b0f      	cmp	r3, #15
20001bb0:	f67f ae96 	bls.w	200018e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
20001bb4:	bf00      	nop
20001bb6:	bf00      	nop
20001bb8:	3724      	adds	r7, #36	; 0x24
20001bba:	46bd      	mov	sp, r7
20001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001bc0:	4770      	bx	lr
20001bc2:	bf00      	nop
20001bc4:	40023800 	.word	0x40023800
20001bc8:	40013800 	.word	0x40013800
20001bcc:	40020000 	.word	0x40020000
20001bd0:	40020400 	.word	0x40020400
20001bd4:	40020800 	.word	0x40020800
20001bd8:	40020c00 	.word	0x40020c00
20001bdc:	40021000 	.word	0x40021000
20001be0:	40021400 	.word	0x40021400
20001be4:	40021800 	.word	0x40021800
20001be8:	40013c00 	.word	0x40013c00

20001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20001bec:	b480      	push	{r7}
20001bee:	b083      	sub	sp, #12
20001bf0:	af00      	add	r7, sp, #0
20001bf2:	6078      	str	r0, [r7, #4]
20001bf4:	460b      	mov	r3, r1
20001bf6:	807b      	strh	r3, [r7, #2]
20001bf8:	4613      	mov	r3, r2
20001bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20001bfc:	787b      	ldrb	r3, [r7, #1]
20001bfe:	2b00      	cmp	r3, #0
20001c00:	d003      	beq.n	20001c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
20001c02:	887a      	ldrh	r2, [r7, #2]
20001c04:	687b      	ldr	r3, [r7, #4]
20001c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
20001c08:	e003      	b.n	20001c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
20001c0a:	887b      	ldrh	r3, [r7, #2]
20001c0c:	041a      	lsls	r2, r3, #16
20001c0e:	687b      	ldr	r3, [r7, #4]
20001c10:	619a      	str	r2, [r3, #24]
}
20001c12:	bf00      	nop
20001c14:	370c      	adds	r7, #12
20001c16:	46bd      	mov	sp, r7
20001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c1c:	4770      	bx	lr
	...

20001c20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
20001c20:	b580      	push	{r7, lr}
20001c22:	b082      	sub	sp, #8
20001c24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
20001c26:	2300      	movs	r3, #0
20001c28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
20001c2a:	2300      	movs	r3, #0
20001c2c:	603b      	str	r3, [r7, #0]
20001c2e:	4b20      	ldr	r3, [pc, #128]	; (20001cb0 <HAL_PWREx_EnableOverDrive+0x90>)
20001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001c32:	4a1f      	ldr	r2, [pc, #124]	; (20001cb0 <HAL_PWREx_EnableOverDrive+0x90>)
20001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20001c38:	6413      	str	r3, [r2, #64]	; 0x40
20001c3a:	4b1d      	ldr	r3, [pc, #116]	; (20001cb0 <HAL_PWREx_EnableOverDrive+0x90>)
20001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20001c42:	603b      	str	r3, [r7, #0]
20001c44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
20001c46:	4b1b      	ldr	r3, [pc, #108]	; (20001cb4 <HAL_PWREx_EnableOverDrive+0x94>)
20001c48:	2201      	movs	r2, #1
20001c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20001c4c:	f7ff fd48 	bl	200016e0 <HAL_GetTick>
20001c50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20001c52:	e009      	b.n	20001c68 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20001c54:	f7ff fd44 	bl	200016e0 <HAL_GetTick>
20001c58:	4602      	mov	r2, r0
20001c5a:	687b      	ldr	r3, [r7, #4]
20001c5c:	1ad3      	subs	r3, r2, r3
20001c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20001c62:	d901      	bls.n	20001c68 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
20001c64:	2303      	movs	r3, #3
20001c66:	e01f      	b.n	20001ca8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20001c68:	4b13      	ldr	r3, [pc, #76]	; (20001cb8 <HAL_PWREx_EnableOverDrive+0x98>)
20001c6a:	685b      	ldr	r3, [r3, #4]
20001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20001c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20001c74:	d1ee      	bne.n	20001c54 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20001c76:	4b11      	ldr	r3, [pc, #68]	; (20001cbc <HAL_PWREx_EnableOverDrive+0x9c>)
20001c78:	2201      	movs	r2, #1
20001c7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20001c7c:	f7ff fd30 	bl	200016e0 <HAL_GetTick>
20001c80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20001c82:	e009      	b.n	20001c98 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20001c84:	f7ff fd2c 	bl	200016e0 <HAL_GetTick>
20001c88:	4602      	mov	r2, r0
20001c8a:	687b      	ldr	r3, [r7, #4]
20001c8c:	1ad3      	subs	r3, r2, r3
20001c8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20001c92:	d901      	bls.n	20001c98 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
20001c94:	2303      	movs	r3, #3
20001c96:	e007      	b.n	20001ca8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20001c98:	4b07      	ldr	r3, [pc, #28]	; (20001cb8 <HAL_PWREx_EnableOverDrive+0x98>)
20001c9a:	685b      	ldr	r3, [r3, #4]
20001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20001ca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
20001ca4:	d1ee      	bne.n	20001c84 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
20001ca6:	2300      	movs	r3, #0
}
20001ca8:	4618      	mov	r0, r3
20001caa:	3708      	adds	r7, #8
20001cac:	46bd      	mov	sp, r7
20001cae:	bd80      	pop	{r7, pc}
20001cb0:	40023800 	.word	0x40023800
20001cb4:	420e0040 	.word	0x420e0040
20001cb8:	40007000 	.word	0x40007000
20001cbc:	420e0044 	.word	0x420e0044

20001cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20001cc0:	b580      	push	{r7, lr}
20001cc2:	b086      	sub	sp, #24
20001cc4:	af00      	add	r7, sp, #0
20001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
20001cc8:	687b      	ldr	r3, [r7, #4]
20001cca:	2b00      	cmp	r3, #0
20001ccc:	d101      	bne.n	20001cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
20001cce:	2301      	movs	r3, #1
20001cd0:	e26f      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20001cd2:	687b      	ldr	r3, [r7, #4]
20001cd4:	681b      	ldr	r3, [r3, #0]
20001cd6:	f003 0301 	and.w	r3, r3, #1
20001cda:	2b00      	cmp	r3, #0
20001cdc:	d075      	beq.n	20001dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20001cde:	4b88      	ldr	r3, [pc, #544]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001ce0:	689b      	ldr	r3, [r3, #8]
20001ce2:	f003 030c 	and.w	r3, r3, #12
20001ce6:	2b04      	cmp	r3, #4
20001ce8:	d00c      	beq.n	20001d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20001cea:	4b85      	ldr	r3, [pc, #532]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001cec:	689b      	ldr	r3, [r3, #8]
20001cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20001cf2:	2b08      	cmp	r3, #8
20001cf4:	d112      	bne.n	20001d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20001cf6:	4b82      	ldr	r3, [pc, #520]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001cf8:	685b      	ldr	r3, [r3, #4]
20001cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20001cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20001d02:	d10b      	bne.n	20001d1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20001d04:	4b7e      	ldr	r3, [pc, #504]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001d06:	681b      	ldr	r3, [r3, #0]
20001d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20001d0c:	2b00      	cmp	r3, #0
20001d0e:	d05b      	beq.n	20001dc8 <HAL_RCC_OscConfig+0x108>
20001d10:	687b      	ldr	r3, [r7, #4]
20001d12:	685b      	ldr	r3, [r3, #4]
20001d14:	2b00      	cmp	r3, #0
20001d16:	d157      	bne.n	20001dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
20001d18:	2301      	movs	r3, #1
20001d1a:	e24a      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20001d1c:	687b      	ldr	r3, [r7, #4]
20001d1e:	685b      	ldr	r3, [r3, #4]
20001d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20001d24:	d106      	bne.n	20001d34 <HAL_RCC_OscConfig+0x74>
20001d26:	4b76      	ldr	r3, [pc, #472]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001d28:	681b      	ldr	r3, [r3, #0]
20001d2a:	4a75      	ldr	r2, [pc, #468]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20001d30:	6013      	str	r3, [r2, #0]
20001d32:	e01d      	b.n	20001d70 <HAL_RCC_OscConfig+0xb0>
20001d34:	687b      	ldr	r3, [r7, #4]
20001d36:	685b      	ldr	r3, [r3, #4]
20001d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20001d3c:	d10c      	bne.n	20001d58 <HAL_RCC_OscConfig+0x98>
20001d3e:	4b70      	ldr	r3, [pc, #448]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001d40:	681b      	ldr	r3, [r3, #0]
20001d42:	4a6f      	ldr	r2, [pc, #444]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20001d48:	6013      	str	r3, [r2, #0]
20001d4a:	4b6d      	ldr	r3, [pc, #436]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001d4c:	681b      	ldr	r3, [r3, #0]
20001d4e:	4a6c      	ldr	r2, [pc, #432]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20001d54:	6013      	str	r3, [r2, #0]
20001d56:	e00b      	b.n	20001d70 <HAL_RCC_OscConfig+0xb0>
20001d58:	4b69      	ldr	r3, [pc, #420]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001d5a:	681b      	ldr	r3, [r3, #0]
20001d5c:	4a68      	ldr	r2, [pc, #416]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20001d62:	6013      	str	r3, [r2, #0]
20001d64:	4b66      	ldr	r3, [pc, #408]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001d66:	681b      	ldr	r3, [r3, #0]
20001d68:	4a65      	ldr	r2, [pc, #404]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
20001d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
20001d70:	687b      	ldr	r3, [r7, #4]
20001d72:	685b      	ldr	r3, [r3, #4]
20001d74:	2b00      	cmp	r3, #0
20001d76:	d013      	beq.n	20001da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20001d78:	f7ff fcb2 	bl	200016e0 <HAL_GetTick>
20001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20001d7e:	e008      	b.n	20001d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20001d80:	f7ff fcae 	bl	200016e0 <HAL_GetTick>
20001d84:	4602      	mov	r2, r0
20001d86:	693b      	ldr	r3, [r7, #16]
20001d88:	1ad3      	subs	r3, r2, r3
20001d8a:	2b64      	cmp	r3, #100	; 0x64
20001d8c:	d901      	bls.n	20001d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
20001d8e:	2303      	movs	r3, #3
20001d90:	e20f      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20001d92:	4b5b      	ldr	r3, [pc, #364]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001d94:	681b      	ldr	r3, [r3, #0]
20001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20001d9a:	2b00      	cmp	r3, #0
20001d9c:	d0f0      	beq.n	20001d80 <HAL_RCC_OscConfig+0xc0>
20001d9e:	e014      	b.n	20001dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20001da0:	f7ff fc9e 	bl	200016e0 <HAL_GetTick>
20001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20001da6:	e008      	b.n	20001dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20001da8:	f7ff fc9a 	bl	200016e0 <HAL_GetTick>
20001dac:	4602      	mov	r2, r0
20001dae:	693b      	ldr	r3, [r7, #16]
20001db0:	1ad3      	subs	r3, r2, r3
20001db2:	2b64      	cmp	r3, #100	; 0x64
20001db4:	d901      	bls.n	20001dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
20001db6:	2303      	movs	r3, #3
20001db8:	e1fb      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20001dba:	4b51      	ldr	r3, [pc, #324]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001dbc:	681b      	ldr	r3, [r3, #0]
20001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20001dc2:	2b00      	cmp	r3, #0
20001dc4:	d1f0      	bne.n	20001da8 <HAL_RCC_OscConfig+0xe8>
20001dc6:	e000      	b.n	20001dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20001dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20001dca:	687b      	ldr	r3, [r7, #4]
20001dcc:	681b      	ldr	r3, [r3, #0]
20001dce:	f003 0302 	and.w	r3, r3, #2
20001dd2:	2b00      	cmp	r3, #0
20001dd4:	d063      	beq.n	20001e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20001dd6:	4b4a      	ldr	r3, [pc, #296]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001dd8:	689b      	ldr	r3, [r3, #8]
20001dda:	f003 030c 	and.w	r3, r3, #12
20001dde:	2b00      	cmp	r3, #0
20001de0:	d00b      	beq.n	20001dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20001de2:	4b47      	ldr	r3, [pc, #284]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001de4:	689b      	ldr	r3, [r3, #8]
20001de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20001dea:	2b08      	cmp	r3, #8
20001dec:	d11c      	bne.n	20001e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20001dee:	4b44      	ldr	r3, [pc, #272]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001df0:	685b      	ldr	r3, [r3, #4]
20001df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20001df6:	2b00      	cmp	r3, #0
20001df8:	d116      	bne.n	20001e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20001dfa:	4b41      	ldr	r3, [pc, #260]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001dfc:	681b      	ldr	r3, [r3, #0]
20001dfe:	f003 0302 	and.w	r3, r3, #2
20001e02:	2b00      	cmp	r3, #0
20001e04:	d005      	beq.n	20001e12 <HAL_RCC_OscConfig+0x152>
20001e06:	687b      	ldr	r3, [r7, #4]
20001e08:	68db      	ldr	r3, [r3, #12]
20001e0a:	2b01      	cmp	r3, #1
20001e0c:	d001      	beq.n	20001e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
20001e0e:	2301      	movs	r3, #1
20001e10:	e1cf      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20001e12:	4b3b      	ldr	r3, [pc, #236]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001e14:	681b      	ldr	r3, [r3, #0]
20001e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20001e1a:	687b      	ldr	r3, [r7, #4]
20001e1c:	691b      	ldr	r3, [r3, #16]
20001e1e:	00db      	lsls	r3, r3, #3
20001e20:	4937      	ldr	r1, [pc, #220]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001e22:	4313      	orrs	r3, r2
20001e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20001e26:	e03a      	b.n	20001e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
20001e28:	687b      	ldr	r3, [r7, #4]
20001e2a:	68db      	ldr	r3, [r3, #12]
20001e2c:	2b00      	cmp	r3, #0
20001e2e:	d020      	beq.n	20001e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20001e30:	4b34      	ldr	r3, [pc, #208]	; (20001f04 <HAL_RCC_OscConfig+0x244>)
20001e32:	2201      	movs	r2, #1
20001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20001e36:	f7ff fc53 	bl	200016e0 <HAL_GetTick>
20001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20001e3c:	e008      	b.n	20001e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20001e3e:	f7ff fc4f 	bl	200016e0 <HAL_GetTick>
20001e42:	4602      	mov	r2, r0
20001e44:	693b      	ldr	r3, [r7, #16]
20001e46:	1ad3      	subs	r3, r2, r3
20001e48:	2b02      	cmp	r3, #2
20001e4a:	d901      	bls.n	20001e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
20001e4c:	2303      	movs	r3, #3
20001e4e:	e1b0      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20001e50:	4b2b      	ldr	r3, [pc, #172]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001e52:	681b      	ldr	r3, [r3, #0]
20001e54:	f003 0302 	and.w	r3, r3, #2
20001e58:	2b00      	cmp	r3, #0
20001e5a:	d0f0      	beq.n	20001e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20001e5c:	4b28      	ldr	r3, [pc, #160]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001e5e:	681b      	ldr	r3, [r3, #0]
20001e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20001e64:	687b      	ldr	r3, [r7, #4]
20001e66:	691b      	ldr	r3, [r3, #16]
20001e68:	00db      	lsls	r3, r3, #3
20001e6a:	4925      	ldr	r1, [pc, #148]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001e6c:	4313      	orrs	r3, r2
20001e6e:	600b      	str	r3, [r1, #0]
20001e70:	e015      	b.n	20001e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
20001e72:	4b24      	ldr	r3, [pc, #144]	; (20001f04 <HAL_RCC_OscConfig+0x244>)
20001e74:	2200      	movs	r2, #0
20001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20001e78:	f7ff fc32 	bl	200016e0 <HAL_GetTick>
20001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20001e7e:	e008      	b.n	20001e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20001e80:	f7ff fc2e 	bl	200016e0 <HAL_GetTick>
20001e84:	4602      	mov	r2, r0
20001e86:	693b      	ldr	r3, [r7, #16]
20001e88:	1ad3      	subs	r3, r2, r3
20001e8a:	2b02      	cmp	r3, #2
20001e8c:	d901      	bls.n	20001e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
20001e8e:	2303      	movs	r3, #3
20001e90:	e18f      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20001e92:	4b1b      	ldr	r3, [pc, #108]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001e94:	681b      	ldr	r3, [r3, #0]
20001e96:	f003 0302 	and.w	r3, r3, #2
20001e9a:	2b00      	cmp	r3, #0
20001e9c:	d1f0      	bne.n	20001e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20001e9e:	687b      	ldr	r3, [r7, #4]
20001ea0:	681b      	ldr	r3, [r3, #0]
20001ea2:	f003 0308 	and.w	r3, r3, #8
20001ea6:	2b00      	cmp	r3, #0
20001ea8:	d036      	beq.n	20001f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
20001eaa:	687b      	ldr	r3, [r7, #4]
20001eac:	695b      	ldr	r3, [r3, #20]
20001eae:	2b00      	cmp	r3, #0
20001eb0:	d016      	beq.n	20001ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
20001eb2:	4b15      	ldr	r3, [pc, #84]	; (20001f08 <HAL_RCC_OscConfig+0x248>)
20001eb4:	2201      	movs	r2, #1
20001eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20001eb8:	f7ff fc12 	bl	200016e0 <HAL_GetTick>
20001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20001ebe:	e008      	b.n	20001ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20001ec0:	f7ff fc0e 	bl	200016e0 <HAL_GetTick>
20001ec4:	4602      	mov	r2, r0
20001ec6:	693b      	ldr	r3, [r7, #16]
20001ec8:	1ad3      	subs	r3, r2, r3
20001eca:	2b02      	cmp	r3, #2
20001ecc:	d901      	bls.n	20001ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
20001ece:	2303      	movs	r3, #3
20001ed0:	e16f      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20001ed2:	4b0b      	ldr	r3, [pc, #44]	; (20001f00 <HAL_RCC_OscConfig+0x240>)
20001ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001ed6:	f003 0302 	and.w	r3, r3, #2
20001eda:	2b00      	cmp	r3, #0
20001edc:	d0f0      	beq.n	20001ec0 <HAL_RCC_OscConfig+0x200>
20001ede:	e01b      	b.n	20001f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20001ee0:	4b09      	ldr	r3, [pc, #36]	; (20001f08 <HAL_RCC_OscConfig+0x248>)
20001ee2:	2200      	movs	r2, #0
20001ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
20001ee6:	f7ff fbfb 	bl	200016e0 <HAL_GetTick>
20001eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20001eec:	e00e      	b.n	20001f0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20001eee:	f7ff fbf7 	bl	200016e0 <HAL_GetTick>
20001ef2:	4602      	mov	r2, r0
20001ef4:	693b      	ldr	r3, [r7, #16]
20001ef6:	1ad3      	subs	r3, r2, r3
20001ef8:	2b02      	cmp	r3, #2
20001efa:	d907      	bls.n	20001f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
20001efc:	2303      	movs	r3, #3
20001efe:	e158      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
20001f00:	40023800 	.word	0x40023800
20001f04:	42470000 	.word	0x42470000
20001f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20001f0c:	4b88      	ldr	r3, [pc, #544]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001f10:	f003 0302 	and.w	r3, r3, #2
20001f14:	2b00      	cmp	r3, #0
20001f16:	d1ea      	bne.n	20001eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20001f18:	687b      	ldr	r3, [r7, #4]
20001f1a:	681b      	ldr	r3, [r3, #0]
20001f1c:	f003 0304 	and.w	r3, r3, #4
20001f20:	2b00      	cmp	r3, #0
20001f22:	f000 8097 	beq.w	20002054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
20001f26:	2300      	movs	r3, #0
20001f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
20001f2a:	4b81      	ldr	r3, [pc, #516]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20001f32:	2b00      	cmp	r3, #0
20001f34:	d10f      	bne.n	20001f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
20001f36:	2300      	movs	r3, #0
20001f38:	60bb      	str	r3, [r7, #8]
20001f3a:	4b7d      	ldr	r3, [pc, #500]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001f3e:	4a7c      	ldr	r2, [pc, #496]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20001f44:	6413      	str	r3, [r2, #64]	; 0x40
20001f46:	4b7a      	ldr	r3, [pc, #488]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20001f4e:	60bb      	str	r3, [r7, #8]
20001f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
20001f52:	2301      	movs	r3, #1
20001f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20001f56:	4b77      	ldr	r3, [pc, #476]	; (20002134 <HAL_RCC_OscConfig+0x474>)
20001f58:	681b      	ldr	r3, [r3, #0]
20001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001f5e:	2b00      	cmp	r3, #0
20001f60:	d118      	bne.n	20001f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
20001f62:	4b74      	ldr	r3, [pc, #464]	; (20002134 <HAL_RCC_OscConfig+0x474>)
20001f64:	681b      	ldr	r3, [r3, #0]
20001f66:	4a73      	ldr	r2, [pc, #460]	; (20002134 <HAL_RCC_OscConfig+0x474>)
20001f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
20001f6e:	f7ff fbb7 	bl	200016e0 <HAL_GetTick>
20001f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20001f74:	e008      	b.n	20001f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20001f76:	f7ff fbb3 	bl	200016e0 <HAL_GetTick>
20001f7a:	4602      	mov	r2, r0
20001f7c:	693b      	ldr	r3, [r7, #16]
20001f7e:	1ad3      	subs	r3, r2, r3
20001f80:	2b02      	cmp	r3, #2
20001f82:	d901      	bls.n	20001f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
20001f84:	2303      	movs	r3, #3
20001f86:	e114      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20001f88:	4b6a      	ldr	r3, [pc, #424]	; (20002134 <HAL_RCC_OscConfig+0x474>)
20001f8a:	681b      	ldr	r3, [r3, #0]
20001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001f90:	2b00      	cmp	r3, #0
20001f92:	d0f0      	beq.n	20001f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20001f94:	687b      	ldr	r3, [r7, #4]
20001f96:	689b      	ldr	r3, [r3, #8]
20001f98:	2b01      	cmp	r3, #1
20001f9a:	d106      	bne.n	20001faa <HAL_RCC_OscConfig+0x2ea>
20001f9c:	4b64      	ldr	r3, [pc, #400]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001fa0:	4a63      	ldr	r2, [pc, #396]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001fa2:	f043 0301 	orr.w	r3, r3, #1
20001fa6:	6713      	str	r3, [r2, #112]	; 0x70
20001fa8:	e01c      	b.n	20001fe4 <HAL_RCC_OscConfig+0x324>
20001faa:	687b      	ldr	r3, [r7, #4]
20001fac:	689b      	ldr	r3, [r3, #8]
20001fae:	2b05      	cmp	r3, #5
20001fb0:	d10c      	bne.n	20001fcc <HAL_RCC_OscConfig+0x30c>
20001fb2:	4b5f      	ldr	r3, [pc, #380]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001fb6:	4a5e      	ldr	r2, [pc, #376]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001fb8:	f043 0304 	orr.w	r3, r3, #4
20001fbc:	6713      	str	r3, [r2, #112]	; 0x70
20001fbe:	4b5c      	ldr	r3, [pc, #368]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001fc2:	4a5b      	ldr	r2, [pc, #364]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001fc4:	f043 0301 	orr.w	r3, r3, #1
20001fc8:	6713      	str	r3, [r2, #112]	; 0x70
20001fca:	e00b      	b.n	20001fe4 <HAL_RCC_OscConfig+0x324>
20001fcc:	4b58      	ldr	r3, [pc, #352]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001fd0:	4a57      	ldr	r2, [pc, #348]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001fd2:	f023 0301 	bic.w	r3, r3, #1
20001fd6:	6713      	str	r3, [r2, #112]	; 0x70
20001fd8:	4b55      	ldr	r3, [pc, #340]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001fdc:	4a54      	ldr	r2, [pc, #336]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20001fde:	f023 0304 	bic.w	r3, r3, #4
20001fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20001fe4:	687b      	ldr	r3, [r7, #4]
20001fe6:	689b      	ldr	r3, [r3, #8]
20001fe8:	2b00      	cmp	r3, #0
20001fea:	d015      	beq.n	20002018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20001fec:	f7ff fb78 	bl	200016e0 <HAL_GetTick>
20001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20001ff2:	e00a      	b.n	2000200a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001ff4:	f7ff fb74 	bl	200016e0 <HAL_GetTick>
20001ff8:	4602      	mov	r2, r0
20001ffa:	693b      	ldr	r3, [r7, #16]
20001ffc:	1ad3      	subs	r3, r2, r3
20001ffe:	f241 3288 	movw	r2, #5000	; 0x1388
20002002:	4293      	cmp	r3, r2
20002004:	d901      	bls.n	2000200a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
20002006:	2303      	movs	r3, #3
20002008:	e0d3      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000200a:	4b49      	ldr	r3, [pc, #292]	; (20002130 <HAL_RCC_OscConfig+0x470>)
2000200c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000200e:	f003 0302 	and.w	r3, r3, #2
20002012:	2b00      	cmp	r3, #0
20002014:	d0ee      	beq.n	20001ff4 <HAL_RCC_OscConfig+0x334>
20002016:	e014      	b.n	20002042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
20002018:	f7ff fb62 	bl	200016e0 <HAL_GetTick>
2000201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000201e:	e00a      	b.n	20002036 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20002020:	f7ff fb5e 	bl	200016e0 <HAL_GetTick>
20002024:	4602      	mov	r2, r0
20002026:	693b      	ldr	r3, [r7, #16]
20002028:	1ad3      	subs	r3, r2, r3
2000202a:	f241 3288 	movw	r2, #5000	; 0x1388
2000202e:	4293      	cmp	r3, r2
20002030:	d901      	bls.n	20002036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
20002032:	2303      	movs	r3, #3
20002034:	e0bd      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20002036:	4b3e      	ldr	r3, [pc, #248]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000203a:	f003 0302 	and.w	r3, r3, #2
2000203e:	2b00      	cmp	r3, #0
20002040:	d1ee      	bne.n	20002020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
20002042:	7dfb      	ldrb	r3, [r7, #23]
20002044:	2b01      	cmp	r3, #1
20002046:	d105      	bne.n	20002054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
20002048:	4b39      	ldr	r3, [pc, #228]	; (20002130 <HAL_RCC_OscConfig+0x470>)
2000204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000204c:	4a38      	ldr	r2, [pc, #224]	; (20002130 <HAL_RCC_OscConfig+0x470>)
2000204e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20002052:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20002054:	687b      	ldr	r3, [r7, #4]
20002056:	699b      	ldr	r3, [r3, #24]
20002058:	2b00      	cmp	r3, #0
2000205a:	f000 80a9 	beq.w	200021b0 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2000205e:	4b34      	ldr	r3, [pc, #208]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20002060:	689b      	ldr	r3, [r3, #8]
20002062:	f003 030c 	and.w	r3, r3, #12
20002066:	2b08      	cmp	r3, #8
20002068:	d05c      	beq.n	20002124 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000206a:	687b      	ldr	r3, [r7, #4]
2000206c:	699b      	ldr	r3, [r3, #24]
2000206e:	2b02      	cmp	r3, #2
20002070:	d141      	bne.n	200020f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20002072:	4b31      	ldr	r3, [pc, #196]	; (20002138 <HAL_RCC_OscConfig+0x478>)
20002074:	2200      	movs	r2, #0
20002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
20002078:	f7ff fb32 	bl	200016e0 <HAL_GetTick>
2000207c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000207e:	e008      	b.n	20002092 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20002080:	f7ff fb2e 	bl	200016e0 <HAL_GetTick>
20002084:	4602      	mov	r2, r0
20002086:	693b      	ldr	r3, [r7, #16]
20002088:	1ad3      	subs	r3, r2, r3
2000208a:	2b02      	cmp	r3, #2
2000208c:	d901      	bls.n	20002092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
2000208e:	2303      	movs	r3, #3
20002090:	e08f      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20002092:	4b27      	ldr	r3, [pc, #156]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20002094:	681b      	ldr	r3, [r3, #0]
20002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000209a:	2b00      	cmp	r3, #0
2000209c:	d1f0      	bne.n	20002080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
2000209e:	687b      	ldr	r3, [r7, #4]
200020a0:	69da      	ldr	r2, [r3, #28]
200020a2:	687b      	ldr	r3, [r7, #4]
200020a4:	6a1b      	ldr	r3, [r3, #32]
200020a6:	431a      	orrs	r2, r3
200020a8:	687b      	ldr	r3, [r7, #4]
200020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200020ac:	019b      	lsls	r3, r3, #6
200020ae:	431a      	orrs	r2, r3
200020b0:	687b      	ldr	r3, [r7, #4]
200020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200020b4:	085b      	lsrs	r3, r3, #1
200020b6:	3b01      	subs	r3, #1
200020b8:	041b      	lsls	r3, r3, #16
200020ba:	431a      	orrs	r2, r3
200020bc:	687b      	ldr	r3, [r7, #4]
200020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200020c0:	061b      	lsls	r3, r3, #24
200020c2:	491b      	ldr	r1, [pc, #108]	; (20002130 <HAL_RCC_OscConfig+0x470>)
200020c4:	4313      	orrs	r3, r2
200020c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
200020c8:	4b1b      	ldr	r3, [pc, #108]	; (20002138 <HAL_RCC_OscConfig+0x478>)
200020ca:	2201      	movs	r2, #1
200020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200020ce:	f7ff fb07 	bl	200016e0 <HAL_GetTick>
200020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200020d4:	e008      	b.n	200020e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200020d6:	f7ff fb03 	bl	200016e0 <HAL_GetTick>
200020da:	4602      	mov	r2, r0
200020dc:	693b      	ldr	r3, [r7, #16]
200020de:	1ad3      	subs	r3, r2, r3
200020e0:	2b02      	cmp	r3, #2
200020e2:	d901      	bls.n	200020e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
200020e4:	2303      	movs	r3, #3
200020e6:	e064      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200020e8:	4b11      	ldr	r3, [pc, #68]	; (20002130 <HAL_RCC_OscConfig+0x470>)
200020ea:	681b      	ldr	r3, [r3, #0]
200020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200020f0:	2b00      	cmp	r3, #0
200020f2:	d0f0      	beq.n	200020d6 <HAL_RCC_OscConfig+0x416>
200020f4:	e05c      	b.n	200021b0 <HAL_RCC_OscConfig+0x4f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
200020f6:	4b10      	ldr	r3, [pc, #64]	; (20002138 <HAL_RCC_OscConfig+0x478>)
200020f8:	2200      	movs	r2, #0
200020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200020fc:	f7ff faf0 	bl	200016e0 <HAL_GetTick>
20002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20002102:	e008      	b.n	20002116 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20002104:	f7ff faec 	bl	200016e0 <HAL_GetTick>
20002108:	4602      	mov	r2, r0
2000210a:	693b      	ldr	r3, [r7, #16]
2000210c:	1ad3      	subs	r3, r2, r3
2000210e:	2b02      	cmp	r3, #2
20002110:	d901      	bls.n	20002116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
20002112:	2303      	movs	r3, #3
20002114:	e04d      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20002116:	4b06      	ldr	r3, [pc, #24]	; (20002130 <HAL_RCC_OscConfig+0x470>)
20002118:	681b      	ldr	r3, [r3, #0]
2000211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000211e:	2b00      	cmp	r3, #0
20002120:	d1f0      	bne.n	20002104 <HAL_RCC_OscConfig+0x444>
20002122:	e045      	b.n	200021b0 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
20002124:	687b      	ldr	r3, [r7, #4]
20002126:	699b      	ldr	r3, [r3, #24]
20002128:	2b01      	cmp	r3, #1
2000212a:	d107      	bne.n	2000213c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
2000212c:	2301      	movs	r3, #1
2000212e:	e040      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
20002130:	40023800 	.word	0x40023800
20002134:	40007000 	.word	0x40007000
20002138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
2000213c:	4b1f      	ldr	r3, [pc, #124]	; (200021bc <HAL_RCC_OscConfig+0x4fc>)
2000213e:	685b      	ldr	r3, [r3, #4]
20002140:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20002142:	687b      	ldr	r3, [r7, #4]
20002144:	699b      	ldr	r3, [r3, #24]
20002146:	2b01      	cmp	r3, #1
20002148:	d030      	beq.n	200021ac <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000214a:	68fb      	ldr	r3, [r7, #12]
2000214c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
20002150:	687b      	ldr	r3, [r7, #4]
20002152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20002154:	429a      	cmp	r2, r3
20002156:	d129      	bne.n	200021ac <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20002158:	68fb      	ldr	r3, [r7, #12]
2000215a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000215e:	687b      	ldr	r3, [r7, #4]
20002160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20002162:	429a      	cmp	r2, r3
20002164:	d122      	bne.n	200021ac <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20002166:	68fa      	ldr	r2, [r7, #12]
20002168:	f647 73c0 	movw	r3, #32704	; 0x7fc0
2000216c:	4013      	ands	r3, r2
2000216e:	687a      	ldr	r2, [r7, #4]
20002170:	6a52      	ldr	r2, [r2, #36]	; 0x24
20002172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20002174:	4293      	cmp	r3, r2
20002176:	d119      	bne.n	200021ac <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20002178:	68fb      	ldr	r3, [r7, #12]
2000217a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2000217e:	687b      	ldr	r3, [r7, #4]
20002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002182:	085b      	lsrs	r3, r3, #1
20002184:	3b01      	subs	r3, #1
20002186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20002188:	429a      	cmp	r2, r3
2000218a:	d10f      	bne.n	200021ac <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
2000218c:	68fb      	ldr	r3, [r7, #12]
2000218e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
20002192:	687b      	ldr	r3, [r7, #4]
20002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20002198:	429a      	cmp	r2, r3
2000219a:	d107      	bne.n	200021ac <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
2000219c:	68fb      	ldr	r3, [r7, #12]
2000219e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
200021a2:	687b      	ldr	r3, [r7, #4]
200021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200021a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
200021a8:	429a      	cmp	r2, r3
200021aa:	d001      	beq.n	200021b0 <HAL_RCC_OscConfig+0x4f0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
200021ac:	2301      	movs	r3, #1
200021ae:	e000      	b.n	200021b2 <HAL_RCC_OscConfig+0x4f2>
        }
      }
    }
  }
  return HAL_OK;
200021b0:	2300      	movs	r3, #0
}
200021b2:	4618      	mov	r0, r3
200021b4:	3718      	adds	r7, #24
200021b6:	46bd      	mov	sp, r7
200021b8:	bd80      	pop	{r7, pc}
200021ba:	bf00      	nop
200021bc:	40023800 	.word	0x40023800

200021c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
200021c0:	b580      	push	{r7, lr}
200021c2:	b084      	sub	sp, #16
200021c4:	af00      	add	r7, sp, #0
200021c6:	6078      	str	r0, [r7, #4]
200021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
200021ca:	687b      	ldr	r3, [r7, #4]
200021cc:	2b00      	cmp	r3, #0
200021ce:	d101      	bne.n	200021d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
200021d0:	2301      	movs	r3, #1
200021d2:	e0cc      	b.n	2000236e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
200021d4:	4b68      	ldr	r3, [pc, #416]	; (20002378 <HAL_RCC_ClockConfig+0x1b8>)
200021d6:	681b      	ldr	r3, [r3, #0]
200021d8:	f003 030f 	and.w	r3, r3, #15
200021dc:	683a      	ldr	r2, [r7, #0]
200021de:	429a      	cmp	r2, r3
200021e0:	d90c      	bls.n	200021fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200021e2:	4b65      	ldr	r3, [pc, #404]	; (20002378 <HAL_RCC_ClockConfig+0x1b8>)
200021e4:	683a      	ldr	r2, [r7, #0]
200021e6:	b2d2      	uxtb	r2, r2
200021e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
200021ea:	4b63      	ldr	r3, [pc, #396]	; (20002378 <HAL_RCC_ClockConfig+0x1b8>)
200021ec:	681b      	ldr	r3, [r3, #0]
200021ee:	f003 030f 	and.w	r3, r3, #15
200021f2:	683a      	ldr	r2, [r7, #0]
200021f4:	429a      	cmp	r2, r3
200021f6:	d001      	beq.n	200021fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
200021f8:	2301      	movs	r3, #1
200021fa:	e0b8      	b.n	2000236e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
200021fc:	687b      	ldr	r3, [r7, #4]
200021fe:	681b      	ldr	r3, [r3, #0]
20002200:	f003 0302 	and.w	r3, r3, #2
20002204:	2b00      	cmp	r3, #0
20002206:	d020      	beq.n	2000224a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20002208:	687b      	ldr	r3, [r7, #4]
2000220a:	681b      	ldr	r3, [r3, #0]
2000220c:	f003 0304 	and.w	r3, r3, #4
20002210:	2b00      	cmp	r3, #0
20002212:	d005      	beq.n	20002220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20002214:	4b59      	ldr	r3, [pc, #356]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
20002216:	689b      	ldr	r3, [r3, #8]
20002218:	4a58      	ldr	r2, [pc, #352]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
2000221a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2000221e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20002220:	687b      	ldr	r3, [r7, #4]
20002222:	681b      	ldr	r3, [r3, #0]
20002224:	f003 0308 	and.w	r3, r3, #8
20002228:	2b00      	cmp	r3, #0
2000222a:	d005      	beq.n	20002238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
2000222c:	4b53      	ldr	r3, [pc, #332]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
2000222e:	689b      	ldr	r3, [r3, #8]
20002230:	4a52      	ldr	r2, [pc, #328]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
20002232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
20002236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20002238:	4b50      	ldr	r3, [pc, #320]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
2000223a:	689b      	ldr	r3, [r3, #8]
2000223c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
20002240:	687b      	ldr	r3, [r7, #4]
20002242:	689b      	ldr	r3, [r3, #8]
20002244:	494d      	ldr	r1, [pc, #308]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
20002246:	4313      	orrs	r3, r2
20002248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2000224a:	687b      	ldr	r3, [r7, #4]
2000224c:	681b      	ldr	r3, [r3, #0]
2000224e:	f003 0301 	and.w	r3, r3, #1
20002252:	2b00      	cmp	r3, #0
20002254:	d044      	beq.n	200022e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20002256:	687b      	ldr	r3, [r7, #4]
20002258:	685b      	ldr	r3, [r3, #4]
2000225a:	2b01      	cmp	r3, #1
2000225c:	d107      	bne.n	2000226e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000225e:	4b47      	ldr	r3, [pc, #284]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
20002260:	681b      	ldr	r3, [r3, #0]
20002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20002266:	2b00      	cmp	r3, #0
20002268:	d119      	bne.n	2000229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000226a:	2301      	movs	r3, #1
2000226c:	e07f      	b.n	2000236e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000226e:	687b      	ldr	r3, [r7, #4]
20002270:	685b      	ldr	r3, [r3, #4]
20002272:	2b02      	cmp	r3, #2
20002274:	d003      	beq.n	2000227e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
20002276:	687b      	ldr	r3, [r7, #4]
20002278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000227a:	2b03      	cmp	r3, #3
2000227c:	d107      	bne.n	2000228e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000227e:	4b3f      	ldr	r3, [pc, #252]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
20002280:	681b      	ldr	r3, [r3, #0]
20002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20002286:	2b00      	cmp	r3, #0
20002288:	d109      	bne.n	2000229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000228a:	2301      	movs	r3, #1
2000228c:	e06f      	b.n	2000236e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000228e:	4b3b      	ldr	r3, [pc, #236]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
20002290:	681b      	ldr	r3, [r3, #0]
20002292:	f003 0302 	and.w	r3, r3, #2
20002296:	2b00      	cmp	r3, #0
20002298:	d101      	bne.n	2000229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000229a:	2301      	movs	r3, #1
2000229c:	e067      	b.n	2000236e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000229e:	4b37      	ldr	r3, [pc, #220]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
200022a0:	689b      	ldr	r3, [r3, #8]
200022a2:	f023 0203 	bic.w	r2, r3, #3
200022a6:	687b      	ldr	r3, [r7, #4]
200022a8:	685b      	ldr	r3, [r3, #4]
200022aa:	4934      	ldr	r1, [pc, #208]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
200022ac:	4313      	orrs	r3, r2
200022ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
200022b0:	f7ff fa16 	bl	200016e0 <HAL_GetTick>
200022b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
200022b6:	e00a      	b.n	200022ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
200022b8:	f7ff fa12 	bl	200016e0 <HAL_GetTick>
200022bc:	4602      	mov	r2, r0
200022be:	68fb      	ldr	r3, [r7, #12]
200022c0:	1ad3      	subs	r3, r2, r3
200022c2:	f241 3288 	movw	r2, #5000	; 0x1388
200022c6:	4293      	cmp	r3, r2
200022c8:	d901      	bls.n	200022ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
200022ca:	2303      	movs	r3, #3
200022cc:	e04f      	b.n	2000236e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
200022ce:	4b2b      	ldr	r3, [pc, #172]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
200022d0:	689b      	ldr	r3, [r3, #8]
200022d2:	f003 020c 	and.w	r2, r3, #12
200022d6:	687b      	ldr	r3, [r7, #4]
200022d8:	685b      	ldr	r3, [r3, #4]
200022da:	009b      	lsls	r3, r3, #2
200022dc:	429a      	cmp	r2, r3
200022de:	d1eb      	bne.n	200022b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
200022e0:	4b25      	ldr	r3, [pc, #148]	; (20002378 <HAL_RCC_ClockConfig+0x1b8>)
200022e2:	681b      	ldr	r3, [r3, #0]
200022e4:	f003 030f 	and.w	r3, r3, #15
200022e8:	683a      	ldr	r2, [r7, #0]
200022ea:	429a      	cmp	r2, r3
200022ec:	d20c      	bcs.n	20002308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200022ee:	4b22      	ldr	r3, [pc, #136]	; (20002378 <HAL_RCC_ClockConfig+0x1b8>)
200022f0:	683a      	ldr	r2, [r7, #0]
200022f2:	b2d2      	uxtb	r2, r2
200022f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
200022f6:	4b20      	ldr	r3, [pc, #128]	; (20002378 <HAL_RCC_ClockConfig+0x1b8>)
200022f8:	681b      	ldr	r3, [r3, #0]
200022fa:	f003 030f 	and.w	r3, r3, #15
200022fe:	683a      	ldr	r2, [r7, #0]
20002300:	429a      	cmp	r2, r3
20002302:	d001      	beq.n	20002308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
20002304:	2301      	movs	r3, #1
20002306:	e032      	b.n	2000236e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20002308:	687b      	ldr	r3, [r7, #4]
2000230a:	681b      	ldr	r3, [r3, #0]
2000230c:	f003 0304 	and.w	r3, r3, #4
20002310:	2b00      	cmp	r3, #0
20002312:	d008      	beq.n	20002326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20002314:	4b19      	ldr	r3, [pc, #100]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
20002316:	689b      	ldr	r3, [r3, #8]
20002318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
2000231c:	687b      	ldr	r3, [r7, #4]
2000231e:	68db      	ldr	r3, [r3, #12]
20002320:	4916      	ldr	r1, [pc, #88]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
20002322:	4313      	orrs	r3, r2
20002324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20002326:	687b      	ldr	r3, [r7, #4]
20002328:	681b      	ldr	r3, [r3, #0]
2000232a:	f003 0308 	and.w	r3, r3, #8
2000232e:	2b00      	cmp	r3, #0
20002330:	d009      	beq.n	20002346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
20002332:	4b12      	ldr	r3, [pc, #72]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
20002334:	689b      	ldr	r3, [r3, #8]
20002336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
2000233a:	687b      	ldr	r3, [r7, #4]
2000233c:	691b      	ldr	r3, [r3, #16]
2000233e:	00db      	lsls	r3, r3, #3
20002340:	490e      	ldr	r1, [pc, #56]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
20002342:	4313      	orrs	r3, r2
20002344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
20002346:	f000 f821 	bl	2000238c <HAL_RCC_GetSysClockFreq>
2000234a:	4602      	mov	r2, r0
2000234c:	4b0b      	ldr	r3, [pc, #44]	; (2000237c <HAL_RCC_ClockConfig+0x1bc>)
2000234e:	689b      	ldr	r3, [r3, #8]
20002350:	091b      	lsrs	r3, r3, #4
20002352:	f003 030f 	and.w	r3, r3, #15
20002356:	490a      	ldr	r1, [pc, #40]	; (20002380 <HAL_RCC_ClockConfig+0x1c0>)
20002358:	5ccb      	ldrb	r3, [r1, r3]
2000235a:	fa22 f303 	lsr.w	r3, r2, r3
2000235e:	4a09      	ldr	r2, [pc, #36]	; (20002384 <HAL_RCC_ClockConfig+0x1c4>)
20002360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
20002362:	4b09      	ldr	r3, [pc, #36]	; (20002388 <HAL_RCC_ClockConfig+0x1c8>)
20002364:	681b      	ldr	r3, [r3, #0]
20002366:	4618      	mov	r0, r3
20002368:	f7ff f976 	bl	20001658 <HAL_InitTick>

  return HAL_OK;
2000236c:	2300      	movs	r3, #0
}
2000236e:	4618      	mov	r0, r3
20002370:	3710      	adds	r7, #16
20002372:	46bd      	mov	sp, r7
20002374:	bd80      	pop	{r7, pc}
20002376:	bf00      	nop
20002378:	40023c00 	.word	0x40023c00
2000237c:	40023800 	.word	0x40023800
20002380:	20003324 	.word	0x20003324
20002384:	20003358 	.word	0x20003358
20002388:	2000335c 	.word	0x2000335c

2000238c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
2000238c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20002390:	b094      	sub	sp, #80	; 0x50
20002392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
20002394:	2300      	movs	r3, #0
20002396:	647b      	str	r3, [r7, #68]	; 0x44
20002398:	2300      	movs	r3, #0
2000239a:	64fb      	str	r3, [r7, #76]	; 0x4c
2000239c:	2300      	movs	r3, #0
2000239e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
200023a0:	2300      	movs	r3, #0
200023a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
200023a4:	4b79      	ldr	r3, [pc, #484]	; (2000258c <HAL_RCC_GetSysClockFreq+0x200>)
200023a6:	689b      	ldr	r3, [r3, #8]
200023a8:	f003 030c 	and.w	r3, r3, #12
200023ac:	2b08      	cmp	r3, #8
200023ae:	d00d      	beq.n	200023cc <HAL_RCC_GetSysClockFreq+0x40>
200023b0:	2b08      	cmp	r3, #8
200023b2:	f200 80e1 	bhi.w	20002578 <HAL_RCC_GetSysClockFreq+0x1ec>
200023b6:	2b00      	cmp	r3, #0
200023b8:	d002      	beq.n	200023c0 <HAL_RCC_GetSysClockFreq+0x34>
200023ba:	2b04      	cmp	r3, #4
200023bc:	d003      	beq.n	200023c6 <HAL_RCC_GetSysClockFreq+0x3a>
200023be:	e0db      	b.n	20002578 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
200023c0:	4b73      	ldr	r3, [pc, #460]	; (20002590 <HAL_RCC_GetSysClockFreq+0x204>)
200023c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
200023c4:	e0db      	b.n	2000257e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
200023c6:	4b73      	ldr	r3, [pc, #460]	; (20002594 <HAL_RCC_GetSysClockFreq+0x208>)
200023c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
200023ca:	e0d8      	b.n	2000257e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200023cc:	4b6f      	ldr	r3, [pc, #444]	; (2000258c <HAL_RCC_GetSysClockFreq+0x200>)
200023ce:	685b      	ldr	r3, [r3, #4]
200023d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
200023d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
200023d6:	4b6d      	ldr	r3, [pc, #436]	; (2000258c <HAL_RCC_GetSysClockFreq+0x200>)
200023d8:	685b      	ldr	r3, [r3, #4]
200023da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
200023de:	2b00      	cmp	r3, #0
200023e0:	d063      	beq.n	200024aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
200023e2:	4b6a      	ldr	r3, [pc, #424]	; (2000258c <HAL_RCC_GetSysClockFreq+0x200>)
200023e4:	685b      	ldr	r3, [r3, #4]
200023e6:	099b      	lsrs	r3, r3, #6
200023e8:	2200      	movs	r2, #0
200023ea:	63bb      	str	r3, [r7, #56]	; 0x38
200023ec:	63fa      	str	r2, [r7, #60]	; 0x3c
200023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200023f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
200023f4:	633b      	str	r3, [r7, #48]	; 0x30
200023f6:	2300      	movs	r3, #0
200023f8:	637b      	str	r3, [r7, #52]	; 0x34
200023fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
200023fe:	4622      	mov	r2, r4
20002400:	462b      	mov	r3, r5
20002402:	f04f 0000 	mov.w	r0, #0
20002406:	f04f 0100 	mov.w	r1, #0
2000240a:	0159      	lsls	r1, r3, #5
2000240c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20002410:	0150      	lsls	r0, r2, #5
20002412:	4602      	mov	r2, r0
20002414:	460b      	mov	r3, r1
20002416:	4621      	mov	r1, r4
20002418:	1a51      	subs	r1, r2, r1
2000241a:	6139      	str	r1, [r7, #16]
2000241c:	4629      	mov	r1, r5
2000241e:	eb63 0301 	sbc.w	r3, r3, r1
20002422:	617b      	str	r3, [r7, #20]
20002424:	f04f 0200 	mov.w	r2, #0
20002428:	f04f 0300 	mov.w	r3, #0
2000242c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
20002430:	4659      	mov	r1, fp
20002432:	018b      	lsls	r3, r1, #6
20002434:	4651      	mov	r1, sl
20002436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
2000243a:	4651      	mov	r1, sl
2000243c:	018a      	lsls	r2, r1, #6
2000243e:	4651      	mov	r1, sl
20002440:	ebb2 0801 	subs.w	r8, r2, r1
20002444:	4659      	mov	r1, fp
20002446:	eb63 0901 	sbc.w	r9, r3, r1
2000244a:	f04f 0200 	mov.w	r2, #0
2000244e:	f04f 0300 	mov.w	r3, #0
20002452:	ea4f 03c9 	mov.w	r3, r9, lsl #3
20002456:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
2000245a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
2000245e:	4690      	mov	r8, r2
20002460:	4699      	mov	r9, r3
20002462:	4623      	mov	r3, r4
20002464:	eb18 0303 	adds.w	r3, r8, r3
20002468:	60bb      	str	r3, [r7, #8]
2000246a:	462b      	mov	r3, r5
2000246c:	eb49 0303 	adc.w	r3, r9, r3
20002470:	60fb      	str	r3, [r7, #12]
20002472:	f04f 0200 	mov.w	r2, #0
20002476:	f04f 0300 	mov.w	r3, #0
2000247a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
2000247e:	4629      	mov	r1, r5
20002480:	024b      	lsls	r3, r1, #9
20002482:	4621      	mov	r1, r4
20002484:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
20002488:	4621      	mov	r1, r4
2000248a:	024a      	lsls	r2, r1, #9
2000248c:	4610      	mov	r0, r2
2000248e:	4619      	mov	r1, r3
20002490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20002492:	2200      	movs	r2, #0
20002494:	62bb      	str	r3, [r7, #40]	; 0x28
20002496:	62fa      	str	r2, [r7, #44]	; 0x2c
20002498:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
2000249c:	f7fe feb2 	bl	20001204 <__aeabi_uldivmod>
200024a0:	4602      	mov	r2, r0
200024a2:	460b      	mov	r3, r1
200024a4:	4613      	mov	r3, r2
200024a6:	64fb      	str	r3, [r7, #76]	; 0x4c
200024a8:	e058      	b.n	2000255c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
200024aa:	4b38      	ldr	r3, [pc, #224]	; (2000258c <HAL_RCC_GetSysClockFreq+0x200>)
200024ac:	685b      	ldr	r3, [r3, #4]
200024ae:	099b      	lsrs	r3, r3, #6
200024b0:	2200      	movs	r2, #0
200024b2:	4618      	mov	r0, r3
200024b4:	4611      	mov	r1, r2
200024b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
200024ba:	623b      	str	r3, [r7, #32]
200024bc:	2300      	movs	r3, #0
200024be:	627b      	str	r3, [r7, #36]	; 0x24
200024c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
200024c4:	4642      	mov	r2, r8
200024c6:	464b      	mov	r3, r9
200024c8:	f04f 0000 	mov.w	r0, #0
200024cc:	f04f 0100 	mov.w	r1, #0
200024d0:	0159      	lsls	r1, r3, #5
200024d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
200024d6:	0150      	lsls	r0, r2, #5
200024d8:	4602      	mov	r2, r0
200024da:	460b      	mov	r3, r1
200024dc:	4641      	mov	r1, r8
200024de:	ebb2 0a01 	subs.w	sl, r2, r1
200024e2:	4649      	mov	r1, r9
200024e4:	eb63 0b01 	sbc.w	fp, r3, r1
200024e8:	f04f 0200 	mov.w	r2, #0
200024ec:	f04f 0300 	mov.w	r3, #0
200024f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
200024f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
200024f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
200024fc:	ebb2 040a 	subs.w	r4, r2, sl
20002500:	eb63 050b 	sbc.w	r5, r3, fp
20002504:	f04f 0200 	mov.w	r2, #0
20002508:	f04f 0300 	mov.w	r3, #0
2000250c:	00eb      	lsls	r3, r5, #3
2000250e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20002512:	00e2      	lsls	r2, r4, #3
20002514:	4614      	mov	r4, r2
20002516:	461d      	mov	r5, r3
20002518:	4643      	mov	r3, r8
2000251a:	18e3      	adds	r3, r4, r3
2000251c:	603b      	str	r3, [r7, #0]
2000251e:	464b      	mov	r3, r9
20002520:	eb45 0303 	adc.w	r3, r5, r3
20002524:	607b      	str	r3, [r7, #4]
20002526:	f04f 0200 	mov.w	r2, #0
2000252a:	f04f 0300 	mov.w	r3, #0
2000252e:	e9d7 4500 	ldrd	r4, r5, [r7]
20002532:	4629      	mov	r1, r5
20002534:	028b      	lsls	r3, r1, #10
20002536:	4621      	mov	r1, r4
20002538:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
2000253c:	4621      	mov	r1, r4
2000253e:	028a      	lsls	r2, r1, #10
20002540:	4610      	mov	r0, r2
20002542:	4619      	mov	r1, r3
20002544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20002546:	2200      	movs	r2, #0
20002548:	61bb      	str	r3, [r7, #24]
2000254a:	61fa      	str	r2, [r7, #28]
2000254c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20002550:	f7fe fe58 	bl	20001204 <__aeabi_uldivmod>
20002554:	4602      	mov	r2, r0
20002556:	460b      	mov	r3, r1
20002558:	4613      	mov	r3, r2
2000255a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
2000255c:	4b0b      	ldr	r3, [pc, #44]	; (2000258c <HAL_RCC_GetSysClockFreq+0x200>)
2000255e:	685b      	ldr	r3, [r3, #4]
20002560:	0c1b      	lsrs	r3, r3, #16
20002562:	f003 0303 	and.w	r3, r3, #3
20002566:	3301      	adds	r3, #1
20002568:	005b      	lsls	r3, r3, #1
2000256a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
2000256c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
2000256e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20002570:	fbb2 f3f3 	udiv	r3, r2, r3
20002574:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
20002576:	e002      	b.n	2000257e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20002578:	4b05      	ldr	r3, [pc, #20]	; (20002590 <HAL_RCC_GetSysClockFreq+0x204>)
2000257a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
2000257c:	bf00      	nop
    }
  }
  return sysclockfreq;
2000257e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
20002580:	4618      	mov	r0, r3
20002582:	3750      	adds	r7, #80	; 0x50
20002584:	46bd      	mov	sp, r7
20002586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
2000258a:	bf00      	nop
2000258c:	40023800 	.word	0x40023800
20002590:	00f42400 	.word	0x00f42400
20002594:	007a1200 	.word	0x007a1200

20002598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20002598:	b480      	push	{r7}
2000259a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
2000259c:	4b03      	ldr	r3, [pc, #12]	; (200025ac <HAL_RCC_GetHCLKFreq+0x14>)
2000259e:	681b      	ldr	r3, [r3, #0]
}
200025a0:	4618      	mov	r0, r3
200025a2:	46bd      	mov	sp, r7
200025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200025a8:	4770      	bx	lr
200025aa:	bf00      	nop
200025ac:	20003358 	.word	0x20003358

200025b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
200025b0:	b580      	push	{r7, lr}
200025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
200025b4:	f7ff fff0 	bl	20002598 <HAL_RCC_GetHCLKFreq>
200025b8:	4602      	mov	r2, r0
200025ba:	4b05      	ldr	r3, [pc, #20]	; (200025d0 <HAL_RCC_GetPCLK1Freq+0x20>)
200025bc:	689b      	ldr	r3, [r3, #8]
200025be:	0a9b      	lsrs	r3, r3, #10
200025c0:	f003 0307 	and.w	r3, r3, #7
200025c4:	4903      	ldr	r1, [pc, #12]	; (200025d4 <HAL_RCC_GetPCLK1Freq+0x24>)
200025c6:	5ccb      	ldrb	r3, [r1, r3]
200025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
200025cc:	4618      	mov	r0, r3
200025ce:	bd80      	pop	{r7, pc}
200025d0:	40023800 	.word	0x40023800
200025d4:	20003334 	.word	0x20003334

200025d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
200025d8:	b580      	push	{r7, lr}
200025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
200025dc:	f7ff ffdc 	bl	20002598 <HAL_RCC_GetHCLKFreq>
200025e0:	4602      	mov	r2, r0
200025e2:	4b05      	ldr	r3, [pc, #20]	; (200025f8 <HAL_RCC_GetPCLK2Freq+0x20>)
200025e4:	689b      	ldr	r3, [r3, #8]
200025e6:	0b5b      	lsrs	r3, r3, #13
200025e8:	f003 0307 	and.w	r3, r3, #7
200025ec:	4903      	ldr	r1, [pc, #12]	; (200025fc <HAL_RCC_GetPCLK2Freq+0x24>)
200025ee:	5ccb      	ldrb	r3, [r1, r3]
200025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
200025f4:	4618      	mov	r0, r3
200025f6:	bd80      	pop	{r7, pc}
200025f8:	40023800 	.word	0x40023800
200025fc:	20003334 	.word	0x20003334

20002600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
20002600:	b580      	push	{r7, lr}
20002602:	b082      	sub	sp, #8
20002604:	af00      	add	r7, sp, #0
20002606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
20002608:	687b      	ldr	r3, [r7, #4]
2000260a:	2b00      	cmp	r3, #0
2000260c:	d101      	bne.n	20002612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
2000260e:	2301      	movs	r3, #1
20002610:	e042      	b.n	20002698 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
20002612:	687b      	ldr	r3, [r7, #4]
20002614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20002618:	b2db      	uxtb	r3, r3
2000261a:	2b00      	cmp	r3, #0
2000261c:	d106      	bne.n	2000262c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
2000261e:	687b      	ldr	r3, [r7, #4]
20002620:	2200      	movs	r2, #0
20002622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
20002626:	6878      	ldr	r0, [r7, #4]
20002628:	f000 fda6 	bl	20003178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
2000262c:	687b      	ldr	r3, [r7, #4]
2000262e:	2224      	movs	r2, #36	; 0x24
20002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
20002634:	687b      	ldr	r3, [r7, #4]
20002636:	681b      	ldr	r3, [r3, #0]
20002638:	68da      	ldr	r2, [r3, #12]
2000263a:	687b      	ldr	r3, [r7, #4]
2000263c:	681b      	ldr	r3, [r3, #0]
2000263e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
20002642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
20002644:	6878      	ldr	r0, [r7, #4]
20002646:	f000 f82b 	bl	200026a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2000264a:	687b      	ldr	r3, [r7, #4]
2000264c:	681b      	ldr	r3, [r3, #0]
2000264e:	691a      	ldr	r2, [r3, #16]
20002650:	687b      	ldr	r3, [r7, #4]
20002652:	681b      	ldr	r3, [r3, #0]
20002654:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
20002658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
2000265a:	687b      	ldr	r3, [r7, #4]
2000265c:	681b      	ldr	r3, [r3, #0]
2000265e:	695a      	ldr	r2, [r3, #20]
20002660:	687b      	ldr	r3, [r7, #4]
20002662:	681b      	ldr	r3, [r3, #0]
20002664:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
20002668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
2000266a:	687b      	ldr	r3, [r7, #4]
2000266c:	681b      	ldr	r3, [r3, #0]
2000266e:	68da      	ldr	r2, [r3, #12]
20002670:	687b      	ldr	r3, [r7, #4]
20002672:	681b      	ldr	r3, [r3, #0]
20002674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
20002678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
2000267a:	687b      	ldr	r3, [r7, #4]
2000267c:	2200      	movs	r2, #0
2000267e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
20002680:	687b      	ldr	r3, [r7, #4]
20002682:	2220      	movs	r2, #32
20002684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
20002688:	687b      	ldr	r3, [r7, #4]
2000268a:	2220      	movs	r2, #32
2000268c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
20002690:	687b      	ldr	r3, [r7, #4]
20002692:	2200      	movs	r2, #0
20002694:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
20002696:	2300      	movs	r3, #0
}
20002698:	4618      	mov	r0, r3
2000269a:	3708      	adds	r7, #8
2000269c:	46bd      	mov	sp, r7
2000269e:	bd80      	pop	{r7, pc}

200026a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
200026a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
200026a4:	b0c0      	sub	sp, #256	; 0x100
200026a6:	af00      	add	r7, sp, #0
200026a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
200026ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200026b0:	681b      	ldr	r3, [r3, #0]
200026b2:	691b      	ldr	r3, [r3, #16]
200026b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
200026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200026bc:	68d9      	ldr	r1, [r3, #12]
200026be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200026c2:	681a      	ldr	r2, [r3, #0]
200026c4:	ea40 0301 	orr.w	r3, r0, r1
200026c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
200026ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200026ce:	689a      	ldr	r2, [r3, #8]
200026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200026d4:	691b      	ldr	r3, [r3, #16]
200026d6:	431a      	orrs	r2, r3
200026d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200026dc:	695b      	ldr	r3, [r3, #20]
200026de:	431a      	orrs	r2, r3
200026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200026e4:	69db      	ldr	r3, [r3, #28]
200026e6:	4313      	orrs	r3, r2
200026e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
200026ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200026f0:	681b      	ldr	r3, [r3, #0]
200026f2:	68db      	ldr	r3, [r3, #12]
200026f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
200026f8:	f021 010c 	bic.w	r1, r1, #12
200026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002700:	681a      	ldr	r2, [r3, #0]
20002702:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
20002706:	430b      	orrs	r3, r1
20002708:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
2000270a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
2000270e:	681b      	ldr	r3, [r3, #0]
20002710:	695b      	ldr	r3, [r3, #20]
20002712:	f423 7040 	bic.w	r0, r3, #768	; 0x300
20002716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
2000271a:	6999      	ldr	r1, [r3, #24]
2000271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002720:	681a      	ldr	r2, [r3, #0]
20002722:	ea40 0301 	orr.w	r3, r0, r1
20002726:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
20002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
2000272c:	681a      	ldr	r2, [r3, #0]
2000272e:	4b8f      	ldr	r3, [pc, #572]	; (2000296c <UART_SetConfig+0x2cc>)
20002730:	429a      	cmp	r2, r3
20002732:	d005      	beq.n	20002740 <UART_SetConfig+0xa0>
20002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002738:	681a      	ldr	r2, [r3, #0]
2000273a:	4b8d      	ldr	r3, [pc, #564]	; (20002970 <UART_SetConfig+0x2d0>)
2000273c:	429a      	cmp	r2, r3
2000273e:	d104      	bne.n	2000274a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
20002740:	f7ff ff4a 	bl	200025d8 <HAL_RCC_GetPCLK2Freq>
20002744:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
20002748:	e003      	b.n	20002752 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
2000274a:	f7ff ff31 	bl	200025b0 <HAL_RCC_GetPCLK1Freq>
2000274e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
20002752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002756:	69db      	ldr	r3, [r3, #28]
20002758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000275c:	f040 810c 	bne.w	20002978 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
20002760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20002764:	2200      	movs	r2, #0
20002766:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
2000276a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
2000276e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
20002772:	4622      	mov	r2, r4
20002774:	462b      	mov	r3, r5
20002776:	1891      	adds	r1, r2, r2
20002778:	65b9      	str	r1, [r7, #88]	; 0x58
2000277a:	415b      	adcs	r3, r3
2000277c:	65fb      	str	r3, [r7, #92]	; 0x5c
2000277e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
20002782:	4621      	mov	r1, r4
20002784:	eb12 0801 	adds.w	r8, r2, r1
20002788:	4629      	mov	r1, r5
2000278a:	eb43 0901 	adc.w	r9, r3, r1
2000278e:	f04f 0200 	mov.w	r2, #0
20002792:	f04f 0300 	mov.w	r3, #0
20002796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
2000279a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
2000279e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
200027a2:	4690      	mov	r8, r2
200027a4:	4699      	mov	r9, r3
200027a6:	4623      	mov	r3, r4
200027a8:	eb18 0303 	adds.w	r3, r8, r3
200027ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
200027b0:	462b      	mov	r3, r5
200027b2:	eb49 0303 	adc.w	r3, r9, r3
200027b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
200027ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200027be:	685b      	ldr	r3, [r3, #4]
200027c0:	2200      	movs	r2, #0
200027c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
200027c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
200027ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
200027ce:	460b      	mov	r3, r1
200027d0:	18db      	adds	r3, r3, r3
200027d2:	653b      	str	r3, [r7, #80]	; 0x50
200027d4:	4613      	mov	r3, r2
200027d6:	eb42 0303 	adc.w	r3, r2, r3
200027da:	657b      	str	r3, [r7, #84]	; 0x54
200027dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
200027e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
200027e4:	f7fe fd0e 	bl	20001204 <__aeabi_uldivmod>
200027e8:	4602      	mov	r2, r0
200027ea:	460b      	mov	r3, r1
200027ec:	4b61      	ldr	r3, [pc, #388]	; (20002974 <UART_SetConfig+0x2d4>)
200027ee:	fba3 2302 	umull	r2, r3, r3, r2
200027f2:	095b      	lsrs	r3, r3, #5
200027f4:	011c      	lsls	r4, r3, #4
200027f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
200027fa:	2200      	movs	r2, #0
200027fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
20002800:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
20002804:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
20002808:	4642      	mov	r2, r8
2000280a:	464b      	mov	r3, r9
2000280c:	1891      	adds	r1, r2, r2
2000280e:	64b9      	str	r1, [r7, #72]	; 0x48
20002810:	415b      	adcs	r3, r3
20002812:	64fb      	str	r3, [r7, #76]	; 0x4c
20002814:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
20002818:	4641      	mov	r1, r8
2000281a:	eb12 0a01 	adds.w	sl, r2, r1
2000281e:	4649      	mov	r1, r9
20002820:	eb43 0b01 	adc.w	fp, r3, r1
20002824:	f04f 0200 	mov.w	r2, #0
20002828:	f04f 0300 	mov.w	r3, #0
2000282c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
20002830:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
20002834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
20002838:	4692      	mov	sl, r2
2000283a:	469b      	mov	fp, r3
2000283c:	4643      	mov	r3, r8
2000283e:	eb1a 0303 	adds.w	r3, sl, r3
20002842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
20002846:	464b      	mov	r3, r9
20002848:	eb4b 0303 	adc.w	r3, fp, r3
2000284c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
20002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002854:	685b      	ldr	r3, [r3, #4]
20002856:	2200      	movs	r2, #0
20002858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
2000285c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
20002860:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
20002864:	460b      	mov	r3, r1
20002866:	18db      	adds	r3, r3, r3
20002868:	643b      	str	r3, [r7, #64]	; 0x40
2000286a:	4613      	mov	r3, r2
2000286c:	eb42 0303 	adc.w	r3, r2, r3
20002870:	647b      	str	r3, [r7, #68]	; 0x44
20002872:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
20002876:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
2000287a:	f7fe fcc3 	bl	20001204 <__aeabi_uldivmod>
2000287e:	4602      	mov	r2, r0
20002880:	460b      	mov	r3, r1
20002882:	4611      	mov	r1, r2
20002884:	4b3b      	ldr	r3, [pc, #236]	; (20002974 <UART_SetConfig+0x2d4>)
20002886:	fba3 2301 	umull	r2, r3, r3, r1
2000288a:	095b      	lsrs	r3, r3, #5
2000288c:	2264      	movs	r2, #100	; 0x64
2000288e:	fb02 f303 	mul.w	r3, r2, r3
20002892:	1acb      	subs	r3, r1, r3
20002894:	00db      	lsls	r3, r3, #3
20002896:	f103 0232 	add.w	r2, r3, #50	; 0x32
2000289a:	4b36      	ldr	r3, [pc, #216]	; (20002974 <UART_SetConfig+0x2d4>)
2000289c:	fba3 2302 	umull	r2, r3, r3, r2
200028a0:	095b      	lsrs	r3, r3, #5
200028a2:	005b      	lsls	r3, r3, #1
200028a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
200028a8:	441c      	add	r4, r3
200028aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
200028ae:	2200      	movs	r2, #0
200028b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
200028b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
200028b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
200028bc:	4642      	mov	r2, r8
200028be:	464b      	mov	r3, r9
200028c0:	1891      	adds	r1, r2, r2
200028c2:	63b9      	str	r1, [r7, #56]	; 0x38
200028c4:	415b      	adcs	r3, r3
200028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
200028c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
200028cc:	4641      	mov	r1, r8
200028ce:	1851      	adds	r1, r2, r1
200028d0:	6339      	str	r1, [r7, #48]	; 0x30
200028d2:	4649      	mov	r1, r9
200028d4:	414b      	adcs	r3, r1
200028d6:	637b      	str	r3, [r7, #52]	; 0x34
200028d8:	f04f 0200 	mov.w	r2, #0
200028dc:	f04f 0300 	mov.w	r3, #0
200028e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
200028e4:	4659      	mov	r1, fp
200028e6:	00cb      	lsls	r3, r1, #3
200028e8:	4651      	mov	r1, sl
200028ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
200028ee:	4651      	mov	r1, sl
200028f0:	00ca      	lsls	r2, r1, #3
200028f2:	4610      	mov	r0, r2
200028f4:	4619      	mov	r1, r3
200028f6:	4603      	mov	r3, r0
200028f8:	4642      	mov	r2, r8
200028fa:	189b      	adds	r3, r3, r2
200028fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
20002900:	464b      	mov	r3, r9
20002902:	460a      	mov	r2, r1
20002904:	eb42 0303 	adc.w	r3, r2, r3
20002908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
2000290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002910:	685b      	ldr	r3, [r3, #4]
20002912:	2200      	movs	r2, #0
20002914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
20002918:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
2000291c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
20002920:	460b      	mov	r3, r1
20002922:	18db      	adds	r3, r3, r3
20002924:	62bb      	str	r3, [r7, #40]	; 0x28
20002926:	4613      	mov	r3, r2
20002928:	eb42 0303 	adc.w	r3, r2, r3
2000292c:	62fb      	str	r3, [r7, #44]	; 0x2c
2000292e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
20002932:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
20002936:	f7fe fc65 	bl	20001204 <__aeabi_uldivmod>
2000293a:	4602      	mov	r2, r0
2000293c:	460b      	mov	r3, r1
2000293e:	4b0d      	ldr	r3, [pc, #52]	; (20002974 <UART_SetConfig+0x2d4>)
20002940:	fba3 1302 	umull	r1, r3, r3, r2
20002944:	095b      	lsrs	r3, r3, #5
20002946:	2164      	movs	r1, #100	; 0x64
20002948:	fb01 f303 	mul.w	r3, r1, r3
2000294c:	1ad3      	subs	r3, r2, r3
2000294e:	00db      	lsls	r3, r3, #3
20002950:	3332      	adds	r3, #50	; 0x32
20002952:	4a08      	ldr	r2, [pc, #32]	; (20002974 <UART_SetConfig+0x2d4>)
20002954:	fba2 2303 	umull	r2, r3, r2, r3
20002958:	095b      	lsrs	r3, r3, #5
2000295a:	f003 0207 	and.w	r2, r3, #7
2000295e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002962:	681b      	ldr	r3, [r3, #0]
20002964:	4422      	add	r2, r4
20002966:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
20002968:	e106      	b.n	20002b78 <UART_SetConfig+0x4d8>
2000296a:	bf00      	nop
2000296c:	40011000 	.word	0x40011000
20002970:	40011400 	.word	0x40011400
20002974:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
20002978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
2000297c:	2200      	movs	r2, #0
2000297e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
20002982:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
20002986:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
2000298a:	4642      	mov	r2, r8
2000298c:	464b      	mov	r3, r9
2000298e:	1891      	adds	r1, r2, r2
20002990:	6239      	str	r1, [r7, #32]
20002992:	415b      	adcs	r3, r3
20002994:	627b      	str	r3, [r7, #36]	; 0x24
20002996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
2000299a:	4641      	mov	r1, r8
2000299c:	1854      	adds	r4, r2, r1
2000299e:	4649      	mov	r1, r9
200029a0:	eb43 0501 	adc.w	r5, r3, r1
200029a4:	f04f 0200 	mov.w	r2, #0
200029a8:	f04f 0300 	mov.w	r3, #0
200029ac:	00eb      	lsls	r3, r5, #3
200029ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
200029b2:	00e2      	lsls	r2, r4, #3
200029b4:	4614      	mov	r4, r2
200029b6:	461d      	mov	r5, r3
200029b8:	4643      	mov	r3, r8
200029ba:	18e3      	adds	r3, r4, r3
200029bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
200029c0:	464b      	mov	r3, r9
200029c2:	eb45 0303 	adc.w	r3, r5, r3
200029c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
200029ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200029ce:	685b      	ldr	r3, [r3, #4]
200029d0:	2200      	movs	r2, #0
200029d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
200029d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
200029da:	f04f 0200 	mov.w	r2, #0
200029de:	f04f 0300 	mov.w	r3, #0
200029e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
200029e6:	4629      	mov	r1, r5
200029e8:	008b      	lsls	r3, r1, #2
200029ea:	4621      	mov	r1, r4
200029ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
200029f0:	4621      	mov	r1, r4
200029f2:	008a      	lsls	r2, r1, #2
200029f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
200029f8:	f7fe fc04 	bl	20001204 <__aeabi_uldivmod>
200029fc:	4602      	mov	r2, r0
200029fe:	460b      	mov	r3, r1
20002a00:	4b60      	ldr	r3, [pc, #384]	; (20002b84 <UART_SetConfig+0x4e4>)
20002a02:	fba3 2302 	umull	r2, r3, r3, r2
20002a06:	095b      	lsrs	r3, r3, #5
20002a08:	011c      	lsls	r4, r3, #4
20002a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20002a0e:	2200      	movs	r2, #0
20002a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
20002a14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
20002a18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
20002a1c:	4642      	mov	r2, r8
20002a1e:	464b      	mov	r3, r9
20002a20:	1891      	adds	r1, r2, r2
20002a22:	61b9      	str	r1, [r7, #24]
20002a24:	415b      	adcs	r3, r3
20002a26:	61fb      	str	r3, [r7, #28]
20002a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20002a2c:	4641      	mov	r1, r8
20002a2e:	1851      	adds	r1, r2, r1
20002a30:	6139      	str	r1, [r7, #16]
20002a32:	4649      	mov	r1, r9
20002a34:	414b      	adcs	r3, r1
20002a36:	617b      	str	r3, [r7, #20]
20002a38:	f04f 0200 	mov.w	r2, #0
20002a3c:	f04f 0300 	mov.w	r3, #0
20002a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
20002a44:	4659      	mov	r1, fp
20002a46:	00cb      	lsls	r3, r1, #3
20002a48:	4651      	mov	r1, sl
20002a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
20002a4e:	4651      	mov	r1, sl
20002a50:	00ca      	lsls	r2, r1, #3
20002a52:	4610      	mov	r0, r2
20002a54:	4619      	mov	r1, r3
20002a56:	4603      	mov	r3, r0
20002a58:	4642      	mov	r2, r8
20002a5a:	189b      	adds	r3, r3, r2
20002a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
20002a60:	464b      	mov	r3, r9
20002a62:	460a      	mov	r2, r1
20002a64:	eb42 0303 	adc.w	r3, r2, r3
20002a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
20002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002a70:	685b      	ldr	r3, [r3, #4]
20002a72:	2200      	movs	r2, #0
20002a74:	67bb      	str	r3, [r7, #120]	; 0x78
20002a76:	67fa      	str	r2, [r7, #124]	; 0x7c
20002a78:	f04f 0200 	mov.w	r2, #0
20002a7c:	f04f 0300 	mov.w	r3, #0
20002a80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
20002a84:	4649      	mov	r1, r9
20002a86:	008b      	lsls	r3, r1, #2
20002a88:	4641      	mov	r1, r8
20002a8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
20002a8e:	4641      	mov	r1, r8
20002a90:	008a      	lsls	r2, r1, #2
20002a92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
20002a96:	f7fe fbb5 	bl	20001204 <__aeabi_uldivmod>
20002a9a:	4602      	mov	r2, r0
20002a9c:	460b      	mov	r3, r1
20002a9e:	4611      	mov	r1, r2
20002aa0:	4b38      	ldr	r3, [pc, #224]	; (20002b84 <UART_SetConfig+0x4e4>)
20002aa2:	fba3 2301 	umull	r2, r3, r3, r1
20002aa6:	095b      	lsrs	r3, r3, #5
20002aa8:	2264      	movs	r2, #100	; 0x64
20002aaa:	fb02 f303 	mul.w	r3, r2, r3
20002aae:	1acb      	subs	r3, r1, r3
20002ab0:	011b      	lsls	r3, r3, #4
20002ab2:	3332      	adds	r3, #50	; 0x32
20002ab4:	4a33      	ldr	r2, [pc, #204]	; (20002b84 <UART_SetConfig+0x4e4>)
20002ab6:	fba2 2303 	umull	r2, r3, r2, r3
20002aba:	095b      	lsrs	r3, r3, #5
20002abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
20002ac0:	441c      	add	r4, r3
20002ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20002ac6:	2200      	movs	r2, #0
20002ac8:	673b      	str	r3, [r7, #112]	; 0x70
20002aca:	677a      	str	r2, [r7, #116]	; 0x74
20002acc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
20002ad0:	4642      	mov	r2, r8
20002ad2:	464b      	mov	r3, r9
20002ad4:	1891      	adds	r1, r2, r2
20002ad6:	60b9      	str	r1, [r7, #8]
20002ad8:	415b      	adcs	r3, r3
20002ada:	60fb      	str	r3, [r7, #12]
20002adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
20002ae0:	4641      	mov	r1, r8
20002ae2:	1851      	adds	r1, r2, r1
20002ae4:	6039      	str	r1, [r7, #0]
20002ae6:	4649      	mov	r1, r9
20002ae8:	414b      	adcs	r3, r1
20002aea:	607b      	str	r3, [r7, #4]
20002aec:	f04f 0200 	mov.w	r2, #0
20002af0:	f04f 0300 	mov.w	r3, #0
20002af4:	e9d7 ab00 	ldrd	sl, fp, [r7]
20002af8:	4659      	mov	r1, fp
20002afa:	00cb      	lsls	r3, r1, #3
20002afc:	4651      	mov	r1, sl
20002afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
20002b02:	4651      	mov	r1, sl
20002b04:	00ca      	lsls	r2, r1, #3
20002b06:	4610      	mov	r0, r2
20002b08:	4619      	mov	r1, r3
20002b0a:	4603      	mov	r3, r0
20002b0c:	4642      	mov	r2, r8
20002b0e:	189b      	adds	r3, r3, r2
20002b10:	66bb      	str	r3, [r7, #104]	; 0x68
20002b12:	464b      	mov	r3, r9
20002b14:	460a      	mov	r2, r1
20002b16:	eb42 0303 	adc.w	r3, r2, r3
20002b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
20002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002b20:	685b      	ldr	r3, [r3, #4]
20002b22:	2200      	movs	r2, #0
20002b24:	663b      	str	r3, [r7, #96]	; 0x60
20002b26:	667a      	str	r2, [r7, #100]	; 0x64
20002b28:	f04f 0200 	mov.w	r2, #0
20002b2c:	f04f 0300 	mov.w	r3, #0
20002b30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
20002b34:	4649      	mov	r1, r9
20002b36:	008b      	lsls	r3, r1, #2
20002b38:	4641      	mov	r1, r8
20002b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
20002b3e:	4641      	mov	r1, r8
20002b40:	008a      	lsls	r2, r1, #2
20002b42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
20002b46:	f7fe fb5d 	bl	20001204 <__aeabi_uldivmod>
20002b4a:	4602      	mov	r2, r0
20002b4c:	460b      	mov	r3, r1
20002b4e:	4b0d      	ldr	r3, [pc, #52]	; (20002b84 <UART_SetConfig+0x4e4>)
20002b50:	fba3 1302 	umull	r1, r3, r3, r2
20002b54:	095b      	lsrs	r3, r3, #5
20002b56:	2164      	movs	r1, #100	; 0x64
20002b58:	fb01 f303 	mul.w	r3, r1, r3
20002b5c:	1ad3      	subs	r3, r2, r3
20002b5e:	011b      	lsls	r3, r3, #4
20002b60:	3332      	adds	r3, #50	; 0x32
20002b62:	4a08      	ldr	r2, [pc, #32]	; (20002b84 <UART_SetConfig+0x4e4>)
20002b64:	fba2 2303 	umull	r2, r3, r2, r3
20002b68:	095b      	lsrs	r3, r3, #5
20002b6a:	f003 020f 	and.w	r2, r3, #15
20002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002b72:	681b      	ldr	r3, [r3, #0]
20002b74:	4422      	add	r2, r4
20002b76:	609a      	str	r2, [r3, #8]
}
20002b78:	bf00      	nop
20002b7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
20002b7e:	46bd      	mov	sp, r7
20002b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20002b84:	51eb851f 	.word	0x51eb851f

20002b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
20002b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 20002bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20002b8c:	480d      	ldr	r0, [pc, #52]	; (20002bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
20002b8e:	490e      	ldr	r1, [pc, #56]	; (20002bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
20002b90:	4a0e      	ldr	r2, [pc, #56]	; (20002bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
20002b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
20002b94:	e002      	b.n	20002b9c <LoopCopyDataInit>

20002b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20002b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20002b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20002b9a:	3304      	adds	r3, #4

20002b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20002b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20002b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
20002ba0:	d3f9      	bcc.n	20002b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20002ba2:	4a0b      	ldr	r2, [pc, #44]	; (20002bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
20002ba4:	4c0b      	ldr	r4, [pc, #44]	; (20002bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
20002ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
20002ba8:	e001      	b.n	20002bae <LoopFillZerobss>

20002baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20002baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20002bac:	3204      	adds	r2, #4

20002bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20002bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
20002bb0:	d3fb      	bcc.n	20002baa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
20002bb2:	f7fe fcf5 	bl	200015a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20002bb6:	f000 fb67 	bl	20003288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20002bba:	f000 f9bf 	bl	20002f3c <main>
  bx  lr    
20002bbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20002bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
20002bc4:	2000334c 	.word	0x2000334c
  ldr r1, =_edata
20002bc8:	20003364 	.word	0x20003364
  ldr r2, =_sidata
20002bcc:	2000334c 	.word	0x2000334c
  ldr r2, =_sbss
20002bd0:	20003364 	.word	0x20003364
  ldr r4, =_ebss
20002bd4:	200033e8 	.word	0x200033e8

20002bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20002bd8:	e7fe      	b.n	20002bd8 <ADC_IRQHandler>

20002bda <HEXQueueInit>:
	uint8_t next; //array index of the next element to write
	uint8_t buf[HEX_QUEUE_LEN];
	uint8_t len;
} HEXQueue;

void HEXQueueInit(HEXQueue *q) {
20002bda:	b480      	push	{r7}
20002bdc:	b083      	sub	sp, #12
20002bde:	af00      	add	r7, sp, #0
20002be0:	6078      	str	r0, [r7, #4]
	q->start = 0;
20002be2:	687b      	ldr	r3, [r7, #4]
20002be4:	2200      	movs	r2, #0
20002be6:	701a      	strb	r2, [r3, #0]
	q->next = 0;
20002be8:	687b      	ldr	r3, [r7, #4]
20002bea:	2200      	movs	r2, #0
20002bec:	705a      	strb	r2, [r3, #1]
	q->len = 0;
20002bee:	687b      	ldr	r3, [r7, #4]
20002bf0:	2200      	movs	r2, #0
20002bf2:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
20002bf6:	bf00      	nop
20002bf8:	370c      	adds	r7, #12
20002bfa:	46bd      	mov	sp, r7
20002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
20002c00:	4770      	bx	lr

20002c02 <HEXQueueFixBounds>:

void HEXQueueFixBounds(HEXQueue *q) {
20002c02:	b480      	push	{r7}
20002c04:	b083      	sub	sp, #12
20002c06:	af00      	add	r7, sp, #0
20002c08:	6078      	str	r0, [r7, #4]
	if(q->start >= HEX_QUEUE_LEN)
20002c0a:	687b      	ldr	r3, [r7, #4]
20002c0c:	781b      	ldrb	r3, [r3, #0]
20002c0e:	2bc7      	cmp	r3, #199	; 0xc7
20002c10:	d905      	bls.n	20002c1e <HEXQueueFixBounds+0x1c>
		q->start -= HEX_QUEUE_LEN;
20002c12:	687b      	ldr	r3, [r7, #4]
20002c14:	781b      	ldrb	r3, [r3, #0]
20002c16:	3338      	adds	r3, #56	; 0x38
20002c18:	b2da      	uxtb	r2, r3
20002c1a:	687b      	ldr	r3, [r7, #4]
20002c1c:	701a      	strb	r2, [r3, #0]
	if(q->next >= HEX_QUEUE_LEN)
20002c1e:	687b      	ldr	r3, [r7, #4]
20002c20:	785b      	ldrb	r3, [r3, #1]
20002c22:	2bc7      	cmp	r3, #199	; 0xc7
20002c24:	d905      	bls.n	20002c32 <HEXQueueFixBounds+0x30>
		q->next -= HEX_QUEUE_LEN;
20002c26:	687b      	ldr	r3, [r7, #4]
20002c28:	785b      	ldrb	r3, [r3, #1]
20002c2a:	3338      	adds	r3, #56	; 0x38
20002c2c:	b2da      	uxtb	r2, r3
20002c2e:	687b      	ldr	r3, [r7, #4]
20002c30:	705a      	strb	r2, [r3, #1]
	if(q->len > HEX_QUEUE_LEN)
20002c32:	687b      	ldr	r3, [r7, #4]
20002c34:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
20002c38:	2bc8      	cmp	r3, #200	; 0xc8
20002c3a:	d903      	bls.n	20002c44 <HEXQueueFixBounds+0x42>
		q->len = HEX_QUEUE_LEN;
20002c3c:	687b      	ldr	r3, [r7, #4]
20002c3e:	22c8      	movs	r2, #200	; 0xc8
20002c40:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
20002c44:	bf00      	nop
20002c46:	370c      	adds	r7, #12
20002c48:	46bd      	mov	sp, r7
20002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
20002c4e:	4770      	bx	lr

20002c50 <HEXQueueAdd>:

void HEXQueueAdd(HEXQueue *q, uint8_t element) {
20002c50:	b580      	push	{r7, lr}
20002c52:	b082      	sub	sp, #8
20002c54:	af00      	add	r7, sp, #0
20002c56:	6078      	str	r0, [r7, #4]
20002c58:	460b      	mov	r3, r1
20002c5a:	70fb      	strb	r3, [r7, #3]
	q->buf[q->next] = element;
20002c5c:	687b      	ldr	r3, [r7, #4]
20002c5e:	785b      	ldrb	r3, [r3, #1]
20002c60:	461a      	mov	r2, r3
20002c62:	687b      	ldr	r3, [r7, #4]
20002c64:	4413      	add	r3, r2
20002c66:	78fa      	ldrb	r2, [r7, #3]
20002c68:	709a      	strb	r2, [r3, #2]
	q->next++;
20002c6a:	687b      	ldr	r3, [r7, #4]
20002c6c:	785b      	ldrb	r3, [r3, #1]
20002c6e:	3301      	adds	r3, #1
20002c70:	b2da      	uxtb	r2, r3
20002c72:	687b      	ldr	r3, [r7, #4]
20002c74:	705a      	strb	r2, [r3, #1]
	q->len++;
20002c76:	687b      	ldr	r3, [r7, #4]
20002c78:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
20002c7c:	3301      	adds	r3, #1
20002c7e:	b2da      	uxtb	r2, r3
20002c80:	687b      	ldr	r3, [r7, #4]
20002c82:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca

	if(q->len == HEX_QUEUE_LEN)
20002c86:	687b      	ldr	r3, [r7, #4]
20002c88:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
20002c8c:	2bc8      	cmp	r3, #200	; 0xc8
20002c8e:	d105      	bne.n	20002c9c <HEXQueueAdd+0x4c>
		q->start++;
20002c90:	687b      	ldr	r3, [r7, #4]
20002c92:	781b      	ldrb	r3, [r3, #0]
20002c94:	3301      	adds	r3, #1
20002c96:	b2da      	uxtb	r2, r3
20002c98:	687b      	ldr	r3, [r7, #4]
20002c9a:	701a      	strb	r2, [r3, #0]

	HEXQueueFixBounds(q);
20002c9c:	6878      	ldr	r0, [r7, #4]
20002c9e:	f7ff ffb0 	bl	20002c02 <HEXQueueFixBounds>
}
20002ca2:	bf00      	nop
20002ca4:	3708      	adds	r7, #8
20002ca6:	46bd      	mov	sp, r7
20002ca8:	bd80      	pop	{r7, pc}

20002caa <HEXQueueAddArray>:

void HEXQueueAddArray(HEXQueue *q, uint8_t *inbuf, uint8_t len) {
20002caa:	b580      	push	{r7, lr}
20002cac:	b086      	sub	sp, #24
20002cae:	af00      	add	r7, sp, #0
20002cb0:	60f8      	str	r0, [r7, #12]
20002cb2:	60b9      	str	r1, [r7, #8]
20002cb4:	4613      	mov	r3, r2
20002cb6:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < len; i++)
20002cb8:	2300      	movs	r3, #0
20002cba:	75fb      	strb	r3, [r7, #23]
20002cbc:	e00a      	b.n	20002cd4 <HEXQueueAddArray+0x2a>
		HEXQueueAdd(q, inbuf[i]);
20002cbe:	7dfb      	ldrb	r3, [r7, #23]
20002cc0:	68ba      	ldr	r2, [r7, #8]
20002cc2:	4413      	add	r3, r2
20002cc4:	781b      	ldrb	r3, [r3, #0]
20002cc6:	4619      	mov	r1, r3
20002cc8:	68f8      	ldr	r0, [r7, #12]
20002cca:	f7ff ffc1 	bl	20002c50 <HEXQueueAdd>
	for(uint8_t i = 0; i < len; i++)
20002cce:	7dfb      	ldrb	r3, [r7, #23]
20002cd0:	3301      	adds	r3, #1
20002cd2:	75fb      	strb	r3, [r7, #23]
20002cd4:	7dfa      	ldrb	r2, [r7, #23]
20002cd6:	79fb      	ldrb	r3, [r7, #7]
20002cd8:	429a      	cmp	r2, r3
20002cda:	d3f0      	bcc.n	20002cbe <HEXQueueAddArray+0x14>
}
20002cdc:	bf00      	nop
20002cde:	bf00      	nop
20002ce0:	3718      	adds	r7, #24
20002ce2:	46bd      	mov	sp, r7
20002ce4:	bd80      	pop	{r7, pc}

20002ce6 <HEXQueueGetIdx>:

uint8_t HEXQueueGetIdx(HEXQueue *q, uint8_t idx) {
20002ce6:	b480      	push	{r7}
20002ce8:	b085      	sub	sp, #20
20002cea:	af00      	add	r7, sp, #0
20002cec:	6078      	str	r0, [r7, #4]
20002cee:	460b      	mov	r3, r1
20002cf0:	70fb      	strb	r3, [r7, #3]
	uint8_t retIdx = idx + q->start;
20002cf2:	687b      	ldr	r3, [r7, #4]
20002cf4:	781a      	ldrb	r2, [r3, #0]
20002cf6:	78fb      	ldrb	r3, [r7, #3]
20002cf8:	4413      	add	r3, r2
20002cfa:	73fb      	strb	r3, [r7, #15]
	while(retIdx > HEX_QUEUE_LEN)
20002cfc:	e002      	b.n	20002d04 <HEXQueueGetIdx+0x1e>
		retIdx -= HEX_QUEUE_LEN;
20002cfe:	7bfb      	ldrb	r3, [r7, #15]
20002d00:	3338      	adds	r3, #56	; 0x38
20002d02:	73fb      	strb	r3, [r7, #15]
	while(retIdx > HEX_QUEUE_LEN)
20002d04:	7bfb      	ldrb	r3, [r7, #15]
20002d06:	2bc8      	cmp	r3, #200	; 0xc8
20002d08:	d8f9      	bhi.n	20002cfe <HEXQueueGetIdx+0x18>

	return q->buf[retIdx];
20002d0a:	7bfb      	ldrb	r3, [r7, #15]
20002d0c:	687a      	ldr	r2, [r7, #4]
20002d0e:	4413      	add	r3, r2
20002d10:	789b      	ldrb	r3, [r3, #2]
}
20002d12:	4618      	mov	r0, r3
20002d14:	3714      	adds	r7, #20
20002d16:	46bd      	mov	sp, r7
20002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
20002d1c:	4770      	bx	lr

20002d1e <HEXQueueExtractHex>:


//pulls an Intel hex command out of the buffer if one exists
	//returns 1 if command extracted, 0 if none found
uint8_t HEXQueueExtractHex(HEXQueue *q, uint8_t *outBuf) {
20002d1e:	b590      	push	{r4, r7, lr}
20002d20:	b085      	sub	sp, #20
20002d22:	af00      	add	r7, sp, #0
20002d24:	6078      	str	r0, [r7, #4]
20002d26:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < q->len - 5; i++) { //scan where queue is full enough for minimum len hex command
20002d28:	2300      	movs	r3, #0
20002d2a:	73fb      	strb	r3, [r7, #15]
20002d2c:	e064      	b.n	20002df8 <HEXQueueExtractHex+0xda>
		if(HEXQueueGetIdx(q, i) == ':') {
20002d2e:	7bfb      	ldrb	r3, [r7, #15]
20002d30:	4619      	mov	r1, r3
20002d32:	6878      	ldr	r0, [r7, #4]
20002d34:	f7ff ffd7 	bl	20002ce6 <HEXQueueGetIdx>
20002d38:	4603      	mov	r3, r0
20002d3a:	2b3a      	cmp	r3, #58	; 0x3a
20002d3c:	d159      	bne.n	20002df2 <HEXQueueExtractHex+0xd4>
			//check if complete hex command
			uint8_t dataLen = HEXQueueGetIdx(q, i+1);
20002d3e:	7bfb      	ldrb	r3, [r7, #15]
20002d40:	3301      	adds	r3, #1
20002d42:	b2db      	uxtb	r3, r3
20002d44:	4619      	mov	r1, r3
20002d46:	6878      	ldr	r0, [r7, #4]
20002d48:	f7ff ffcd 	bl	20002ce6 <HEXQueueGetIdx>
20002d4c:	4603      	mov	r3, r0
20002d4e:	733b      	strb	r3, [r7, #12]
			if((q->len - i) >= 5 + dataLen) { //if hex fully received
20002d50:	7b3b      	ldrb	r3, [r7, #12]
20002d52:	1d1a      	adds	r2, r3, #4
20002d54:	687b      	ldr	r3, [r7, #4]
20002d56:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
20002d5a:	4619      	mov	r1, r3
20002d5c:	7bfb      	ldrb	r3, [r7, #15]
20002d5e:	1acb      	subs	r3, r1, r3
20002d60:	429a      	cmp	r2, r3
20002d62:	da46      	bge.n	20002df2 <HEXQueueExtractHex+0xd4>
				//check checksum
				uint8_t checksum = 0;
20002d64:	2300      	movs	r3, #0
20002d66:	73bb      	strb	r3, [r7, #14]
				for(uint8_t j = 1; i < dataLen + 5; i++) {
20002d68:	2301      	movs	r3, #1
20002d6a:	72fb      	strb	r3, [r7, #11]
20002d6c:	e00f      	b.n	20002d8e <HEXQueueExtractHex+0x70>
					checksum += HEXQueueGetIdx(q, i+j);
20002d6e:	7bfa      	ldrb	r2, [r7, #15]
20002d70:	7afb      	ldrb	r3, [r7, #11]
20002d72:	4413      	add	r3, r2
20002d74:	b2db      	uxtb	r3, r3
20002d76:	4619      	mov	r1, r3
20002d78:	6878      	ldr	r0, [r7, #4]
20002d7a:	f7ff ffb4 	bl	20002ce6 <HEXQueueGetIdx>
20002d7e:	4603      	mov	r3, r0
20002d80:	461a      	mov	r2, r3
20002d82:	7bbb      	ldrb	r3, [r7, #14]
20002d84:	4413      	add	r3, r2
20002d86:	73bb      	strb	r3, [r7, #14]
				for(uint8_t j = 1; i < dataLen + 5; i++) {
20002d88:	7bfb      	ldrb	r3, [r7, #15]
20002d8a:	3301      	adds	r3, #1
20002d8c:	73fb      	strb	r3, [r7, #15]
20002d8e:	7b3b      	ldrb	r3, [r7, #12]
20002d90:	1d1a      	adds	r2, r3, #4
20002d92:	7bfb      	ldrb	r3, [r7, #15]
20002d94:	429a      	cmp	r2, r3
20002d96:	daea      	bge.n	20002d6e <HEXQueueExtractHex+0x50>
				}
				checksum = (~checksum)+1; //2's compliment
20002d98:	7bbb      	ldrb	r3, [r7, #14]
20002d9a:	425b      	negs	r3, r3
20002d9c:	73bb      	strb	r3, [r7, #14]
				if(checksum != HEXQueueGetIdx(q, i+dataLen+5)) {
20002d9e:	7bfa      	ldrb	r2, [r7, #15]
20002da0:	7b3b      	ldrb	r3, [r7, #12]
20002da2:	4413      	add	r3, r2
20002da4:	b2db      	uxtb	r3, r3
20002da6:	3305      	adds	r3, #5
20002da8:	b2db      	uxtb	r3, r3
20002daa:	4619      	mov	r1, r3
20002dac:	6878      	ldr	r0, [r7, #4]
20002dae:	f7ff ff9a 	bl	20002ce6 <HEXQueueGetIdx>
20002db2:	4603      	mov	r3, r0
20002db4:	461a      	mov	r2, r3
20002db6:	7bbb      	ldrb	r3, [r7, #14]
20002db8:	4293      	cmp	r3, r2
20002dba:	d119      	bne.n	20002df0 <HEXQueueExtractHex+0xd2>
					continue;
				}

				//copy hex command to out buffer
				for(uint8_t j = 1; j < dataLen + 6; j++)
20002dbc:	2301      	movs	r3, #1
20002dbe:	737b      	strb	r3, [r7, #13]
20002dc0:	e00f      	b.n	20002de2 <HEXQueueExtractHex+0xc4>
					outBuf[j-1] = HEXQueueGetIdx(q, i+j);
20002dc2:	7bfa      	ldrb	r2, [r7, #15]
20002dc4:	7b7b      	ldrb	r3, [r7, #13]
20002dc6:	4413      	add	r3, r2
20002dc8:	b2d9      	uxtb	r1, r3
20002dca:	7b7b      	ldrb	r3, [r7, #13]
20002dcc:	3b01      	subs	r3, #1
20002dce:	683a      	ldr	r2, [r7, #0]
20002dd0:	18d4      	adds	r4, r2, r3
20002dd2:	6878      	ldr	r0, [r7, #4]
20002dd4:	f7ff ff87 	bl	20002ce6 <HEXQueueGetIdx>
20002dd8:	4603      	mov	r3, r0
20002dda:	7023      	strb	r3, [r4, #0]
				for(uint8_t j = 1; j < dataLen + 6; j++)
20002ddc:	7b7b      	ldrb	r3, [r7, #13]
20002dde:	3301      	adds	r3, #1
20002de0:	737b      	strb	r3, [r7, #13]
20002de2:	7b3b      	ldrb	r3, [r7, #12]
20002de4:	1d5a      	adds	r2, r3, #5
20002de6:	7b7b      	ldrb	r3, [r7, #13]
20002de8:	429a      	cmp	r2, r3
20002dea:	daea      	bge.n	20002dc2 <HEXQueueExtractHex+0xa4>
				return 1;
20002dec:	2301      	movs	r3, #1
20002dee:	e00b      	b.n	20002e08 <HEXQueueExtractHex+0xea>
					continue;
20002df0:	bf00      	nop
	for(uint8_t i = 0; i < q->len - 5; i++) { //scan where queue is full enough for minimum len hex command
20002df2:	7bfb      	ldrb	r3, [r7, #15]
20002df4:	3301      	adds	r3, #1
20002df6:	73fb      	strb	r3, [r7, #15]
20002df8:	7bfa      	ldrb	r2, [r7, #15]
20002dfa:	687b      	ldr	r3, [r7, #4]
20002dfc:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
20002e00:	3b05      	subs	r3, #5
20002e02:	429a      	cmp	r2, r3
20002e04:	db93      	blt.n	20002d2e <HEXQueueExtractHex+0x10>
			}
		}
	}
	return 0;
20002e06:	2300      	movs	r3, #0
}
20002e08:	4618      	mov	r0, r3
20002e0a:	3714      	adds	r7, #20
20002e0c:	46bd      	mov	sp, r7
20002e0e:	bd90      	pop	{r4, r7, pc}

20002e10 <TinyBLInit>:
static void SystemClock_Config(void);
static uint32_t GetSector(uint32_t Address);
static uint32_t GetSectorSize(uint32_t Sector);
/* Private functions ---------------------------------------------------------*/

void TinyBLInit(void) {
20002e10:	b580      	push	{r7, lr}
20002e12:	b094      	sub	sp, #80	; 0x50
20002e14:	af00      	add	r7, sp, #0
	HAL_Init();
20002e16:	f7fe fbfb 	bl	20001610 <HAL_Init>

	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20002e1a:	f107 031c 	add.w	r3, r7, #28
20002e1e:	2234      	movs	r2, #52	; 0x34
20002e20:	2100      	movs	r1, #0
20002e22:	4618      	mov	r0, r3
20002e24:	f000 fa28 	bl	20003278 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20002e28:	f107 0308 	add.w	r3, r7, #8
20002e2c:	2200      	movs	r2, #0
20002e2e:	601a      	str	r2, [r3, #0]
20002e30:	605a      	str	r2, [r3, #4]
20002e32:	609a      	str	r2, [r3, #8]
20002e34:	60da      	str	r2, [r3, #12]
20002e36:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
20002e38:	2300      	movs	r3, #0
20002e3a:	607b      	str	r3, [r7, #4]
20002e3c:	4b3b      	ldr	r3, [pc, #236]	; (20002f2c <TinyBLInit+0x11c>)
20002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002e40:	4a3a      	ldr	r2, [pc, #232]	; (20002f2c <TinyBLInit+0x11c>)
20002e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20002e46:	6413      	str	r3, [r2, #64]	; 0x40
20002e48:	4b38      	ldr	r3, [pc, #224]	; (20002f2c <TinyBLInit+0x11c>)
20002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20002e50:	607b      	str	r3, [r7, #4]
20002e52:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20002e54:	2300      	movs	r3, #0
20002e56:	603b      	str	r3, [r7, #0]
20002e58:	4b35      	ldr	r3, [pc, #212]	; (20002f30 <TinyBLInit+0x120>)
20002e5a:	681b      	ldr	r3, [r3, #0]
20002e5c:	4a34      	ldr	r2, [pc, #208]	; (20002f30 <TinyBLInit+0x120>)
20002e5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
20002e62:	6013      	str	r3, [r2, #0]
20002e64:	4b32      	ldr	r3, [pc, #200]	; (20002f30 <TinyBLInit+0x120>)
20002e66:	681b      	ldr	r3, [r3, #0]
20002e68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
20002e6c:	603b      	str	r3, [r7, #0]
20002e6e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
20002e70:	2302      	movs	r3, #2
20002e72:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
20002e74:	2301      	movs	r3, #1
20002e76:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
20002e78:	2310      	movs	r3, #16
20002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20002e7c:	2302      	movs	r3, #2
20002e7e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
20002e80:	2300      	movs	r3, #0
20002e82:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
20002e84:	2308      	movs	r3, #8
20002e86:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
20002e88:	23b4      	movs	r3, #180	; 0xb4
20002e8a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
20002e8c:	2302      	movs	r3, #2
20002e8e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
20002e90:	2302      	movs	r3, #2
20002e92:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
20002e94:	2302      	movs	r3, #2
20002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20002e98:	f107 031c 	add.w	r3, r7, #28
20002e9c:	4618      	mov	r0, r3
20002e9e:	f7fe ff0f 	bl	20001cc0 <HAL_RCC_OscConfig>
20002ea2:	4603      	mov	r3, r0
20002ea4:	2b00      	cmp	r3, #0
20002ea6:	d000      	beq.n	20002eaa <TinyBLInit+0x9a>
	{
		for(;;);
20002ea8:	e7fe      	b.n	20002ea8 <TinyBLInit+0x98>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
20002eaa:	f7fe feb9 	bl	20001c20 <HAL_PWREx_EnableOverDrive>
20002eae:	4603      	mov	r3, r0
20002eb0:	2b00      	cmp	r3, #0
20002eb2:	d000      	beq.n	20002eb6 <TinyBLInit+0xa6>
	{
		for(;;);
20002eb4:	e7fe      	b.n	20002eb4 <TinyBLInit+0xa4>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20002eb6:	230f      	movs	r3, #15
20002eb8:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20002eba:	2302      	movs	r3, #2
20002ebc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20002ebe:	2300      	movs	r3, #0
20002ec0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
20002ec2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
20002ec6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
20002ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20002ecc:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
20002ece:	f107 0308 	add.w	r3, r7, #8
20002ed2:	2105      	movs	r1, #5
20002ed4:	4618      	mov	r0, r3
20002ed6:	f7ff f973 	bl	200021c0 <HAL_RCC_ClockConfig>
20002eda:	4603      	mov	r3, r0
20002edc:	2b00      	cmp	r3, #0
20002ede:	d000      	beq.n	20002ee2 <TinyBLInit+0xd2>
	{
		for(;;);
20002ee0:	e7fe      	b.n	20002ee0 <TinyBLInit+0xd0>
	GPIO_InitStruct.Pin = GPIO_PIN_9;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);*/


	UartHandle.Instance        = USART3;
20002ee2:	4b14      	ldr	r3, [pc, #80]	; (20002f34 <TinyBLInit+0x124>)
20002ee4:	4a14      	ldr	r2, [pc, #80]	; (20002f38 <TinyBLInit+0x128>)
20002ee6:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 57600;
20002ee8:	4b12      	ldr	r3, [pc, #72]	; (20002f34 <TinyBLInit+0x124>)
20002eea:	f44f 4261 	mov.w	r2, #57600	; 0xe100
20002eee:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
20002ef0:	4b10      	ldr	r3, [pc, #64]	; (20002f34 <TinyBLInit+0x124>)
20002ef2:	2200      	movs	r2, #0
20002ef4:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
20002ef6:	4b0f      	ldr	r3, [pc, #60]	; (20002f34 <TinyBLInit+0x124>)
20002ef8:	2200      	movs	r2, #0
20002efa:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
20002efc:	4b0d      	ldr	r3, [pc, #52]	; (20002f34 <TinyBLInit+0x124>)
20002efe:	2200      	movs	r2, #0
20002f00:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
20002f02:	4b0c      	ldr	r3, [pc, #48]	; (20002f34 <TinyBLInit+0x124>)
20002f04:	2200      	movs	r2, #0
20002f06:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
20002f08:	4b0a      	ldr	r3, [pc, #40]	; (20002f34 <TinyBLInit+0x124>)
20002f0a:	220c      	movs	r2, #12
20002f0c:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
20002f0e:	4b09      	ldr	r3, [pc, #36]	; (20002f34 <TinyBLInit+0x124>)
20002f10:	2200      	movs	r2, #0
20002f12:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
20002f14:	4807      	ldr	r0, [pc, #28]	; (20002f34 <TinyBLInit+0x124>)
20002f16:	f7ff fb73 	bl	20002600 <HAL_UART_Init>
20002f1a:	4603      	mov	r3, r0
20002f1c:	2b00      	cmp	r3, #0
20002f1e:	d000      	beq.n	20002f22 <TinyBLInit+0x112>
	{
		//Initialization Error
		for(;;);
20002f20:	e7fe      	b.n	20002f20 <TinyBLInit+0x110>
	}

}
20002f22:	bf00      	nop
20002f24:	3750      	adds	r7, #80	; 0x50
20002f26:	46bd      	mov	sp, r7
20002f28:	bd80      	pop	{r7, pc}
20002f2a:	bf00      	nop
20002f2c:	40023800 	.word	0x40023800
20002f30:	40007000 	.word	0x40007000
20002f34:	2000338c 	.word	0x2000338c
20002f38:	40004800 	.word	0x40004800

20002f3c <main>:
 * @retval None
 */


int main(void)
{  
20002f3c:	b5b0      	push	{r4, r5, r7, lr}
20002f3e:	b0e0      	sub	sp, #384	; 0x180
20002f40:	af00      	add	r7, sp, #0
	TinyBLInit();
20002f42:	f7ff ff65 	bl	20002e10 <TinyBLInit>

	/* Configure the system clock to 180 MHz */
	//SystemClock_Config();

	/* Initialize LED1, LED2 and LED3 */
	BSP_LED_Init(LED1);
20002f46:	2000      	movs	r0, #0
20002f48:	f7fe fada 	bl	20001500 <BSP_LED_Init>
	BSP_LED_Init(LED2);
20002f4c:	2001      	movs	r0, #1
20002f4e:	f7fe fad7 	bl	20001500 <BSP_LED_Init>
	BSP_LED_Init(LED3);
20002f52:	2002      	movs	r0, #2
20002f54:	f7fe fad4 	bl	20001500 <BSP_LED_Init>

	/* Erase the user Flash area
    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	/* Get the 1st sector to erase */
	FirstSector = GetSector(FLASH_USER_START_ADDR);
20002f58:	4836      	ldr	r0, [pc, #216]	; (20003034 <main+0xf8>)
20002f5a:	f000 f87b 	bl	20003054 <GetSector>
20002f5e:	4603      	mov	r3, r0
20002f60:	4a35      	ldr	r2, [pc, #212]	; (20003038 <main+0xfc>)
20002f62:	6013      	str	r3, [r2, #0]
	/* Get the number of sector to erase from 1st sector*/
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
20002f64:	4835      	ldr	r0, [pc, #212]	; (2000303c <main+0x100>)
20002f66:	f000 f8df 	bl	20003128 <GetSectorSize>
20002f6a:	4602      	mov	r2, r0
20002f6c:	4b34      	ldr	r3, [pc, #208]	; (20003040 <main+0x104>)
20002f6e:	4413      	add	r3, r2
20002f70:	4618      	mov	r0, r3
20002f72:	f000 f86f 	bl	20003054 <GetSector>
20002f76:	4602      	mov	r2, r0
20002f78:	4b2f      	ldr	r3, [pc, #188]	; (20003038 <main+0xfc>)
20002f7a:	681b      	ldr	r3, [r3, #0]
20002f7c:	1ad3      	subs	r3, r2, r3
20002f7e:	3301      	adds	r3, #1
20002f80:	4a30      	ldr	r2, [pc, #192]	; (20003044 <main+0x108>)
20002f82:	6013      	str	r3, [r2, #0]
	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
20002f84:	4b30      	ldr	r3, [pc, #192]	; (20003048 <main+0x10c>)
20002f86:	2200      	movs	r2, #0
20002f88:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
20002f8a:	4b2f      	ldr	r3, [pc, #188]	; (20003048 <main+0x10c>)
20002f8c:	2202      	movs	r2, #2
20002f8e:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FirstSector;
20002f90:	4b29      	ldr	r3, [pc, #164]	; (20003038 <main+0xfc>)
20002f92:	681b      	ldr	r3, [r3, #0]
20002f94:	4a2c      	ldr	r2, [pc, #176]	; (20003048 <main+0x10c>)
20002f96:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
20002f98:	4b2a      	ldr	r3, [pc, #168]	; (20003044 <main+0x108>)
20002f9a:	681b      	ldr	r3, [r3, #0]
20002f9c:	4a2a      	ldr	r2, [pc, #168]	; (20003048 <main+0x10c>)
20002f9e:	60d3      	str	r3, [r2, #12]


	uint8_t printout[50] = "Ready to receive FLASH data\r\n";
20002fa0:	4b2a      	ldr	r3, [pc, #168]	; (2000304c <main+0x110>)
20002fa2:	f507 74a4 	add.w	r4, r7, #328	; 0x148
20002fa6:	461d      	mov	r5, r3
20002fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
20002faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
20002fac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
20002fb0:	c407      	stmia	r4!, {r0, r1, r2}
20002fb2:	8023      	strh	r3, [r4, #0]
20002fb4:	f507 73b3 	add.w	r3, r7, #358	; 0x166
20002fb8:	2200      	movs	r2, #0
20002fba:	601a      	str	r2, [r3, #0]
20002fbc:	605a      	str	r2, [r3, #4]
20002fbe:	609a      	str	r2, [r3, #8]
20002fc0:	60da      	str	r2, [r3, #12]
20002fc2:	611a      	str	r2, [r3, #16]
	//HAL_UART_Transmit(&UartHandle, printout, 31, HAL_MAX_DELAY);

	/* Infinite loop */
	HEXQueue q;
	HEXQueueInit(&q);
20002fc4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
20002fc8:	4618      	mov	r0, r3
20002fca:	f7ff fe06 	bl	20002bda <HEXQueueInit>
	uint8_t uartInBuf[18];
	uint8_t hexBuf[100];
	uint32_t addrOffset = 0;
20002fce:	2300      	movs	r3, #0
20002fd0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	while(1) {
		uint16_t count = 0;
20002fd4:	2300      	movs	r3, #0
20002fd6:	f8a7 317a 	strh.w	r3, [r7, #378]	; 0x17a
		//HAL_UARTEx_ReceiveToIdle(&UartHandle, uartInBuf, 17, &count, 200);
		if((UartHandle.Instance->SR & UART_FLAG_RXNE) == UART_FLAG_RXNE) {
20002fda:	4b1d      	ldr	r3, [pc, #116]	; (20003050 <main+0x114>)
20002fdc:	681b      	ldr	r3, [r3, #0]
20002fde:	681b      	ldr	r3, [r3, #0]
20002fe0:	f003 0320 	and.w	r3, r3, #32
20002fe4:	2b20      	cmp	r3, #32
20002fe6:	d10a      	bne.n	20002ffe <main+0xc2>
			HEXQueueAdd(&q, (uint8_t)UartHandle.Instance->DR);
20002fe8:	4b19      	ldr	r3, [pc, #100]	; (20003050 <main+0x114>)
20002fea:	681b      	ldr	r3, [r3, #0]
20002fec:	685b      	ldr	r3, [r3, #4]
20002fee:	b2da      	uxtb	r2, r3
20002ff0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
20002ff4:	4611      	mov	r1, r2
20002ff6:	4618      	mov	r0, r3
20002ff8:	f7ff fe2a 	bl	20002c50 <HEXQueueAdd>
			asm("nop");
20002ffc:	bf00      	nop
		}
		//HAL_UART_Receive(&UartHandle, uartInBuf, 17, 0);
		//if(HAL_UART_GetState(&UartHandle) != HAL_UART_STATE_BUSY_RX)
			//HAL_UART_Receive_IT(&UartHandle, uartInBuf, 8);
		//HAL_UARTEx_ReceiveToIdle_DMA(&UartHandle, uartRxItBuf, 20);
		if(count) {
20002ffe:	f8b7 317a 	ldrh.w	r3, [r7, #378]	; 0x17a
20003002:	2b00      	cmp	r3, #0
20003004:	d0e6      	beq.n	20002fd4 <main+0x98>
			HEXQueueAddArray(&q, uartInBuf, count);
20003006:	f8b7 317a 	ldrh.w	r3, [r7, #378]	; 0x17a
2000300a:	b2da      	uxtb	r2, r3
2000300c:	f107 0168 	add.w	r1, r7, #104	; 0x68
20003010:	f107 037c 	add.w	r3, r7, #124	; 0x7c
20003014:	4618      	mov	r0, r3
20003016:	f7ff fe48 	bl	20002caa <HEXQueueAddArray>

			//Check for complete Intel hex commands
			if(HEXQueueExtractHex(&q, hexBuf)) {
2000301a:	1d3a      	adds	r2, r7, #4
2000301c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
20003020:	4611      	mov	r1, r2
20003022:	4618      	mov	r0, r3
20003024:	f7ff fe7b 	bl	20002d1e <HEXQueueExtractHex>
20003028:	4603      	mov	r3, r0
2000302a:	2b00      	cmp	r3, #0
2000302c:	d0d2      	beq.n	20002fd4 <main+0x98>
				asm("nop");
2000302e:	bf00      	nop
	while(1) {
20003030:	e7d0      	b.n	20002fd4 <main+0x98>
20003032:	bf00      	nop
20003034:	08008000 	.word	0x08008000
20003038:	20003384 	.word	0x20003384
2000303c:	08060000 	.word	0x08060000
20003040:	0805ffff 	.word	0x0805ffff
20003044:	20003388 	.word	0x20003388
20003048:	200033d4 	.word	0x200033d4
2000304c:	200032e8 	.word	0x200032e8
20003050:	2000338c 	.word	0x2000338c

20003054 <GetSector>:
 * @brief  Gets the sector of a given address
 * @param  None
 * @retval The sector of a given address
 */
static uint32_t GetSector(uint32_t Address)
{
20003054:	b480      	push	{r7}
20003056:	b085      	sub	sp, #20
20003058:	af00      	add	r7, sp, #0
2000305a:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
2000305c:	2300      	movs	r3, #0
2000305e:	60fb      	str	r3, [r7, #12]

	if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
20003060:	687b      	ldr	r3, [r7, #4]
20003062:	4a2a      	ldr	r2, [pc, #168]	; (2000310c <GetSector+0xb8>)
20003064:	4293      	cmp	r3, r2
20003066:	d206      	bcs.n	20003076 <GetSector+0x22>
20003068:	687b      	ldr	r3, [r7, #4]
2000306a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2000306e:	d302      	bcc.n	20003076 <GetSector+0x22>
	{
		sector = FLASH_SECTOR_0;
20003070:	2300      	movs	r3, #0
20003072:	60fb      	str	r3, [r7, #12]
20003074:	e043      	b.n	200030fe <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
20003076:	687b      	ldr	r3, [r7, #4]
20003078:	4a25      	ldr	r2, [pc, #148]	; (20003110 <GetSector+0xbc>)
2000307a:	4293      	cmp	r3, r2
2000307c:	d206      	bcs.n	2000308c <GetSector+0x38>
2000307e:	687b      	ldr	r3, [r7, #4]
20003080:	4a22      	ldr	r2, [pc, #136]	; (2000310c <GetSector+0xb8>)
20003082:	4293      	cmp	r3, r2
20003084:	d302      	bcc.n	2000308c <GetSector+0x38>
	{
		sector = FLASH_SECTOR_1;
20003086:	2301      	movs	r3, #1
20003088:	60fb      	str	r3, [r7, #12]
2000308a:	e038      	b.n	200030fe <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
2000308c:	687b      	ldr	r3, [r7, #4]
2000308e:	4a21      	ldr	r2, [pc, #132]	; (20003114 <GetSector+0xc0>)
20003090:	4293      	cmp	r3, r2
20003092:	d206      	bcs.n	200030a2 <GetSector+0x4e>
20003094:	687b      	ldr	r3, [r7, #4]
20003096:	4a1e      	ldr	r2, [pc, #120]	; (20003110 <GetSector+0xbc>)
20003098:	4293      	cmp	r3, r2
2000309a:	d302      	bcc.n	200030a2 <GetSector+0x4e>
	{
		sector = FLASH_SECTOR_2;
2000309c:	2302      	movs	r3, #2
2000309e:	60fb      	str	r3, [r7, #12]
200030a0:	e02d      	b.n	200030fe <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
200030a2:	687b      	ldr	r3, [r7, #4]
200030a4:	4a1c      	ldr	r2, [pc, #112]	; (20003118 <GetSector+0xc4>)
200030a6:	4293      	cmp	r3, r2
200030a8:	d806      	bhi.n	200030b8 <GetSector+0x64>
200030aa:	687b      	ldr	r3, [r7, #4]
200030ac:	4a19      	ldr	r2, [pc, #100]	; (20003114 <GetSector+0xc0>)
200030ae:	4293      	cmp	r3, r2
200030b0:	d302      	bcc.n	200030b8 <GetSector+0x64>
	{
		sector = FLASH_SECTOR_3;
200030b2:	2303      	movs	r3, #3
200030b4:	60fb      	str	r3, [r7, #12]
200030b6:	e022      	b.n	200030fe <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
200030b8:	687b      	ldr	r3, [r7, #4]
200030ba:	4a18      	ldr	r2, [pc, #96]	; (2000311c <GetSector+0xc8>)
200030bc:	4293      	cmp	r3, r2
200030be:	d806      	bhi.n	200030ce <GetSector+0x7a>
200030c0:	687b      	ldr	r3, [r7, #4]
200030c2:	4a15      	ldr	r2, [pc, #84]	; (20003118 <GetSector+0xc4>)
200030c4:	4293      	cmp	r3, r2
200030c6:	d902      	bls.n	200030ce <GetSector+0x7a>
	{
		sector = FLASH_SECTOR_4;
200030c8:	2304      	movs	r3, #4
200030ca:	60fb      	str	r3, [r7, #12]
200030cc:	e017      	b.n	200030fe <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
200030ce:	687b      	ldr	r3, [r7, #4]
200030d0:	4a13      	ldr	r2, [pc, #76]	; (20003120 <GetSector+0xcc>)
200030d2:	4293      	cmp	r3, r2
200030d4:	d806      	bhi.n	200030e4 <GetSector+0x90>
200030d6:	687b      	ldr	r3, [r7, #4]
200030d8:	4a10      	ldr	r2, [pc, #64]	; (2000311c <GetSector+0xc8>)
200030da:	4293      	cmp	r3, r2
200030dc:	d902      	bls.n	200030e4 <GetSector+0x90>
	{
		sector = FLASH_SECTOR_5;
200030de:	2305      	movs	r3, #5
200030e0:	60fb      	str	r3, [r7, #12]
200030e2:	e00c      	b.n	200030fe <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
200030e4:	687b      	ldr	r3, [r7, #4]
200030e6:	4a0f      	ldr	r2, [pc, #60]	; (20003124 <GetSector+0xd0>)
200030e8:	4293      	cmp	r3, r2
200030ea:	d806      	bhi.n	200030fa <GetSector+0xa6>
200030ec:	687b      	ldr	r3, [r7, #4]
200030ee:	4a0c      	ldr	r2, [pc, #48]	; (20003120 <GetSector+0xcc>)
200030f0:	4293      	cmp	r3, r2
200030f2:	d902      	bls.n	200030fa <GetSector+0xa6>
	{
		sector = FLASH_SECTOR_6;
200030f4:	2306      	movs	r3, #6
200030f6:	60fb      	str	r3, [r7, #12]
200030f8:	e001      	b.n	200030fe <GetSector+0xaa>
	}
	else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7) */
	{
		sector = FLASH_SECTOR_7;
200030fa:	2307      	movs	r3, #7
200030fc:	60fb      	str	r3, [r7, #12]
	}
	return sector;
200030fe:	68fb      	ldr	r3, [r7, #12]
}
20003100:	4618      	mov	r0, r3
20003102:	3714      	adds	r7, #20
20003104:	46bd      	mov	sp, r7
20003106:	f85d 7b04 	ldr.w	r7, [sp], #4
2000310a:	4770      	bx	lr
2000310c:	08004000 	.word	0x08004000
20003110:	08008000 	.word	0x08008000
20003114:	0800c000 	.word	0x0800c000
20003118:	0800ffff 	.word	0x0800ffff
2000311c:	0801ffff 	.word	0x0801ffff
20003120:	0803ffff 	.word	0x0803ffff
20003124:	0805ffff 	.word	0x0805ffff

20003128 <GetSectorSize>:
 * @brief  Gets sector Size
 * @param  None
 * @retval The size of a given sector
 */
static uint32_t GetSectorSize(uint32_t Sector)
{
20003128:	b480      	push	{r7}
2000312a:	b085      	sub	sp, #20
2000312c:	af00      	add	r7, sp, #0
2000312e:	6078      	str	r0, [r7, #4]
	uint32_t sectorsize = 0x00;
20003130:	2300      	movs	r3, #0
20003132:	60fb      	str	r3, [r7, #12]
	if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) || (Sector == FLASH_SECTOR_3))
20003134:	687b      	ldr	r3, [r7, #4]
20003136:	2b00      	cmp	r3, #0
20003138:	d008      	beq.n	2000314c <GetSectorSize+0x24>
2000313a:	687b      	ldr	r3, [r7, #4]
2000313c:	2b01      	cmp	r3, #1
2000313e:	d005      	beq.n	2000314c <GetSectorSize+0x24>
20003140:	687b      	ldr	r3, [r7, #4]
20003142:	2b02      	cmp	r3, #2
20003144:	d002      	beq.n	2000314c <GetSectorSize+0x24>
20003146:	687b      	ldr	r3, [r7, #4]
20003148:	2b03      	cmp	r3, #3
2000314a:	d103      	bne.n	20003154 <GetSectorSize+0x2c>
	{
		sectorsize = 16 * 1024;
2000314c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
20003150:	60fb      	str	r3, [r7, #12]
20003152:	e009      	b.n	20003168 <GetSectorSize+0x40>
	}
	else if(Sector == FLASH_SECTOR_4)
20003154:	687b      	ldr	r3, [r7, #4]
20003156:	2b04      	cmp	r3, #4
20003158:	d103      	bne.n	20003162 <GetSectorSize+0x3a>
	{
		sectorsize = 64 * 1024;
2000315a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000315e:	60fb      	str	r3, [r7, #12]
20003160:	e002      	b.n	20003168 <GetSectorSize+0x40>
	}
	else
	{
		sectorsize = 128 * 1024;
20003162:	f44f 3300 	mov.w	r3, #131072	; 0x20000
20003166:	60fb      	str	r3, [r7, #12]
	}
	return sectorsize;
20003168:	68fb      	ldr	r3, [r7, #12]
}
2000316a:	4618      	mov	r0, r3
2000316c:	3714      	adds	r7, #20
2000316e:	46bd      	mov	sp, r7
20003170:	f85d 7b04 	ldr.w	r7, [sp], #4
20003174:	4770      	bx	lr
	...

20003178 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
20003178:	b580      	push	{r7, lr}
2000317a:	b08a      	sub	sp, #40	; 0x28
2000317c:	af00      	add	r7, sp, #0
2000317e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
20003180:	2300      	movs	r3, #0
20003182:	613b      	str	r3, [r7, #16]
20003184:	4b23      	ldr	r3, [pc, #140]	; (20003214 <HAL_UART_MspInit+0x9c>)
20003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003188:	4a22      	ldr	r2, [pc, #136]	; (20003214 <HAL_UART_MspInit+0x9c>)
2000318a:	f043 0308 	orr.w	r3, r3, #8
2000318e:	6313      	str	r3, [r2, #48]	; 0x30
20003190:	4b20      	ldr	r3, [pc, #128]	; (20003214 <HAL_UART_MspInit+0x9c>)
20003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003194:	f003 0308 	and.w	r3, r3, #8
20003198:	613b      	str	r3, [r7, #16]
2000319a:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
2000319c:	2300      	movs	r3, #0
2000319e:	60fb      	str	r3, [r7, #12]
200031a0:	4b1c      	ldr	r3, [pc, #112]	; (20003214 <HAL_UART_MspInit+0x9c>)
200031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200031a4:	4a1b      	ldr	r2, [pc, #108]	; (20003214 <HAL_UART_MspInit+0x9c>)
200031a6:	f043 0308 	orr.w	r3, r3, #8
200031aa:	6313      	str	r3, [r2, #48]	; 0x30
200031ac:	4b19      	ldr	r3, [pc, #100]	; (20003214 <HAL_UART_MspInit+0x9c>)
200031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200031b0:	f003 0308 	and.w	r3, r3, #8
200031b4:	60fb      	str	r3, [r7, #12]
200031b6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
200031b8:	2300      	movs	r3, #0
200031ba:	60bb      	str	r3, [r7, #8]
200031bc:	4b15      	ldr	r3, [pc, #84]	; (20003214 <HAL_UART_MspInit+0x9c>)
200031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200031c0:	4a14      	ldr	r2, [pc, #80]	; (20003214 <HAL_UART_MspInit+0x9c>)
200031c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
200031c6:	6413      	str	r3, [r2, #64]	; 0x40
200031c8:	4b12      	ldr	r3, [pc, #72]	; (20003214 <HAL_UART_MspInit+0x9c>)
200031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200031cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
200031d0:	60bb      	str	r3, [r7, #8]
200031d2:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
200031d4:	f44f 7380 	mov.w	r3, #256	; 0x100
200031d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
200031da:	2302      	movs	r3, #2
200031dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
200031de:	2301      	movs	r3, #1
200031e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
200031e2:	2303      	movs	r3, #3
200031e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
200031e6:	2307      	movs	r3, #7
200031e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
200031ea:	f107 0314 	add.w	r3, r7, #20
200031ee:	4619      	mov	r1, r3
200031f0:	4809      	ldr	r0, [pc, #36]	; (20003218 <HAL_UART_MspInit+0xa0>)
200031f2:	f7fe fb67 	bl	200018c4 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
200031f6:	f44f 7300 	mov.w	r3, #512	; 0x200
200031fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
200031fc:	2307      	movs	r3, #7
200031fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
20003200:	f107 0314 	add.w	r3, r7, #20
20003204:	4619      	mov	r1, r3
20003206:	4804      	ldr	r0, [pc, #16]	; (20003218 <HAL_UART_MspInit+0xa0>)
20003208:	f7fe fb5c 	bl	200018c4 <HAL_GPIO_Init>
}
2000320c:	bf00      	nop
2000320e:	3728      	adds	r7, #40	; 0x28
20003210:	46bd      	mov	sp, r7
20003212:	bd80      	pop	{r7, pc}
20003214:	40023800 	.word	0x40023800
20003218:	40020c00 	.word	0x40020c00

2000321c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
2000321c:	b480      	push	{r7}
2000321e:	af00      	add	r7, sp, #0
}
20003220:	bf00      	nop
20003222:	46bd      	mov	sp, r7
20003224:	f85d 7b04 	ldr.w	r7, [sp], #4
20003228:	4770      	bx	lr

2000322a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
2000322a:	b480      	push	{r7}
2000322c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
2000322e:	e7fe      	b.n	2000322e <HardFault_Handler+0x4>

20003230 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
20003230:	b480      	push	{r7}
20003232:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
20003234:	e7fe      	b.n	20003234 <MemManage_Handler+0x4>

20003236 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
20003236:	b480      	push	{r7}
20003238:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
2000323a:	e7fe      	b.n	2000323a <BusFault_Handler+0x4>

2000323c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
2000323c:	b480      	push	{r7}
2000323e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
20003240:	e7fe      	b.n	20003240 <UsageFault_Handler+0x4>

20003242 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
20003242:	b480      	push	{r7}
20003244:	af00      	add	r7, sp, #0
}
20003246:	bf00      	nop
20003248:	46bd      	mov	sp, r7
2000324a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000324e:	4770      	bx	lr

20003250 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
20003250:	b480      	push	{r7}
20003252:	af00      	add	r7, sp, #0
}
20003254:	bf00      	nop
20003256:	46bd      	mov	sp, r7
20003258:	f85d 7b04 	ldr.w	r7, [sp], #4
2000325c:	4770      	bx	lr

2000325e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
2000325e:	b480      	push	{r7}
20003260:	af00      	add	r7, sp, #0
}
20003262:	bf00      	nop
20003264:	46bd      	mov	sp, r7
20003266:	f85d 7b04 	ldr.w	r7, [sp], #4
2000326a:	4770      	bx	lr

2000326c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
2000326c:	b580      	push	{r7, lr}
2000326e:	af00      	add	r7, sp, #0
  HAL_IncTick();
20003270:	f7fe fa22 	bl	200016b8 <HAL_IncTick>
}
20003274:	bf00      	nop
20003276:	bd80      	pop	{r7, pc}

20003278 <memset>:
20003278:	4402      	add	r2, r0
2000327a:	4603      	mov	r3, r0
2000327c:	4293      	cmp	r3, r2
2000327e:	d100      	bne.n	20003282 <memset+0xa>
20003280:	4770      	bx	lr
20003282:	f803 1b01 	strb.w	r1, [r3], #1
20003286:	e7f9      	b.n	2000327c <memset+0x4>

20003288 <__libc_init_array>:
20003288:	b570      	push	{r4, r5, r6, lr}
2000328a:	4d0d      	ldr	r5, [pc, #52]	; (200032c0 <__libc_init_array+0x38>)
2000328c:	4c0d      	ldr	r4, [pc, #52]	; (200032c4 <__libc_init_array+0x3c>)
2000328e:	1b64      	subs	r4, r4, r5
20003290:	10a4      	asrs	r4, r4, #2
20003292:	2600      	movs	r6, #0
20003294:	42a6      	cmp	r6, r4
20003296:	d109      	bne.n	200032ac <__libc_init_array+0x24>
20003298:	4d0b      	ldr	r5, [pc, #44]	; (200032c8 <__libc_init_array+0x40>)
2000329a:	4c0c      	ldr	r4, [pc, #48]	; (200032cc <__libc_init_array+0x44>)
2000329c:	f000 f818 	bl	200032d0 <_init>
200032a0:	1b64      	subs	r4, r4, r5
200032a2:	10a4      	asrs	r4, r4, #2
200032a4:	2600      	movs	r6, #0
200032a6:	42a6      	cmp	r6, r4
200032a8:	d105      	bne.n	200032b6 <__libc_init_array+0x2e>
200032aa:	bd70      	pop	{r4, r5, r6, pc}
200032ac:	f855 3b04 	ldr.w	r3, [r5], #4
200032b0:	4798      	blx	r3
200032b2:	3601      	adds	r6, #1
200032b4:	e7ee      	b.n	20003294 <__libc_init_array+0xc>
200032b6:	f855 3b04 	ldr.w	r3, [r5], #4
200032ba:	4798      	blx	r3
200032bc:	3601      	adds	r6, #1
200032be:	e7f2      	b.n	200032a6 <__libc_init_array+0x1e>
200032c0:	20003344 	.word	0x20003344
200032c4:	20003344 	.word	0x20003344
200032c8:	20003344 	.word	0x20003344
200032cc:	20003348 	.word	0x20003348

200032d0 <_init>:
200032d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200032d2:	bf00      	nop
200032d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
200032d6:	bc08      	pop	{r3}
200032d8:	469e      	mov	lr, r3
200032da:	4770      	bx	lr

200032dc <_fini>:
200032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200032de:	bf00      	nop
200032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
200032e2:	bc08      	pop	{r3}
200032e4:	469e      	mov	lr, r3
200032e6:	4770      	bx	lr
