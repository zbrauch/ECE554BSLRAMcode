
FLASH_EraseProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  20001000  20001000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001840  200011c4  200011c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  20002a04  20002a04  00002a04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20002a24  20002a24  00002a4c  2**0
                  CONTENTS
  4 .ARM          00000008  20002a24  20002a24  00002a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20002a2c  20002a4c  00002a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20002a2c  20002a2c  00002a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  20002a30  20002a30  00002a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20002a34  20002a34  00002a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20002a4c  20002a4c  00002a4c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bcc  20002bcc  00002a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00002a7c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001209a  00000000  00000000  00002abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a85  00000000  00000000  00014b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000075ea  00000000  00000000  000175de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ad0  00000000  00000000  0001ebc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b24  00000000  00000000  0001f698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000224f5  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013f74  00000000  00000000  000426b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3983  00000000  00000000  00056625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002014  00000000  00000000  00129fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0012bfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200011c4 <__do_global_dtors_aux>:
200011c4:	b510      	push	{r4, lr}
200011c6:	4c05      	ldr	r4, [pc, #20]	; (200011dc <__do_global_dtors_aux+0x18>)
200011c8:	7823      	ldrb	r3, [r4, #0]
200011ca:	b933      	cbnz	r3, 200011da <__do_global_dtors_aux+0x16>
200011cc:	4b04      	ldr	r3, [pc, #16]	; (200011e0 <__do_global_dtors_aux+0x1c>)
200011ce:	b113      	cbz	r3, 200011d6 <__do_global_dtors_aux+0x12>
200011d0:	4804      	ldr	r0, [pc, #16]	; (200011e4 <__do_global_dtors_aux+0x20>)
200011d2:	f3af 8000 	nop.w
200011d6:	2301      	movs	r3, #1
200011d8:	7023      	strb	r3, [r4, #0]
200011da:	bd10      	pop	{r4, pc}
200011dc:	20002a4c 	.word	0x20002a4c
200011e0:	00000000 	.word	0x00000000
200011e4:	200029ec 	.word	0x200029ec

200011e8 <frame_dummy>:
200011e8:	b508      	push	{r3, lr}
200011ea:	4b03      	ldr	r3, [pc, #12]	; (200011f8 <frame_dummy+0x10>)
200011ec:	b11b      	cbz	r3, 200011f6 <frame_dummy+0xe>
200011ee:	4903      	ldr	r1, [pc, #12]	; (200011fc <frame_dummy+0x14>)
200011f0:	4803      	ldr	r0, [pc, #12]	; (20001200 <frame_dummy+0x18>)
200011f2:	f3af 8000 	nop.w
200011f6:	bd08      	pop	{r3, pc}
200011f8:	00000000 	.word	0x00000000
200011fc:	20002a50 	.word	0x20002a50
20001200:	200029ec 	.word	0x200029ec

20001204 <__aeabi_uldivmod>:
20001204:	b953      	cbnz	r3, 2000121c <__aeabi_uldivmod+0x18>
20001206:	b94a      	cbnz	r2, 2000121c <__aeabi_uldivmod+0x18>
20001208:	2900      	cmp	r1, #0
2000120a:	bf08      	it	eq
2000120c:	2800      	cmpeq	r0, #0
2000120e:	bf1c      	itt	ne
20001210:	f04f 31ff 	movne.w	r1, #4294967295
20001214:	f04f 30ff 	movne.w	r0, #4294967295
20001218:	f000 b970 	b.w	200014fc <__aeabi_idiv0>
2000121c:	f1ad 0c08 	sub.w	ip, sp, #8
20001220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20001224:	f000 f806 	bl	20001234 <__udivmoddi4>
20001228:	f8dd e004 	ldr.w	lr, [sp, #4]
2000122c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20001230:	b004      	add	sp, #16
20001232:	4770      	bx	lr

20001234 <__udivmoddi4>:
20001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20001238:	9e08      	ldr	r6, [sp, #32]
2000123a:	460d      	mov	r5, r1
2000123c:	4604      	mov	r4, r0
2000123e:	460f      	mov	r7, r1
20001240:	2b00      	cmp	r3, #0
20001242:	d14a      	bne.n	200012da <__udivmoddi4+0xa6>
20001244:	428a      	cmp	r2, r1
20001246:	4694      	mov	ip, r2
20001248:	d965      	bls.n	20001316 <__udivmoddi4+0xe2>
2000124a:	fab2 f382 	clz	r3, r2
2000124e:	b143      	cbz	r3, 20001262 <__udivmoddi4+0x2e>
20001250:	fa02 fc03 	lsl.w	ip, r2, r3
20001254:	f1c3 0220 	rsb	r2, r3, #32
20001258:	409f      	lsls	r7, r3
2000125a:	fa20 f202 	lsr.w	r2, r0, r2
2000125e:	4317      	orrs	r7, r2
20001260:	409c      	lsls	r4, r3
20001262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
20001266:	fa1f f58c 	uxth.w	r5, ip
2000126a:	fbb7 f1fe 	udiv	r1, r7, lr
2000126e:	0c22      	lsrs	r2, r4, #16
20001270:	fb0e 7711 	mls	r7, lr, r1, r7
20001274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
20001278:	fb01 f005 	mul.w	r0, r1, r5
2000127c:	4290      	cmp	r0, r2
2000127e:	d90a      	bls.n	20001296 <__udivmoddi4+0x62>
20001280:	eb1c 0202 	adds.w	r2, ip, r2
20001284:	f101 37ff 	add.w	r7, r1, #4294967295
20001288:	f080 811c 	bcs.w	200014c4 <__udivmoddi4+0x290>
2000128c:	4290      	cmp	r0, r2
2000128e:	f240 8119 	bls.w	200014c4 <__udivmoddi4+0x290>
20001292:	3902      	subs	r1, #2
20001294:	4462      	add	r2, ip
20001296:	1a12      	subs	r2, r2, r0
20001298:	b2a4      	uxth	r4, r4
2000129a:	fbb2 f0fe 	udiv	r0, r2, lr
2000129e:	fb0e 2210 	mls	r2, lr, r0, r2
200012a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
200012a6:	fb00 f505 	mul.w	r5, r0, r5
200012aa:	42a5      	cmp	r5, r4
200012ac:	d90a      	bls.n	200012c4 <__udivmoddi4+0x90>
200012ae:	eb1c 0404 	adds.w	r4, ip, r4
200012b2:	f100 32ff 	add.w	r2, r0, #4294967295
200012b6:	f080 8107 	bcs.w	200014c8 <__udivmoddi4+0x294>
200012ba:	42a5      	cmp	r5, r4
200012bc:	f240 8104 	bls.w	200014c8 <__udivmoddi4+0x294>
200012c0:	4464      	add	r4, ip
200012c2:	3802      	subs	r0, #2
200012c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
200012c8:	1b64      	subs	r4, r4, r5
200012ca:	2100      	movs	r1, #0
200012cc:	b11e      	cbz	r6, 200012d6 <__udivmoddi4+0xa2>
200012ce:	40dc      	lsrs	r4, r3
200012d0:	2300      	movs	r3, #0
200012d2:	e9c6 4300 	strd	r4, r3, [r6]
200012d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200012da:	428b      	cmp	r3, r1
200012dc:	d908      	bls.n	200012f0 <__udivmoddi4+0xbc>
200012de:	2e00      	cmp	r6, #0
200012e0:	f000 80ed 	beq.w	200014be <__udivmoddi4+0x28a>
200012e4:	2100      	movs	r1, #0
200012e6:	e9c6 0500 	strd	r0, r5, [r6]
200012ea:	4608      	mov	r0, r1
200012ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200012f0:	fab3 f183 	clz	r1, r3
200012f4:	2900      	cmp	r1, #0
200012f6:	d149      	bne.n	2000138c <__udivmoddi4+0x158>
200012f8:	42ab      	cmp	r3, r5
200012fa:	d302      	bcc.n	20001302 <__udivmoddi4+0xce>
200012fc:	4282      	cmp	r2, r0
200012fe:	f200 80f8 	bhi.w	200014f2 <__udivmoddi4+0x2be>
20001302:	1a84      	subs	r4, r0, r2
20001304:	eb65 0203 	sbc.w	r2, r5, r3
20001308:	2001      	movs	r0, #1
2000130a:	4617      	mov	r7, r2
2000130c:	2e00      	cmp	r6, #0
2000130e:	d0e2      	beq.n	200012d6 <__udivmoddi4+0xa2>
20001310:	e9c6 4700 	strd	r4, r7, [r6]
20001314:	e7df      	b.n	200012d6 <__udivmoddi4+0xa2>
20001316:	b902      	cbnz	r2, 2000131a <__udivmoddi4+0xe6>
20001318:	deff      	udf	#255	; 0xff
2000131a:	fab2 f382 	clz	r3, r2
2000131e:	2b00      	cmp	r3, #0
20001320:	f040 8090 	bne.w	20001444 <__udivmoddi4+0x210>
20001324:	1a8a      	subs	r2, r1, r2
20001326:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000132a:	fa1f fe8c 	uxth.w	lr, ip
2000132e:	2101      	movs	r1, #1
20001330:	fbb2 f5f7 	udiv	r5, r2, r7
20001334:	fb07 2015 	mls	r0, r7, r5, r2
20001338:	0c22      	lsrs	r2, r4, #16
2000133a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
2000133e:	fb0e f005 	mul.w	r0, lr, r5
20001342:	4290      	cmp	r0, r2
20001344:	d908      	bls.n	20001358 <__udivmoddi4+0x124>
20001346:	eb1c 0202 	adds.w	r2, ip, r2
2000134a:	f105 38ff 	add.w	r8, r5, #4294967295
2000134e:	d202      	bcs.n	20001356 <__udivmoddi4+0x122>
20001350:	4290      	cmp	r0, r2
20001352:	f200 80cb 	bhi.w	200014ec <__udivmoddi4+0x2b8>
20001356:	4645      	mov	r5, r8
20001358:	1a12      	subs	r2, r2, r0
2000135a:	b2a4      	uxth	r4, r4
2000135c:	fbb2 f0f7 	udiv	r0, r2, r7
20001360:	fb07 2210 	mls	r2, r7, r0, r2
20001364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
20001368:	fb0e fe00 	mul.w	lr, lr, r0
2000136c:	45a6      	cmp	lr, r4
2000136e:	d908      	bls.n	20001382 <__udivmoddi4+0x14e>
20001370:	eb1c 0404 	adds.w	r4, ip, r4
20001374:	f100 32ff 	add.w	r2, r0, #4294967295
20001378:	d202      	bcs.n	20001380 <__udivmoddi4+0x14c>
2000137a:	45a6      	cmp	lr, r4
2000137c:	f200 80bb 	bhi.w	200014f6 <__udivmoddi4+0x2c2>
20001380:	4610      	mov	r0, r2
20001382:	eba4 040e 	sub.w	r4, r4, lr
20001386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
2000138a:	e79f      	b.n	200012cc <__udivmoddi4+0x98>
2000138c:	f1c1 0720 	rsb	r7, r1, #32
20001390:	408b      	lsls	r3, r1
20001392:	fa22 fc07 	lsr.w	ip, r2, r7
20001396:	ea4c 0c03 	orr.w	ip, ip, r3
2000139a:	fa05 f401 	lsl.w	r4, r5, r1
2000139e:	fa20 f307 	lsr.w	r3, r0, r7
200013a2:	40fd      	lsrs	r5, r7
200013a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
200013a8:	4323      	orrs	r3, r4
200013aa:	fbb5 f8f9 	udiv	r8, r5, r9
200013ae:	fa1f fe8c 	uxth.w	lr, ip
200013b2:	fb09 5518 	mls	r5, r9, r8, r5
200013b6:	0c1c      	lsrs	r4, r3, #16
200013b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
200013bc:	fb08 f50e 	mul.w	r5, r8, lr
200013c0:	42a5      	cmp	r5, r4
200013c2:	fa02 f201 	lsl.w	r2, r2, r1
200013c6:	fa00 f001 	lsl.w	r0, r0, r1
200013ca:	d90b      	bls.n	200013e4 <__udivmoddi4+0x1b0>
200013cc:	eb1c 0404 	adds.w	r4, ip, r4
200013d0:	f108 3aff 	add.w	sl, r8, #4294967295
200013d4:	f080 8088 	bcs.w	200014e8 <__udivmoddi4+0x2b4>
200013d8:	42a5      	cmp	r5, r4
200013da:	f240 8085 	bls.w	200014e8 <__udivmoddi4+0x2b4>
200013de:	f1a8 0802 	sub.w	r8, r8, #2
200013e2:	4464      	add	r4, ip
200013e4:	1b64      	subs	r4, r4, r5
200013e6:	b29d      	uxth	r5, r3
200013e8:	fbb4 f3f9 	udiv	r3, r4, r9
200013ec:	fb09 4413 	mls	r4, r9, r3, r4
200013f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
200013f4:	fb03 fe0e 	mul.w	lr, r3, lr
200013f8:	45a6      	cmp	lr, r4
200013fa:	d908      	bls.n	2000140e <__udivmoddi4+0x1da>
200013fc:	eb1c 0404 	adds.w	r4, ip, r4
20001400:	f103 35ff 	add.w	r5, r3, #4294967295
20001404:	d26c      	bcs.n	200014e0 <__udivmoddi4+0x2ac>
20001406:	45a6      	cmp	lr, r4
20001408:	d96a      	bls.n	200014e0 <__udivmoddi4+0x2ac>
2000140a:	3b02      	subs	r3, #2
2000140c:	4464      	add	r4, ip
2000140e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
20001412:	fba3 9502 	umull	r9, r5, r3, r2
20001416:	eba4 040e 	sub.w	r4, r4, lr
2000141a:	42ac      	cmp	r4, r5
2000141c:	46c8      	mov	r8, r9
2000141e:	46ae      	mov	lr, r5
20001420:	d356      	bcc.n	200014d0 <__udivmoddi4+0x29c>
20001422:	d053      	beq.n	200014cc <__udivmoddi4+0x298>
20001424:	b156      	cbz	r6, 2000143c <__udivmoddi4+0x208>
20001426:	ebb0 0208 	subs.w	r2, r0, r8
2000142a:	eb64 040e 	sbc.w	r4, r4, lr
2000142e:	fa04 f707 	lsl.w	r7, r4, r7
20001432:	40ca      	lsrs	r2, r1
20001434:	40cc      	lsrs	r4, r1
20001436:	4317      	orrs	r7, r2
20001438:	e9c6 7400 	strd	r7, r4, [r6]
2000143c:	4618      	mov	r0, r3
2000143e:	2100      	movs	r1, #0
20001440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20001444:	f1c3 0120 	rsb	r1, r3, #32
20001448:	fa02 fc03 	lsl.w	ip, r2, r3
2000144c:	fa20 f201 	lsr.w	r2, r0, r1
20001450:	fa25 f101 	lsr.w	r1, r5, r1
20001454:	409d      	lsls	r5, r3
20001456:	432a      	orrs	r2, r5
20001458:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000145c:	fa1f fe8c 	uxth.w	lr, ip
20001460:	fbb1 f0f7 	udiv	r0, r1, r7
20001464:	fb07 1510 	mls	r5, r7, r0, r1
20001468:	0c11      	lsrs	r1, r2, #16
2000146a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
2000146e:	fb00 f50e 	mul.w	r5, r0, lr
20001472:	428d      	cmp	r5, r1
20001474:	fa04 f403 	lsl.w	r4, r4, r3
20001478:	d908      	bls.n	2000148c <__udivmoddi4+0x258>
2000147a:	eb1c 0101 	adds.w	r1, ip, r1
2000147e:	f100 38ff 	add.w	r8, r0, #4294967295
20001482:	d22f      	bcs.n	200014e4 <__udivmoddi4+0x2b0>
20001484:	428d      	cmp	r5, r1
20001486:	d92d      	bls.n	200014e4 <__udivmoddi4+0x2b0>
20001488:	3802      	subs	r0, #2
2000148a:	4461      	add	r1, ip
2000148c:	1b49      	subs	r1, r1, r5
2000148e:	b292      	uxth	r2, r2
20001490:	fbb1 f5f7 	udiv	r5, r1, r7
20001494:	fb07 1115 	mls	r1, r7, r5, r1
20001498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
2000149c:	fb05 f10e 	mul.w	r1, r5, lr
200014a0:	4291      	cmp	r1, r2
200014a2:	d908      	bls.n	200014b6 <__udivmoddi4+0x282>
200014a4:	eb1c 0202 	adds.w	r2, ip, r2
200014a8:	f105 38ff 	add.w	r8, r5, #4294967295
200014ac:	d216      	bcs.n	200014dc <__udivmoddi4+0x2a8>
200014ae:	4291      	cmp	r1, r2
200014b0:	d914      	bls.n	200014dc <__udivmoddi4+0x2a8>
200014b2:	3d02      	subs	r5, #2
200014b4:	4462      	add	r2, ip
200014b6:	1a52      	subs	r2, r2, r1
200014b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
200014bc:	e738      	b.n	20001330 <__udivmoddi4+0xfc>
200014be:	4631      	mov	r1, r6
200014c0:	4630      	mov	r0, r6
200014c2:	e708      	b.n	200012d6 <__udivmoddi4+0xa2>
200014c4:	4639      	mov	r1, r7
200014c6:	e6e6      	b.n	20001296 <__udivmoddi4+0x62>
200014c8:	4610      	mov	r0, r2
200014ca:	e6fb      	b.n	200012c4 <__udivmoddi4+0x90>
200014cc:	4548      	cmp	r0, r9
200014ce:	d2a9      	bcs.n	20001424 <__udivmoddi4+0x1f0>
200014d0:	ebb9 0802 	subs.w	r8, r9, r2
200014d4:	eb65 0e0c 	sbc.w	lr, r5, ip
200014d8:	3b01      	subs	r3, #1
200014da:	e7a3      	b.n	20001424 <__udivmoddi4+0x1f0>
200014dc:	4645      	mov	r5, r8
200014de:	e7ea      	b.n	200014b6 <__udivmoddi4+0x282>
200014e0:	462b      	mov	r3, r5
200014e2:	e794      	b.n	2000140e <__udivmoddi4+0x1da>
200014e4:	4640      	mov	r0, r8
200014e6:	e7d1      	b.n	2000148c <__udivmoddi4+0x258>
200014e8:	46d0      	mov	r8, sl
200014ea:	e77b      	b.n	200013e4 <__udivmoddi4+0x1b0>
200014ec:	3d02      	subs	r5, #2
200014ee:	4462      	add	r2, ip
200014f0:	e732      	b.n	20001358 <__udivmoddi4+0x124>
200014f2:	4608      	mov	r0, r1
200014f4:	e70a      	b.n	2000130c <__udivmoddi4+0xd8>
200014f6:	4464      	add	r4, ip
200014f8:	3802      	subs	r0, #2
200014fa:	e742      	b.n	20001382 <__udivmoddi4+0x14e>

200014fc <__aeabi_idiv0>:
200014fc:	4770      	bx	lr
200014fe:	bf00      	nop

20001500 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
20001500:	b5f0      	push	{r4, r5, r6, r7, lr}
20001502:	4b19      	ldr	r3, [pc, #100]	; (20001568 <BSP_LED_Init+0x68>)
20001504:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
20001506:	4604      	mov	r4, r0
20001508:	bb08      	cbnz	r0, 2000154e <BSP_LED_Init+0x4e>
2000150a:	9001      	str	r0, [sp, #4]
2000150c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000150e:	f042 0202 	orr.w	r2, r2, #2
20001512:	631a      	str	r2, [r3, #48]	; 0x30
20001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001516:	f003 0302 	and.w	r3, r3, #2
2000151a:	9301      	str	r3, [sp, #4]
2000151c:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
2000151e:	4b13      	ldr	r3, [pc, #76]	; (2000156c <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20001520:	4d13      	ldr	r5, [pc, #76]	; (20001570 <BSP_LED_Init+0x70>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
20001522:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20001526:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
2000152a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000152c:	2700      	movs	r7, #0
2000152e:	2301      	movs	r3, #1
20001530:	e9cd 3704 	strd	r3, r7, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20001534:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
20001536:	2302      	movs	r3, #2
20001538:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
2000153a:	f000 facd 	bl	20001ad8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
2000153e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
20001542:	463a      	mov	r2, r7
20001544:	4631      	mov	r1, r6
20001546:	f000 fb9b 	bl	20001c80 <HAL_GPIO_WritePin>
}
2000154a:	b009      	add	sp, #36	; 0x24
2000154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
2000154e:	2200      	movs	r2, #0
20001550:	9202      	str	r2, [sp, #8]
20001552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001554:	f042 0202 	orr.w	r2, r2, #2
20001558:	631a      	str	r2, [r3, #48]	; 0x30
2000155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000155c:	f003 0302 	and.w	r3, r3, #2
20001560:	9302      	str	r3, [sp, #8]
20001562:	9b02      	ldr	r3, [sp, #8]
20001564:	e7db      	b.n	2000151e <BSP_LED_Init+0x1e>
20001566:	bf00      	nop
20001568:	40023800 	.word	0x40023800
2000156c:	20002a04 	.word	0x20002a04
20001570:	20002a34 	.word	0x20002a34

20001574 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
20001574:	4b04      	ldr	r3, [pc, #16]	; (20001588 <BSP_LED_On+0x14>)
20001576:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
2000157a:	4b04      	ldr	r3, [pc, #16]	; (2000158c <BSP_LED_On+0x18>)
2000157c:	2201      	movs	r2, #1
2000157e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
20001582:	f000 bb7d 	b.w	20001c80 <HAL_GPIO_WritePin>
20001586:	bf00      	nop
20001588:	20002a04 	.word	0x20002a04
2000158c:	20002a34 	.word	0x20002a34

20001590 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
20001590:	4b04      	ldr	r3, [pc, #16]	; (200015a4 <BSP_LED_Off+0x14>)
20001592:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
20001596:	4b04      	ldr	r3, [pc, #16]	; (200015a8 <BSP_LED_Off+0x18>)
20001598:	2200      	movs	r2, #0
2000159a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
2000159e:	f000 bb6f 	b.w	20001c80 <HAL_GPIO_WritePin>
200015a2:	bf00      	nop
200015a4:	20002a04 	.word	0x20002a04
200015a8:	20002a34 	.word	0x20002a34

200015ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
200015ac:	490e      	ldr	r1, [pc, #56]	; (200015e8 <SystemInit+0x3c>)
200015ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
200015b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
200015b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200015ba:	4b0c      	ldr	r3, [pc, #48]	; (200015ec <SystemInit+0x40>)
200015bc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200015be:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
200015c0:	f042 0201 	orr.w	r2, r2, #1
200015c4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
200015c6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
200015c8:	681a      	ldr	r2, [r3, #0]
200015ca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
200015ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
200015d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200015d4:	4a06      	ldr	r2, [pc, #24]	; (200015f0 <SystemInit+0x44>)
200015d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200015d8:	681a      	ldr	r2, [r3, #0]
200015da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
200015de:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200015e0:	60d8      	str	r0, [r3, #12]


  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
200015e2:	4b04      	ldr	r3, [pc, #16]	; (200015f4 <SystemInit+0x48>)
200015e4:	608b      	str	r3, [r1, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
200015e6:	4770      	bx	lr
200015e8:	e000ed00 	.word	0xe000ed00
200015ec:	40023800 	.word	0x40023800
200015f0:	24003010 	.word	0x24003010
200015f4:	20001000 	.word	0x20001000

200015f8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
200015f8:	4770      	bx	lr
	...

200015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
200015fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
200015fe:	4b0e      	ldr	r3, [pc, #56]	; (20001638 <HAL_InitTick+0x3c>)
20001600:	781a      	ldrb	r2, [r3, #0]
20001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
20001606:	fbb3 f3f2 	udiv	r3, r3, r2
2000160a:	4a0c      	ldr	r2, [pc, #48]	; (2000163c <HAL_InitTick+0x40>)
{
2000160c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
2000160e:	6810      	ldr	r0, [r2, #0]
20001610:	fbb0 f0f3 	udiv	r0, r0, r3
20001614:	f000 f896 	bl	20001744 <HAL_SYSTICK_Config>
20001618:	4604      	mov	r4, r0
2000161a:	b958      	cbnz	r0, 20001634 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2000161c:	2d0f      	cmp	r5, #15
2000161e:	d809      	bhi.n	20001634 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20001620:	4602      	mov	r2, r0
20001622:	4629      	mov	r1, r5
20001624:	f04f 30ff 	mov.w	r0, #4294967295
20001628:	f000 f85a 	bl	200016e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
2000162c:	4b04      	ldr	r3, [pc, #16]	; (20001640 <HAL_InitTick+0x44>)
2000162e:	4620      	mov	r0, r4
20001630:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
20001632:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
20001634:	2001      	movs	r0, #1
20001636:	e7fc      	b.n	20001632 <HAL_InitTick+0x36>
20001638:	20002a44 	.word	0x20002a44
2000163c:	20002a40 	.word	0x20002a40
20001640:	20002a48 	.word	0x20002a48

20001644 <HAL_Init>:
{
20001644:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20001646:	4b09      	ldr	r3, [pc, #36]	; (2000166c <HAL_Init+0x28>)
20001648:	681a      	ldr	r2, [r3, #0]
2000164a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2000164e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20001650:	681a      	ldr	r2, [r3, #0]
20001652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20001656:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20001658:	2003      	movs	r0, #3
2000165a:	f000 f82f 	bl	200016bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
2000165e:	200f      	movs	r0, #15
20001660:	f7ff ffcc 	bl	200015fc <HAL_InitTick>
  HAL_MspInit();
20001664:	f7ff ffc8 	bl	200015f8 <HAL_MspInit>
}
20001668:	2000      	movs	r0, #0
2000166a:	bd08      	pop	{r3, pc}
2000166c:	40023c00 	.word	0x40023c00

20001670 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
20001670:	4a03      	ldr	r2, [pc, #12]	; (20001680 <HAL_IncTick+0x10>)
20001672:	4b04      	ldr	r3, [pc, #16]	; (20001684 <HAL_IncTick+0x14>)
20001674:	6811      	ldr	r1, [r2, #0]
20001676:	781b      	ldrb	r3, [r3, #0]
20001678:	440b      	add	r3, r1
2000167a:	6013      	str	r3, [r2, #0]
}
2000167c:	4770      	bx	lr
2000167e:	bf00      	nop
20001680:	20002a68 	.word	0x20002a68
20001684:	20002a44 	.word	0x20002a44

20001688 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
20001688:	4b01      	ldr	r3, [pc, #4]	; (20001690 <HAL_GetTick+0x8>)
2000168a:	6818      	ldr	r0, [r3, #0]
}
2000168c:	4770      	bx	lr
2000168e:	bf00      	nop
20001690:	20002a68 	.word	0x20002a68

20001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20001694:	b538      	push	{r3, r4, r5, lr}
20001696:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
20001698:	f7ff fff6 	bl	20001688 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
2000169c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
2000169e:	bf1c      	itt	ne
200016a0:	4b05      	ldrne	r3, [pc, #20]	; (200016b8 <HAL_Delay+0x24>)
200016a2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
200016a4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
200016a6:	bf18      	it	ne
200016a8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
200016aa:	f7ff ffed 	bl	20001688 <HAL_GetTick>
200016ae:	1b43      	subs	r3, r0, r5
200016b0:	42a3      	cmp	r3, r4
200016b2:	d3fa      	bcc.n	200016aa <HAL_Delay+0x16>
  {
  }
}
200016b4:	bd38      	pop	{r3, r4, r5, pc}
200016b6:	bf00      	nop
200016b8:	20002a44 	.word	0x20002a44

200016bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
200016bc:	4907      	ldr	r1, [pc, #28]	; (200016dc <HAL_NVIC_SetPriorityGrouping+0x20>)
200016be:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200016c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
200016c4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200016c6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
200016c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200016cc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
200016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
200016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
200016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
200016d8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
200016da:	4770      	bx	lr
200016dc:	e000ed00 	.word	0xe000ed00

200016e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200016e0:	4b16      	ldr	r3, [pc, #88]	; (2000173c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
200016e2:	b530      	push	{r4, r5, lr}
200016e4:	68dc      	ldr	r4, [r3, #12]
200016e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200016ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200016ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200016f0:	2b04      	cmp	r3, #4
200016f2:	bf28      	it	cs
200016f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200016f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200016f8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200016fc:	bf8c      	ite	hi
200016fe:	3c03      	subhi	r4, #3
20001700:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001702:	fa05 f303 	lsl.w	r3, r5, r3
20001706:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2000170a:	40a5      	lsls	r5, r4
2000170c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001710:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
20001712:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001714:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001718:	bfac      	ite	ge
2000171a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000171e:	4a08      	ldrlt	r2, [pc, #32]	; (20001740 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001720:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001724:	bfb8      	it	lt
20001726:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000172a:	b2db      	uxtb	r3, r3
2000172c:	bfaa      	itet	ge
2000172e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001732:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001734:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
20001738:	bd30      	pop	{r4, r5, pc}
2000173a:	bf00      	nop
2000173c:	e000ed00 	.word	0xe000ed00
20001740:	e000ed14 	.word	0xe000ed14

20001744 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20001744:	3801      	subs	r0, #1
20001746:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
2000174a:	d20b      	bcs.n	20001764 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000174c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001750:	4a05      	ldr	r2, [pc, #20]	; (20001768 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20001752:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001754:	21f0      	movs	r1, #240	; 0xf0
20001756:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000175a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2000175c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000175e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20001760:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20001762:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
20001764:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
20001766:	4770      	bx	lr
20001768:	e000ed00 	.word	0xe000ed00

2000176c <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
2000176c:	4909      	ldr	r1, [pc, #36]	; (20001794 <FLASH_Program_DoubleWord+0x28>)
{
2000176e:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001770:	690c      	ldr	r4, [r1, #16]
20001772:	f424 7440 	bic.w	r4, r4, #768	; 0x300
20001776:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
20001778:	690c      	ldr	r4, [r1, #16]
2000177a:	f444 7440 	orr.w	r4, r4, #768	; 0x300
2000177e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
20001780:	690c      	ldr	r4, [r1, #16]
20001782:	f044 0401 	orr.w	r4, r4, #1
20001786:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
20001788:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
2000178a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
2000178e:	6043      	str	r3, [r0, #4]
}
20001790:	bd10      	pop	{r4, pc}
20001792:	bf00      	nop
20001794:	40023c00 	.word	0x40023c00

20001798 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001798:	4b07      	ldr	r3, [pc, #28]	; (200017b8 <FLASH_Program_Word+0x20>)
2000179a:	691a      	ldr	r2, [r3, #16]
2000179c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
200017a0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
200017a2:	691a      	ldr	r2, [r3, #16]
200017a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
200017a8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
200017aa:	691a      	ldr	r2, [r3, #16]
200017ac:	f042 0201 	orr.w	r2, r2, #1
200017b0:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
200017b2:	6001      	str	r1, [r0, #0]
}
200017b4:	4770      	bx	lr
200017b6:	bf00      	nop
200017b8:	40023c00 	.word	0x40023c00

200017bc <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
200017bc:	4b07      	ldr	r3, [pc, #28]	; (200017dc <FLASH_Program_HalfWord+0x20>)
200017be:	691a      	ldr	r2, [r3, #16]
200017c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
200017c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
200017c6:	691a      	ldr	r2, [r3, #16]
200017c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
200017cc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
200017ce:	691a      	ldr	r2, [r3, #16]
200017d0:	f042 0201 	orr.w	r2, r2, #1
200017d4:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
200017d6:	8001      	strh	r1, [r0, #0]
}
200017d8:	4770      	bx	lr
200017da:	bf00      	nop
200017dc:	40023c00 	.word	0x40023c00

200017e0 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
200017e0:	4b20      	ldr	r3, [pc, #128]	; (20001864 <FLASH_SetErrorCode+0x84>)
200017e2:	68da      	ldr	r2, [r3, #12]
200017e4:	06d0      	lsls	r0, r2, #27
200017e6:	d506      	bpl.n	200017f6 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
200017e8:	491f      	ldr	r1, [pc, #124]	; (20001868 <FLASH_SetErrorCode+0x88>)
200017ea:	69ca      	ldr	r2, [r1, #28]
200017ec:	f042 0210 	orr.w	r2, r2, #16
200017f0:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
200017f2:	2210      	movs	r2, #16
200017f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
200017f6:	68da      	ldr	r2, [r3, #12]
200017f8:	0691      	lsls	r1, r2, #26
200017fa:	d506      	bpl.n	2000180a <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
200017fc:	491a      	ldr	r1, [pc, #104]	; (20001868 <FLASH_SetErrorCode+0x88>)
200017fe:	69ca      	ldr	r2, [r1, #28]
20001800:	f042 0208 	orr.w	r2, r2, #8
20001804:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
20001806:	2220      	movs	r2, #32
20001808:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
2000180a:	4b16      	ldr	r3, [pc, #88]	; (20001864 <FLASH_SetErrorCode+0x84>)
2000180c:	68da      	ldr	r2, [r3, #12]
2000180e:	0652      	lsls	r2, r2, #25
20001810:	d506      	bpl.n	20001820 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
20001812:	4915      	ldr	r1, [pc, #84]	; (20001868 <FLASH_SetErrorCode+0x88>)
20001814:	69ca      	ldr	r2, [r1, #28]
20001816:	f042 0204 	orr.w	r2, r2, #4
2000181a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
2000181c:	2240      	movs	r2, #64	; 0x40
2000181e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
20001820:	68da      	ldr	r2, [r3, #12]
20001822:	0610      	lsls	r0, r2, #24
20001824:	d506      	bpl.n	20001834 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
20001826:	4910      	ldr	r1, [pc, #64]	; (20001868 <FLASH_SetErrorCode+0x88>)
20001828:	69ca      	ldr	r2, [r1, #28]
2000182a:	f042 0202 	orr.w	r2, r2, #2
2000182e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
20001830:	2280      	movs	r2, #128	; 0x80
20001832:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
20001834:	4b0b      	ldr	r3, [pc, #44]	; (20001864 <FLASH_SetErrorCode+0x84>)
20001836:	68da      	ldr	r2, [r3, #12]
20001838:	05d1      	lsls	r1, r2, #23
2000183a:	d507      	bpl.n	2000184c <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
2000183c:	490a      	ldr	r1, [pc, #40]	; (20001868 <FLASH_SetErrorCode+0x88>)
2000183e:	69ca      	ldr	r2, [r1, #28]
20001840:	f042 0201 	orr.w	r2, r2, #1
20001844:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
20001846:	f44f 7280 	mov.w	r2, #256	; 0x100
2000184a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
2000184c:	68da      	ldr	r2, [r3, #12]
2000184e:	0792      	lsls	r2, r2, #30
20001850:	d506      	bpl.n	20001860 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
20001852:	4905      	ldr	r1, [pc, #20]	; (20001868 <FLASH_SetErrorCode+0x88>)
20001854:	69ca      	ldr	r2, [r1, #28]
20001856:	f042 0220 	orr.w	r2, r2, #32
2000185a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
2000185c:	2202      	movs	r2, #2
2000185e:	60da      	str	r2, [r3, #12]
  }
}
20001860:	4770      	bx	lr
20001862:	bf00      	nop
20001864:	40023c00 	.word	0x40023c00
20001868:	20002a6c 	.word	0x20002a6c

2000186c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
2000186c:	4b06      	ldr	r3, [pc, #24]	; (20001888 <HAL_FLASH_Unlock+0x1c>)
2000186e:	691a      	ldr	r2, [r3, #16]
20001870:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
20001872:	bfbf      	itttt	lt
20001874:	4a05      	ldrlt	r2, [pc, #20]	; (2000188c <HAL_FLASH_Unlock+0x20>)
20001876:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
20001878:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
2000187c:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
2000187e:	bfba      	itte	lt
20001880:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
20001882:	0fc0      	lsrlt	r0, r0, #31
20001884:	2000      	movge	r0, #0
}
20001886:	4770      	bx	lr
20001888:	40023c00 	.word	0x40023c00
2000188c:	45670123 	.word	0x45670123

20001890 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
20001890:	4a03      	ldr	r2, [pc, #12]	; (200018a0 <HAL_FLASH_Lock+0x10>)
20001892:	6913      	ldr	r3, [r2, #16]
20001894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20001898:	6113      	str	r3, [r2, #16]
}
2000189a:	2000      	movs	r0, #0
2000189c:	4770      	bx	lr
2000189e:	bf00      	nop
200018a0:	40023c00 	.word	0x40023c00

200018a4 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
200018a4:	4b11      	ldr	r3, [pc, #68]	; (200018ec <FLASH_WaitForLastOperation+0x48>)
{ 
200018a6:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
200018a8:	2200      	movs	r2, #0
{ 
200018aa:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
200018ac:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
200018ae:	f7ff feeb 	bl	20001688 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
200018b2:	4d0f      	ldr	r5, [pc, #60]	; (200018f0 <FLASH_WaitForLastOperation+0x4c>)
  tickstart = HAL_GetTick();
200018b4:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
200018b6:	68eb      	ldr	r3, [r5, #12]
200018b8:	03da      	lsls	r2, r3, #15
200018ba:	d40c      	bmi.n	200018d6 <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
200018bc:	68eb      	ldr	r3, [r5, #12]
200018be:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
200018c0:	bf44      	itt	mi
200018c2:	2301      	movmi	r3, #1
200018c4:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
200018c6:	68e8      	ldr	r0, [r5, #12]
200018c8:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
200018cc:	d007      	beq.n	200018de <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
200018ce:	f7ff ff87 	bl	200017e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
200018d2:	2001      	movs	r0, #1
200018d4:	e003      	b.n	200018de <FLASH_WaitForLastOperation+0x3a>
    if(Timeout != HAL_MAX_DELAY)
200018d6:	1c61      	adds	r1, r4, #1
200018d8:	d0ed      	beq.n	200018b6 <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
200018da:	b90c      	cbnz	r4, 200018e0 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
200018dc:	2003      	movs	r0, #3
}  
200018de:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
200018e0:	f7ff fed2 	bl	20001688 <HAL_GetTick>
200018e4:	1b80      	subs	r0, r0, r6
200018e6:	42a0      	cmp	r0, r4
200018e8:	d9e5      	bls.n	200018b6 <FLASH_WaitForLastOperation+0x12>
200018ea:	e7f7      	b.n	200018dc <FLASH_WaitForLastOperation+0x38>
200018ec:	20002a6c 	.word	0x20002a6c
200018f0:	40023c00 	.word	0x40023c00

200018f4 <HAL_FLASH_Program>:
{
200018f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
200018f6:	4e20      	ldr	r6, [pc, #128]	; (20001978 <HAL_FLASH_Program+0x84>)
{
200018f8:	9301      	str	r3, [sp, #4]
200018fa:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
200018fc:	7e32      	ldrb	r2, [r6, #24]
200018fe:	2a01      	cmp	r2, #1
{
20001900:	4607      	mov	r7, r0
20001902:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
20001904:	d035      	beq.n	20001972 <HAL_FLASH_Program+0x7e>
20001906:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001908:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
2000190c:	7632      	strb	r2, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000190e:	f7ff ffc9 	bl	200018a4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
20001912:	b9b8      	cbnz	r0, 20001944 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
20001914:	9b01      	ldr	r3, [sp, #4]
20001916:	b9cf      	cbnz	r7, 2000194c <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001918:	4b18      	ldr	r3, [pc, #96]	; (2000197c <HAL_FLASH_Program+0x88>)
2000191a:	691a      	ldr	r2, [r3, #16]
2000191c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
20001920:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
20001922:	691a      	ldr	r2, [r3, #16]
20001924:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
20001926:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
20001928:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
2000192a:	f042 0201 	orr.w	r2, r2, #1
2000192e:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
20001930:	702c      	strb	r4, [r5, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001932:	f24c 3050 	movw	r0, #50000	; 0xc350
20001936:	f7ff ffb5 	bl	200018a4 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
2000193a:	4a10      	ldr	r2, [pc, #64]	; (2000197c <HAL_FLASH_Program+0x88>)
2000193c:	6913      	ldr	r3, [r2, #16]
2000193e:	f023 0301 	bic.w	r3, r3, #1
20001942:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
20001944:	2300      	movs	r3, #0
20001946:	7633      	strb	r3, [r6, #24]
}
20001948:	b003      	add	sp, #12
2000194a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
2000194c:	2f01      	cmp	r7, #1
2000194e:	d104      	bne.n	2000195a <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
20001950:	b2a1      	uxth	r1, r4
20001952:	4628      	mov	r0, r5
20001954:	f7ff ff32 	bl	200017bc <FLASH_Program_HalfWord>
20001958:	e7eb      	b.n	20001932 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
2000195a:	2f02      	cmp	r7, #2
2000195c:	d104      	bne.n	20001968 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
2000195e:	4621      	mov	r1, r4
20001960:	4628      	mov	r0, r5
20001962:	f7ff ff19 	bl	20001798 <FLASH_Program_Word>
20001966:	e7e4      	b.n	20001932 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
20001968:	4622      	mov	r2, r4
2000196a:	4628      	mov	r0, r5
2000196c:	f7ff fefe 	bl	2000176c <FLASH_Program_DoubleWord>
20001970:	e7df      	b.n	20001932 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
20001972:	2002      	movs	r0, #2
20001974:	e7e8      	b.n	20001948 <HAL_FLASH_Program+0x54>
20001976:	bf00      	nop
20001978:	20002a6c 	.word	0x20002a6c
2000197c:	40023c00 	.word	0x40023c00

20001980 <FLASH_MassErase.constprop.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001980:	4b07      	ldr	r3, [pc, #28]	; (200019a0 <FLASH_MassErase.constprop.0+0x20>)
20001982:	691a      	ldr	r2, [r3, #16]
20001984:	f422 7240 	bic.w	r2, r2, #768	; 0x300
20001988:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
2000198a:	691a      	ldr	r2, [r3, #16]
2000198c:	f042 0204 	orr.w	r2, r2, #4
20001990:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
20001992:	691a      	ldr	r2, [r3, #16]
20001994:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
20001998:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
2000199c:	6118      	str	r0, [r3, #16]
}
2000199e:	4770      	bx	lr
200019a0:	40023c00 	.word	0x40023c00

200019a4 <FLASH_Erase_Sector>:
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
200019a4:	4b0d      	ldr	r3, [pc, #52]	; (200019dc <FLASH_Erase_Sector+0x38>)
200019a6:	691a      	ldr	r2, [r3, #16]
200019a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
200019ac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
200019ae:	691a      	ldr	r2, [r3, #16]
200019b0:	2902      	cmp	r1, #2
200019b2:	bf94      	ite	ls
200019b4:	0209      	lslls	r1, r1, #8
{
200019b6:	f44f 7140 	movhi.w	r1, #768	; 0x300
  FLASH->CR |= tmp_psize;
200019ba:	430a      	orrs	r2, r1
200019bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
200019be:	691a      	ldr	r2, [r3, #16]
200019c0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
200019c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
200019c6:	691a      	ldr	r2, [r3, #16]
200019c8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
200019cc:	f040 0002 	orr.w	r0, r0, #2
200019d0:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
200019d2:	691a      	ldr	r2, [r3, #16]
200019d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
200019d8:	611a      	str	r2, [r3, #16]
}
200019da:	4770      	bx	lr
200019dc:	40023c00 	.word	0x40023c00

200019e0 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
200019e0:	4b14      	ldr	r3, [pc, #80]	; (20001a34 <FLASH_FlushCaches+0x54>)
200019e2:	681a      	ldr	r2, [r3, #0]
200019e4:	0591      	lsls	r1, r2, #22
200019e6:	d50f      	bpl.n	20001a08 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
200019e8:	681a      	ldr	r2, [r3, #0]
200019ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
200019ee:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
200019f0:	681a      	ldr	r2, [r3, #0]
200019f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
200019f6:	601a      	str	r2, [r3, #0]
200019f8:	681a      	ldr	r2, [r3, #0]
200019fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
200019fe:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20001a00:	681a      	ldr	r2, [r3, #0]
20001a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20001a06:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
20001a08:	4b0a      	ldr	r3, [pc, #40]	; (20001a34 <FLASH_FlushCaches+0x54>)
20001a0a:	681a      	ldr	r2, [r3, #0]
20001a0c:	0552      	lsls	r2, r2, #21
20001a0e:	d50f      	bpl.n	20001a30 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
20001a10:	681a      	ldr	r2, [r3, #0]
20001a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
20001a16:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
20001a18:	681a      	ldr	r2, [r3, #0]
20001a1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
20001a1e:	601a      	str	r2, [r3, #0]
20001a20:	681a      	ldr	r2, [r3, #0]
20001a22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
20001a26:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
20001a28:	681a      	ldr	r2, [r3, #0]
20001a2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20001a2e:	601a      	str	r2, [r3, #0]
  }
}
20001a30:	4770      	bx	lr
20001a32:	bf00      	nop
20001a34:	40023c00 	.word	0x40023c00

20001a38 <HAL_FLASHEx_Erase>:
{
20001a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
20001a3c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 20001ad4 <HAL_FLASHEx_Erase+0x9c>
20001a40:	f898 3018 	ldrb.w	r3, [r8, #24]
20001a44:	2b01      	cmp	r3, #1
{
20001a46:	4605      	mov	r5, r0
20001a48:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
20001a4a:	d03f      	beq.n	20001acc <HAL_FLASHEx_Erase+0x94>
20001a4c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001a4e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
20001a52:	f888 3018 	strb.w	r3, [r8, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001a56:	f7ff ff25 	bl	200018a4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
20001a5a:	4604      	mov	r4, r0
20001a5c:	b9a0      	cbnz	r0, 20001a88 <HAL_FLASHEx_Erase+0x50>
    *SectorError = 0xFFFFFFFFU;
20001a5e:	f04f 33ff 	mov.w	r3, #4294967295
20001a62:	603b      	str	r3, [r7, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
20001a64:	682b      	ldr	r3, [r5, #0]
20001a66:	2b01      	cmp	r3, #1
20001a68:	d114      	bne.n	20001a94 <HAL_FLASHEx_Erase+0x5c>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
20001a6a:	7c28      	ldrb	r0, [r5, #16]
20001a6c:	f7ff ff88 	bl	20001980 <FLASH_MassErase.constprop.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001a70:	f24c 3050 	movw	r0, #50000	; 0xc350
20001a74:	f7ff ff16 	bl	200018a4 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
20001a78:	4a15      	ldr	r2, [pc, #84]	; (20001ad0 <HAL_FLASHEx_Erase+0x98>)
20001a7a:	6913      	ldr	r3, [r2, #16]
20001a7c:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001a80:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
20001a82:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();
20001a84:	f7ff ffac 	bl	200019e0 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
20001a88:	2300      	movs	r3, #0
20001a8a:	f888 3018 	strb.w	r3, [r8, #24]
}
20001a8e:	4620      	mov	r0, r4
20001a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20001a94:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
20001a96:	f8df 9038 	ldr.w	r9, [pc, #56]	; 20001ad0 <HAL_FLASHEx_Erase+0x98>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20001a9a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
20001a9e:	4413      	add	r3, r2
20001aa0:	42b3      	cmp	r3, r6
20001aa2:	d9ef      	bls.n	20001a84 <HAL_FLASHEx_Erase+0x4c>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
20001aa4:	7c29      	ldrb	r1, [r5, #16]
20001aa6:	4630      	mov	r0, r6
20001aa8:	f7ff ff7c 	bl	200019a4 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001aac:	f24c 3050 	movw	r0, #50000	; 0xc350
20001ab0:	f7ff fef8 	bl	200018a4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
20001ab4:	f8d9 3010 	ldr.w	r3, [r9, #16]
20001ab8:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
20001abc:	f8c9 3010 	str.w	r3, [r9, #16]
        if (status != HAL_OK)
20001ac0:	b110      	cbz	r0, 20001ac8 <HAL_FLASHEx_Erase+0x90>
          *SectorError = index;
20001ac2:	603e      	str	r6, [r7, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001ac4:	4604      	mov	r4, r0
          break;
20001ac6:	e7dd      	b.n	20001a84 <HAL_FLASHEx_Erase+0x4c>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20001ac8:	3601      	adds	r6, #1
20001aca:	e7e6      	b.n	20001a9a <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
20001acc:	2402      	movs	r4, #2
20001ace:	e7de      	b.n	20001a8e <HAL_FLASHEx_Erase+0x56>
20001ad0:	40023c00 	.word	0x40023c00
20001ad4:	20002a6c 	.word	0x20002a6c

20001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20001ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20001adc:	f8df 919c 	ldr.w	r9, [pc, #412]	; 20001c7c <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20001ae0:	4a64      	ldr	r2, [pc, #400]	; (20001c74 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
20001ae2:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
20001ae4:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
20001ae6:	2401      	movs	r4, #1
20001ae8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
20001aea:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
20001aee:	43ac      	bics	r4, r5
20001af0:	f040 80ad 	bne.w	20001c4e <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001af4:	684d      	ldr	r5, [r1, #4]
20001af6:	f005 0403 	and.w	r4, r5, #3
20001afa:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20001afe:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001b00:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20001b02:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001b06:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20001b08:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001b0c:	d834      	bhi.n	20001b78 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
20001b0e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20001b10:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
20001b14:	68cf      	ldr	r7, [r1, #12]
20001b16:	fa07 f708 	lsl.w	r7, r7, r8
20001b1a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
20001b1e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
20001b20:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
20001b22:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
20001b26:	f3c5 1700 	ubfx	r7, r5, #4, #1
20001b2a:	409f      	lsls	r7, r3
20001b2c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
20001b30:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
20001b32:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
20001b34:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
20001b38:	688f      	ldr	r7, [r1, #8]
20001b3a:	fa07 f708 	lsl.w	r7, r7, r8
20001b3e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20001b42:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
20001b44:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20001b46:	d119      	bne.n	20001b7c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
20001b48:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
20001b4c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20001b50:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
20001b54:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20001b58:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
20001b5c:	f04f 0e0f 	mov.w	lr, #15
20001b60:	fa0e fe0b 	lsl.w	lr, lr, fp
20001b64:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
20001b68:	690f      	ldr	r7, [r1, #16]
20001b6a:	fa07 f70b 	lsl.w	r7, r7, fp
20001b6e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
20001b72:	f8ca 7020 	str.w	r7, [sl, #32]
20001b76:	e001      	b.n	20001b7c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20001b78:	2c03      	cmp	r4, #3
20001b7a:	d1da      	bne.n	20001b32 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
20001b7c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
20001b7e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
20001b82:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
20001b84:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
20001b86:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
20001b8a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
20001b8c:	d05f      	beq.n	20001c4e <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20001b8e:	f04f 0a00 	mov.w	sl, #0
20001b92:	f8cd a004 	str.w	sl, [sp, #4]
20001b96:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20001b9a:	4c37      	ldr	r4, [pc, #220]	; (20001c78 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20001b9c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
20001ba0:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
20001ba4:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
20001ba8:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
20001bac:	9601      	str	r6, [sp, #4]
20001bae:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
20001bb0:	f023 0603 	bic.w	r6, r3, #3
20001bb4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
20001bb8:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20001bbc:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
20001bc0:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20001bc4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
20001bc8:	270f      	movs	r7, #15
20001bca:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20001bce:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20001bd0:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20001bd4:	d042      	beq.n	20001c5c <HAL_GPIO_Init+0x184>
20001bd6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001bda:	42a0      	cmp	r0, r4
20001bdc:	d040      	beq.n	20001c60 <HAL_GPIO_Init+0x188>
20001bde:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001be2:	42a0      	cmp	r0, r4
20001be4:	d03e      	beq.n	20001c64 <HAL_GPIO_Init+0x18c>
20001be6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001bea:	42a0      	cmp	r0, r4
20001bec:	d03c      	beq.n	20001c68 <HAL_GPIO_Init+0x190>
20001bee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001bf2:	42a0      	cmp	r0, r4
20001bf4:	d03a      	beq.n	20001c6c <HAL_GPIO_Init+0x194>
20001bf6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001bfa:	42a0      	cmp	r0, r4
20001bfc:	d038      	beq.n	20001c70 <HAL_GPIO_Init+0x198>
20001bfe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001c02:	42a0      	cmp	r0, r4
20001c04:	bf0c      	ite	eq
20001c06:	2406      	moveq	r4, #6
20001c08:	2407      	movne	r4, #7
20001c0a:	fa04 f40e 	lsl.w	r4, r4, lr
20001c0e:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
20001c10:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
20001c12:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
20001c14:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
20001c18:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
20001c1a:	bf54      	ite	pl
20001c1c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
20001c1e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
20001c22:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
20001c24:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
20001c26:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
20001c28:	bf54      	ite	pl
20001c2a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
20001c2c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
20001c30:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
20001c32:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
20001c34:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
20001c36:	bf54      	ite	pl
20001c38:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
20001c3a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
20001c3e:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20001c40:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
20001c42:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
20001c44:	bf54      	ite	pl
20001c46:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
20001c48:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
20001c4c:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
20001c4e:	3301      	adds	r3, #1
20001c50:	2b10      	cmp	r3, #16
20001c52:	f47f af47 	bne.w	20001ae4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
20001c56:	b003      	add	sp, #12
20001c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20001c5c:	4654      	mov	r4, sl
20001c5e:	e7d4      	b.n	20001c0a <HAL_GPIO_Init+0x132>
20001c60:	2401      	movs	r4, #1
20001c62:	e7d2      	b.n	20001c0a <HAL_GPIO_Init+0x132>
20001c64:	2402      	movs	r4, #2
20001c66:	e7d0      	b.n	20001c0a <HAL_GPIO_Init+0x132>
20001c68:	2403      	movs	r4, #3
20001c6a:	e7ce      	b.n	20001c0a <HAL_GPIO_Init+0x132>
20001c6c:	2404      	movs	r4, #4
20001c6e:	e7cc      	b.n	20001c0a <HAL_GPIO_Init+0x132>
20001c70:	2405      	movs	r4, #5
20001c72:	e7ca      	b.n	20001c0a <HAL_GPIO_Init+0x132>
20001c74:	40013c00 	.word	0x40013c00
20001c78:	40020000 	.word	0x40020000
20001c7c:	40023800 	.word	0x40023800

20001c80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20001c80:	b10a      	cbz	r2, 20001c86 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
20001c82:	6181      	str	r1, [r0, #24]
  }
}
20001c84:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
20001c86:	0409      	lsls	r1, r1, #16
20001c88:	e7fb      	b.n	20001c82 <HAL_GPIO_WritePin+0x2>
	...

20001c8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
20001c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
20001c8e:	2300      	movs	r3, #0
20001c90:	9301      	str	r3, [sp, #4]
20001c92:	4b18      	ldr	r3, [pc, #96]	; (20001cf4 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20001c94:	4d18      	ldr	r5, [pc, #96]	; (20001cf8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
20001c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20001c98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
20001c9c:	641a      	str	r2, [r3, #64]	; 0x40
20001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20001ca4:	9301      	str	r3, [sp, #4]
20001ca6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
20001ca8:	4b14      	ldr	r3, [pc, #80]	; (20001cfc <HAL_PWREx_EnableOverDrive+0x70>)
20001caa:	2201      	movs	r2, #1
20001cac:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
20001cae:	f7ff fceb 	bl	20001688 <HAL_GetTick>
20001cb2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20001cb4:	686b      	ldr	r3, [r5, #4]
20001cb6:	03da      	lsls	r2, r3, #15
20001cb8:	d50b      	bpl.n	20001cd2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20001cba:	4b10      	ldr	r3, [pc, #64]	; (20001cfc <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20001cbc:	4d0e      	ldr	r5, [pc, #56]	; (20001cf8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20001cbe:	2201      	movs	r2, #1
20001cc0:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
20001cc2:	f7ff fce1 	bl	20001688 <HAL_GetTick>
20001cc6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20001cc8:	686b      	ldr	r3, [r5, #4]
20001cca:	039b      	lsls	r3, r3, #14
20001ccc:	d50a      	bpl.n	20001ce4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
20001cce:	2000      	movs	r0, #0
20001cd0:	e006      	b.n	20001ce0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20001cd2:	f7ff fcd9 	bl	20001688 <HAL_GetTick>
20001cd6:	1b00      	subs	r0, r0, r4
20001cd8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
20001cdc:	d9ea      	bls.n	20001cb4 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
20001cde:	2003      	movs	r0, #3
}
20001ce0:	b003      	add	sp, #12
20001ce2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20001ce4:	f7ff fcd0 	bl	20001688 <HAL_GetTick>
20001ce8:	1b00      	subs	r0, r0, r4
20001cea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
20001cee:	d9eb      	bls.n	20001cc8 <HAL_PWREx_EnableOverDrive+0x3c>
20001cf0:	e7f5      	b.n	20001cde <HAL_PWREx_EnableOverDrive+0x52>
20001cf2:	bf00      	nop
20001cf4:	40023800 	.word	0x40023800
20001cf8:	40007000 	.word	0x40007000
20001cfc:	420e0000 	.word	0x420e0000

20001d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20001d00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
20001d04:	4604      	mov	r4, r0
20001d06:	b340      	cbz	r0, 20001d5a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20001d08:	6803      	ldr	r3, [r0, #0]
20001d0a:	07dd      	lsls	r5, r3, #31
20001d0c:	d410      	bmi.n	20001d30 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20001d0e:	6823      	ldr	r3, [r4, #0]
20001d10:	0798      	lsls	r0, r3, #30
20001d12:	d45b      	bmi.n	20001dcc <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20001d14:	6823      	ldr	r3, [r4, #0]
20001d16:	071a      	lsls	r2, r3, #28
20001d18:	f100 809d 	bmi.w	20001e56 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20001d1c:	6823      	ldr	r3, [r4, #0]
20001d1e:	075b      	lsls	r3, r3, #29
20001d20:	f100 80bd 	bmi.w	20001e9e <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20001d24:	69a0      	ldr	r0, [r4, #24]
20001d26:	2800      	cmp	r0, #0
20001d28:	f040 8124 	bne.w	20001f74 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
20001d2c:	2000      	movs	r0, #0
20001d2e:	e02c      	b.n	20001d8a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20001d30:	4b8d      	ldr	r3, [pc, #564]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
20001d32:	689a      	ldr	r2, [r3, #8]
20001d34:	f002 020c 	and.w	r2, r2, #12
20001d38:	2a04      	cmp	r2, #4
20001d3a:	d007      	beq.n	20001d4c <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20001d3c:	689a      	ldr	r2, [r3, #8]
20001d3e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20001d42:	2a08      	cmp	r2, #8
20001d44:	d10b      	bne.n	20001d5e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20001d46:	685b      	ldr	r3, [r3, #4]
20001d48:	0259      	lsls	r1, r3, #9
20001d4a:	d508      	bpl.n	20001d5e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20001d4c:	4b86      	ldr	r3, [pc, #536]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
20001d4e:	681b      	ldr	r3, [r3, #0]
20001d50:	039a      	lsls	r2, r3, #14
20001d52:	d5dc      	bpl.n	20001d0e <HAL_RCC_OscConfig+0xe>
20001d54:	6863      	ldr	r3, [r4, #4]
20001d56:	2b00      	cmp	r3, #0
20001d58:	d1d9      	bne.n	20001d0e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
20001d5a:	2001      	movs	r0, #1
20001d5c:	e015      	b.n	20001d8a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20001d5e:	6863      	ldr	r3, [r4, #4]
20001d60:	4d81      	ldr	r5, [pc, #516]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
20001d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20001d66:	d113      	bne.n	20001d90 <HAL_RCC_OscConfig+0x90>
20001d68:	682b      	ldr	r3, [r5, #0]
20001d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20001d6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
20001d70:	f7ff fc8a 	bl	20001688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20001d74:	4e7c      	ldr	r6, [pc, #496]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
20001d76:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20001d78:	6833      	ldr	r3, [r6, #0]
20001d7a:	039b      	lsls	r3, r3, #14
20001d7c:	d4c7      	bmi.n	20001d0e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20001d7e:	f7ff fc83 	bl	20001688 <HAL_GetTick>
20001d82:	1b40      	subs	r0, r0, r5
20001d84:	2864      	cmp	r0, #100	; 0x64
20001d86:	d9f7      	bls.n	20001d78 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
20001d88:	2003      	movs	r0, #3
}
20001d8a:	b002      	add	sp, #8
20001d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20001d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20001d94:	d104      	bne.n	20001da0 <HAL_RCC_OscConfig+0xa0>
20001d96:	682b      	ldr	r3, [r5, #0]
20001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20001d9c:	602b      	str	r3, [r5, #0]
20001d9e:	e7e3      	b.n	20001d68 <HAL_RCC_OscConfig+0x68>
20001da0:	682a      	ldr	r2, [r5, #0]
20001da2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
20001da6:	602a      	str	r2, [r5, #0]
20001da8:	682a      	ldr	r2, [r5, #0]
20001daa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
20001dae:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
20001db0:	2b00      	cmp	r3, #0
20001db2:	d1dd      	bne.n	20001d70 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
20001db4:	f7ff fc68 	bl	20001688 <HAL_GetTick>
20001db8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20001dba:	682b      	ldr	r3, [r5, #0]
20001dbc:	039f      	lsls	r7, r3, #14
20001dbe:	d5a6      	bpl.n	20001d0e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20001dc0:	f7ff fc62 	bl	20001688 <HAL_GetTick>
20001dc4:	1b80      	subs	r0, r0, r6
20001dc6:	2864      	cmp	r0, #100	; 0x64
20001dc8:	d9f7      	bls.n	20001dba <HAL_RCC_OscConfig+0xba>
20001dca:	e7dd      	b.n	20001d88 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20001dcc:	4b66      	ldr	r3, [pc, #408]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
20001dce:	689a      	ldr	r2, [r3, #8]
20001dd0:	f012 0f0c 	tst.w	r2, #12
20001dd4:	d007      	beq.n	20001de6 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20001dd6:	689a      	ldr	r2, [r3, #8]
20001dd8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20001ddc:	2a08      	cmp	r2, #8
20001dde:	d111      	bne.n	20001e04 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20001de0:	685b      	ldr	r3, [r3, #4]
20001de2:	025e      	lsls	r6, r3, #9
20001de4:	d40e      	bmi.n	20001e04 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20001de6:	4a60      	ldr	r2, [pc, #384]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
20001de8:	6813      	ldr	r3, [r2, #0]
20001dea:	079d      	lsls	r5, r3, #30
20001dec:	d502      	bpl.n	20001df4 <HAL_RCC_OscConfig+0xf4>
20001dee:	68e3      	ldr	r3, [r4, #12]
20001df0:	2b01      	cmp	r3, #1
20001df2:	d1b2      	bne.n	20001d5a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20001df4:	6813      	ldr	r3, [r2, #0]
20001df6:	6921      	ldr	r1, [r4, #16]
20001df8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
20001dfc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
20001e00:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20001e02:	e787      	b.n	20001d14 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
20001e04:	68e2      	ldr	r2, [r4, #12]
20001e06:	4b59      	ldr	r3, [pc, #356]	; (20001f6c <HAL_RCC_OscConfig+0x26c>)
20001e08:	b1b2      	cbz	r2, 20001e38 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
20001e0a:	2201      	movs	r2, #1
20001e0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
20001e0e:	f7ff fc3b 	bl	20001688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20001e12:	4d55      	ldr	r5, [pc, #340]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
20001e14:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20001e16:	682b      	ldr	r3, [r5, #0]
20001e18:	0798      	lsls	r0, r3, #30
20001e1a:	d507      	bpl.n	20001e2c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20001e1c:	682b      	ldr	r3, [r5, #0]
20001e1e:	6922      	ldr	r2, [r4, #16]
20001e20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
20001e24:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
20001e28:	602b      	str	r3, [r5, #0]
20001e2a:	e773      	b.n	20001d14 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20001e2c:	f7ff fc2c 	bl	20001688 <HAL_GetTick>
20001e30:	1b80      	subs	r0, r0, r6
20001e32:	2802      	cmp	r0, #2
20001e34:	d9ef      	bls.n	20001e16 <HAL_RCC_OscConfig+0x116>
20001e36:	e7a7      	b.n	20001d88 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
20001e38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
20001e3a:	f7ff fc25 	bl	20001688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20001e3e:	4e4a      	ldr	r6, [pc, #296]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
20001e40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20001e42:	6833      	ldr	r3, [r6, #0]
20001e44:	0799      	lsls	r1, r3, #30
20001e46:	f57f af65 	bpl.w	20001d14 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20001e4a:	f7ff fc1d 	bl	20001688 <HAL_GetTick>
20001e4e:	1b40      	subs	r0, r0, r5
20001e50:	2802      	cmp	r0, #2
20001e52:	d9f6      	bls.n	20001e42 <HAL_RCC_OscConfig+0x142>
20001e54:	e798      	b.n	20001d88 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
20001e56:	6962      	ldr	r2, [r4, #20]
20001e58:	4b44      	ldr	r3, [pc, #272]	; (20001f6c <HAL_RCC_OscConfig+0x26c>)
20001e5a:	b182      	cbz	r2, 20001e7e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
20001e5c:	2201      	movs	r2, #1
20001e5e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
20001e62:	f7ff fc11 	bl	20001688 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20001e66:	4e40      	ldr	r6, [pc, #256]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
20001e68:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20001e6a:	6f73      	ldr	r3, [r6, #116]	; 0x74
20001e6c:	079f      	lsls	r7, r3, #30
20001e6e:	f53f af55 	bmi.w	20001d1c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20001e72:	f7ff fc09 	bl	20001688 <HAL_GetTick>
20001e76:	1b40      	subs	r0, r0, r5
20001e78:	2802      	cmp	r0, #2
20001e7a:	d9f6      	bls.n	20001e6a <HAL_RCC_OscConfig+0x16a>
20001e7c:	e784      	b.n	20001d88 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
20001e7e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
20001e82:	f7ff fc01 	bl	20001688 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20001e86:	4e38      	ldr	r6, [pc, #224]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
20001e88:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20001e8a:	6f73      	ldr	r3, [r6, #116]	; 0x74
20001e8c:	0798      	lsls	r0, r3, #30
20001e8e:	f57f af45 	bpl.w	20001d1c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20001e92:	f7ff fbf9 	bl	20001688 <HAL_GetTick>
20001e96:	1b40      	subs	r0, r0, r5
20001e98:	2802      	cmp	r0, #2
20001e9a:	d9f6      	bls.n	20001e8a <HAL_RCC_OscConfig+0x18a>
20001e9c:	e774      	b.n	20001d88 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
20001e9e:	4b32      	ldr	r3, [pc, #200]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
20001ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20001ea2:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
20001ea6:	d128      	bne.n	20001efa <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
20001ea8:	9201      	str	r2, [sp, #4]
20001eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20001eac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
20001eb0:	641a      	str	r2, [r3, #64]	; 0x40
20001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20001eb8:	9301      	str	r3, [sp, #4]
20001eba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
20001ebc:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20001ebe:	4d2c      	ldr	r5, [pc, #176]	; (20001f70 <HAL_RCC_OscConfig+0x270>)
20001ec0:	682b      	ldr	r3, [r5, #0]
20001ec2:	05d9      	lsls	r1, r3, #23
20001ec4:	d51b      	bpl.n	20001efe <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20001ec6:	68a3      	ldr	r3, [r4, #8]
20001ec8:	4d27      	ldr	r5, [pc, #156]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
20001eca:	2b01      	cmp	r3, #1
20001ecc:	d127      	bne.n	20001f1e <HAL_RCC_OscConfig+0x21e>
20001ece:	6f2b      	ldr	r3, [r5, #112]	; 0x70
20001ed0:	f043 0301 	orr.w	r3, r3, #1
20001ed4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
20001ed6:	f7ff fbd7 	bl	20001688 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20001eda:	4e23      	ldr	r6, [pc, #140]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
20001edc:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001ede:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20001ee2:	6f33      	ldr	r3, [r6, #112]	; 0x70
20001ee4:	079b      	lsls	r3, r3, #30
20001ee6:	d539      	bpl.n	20001f5c <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
20001ee8:	2f00      	cmp	r7, #0
20001eea:	f43f af1b 	beq.w	20001d24 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
20001eee:	4a1e      	ldr	r2, [pc, #120]	; (20001f68 <HAL_RCC_OscConfig+0x268>)
20001ef0:	6c13      	ldr	r3, [r2, #64]	; 0x40
20001ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20001ef6:	6413      	str	r3, [r2, #64]	; 0x40
20001ef8:	e714      	b.n	20001d24 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
20001efa:	2700      	movs	r7, #0
20001efc:	e7df      	b.n	20001ebe <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
20001efe:	682b      	ldr	r3, [r5, #0]
20001f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001f04:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
20001f06:	f7ff fbbf 	bl	20001688 <HAL_GetTick>
20001f0a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20001f0c:	682b      	ldr	r3, [r5, #0]
20001f0e:	05da      	lsls	r2, r3, #23
20001f10:	d4d9      	bmi.n	20001ec6 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20001f12:	f7ff fbb9 	bl	20001688 <HAL_GetTick>
20001f16:	1b80      	subs	r0, r0, r6
20001f18:	2802      	cmp	r0, #2
20001f1a:	d9f7      	bls.n	20001f0c <HAL_RCC_OscConfig+0x20c>
20001f1c:	e734      	b.n	20001d88 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20001f1e:	2b05      	cmp	r3, #5
20001f20:	d104      	bne.n	20001f2c <HAL_RCC_OscConfig+0x22c>
20001f22:	6f2b      	ldr	r3, [r5, #112]	; 0x70
20001f24:	f043 0304 	orr.w	r3, r3, #4
20001f28:	672b      	str	r3, [r5, #112]	; 0x70
20001f2a:	e7d0      	b.n	20001ece <HAL_RCC_OscConfig+0x1ce>
20001f2c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
20001f2e:	f022 0201 	bic.w	r2, r2, #1
20001f32:	672a      	str	r2, [r5, #112]	; 0x70
20001f34:	6f2a      	ldr	r2, [r5, #112]	; 0x70
20001f36:	f022 0204 	bic.w	r2, r2, #4
20001f3a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20001f3c:	2b00      	cmp	r3, #0
20001f3e:	d1ca      	bne.n	20001ed6 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
20001f40:	f7ff fba2 	bl	20001688 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001f44:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
20001f48:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20001f4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
20001f4c:	0798      	lsls	r0, r3, #30
20001f4e:	d5cb      	bpl.n	20001ee8 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001f50:	f7ff fb9a 	bl	20001688 <HAL_GetTick>
20001f54:	1b80      	subs	r0, r0, r6
20001f56:	4540      	cmp	r0, r8
20001f58:	d9f7      	bls.n	20001f4a <HAL_RCC_OscConfig+0x24a>
20001f5a:	e715      	b.n	20001d88 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001f5c:	f7ff fb94 	bl	20001688 <HAL_GetTick>
20001f60:	1b40      	subs	r0, r0, r5
20001f62:	4540      	cmp	r0, r8
20001f64:	d9bd      	bls.n	20001ee2 <HAL_RCC_OscConfig+0x1e2>
20001f66:	e70f      	b.n	20001d88 <HAL_RCC_OscConfig+0x88>
20001f68:	40023800 	.word	0x40023800
20001f6c:	42470000 	.word	0x42470000
20001f70:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20001f74:	4d39      	ldr	r5, [pc, #228]	; (2000205c <HAL_RCC_OscConfig+0x35c>)
20001f76:	68ab      	ldr	r3, [r5, #8]
20001f78:	f003 030c 	and.w	r3, r3, #12
20001f7c:	2b08      	cmp	r3, #8
20001f7e:	d03d      	beq.n	20001ffc <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20001f80:	4b37      	ldr	r3, [pc, #220]	; (20002060 <HAL_RCC_OscConfig+0x360>)
20001f82:	2200      	movs	r2, #0
20001f84:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
20001f86:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20001f88:	d12b      	bne.n	20001fe2 <HAL_RCC_OscConfig+0x2e2>
        tickstart = HAL_GetTick();
20001f8a:	f7ff fb7d 	bl	20001688 <HAL_GetTick>
20001f8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20001f90:	682b      	ldr	r3, [r5, #0]
20001f92:	0199      	lsls	r1, r3, #6
20001f94:	d41f      	bmi.n	20001fd6 <HAL_RCC_OscConfig+0x2d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
20001f96:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
20001f9a:	4313      	orrs	r3, r2
20001f9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
20001f9e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
20001fa2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
20001fa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
20001fa8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
20001faa:	0852      	lsrs	r2, r2, #1
20001fac:	3a01      	subs	r2, #1
20001fae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
20001fb2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
20001fb4:	4b2a      	ldr	r3, [pc, #168]	; (20002060 <HAL_RCC_OscConfig+0x360>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20001fb6:	4d29      	ldr	r5, [pc, #164]	; (2000205c <HAL_RCC_OscConfig+0x35c>)
        __HAL_RCC_PLL_ENABLE();
20001fb8:	2201      	movs	r2, #1
20001fba:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
20001fbc:	f7ff fb64 	bl	20001688 <HAL_GetTick>
20001fc0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20001fc2:	682b      	ldr	r3, [r5, #0]
20001fc4:	019a      	lsls	r2, r3, #6
20001fc6:	f53f aeb1 	bmi.w	20001d2c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20001fca:	f7ff fb5d 	bl	20001688 <HAL_GetTick>
20001fce:	1b00      	subs	r0, r0, r4
20001fd0:	2802      	cmp	r0, #2
20001fd2:	d9f6      	bls.n	20001fc2 <HAL_RCC_OscConfig+0x2c2>
20001fd4:	e6d8      	b.n	20001d88 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20001fd6:	f7ff fb57 	bl	20001688 <HAL_GetTick>
20001fda:	1b80      	subs	r0, r0, r6
20001fdc:	2802      	cmp	r0, #2
20001fde:	d9d7      	bls.n	20001f90 <HAL_RCC_OscConfig+0x290>
20001fe0:	e6d2      	b.n	20001d88 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
20001fe2:	f7ff fb51 	bl	20001688 <HAL_GetTick>
20001fe6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20001fe8:	682b      	ldr	r3, [r5, #0]
20001fea:	019b      	lsls	r3, r3, #6
20001fec:	f57f ae9e 	bpl.w	20001d2c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20001ff0:	f7ff fb4a 	bl	20001688 <HAL_GetTick>
20001ff4:	1b00      	subs	r0, r0, r4
20001ff6:	2802      	cmp	r0, #2
20001ff8:	d9f6      	bls.n	20001fe8 <HAL_RCC_OscConfig+0x2e8>
20001ffa:	e6c5      	b.n	20001d88 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
20001ffc:	2801      	cmp	r0, #1
20001ffe:	f43f aec4 	beq.w	20001d8a <HAL_RCC_OscConfig+0x8a>
        pll_config = RCC->PLLCFGR;
20002002:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20002004:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20002006:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2000200a:	4291      	cmp	r1, r2
2000200c:	f47f aea5 	bne.w	20001d5a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20002010:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20002012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20002016:	428a      	cmp	r2, r1
20002018:	f47f ae9f 	bne.w	20001d5a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
2000201c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
2000201e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
20002022:	401a      	ands	r2, r3
20002024:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
20002028:	f47f ae97 	bne.w	20001d5a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
2000202c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
2000202e:	0852      	lsrs	r2, r2, #1
20002030:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
20002034:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20002036:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
2000203a:	f47f ae8e 	bne.w	20001d5a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
2000203e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
20002040:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20002044:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
20002048:	f47f ae87 	bne.w	20001d5a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
2000204c:	6b22      	ldr	r2, [r4, #48]	; 0x30
2000204e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20002052:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
20002056:	f43f ae69 	beq.w	20001d2c <HAL_RCC_OscConfig+0x2c>
2000205a:	e67e      	b.n	20001d5a <HAL_RCC_OscConfig+0x5a>
2000205c:	40023800 	.word	0x40023800
20002060:	42470000 	.word	0x42470000

20002064 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20002064:	4913      	ldr	r1, [pc, #76]	; (200020b4 <HAL_RCC_GetSysClockFreq+0x50>)
{
20002066:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
20002068:	688b      	ldr	r3, [r1, #8]
2000206a:	f003 030c 	and.w	r3, r3, #12
2000206e:	2b04      	cmp	r3, #4
20002070:	d01c      	beq.n	200020ac <HAL_RCC_GetSysClockFreq+0x48>
20002072:	2b08      	cmp	r3, #8
20002074:	d11c      	bne.n	200020b0 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20002076:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20002078:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000207a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
2000207c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20002080:	bf14      	ite	ne
20002082:	480d      	ldrne	r0, [pc, #52]	; (200020b8 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20002084:	480d      	ldreq	r0, [pc, #52]	; (200020bc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20002086:	f3c1 1188 	ubfx	r1, r1, #6, #9
2000208a:	bf18      	it	ne
2000208c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000208e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20002092:	fba1 0100 	umull	r0, r1, r1, r0
20002096:	f7ff f8b5 	bl	20001204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
2000209a:	4b06      	ldr	r3, [pc, #24]	; (200020b4 <HAL_RCC_GetSysClockFreq+0x50>)
2000209c:	685b      	ldr	r3, [r3, #4]
2000209e:	f3c3 4301 	ubfx	r3, r3, #16, #2
200020a2:	3301      	adds	r3, #1
200020a4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
200020a6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
200020aa:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
200020ac:	4802      	ldr	r0, [pc, #8]	; (200020b8 <HAL_RCC_GetSysClockFreq+0x54>)
200020ae:	e7fc      	b.n	200020aa <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
200020b0:	4802      	ldr	r0, [pc, #8]	; (200020bc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
200020b2:	e7fa      	b.n	200020aa <HAL_RCC_GetSysClockFreq+0x46>
200020b4:	40023800 	.word	0x40023800
200020b8:	007a1200 	.word	0x007a1200
200020bc:	00f42400 	.word	0x00f42400

200020c0 <HAL_RCC_ClockConfig>:
{
200020c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
200020c4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
200020c6:	4604      	mov	r4, r0
200020c8:	b910      	cbnz	r0, 200020d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
200020ca:	2001      	movs	r0, #1
}
200020cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
200020d0:	4b43      	ldr	r3, [pc, #268]	; (200021e0 <HAL_RCC_ClockConfig+0x120>)
200020d2:	681a      	ldr	r2, [r3, #0]
200020d4:	f002 020f 	and.w	r2, r2, #15
200020d8:	428a      	cmp	r2, r1
200020da:	d328      	bcc.n	2000212e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
200020dc:	6821      	ldr	r1, [r4, #0]
200020de:	078f      	lsls	r7, r1, #30
200020e0:	d42d      	bmi.n	2000213e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
200020e2:	07c8      	lsls	r0, r1, #31
200020e4:	d440      	bmi.n	20002168 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
200020e6:	4b3e      	ldr	r3, [pc, #248]	; (200021e0 <HAL_RCC_ClockConfig+0x120>)
200020e8:	681a      	ldr	r2, [r3, #0]
200020ea:	f002 020f 	and.w	r2, r2, #15
200020ee:	42aa      	cmp	r2, r5
200020f0:	d865      	bhi.n	200021be <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
200020f2:	6822      	ldr	r2, [r4, #0]
200020f4:	0751      	lsls	r1, r2, #29
200020f6:	d46b      	bmi.n	200021d0 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
200020f8:	0713      	lsls	r3, r2, #28
200020fa:	d507      	bpl.n	2000210c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
200020fc:	4a39      	ldr	r2, [pc, #228]	; (200021e4 <HAL_RCC_ClockConfig+0x124>)
200020fe:	6921      	ldr	r1, [r4, #16]
20002100:	6893      	ldr	r3, [r2, #8]
20002102:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
20002106:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
2000210a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
2000210c:	f7ff ffaa 	bl	20002064 <HAL_RCC_GetSysClockFreq>
20002110:	4b34      	ldr	r3, [pc, #208]	; (200021e4 <HAL_RCC_ClockConfig+0x124>)
20002112:	4a35      	ldr	r2, [pc, #212]	; (200021e8 <HAL_RCC_ClockConfig+0x128>)
20002114:	689b      	ldr	r3, [r3, #8]
20002116:	f3c3 1303 	ubfx	r3, r3, #4, #4
2000211a:	5cd3      	ldrb	r3, [r2, r3]
2000211c:	40d8      	lsrs	r0, r3
2000211e:	4b33      	ldr	r3, [pc, #204]	; (200021ec <HAL_RCC_ClockConfig+0x12c>)
20002120:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
20002122:	4b33      	ldr	r3, [pc, #204]	; (200021f0 <HAL_RCC_ClockConfig+0x130>)
20002124:	6818      	ldr	r0, [r3, #0]
20002126:	f7ff fa69 	bl	200015fc <HAL_InitTick>
  return HAL_OK;
2000212a:	2000      	movs	r0, #0
2000212c:	e7ce      	b.n	200020cc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
2000212e:	b2ca      	uxtb	r2, r1
20002130:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20002132:	681b      	ldr	r3, [r3, #0]
20002134:	f003 030f 	and.w	r3, r3, #15
20002138:	428b      	cmp	r3, r1
2000213a:	d1c6      	bne.n	200020ca <HAL_RCC_ClockConfig+0xa>
2000213c:	e7ce      	b.n	200020dc <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000213e:	4b29      	ldr	r3, [pc, #164]	; (200021e4 <HAL_RCC_ClockConfig+0x124>)
20002140:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20002144:	bf1e      	ittt	ne
20002146:	689a      	ldrne	r2, [r3, #8]
20002148:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
2000214c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000214e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20002150:	bf42      	ittt	mi
20002152:	689a      	ldrmi	r2, [r3, #8]
20002154:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
20002158:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2000215a:	689a      	ldr	r2, [r3, #8]
2000215c:	68a0      	ldr	r0, [r4, #8]
2000215e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
20002162:	4302      	orrs	r2, r0
20002164:	609a      	str	r2, [r3, #8]
20002166:	e7bc      	b.n	200020e2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20002168:	6862      	ldr	r2, [r4, #4]
2000216a:	4b1e      	ldr	r3, [pc, #120]	; (200021e4 <HAL_RCC_ClockConfig+0x124>)
2000216c:	2a01      	cmp	r2, #1
2000216e:	d11c      	bne.n	200021aa <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20002170:	681b      	ldr	r3, [r3, #0]
20002172:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20002176:	d0a8      	beq.n	200020ca <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20002178:	4e1a      	ldr	r6, [pc, #104]	; (200021e4 <HAL_RCC_ClockConfig+0x124>)
2000217a:	68b3      	ldr	r3, [r6, #8]
2000217c:	f023 0303 	bic.w	r3, r3, #3
20002180:	4313      	orrs	r3, r2
20002182:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
20002184:	f7ff fa80 	bl	20001688 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20002188:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
2000218c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000218e:	68b3      	ldr	r3, [r6, #8]
20002190:	6862      	ldr	r2, [r4, #4]
20002192:	f003 030c 	and.w	r3, r3, #12
20002196:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
2000219a:	d0a4      	beq.n	200020e6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2000219c:	f7ff fa74 	bl	20001688 <HAL_GetTick>
200021a0:	1bc0      	subs	r0, r0, r7
200021a2:	4540      	cmp	r0, r8
200021a4:	d9f3      	bls.n	2000218e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
200021a6:	2003      	movs	r0, #3
200021a8:	e790      	b.n	200020cc <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
200021aa:	1e91      	subs	r1, r2, #2
200021ac:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200021ae:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
200021b0:	d802      	bhi.n	200021b8 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200021b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
200021b6:	e7de      	b.n	20002176 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200021b8:	f013 0f02 	tst.w	r3, #2
200021bc:	e7db      	b.n	20002176 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
200021be:	b2ea      	uxtb	r2, r5
200021c0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
200021c2:	681b      	ldr	r3, [r3, #0]
200021c4:	f003 030f 	and.w	r3, r3, #15
200021c8:	42ab      	cmp	r3, r5
200021ca:	f47f af7e 	bne.w	200020ca <HAL_RCC_ClockConfig+0xa>
200021ce:	e790      	b.n	200020f2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
200021d0:	4904      	ldr	r1, [pc, #16]	; (200021e4 <HAL_RCC_ClockConfig+0x124>)
200021d2:	68e0      	ldr	r0, [r4, #12]
200021d4:	688b      	ldr	r3, [r1, #8]
200021d6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
200021da:	4303      	orrs	r3, r0
200021dc:	608b      	str	r3, [r1, #8]
200021de:	e78b      	b.n	200020f8 <HAL_RCC_ClockConfig+0x38>
200021e0:	40023c00 	.word	0x40023c00
200021e4:	40023800 	.word	0x40023800
200021e8:	20002a0a 	.word	0x20002a0a
200021ec:	20002a40 	.word	0x20002a40
200021f0:	20002a48 	.word	0x20002a48

200021f4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
200021f4:	4b04      	ldr	r3, [pc, #16]	; (20002208 <HAL_RCC_GetPCLK1Freq+0x14>)
200021f6:	4a05      	ldr	r2, [pc, #20]	; (2000220c <HAL_RCC_GetPCLK1Freq+0x18>)
200021f8:	689b      	ldr	r3, [r3, #8]
200021fa:	f3c3 2382 	ubfx	r3, r3, #10, #3
200021fe:	5cd3      	ldrb	r3, [r2, r3]
20002200:	4a03      	ldr	r2, [pc, #12]	; (20002210 <HAL_RCC_GetPCLK1Freq+0x1c>)
20002202:	6810      	ldr	r0, [r2, #0]
}
20002204:	40d8      	lsrs	r0, r3
20002206:	4770      	bx	lr
20002208:	40023800 	.word	0x40023800
2000220c:	20002a1a 	.word	0x20002a1a
20002210:	20002a40 	.word	0x20002a40

20002214 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
20002214:	4b04      	ldr	r3, [pc, #16]	; (20002228 <HAL_RCC_GetPCLK2Freq+0x14>)
20002216:	4a05      	ldr	r2, [pc, #20]	; (2000222c <HAL_RCC_GetPCLK2Freq+0x18>)
20002218:	689b      	ldr	r3, [r3, #8]
2000221a:	f3c3 3342 	ubfx	r3, r3, #13, #3
2000221e:	5cd3      	ldrb	r3, [r2, r3]
20002220:	4a03      	ldr	r2, [pc, #12]	; (20002230 <HAL_RCC_GetPCLK2Freq+0x1c>)
20002222:	6810      	ldr	r0, [r2, #0]
}
20002224:	40d8      	lsrs	r0, r3
20002226:	4770      	bx	lr
20002228:	40023800 	.word	0x40023800
2000222c:	20002a1a 	.word	0x20002a1a
20002230:	20002a40 	.word	0x20002a40

20002234 <HAL_TIM_OC_DelayElapsedCallback>:
20002234:	4770      	bx	lr

20002236 <HAL_TIM_IC_CaptureCallback>:
20002236:	4770      	bx	lr

20002238 <HAL_TIM_PWM_PulseFinishedCallback>:
20002238:	4770      	bx	lr

2000223a <HAL_TIM_TriggerCallback>:
2000223a:	4770      	bx	lr

2000223c <HAL_TIM_IRQHandler>:
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  uint32_t itsource = htim->Instance->DIER;
2000223c:	6803      	ldr	r3, [r0, #0]
{
2000223e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
20002240:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
20002242:	691e      	ldr	r6, [r3, #16]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
20002244:	07b1      	lsls	r1, r6, #30
{
20002246:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
20002248:	d50d      	bpl.n	20002266 <HAL_TIM_IRQHandler+0x2a>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
2000224a:	07aa      	lsls	r2, r5, #30
2000224c:	d50b      	bpl.n	20002266 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
2000224e:	f06f 0202 	mvn.w	r2, #2
20002252:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
20002254:	2201      	movs	r2, #1
20002256:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
20002258:	699b      	ldr	r3, [r3, #24]
2000225a:	079b      	lsls	r3, r3, #30
2000225c:	d069      	beq.n	20002332 <HAL_TIM_IRQHandler+0xf6>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
2000225e:	f7ff ffea 	bl	20002236 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20002262:	2300      	movs	r3, #0
20002264:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
20002266:	0771      	lsls	r1, r6, #29
20002268:	d510      	bpl.n	2000228c <HAL_TIM_IRQHandler+0x50>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
2000226a:	076a      	lsls	r2, r5, #29
2000226c:	d50e      	bpl.n	2000228c <HAL_TIM_IRQHandler+0x50>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
2000226e:	6823      	ldr	r3, [r4, #0]
20002270:	f06f 0204 	mvn.w	r2, #4
20002274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
20002276:	2202      	movs	r2, #2
20002278:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
2000227a:	699b      	ldr	r3, [r3, #24]
2000227c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
20002280:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
20002282:	d05c      	beq.n	2000233e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
20002284:	f7ff ffd7 	bl	20002236 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20002288:	2300      	movs	r3, #0
2000228a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
2000228c:	0733      	lsls	r3, r6, #28
2000228e:	d50f      	bpl.n	200022b0 <HAL_TIM_IRQHandler+0x74>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
20002290:	0728      	lsls	r0, r5, #28
20002292:	d50d      	bpl.n	200022b0 <HAL_TIM_IRQHandler+0x74>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
20002294:	6823      	ldr	r3, [r4, #0]
20002296:	f06f 0208 	mvn.w	r2, #8
2000229a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
2000229c:	2204      	movs	r2, #4
2000229e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
200022a0:	69db      	ldr	r3, [r3, #28]
200022a2:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
200022a4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
200022a6:	d050      	beq.n	2000234a <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
200022a8:	f7ff ffc5 	bl	20002236 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
200022ac:	2300      	movs	r3, #0
200022ae:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
200022b0:	06f2      	lsls	r2, r6, #27
200022b2:	d510      	bpl.n	200022d6 <HAL_TIM_IRQHandler+0x9a>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
200022b4:	06eb      	lsls	r3, r5, #27
200022b6:	d50e      	bpl.n	200022d6 <HAL_TIM_IRQHandler+0x9a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
200022b8:	6823      	ldr	r3, [r4, #0]
200022ba:	f06f 0210 	mvn.w	r2, #16
200022be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
200022c0:	2208      	movs	r2, #8
200022c2:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
200022c4:	69db      	ldr	r3, [r3, #28]
200022c6:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
200022ca:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
200022cc:	d043      	beq.n	20002356 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
200022ce:	f7ff ffb2 	bl	20002236 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
200022d2:	2300      	movs	r3, #0
200022d4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
200022d6:	07f0      	lsls	r0, r6, #31
200022d8:	d508      	bpl.n	200022ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
200022da:	07e9      	lsls	r1, r5, #31
200022dc:	d506      	bpl.n	200022ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
200022de:	6823      	ldr	r3, [r4, #0]
200022e0:	f06f 0201 	mvn.w	r2, #1
200022e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
200022e6:	4620      	mov	r0, r4
200022e8:	f000 fb02 	bl	200028f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
200022ec:	0632      	lsls	r2, r6, #24
200022ee:	d508      	bpl.n	20002302 <HAL_TIM_IRQHandler+0xc6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
200022f0:	062b      	lsls	r3, r5, #24
200022f2:	d506      	bpl.n	20002302 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
200022f4:	6823      	ldr	r3, [r4, #0]
200022f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
200022fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
200022fc:	4620      	mov	r0, r4
200022fe:	f000 f832 	bl	20002366 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
20002302:	0670      	lsls	r0, r6, #25
20002304:	d508      	bpl.n	20002318 <HAL_TIM_IRQHandler+0xdc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
20002306:	0669      	lsls	r1, r5, #25
20002308:	d506      	bpl.n	20002318 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
2000230a:	6823      	ldr	r3, [r4, #0]
2000230c:	f06f 0240 	mvn.w	r2, #64	; 0x40
20002310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
20002312:	4620      	mov	r0, r4
20002314:	f7ff ff91 	bl	2000223a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
20002318:	06b2      	lsls	r2, r6, #26
2000231a:	d522      	bpl.n	20002362 <HAL_TIM_IRQHandler+0x126>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
2000231c:	06ab      	lsls	r3, r5, #26
2000231e:	d520      	bpl.n	20002362 <HAL_TIM_IRQHandler+0x126>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
20002320:	6823      	ldr	r3, [r4, #0]
20002322:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
20002326:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
20002328:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
2000232a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
2000232e:	f000 b819 	b.w	20002364 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
20002332:	f7ff ff7f 	bl	20002234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
20002336:	4620      	mov	r0, r4
20002338:	f7ff ff7e 	bl	20002238 <HAL_TIM_PWM_PulseFinishedCallback>
2000233c:	e791      	b.n	20002262 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
2000233e:	f7ff ff79 	bl	20002234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
20002342:	4620      	mov	r0, r4
20002344:	f7ff ff78 	bl	20002238 <HAL_TIM_PWM_PulseFinishedCallback>
20002348:	e79e      	b.n	20002288 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
2000234a:	f7ff ff73 	bl	20002234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
2000234e:	4620      	mov	r0, r4
20002350:	f7ff ff72 	bl	20002238 <HAL_TIM_PWM_PulseFinishedCallback>
20002354:	e7aa      	b.n	200022ac <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
20002356:	f7ff ff6d 	bl	20002234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
2000235a:	4620      	mov	r0, r4
2000235c:	f7ff ff6c 	bl	20002238 <HAL_TIM_PWM_PulseFinishedCallback>
20002360:	e7b7      	b.n	200022d2 <HAL_TIM_IRQHandler+0x96>
}
20002362:	bd70      	pop	{r4, r5, r6, pc}

20002364 <HAL_TIMEx_CommutCallback>:
20002364:	4770      	bx	lr

20002366 <HAL_TIMEx_BreakCallback>:
20002366:	4770      	bx	lr

20002368 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
20002368:	6802      	ldr	r2, [r0, #0]
2000236a:	68c1      	ldr	r1, [r0, #12]
2000236c:	6913      	ldr	r3, [r2, #16]
2000236e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
20002372:	430b      	orrs	r3, r1
{
20002374:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
20002376:	6113      	str	r3, [r2, #16]
{
20002378:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
2000237a:	6883      	ldr	r3, [r0, #8]
2000237c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
2000237e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
20002380:	4303      	orrs	r3, r0
20002382:	6968      	ldr	r0, [r5, #20]
20002384:	4303      	orrs	r3, r0
20002386:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
20002388:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
2000238c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
20002390:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
20002392:	430b      	orrs	r3, r1
20002394:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
20002396:	6953      	ldr	r3, [r2, #20]
20002398:	69a9      	ldr	r1, [r5, #24]
2000239a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000239e:	430b      	orrs	r3, r1
200023a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
200023a2:	4b1f      	ldr	r3, [pc, #124]	; (20002420 <UART_SetConfig+0xb8>)
200023a4:	429a      	cmp	r2, r3
200023a6:	d003      	beq.n	200023b0 <UART_SetConfig+0x48>
200023a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
200023ac:	429a      	cmp	r2, r3
200023ae:	d123      	bne.n	200023f8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
200023b0:	f7ff ff30 	bl	20002214 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
200023b4:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
200023b6:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
200023b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
200023bc:	e9d5 4600 	ldrd	r4, r6, [r5]
200023c0:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
200023c4:	d11b      	bne.n	200023fe <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
200023c6:	19b2      	adds	r2, r6, r6
200023c8:	f04f 0300 	mov.w	r3, #0
200023cc:	415b      	adcs	r3, r3
200023ce:	f7fe ff19 	bl	20001204 <__aeabi_uldivmod>
200023d2:	2264      	movs	r2, #100	; 0x64
200023d4:	fbb0 f1f2 	udiv	r1, r0, r2
200023d8:	fb02 0311 	mls	r3, r2, r1, r0
200023dc:	00db      	lsls	r3, r3, #3
200023de:	3332      	adds	r3, #50	; 0x32
200023e0:	fbb3 f3f2 	udiv	r3, r3, r2
200023e4:	f003 0207 	and.w	r2, r3, #7
200023e8:	005b      	lsls	r3, r3, #1
200023ea:	eb02 1201 	add.w	r2, r2, r1, lsl #4
200023ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
200023f2:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
200023f4:	60a3      	str	r3, [r4, #8]
  }
}
200023f6:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
200023f8:	f7ff fefc 	bl	200021f4 <HAL_RCC_GetPCLK1Freq>
200023fc:	e7da      	b.n	200023b4 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
200023fe:	00b2      	lsls	r2, r6, #2
20002400:	0fb3      	lsrs	r3, r6, #30
20002402:	f7fe feff 	bl	20001204 <__aeabi_uldivmod>
20002406:	2264      	movs	r2, #100	; 0x64
20002408:	fbb0 f1f2 	udiv	r1, r0, r2
2000240c:	fb02 0311 	mls	r3, r2, r1, r0
20002410:	011b      	lsls	r3, r3, #4
20002412:	3332      	adds	r3, #50	; 0x32
20002414:	fbb3 f3f2 	udiv	r3, r3, r2
20002418:	eb03 1301 	add.w	r3, r3, r1, lsl #4
2000241c:	e7ea      	b.n	200023f4 <UART_SetConfig+0x8c>
2000241e:	bf00      	nop
20002420:	40011000 	.word	0x40011000

20002424 <HAL_UART_Init>:
{
20002424:	b510      	push	{r4, lr}
  if (huart == NULL)
20002426:	4604      	mov	r4, r0
20002428:	b348      	cbz	r0, 2000247e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
2000242a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
2000242e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20002432:	b91b      	cbnz	r3, 2000243c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
20002434:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
20002438:	f000 fa5c 	bl	200028f4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
2000243c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
2000243e:	2324      	movs	r3, #36	; 0x24
20002440:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
20002444:	68d3      	ldr	r3, [r2, #12]
20002446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
2000244a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
2000244c:	4620      	mov	r0, r4
2000244e:	f7ff ff8b 	bl	20002368 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
20002452:	6823      	ldr	r3, [r4, #0]
20002454:	691a      	ldr	r2, [r3, #16]
20002456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
2000245a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
2000245c:	695a      	ldr	r2, [r3, #20]
2000245e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
20002462:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
20002464:	68da      	ldr	r2, [r3, #12]
20002466:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
2000246a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
2000246c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
2000246e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
20002470:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
20002472:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
20002476:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
2000247a:	6360      	str	r0, [r4, #52]	; 0x34
}
2000247c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
2000247e:	2001      	movs	r0, #1
20002480:	e7fc      	b.n	2000247c <HAL_UART_Init+0x58>
	...

20002484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
20002484:	f8df d034 	ldr.w	sp, [pc, #52]	; 200024bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20002488:	480d      	ldr	r0, [pc, #52]	; (200024c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
2000248a:	490e      	ldr	r1, [pc, #56]	; (200024c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
2000248c:	4a0e      	ldr	r2, [pc, #56]	; (200024c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
2000248e:	2300      	movs	r3, #0
  b LoopCopyDataInit
20002490:	e002      	b.n	20002498 <LoopCopyDataInit>

20002492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20002492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20002494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20002496:	3304      	adds	r3, #4

20002498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20002498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
2000249a:	428c      	cmp	r4, r1
  bcc CopyDataInit
2000249c:	d3f9      	bcc.n	20002492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
2000249e:	4a0b      	ldr	r2, [pc, #44]	; (200024cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
200024a0:	4c0b      	ldr	r4, [pc, #44]	; (200024d0 <LoopFillZerobss+0x26>)
  movs r3, #0
200024a2:	2300      	movs	r3, #0
  b LoopFillZerobss
200024a4:	e001      	b.n	200024aa <LoopFillZerobss>

200024a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
200024a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
200024a8:	3204      	adds	r2, #4

200024aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
200024aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
200024ac:	d3fb      	bcc.n	200024a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
200024ae:	f7ff f87d 	bl	200015ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
200024b2:	f000 fa77 	bl	200029a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
200024b6:	f000 f99f 	bl	200027f8 <main>
  bx  lr    
200024ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
200024bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
200024c0:	20002a34 	.word	0x20002a34
  ldr r1, =_edata
200024c4:	20002a4c 	.word	0x20002a4c
  ldr r2, =_sidata
200024c8:	20002a34 	.word	0x20002a34
  ldr r2, =_sbss
200024cc:	20002a4c 	.word	0x20002a4c
  ldr r4, =_ebss
200024d0:	20002bcc 	.word	0x20002bcc

200024d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
200024d4:	e7fe      	b.n	200024d4 <ADC_IRQHandler>

200024d6 <HEXQueueFixBounds>:
	q->next = 0;
	q->len = 0;
}

void HEXQueueFixBounds(HEXQueue *q) {
	if(q->start >= HEX_QUEUE_LEN)
200024d6:	7803      	ldrb	r3, [r0, #0]
200024d8:	2bc7      	cmp	r3, #199	; 0xc7
		q->start -= HEX_QUEUE_LEN;
200024da:	bf84      	itt	hi
200024dc:	3338      	addhi	r3, #56	; 0x38
200024de:	7003      	strbhi	r3, [r0, #0]
	if(q->next >= HEX_QUEUE_LEN)
200024e0:	7843      	ldrb	r3, [r0, #1]
200024e2:	2bc7      	cmp	r3, #199	; 0xc7
		q->next -= HEX_QUEUE_LEN;
200024e4:	bf84      	itt	hi
200024e6:	3338      	addhi	r3, #56	; 0x38
200024e8:	7043      	strbhi	r3, [r0, #1]
	if(q->len > HEX_QUEUE_LEN)
200024ea:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
200024ee:	2bc8      	cmp	r3, #200	; 0xc8
		q->len = HEX_QUEUE_LEN;
200024f0:	bf84      	itt	hi
200024f2:	23c8      	movhi	r3, #200	; 0xc8
200024f4:	f880 30ca 	strbhi.w	r3, [r0, #202]	; 0xca
}
200024f8:	4770      	bx	lr

200024fa <HEXQueueAdd>:

void HEXQueueAdd(HEXQueue *q, uint8_t element) {
	q->buf[q->next] = element;
200024fa:	7843      	ldrb	r3, [r0, #1]
200024fc:	18c2      	adds	r2, r0, r3
	q->next++;
200024fe:	3301      	adds	r3, #1
	q->buf[q->next] = element;
20002500:	7091      	strb	r1, [r2, #2]
	q->next++;
20002502:	7043      	strb	r3, [r0, #1]
	q->len++;
20002504:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
20002508:	3301      	adds	r3, #1
2000250a:	b2db      	uxtb	r3, r3

	if(q->len == HEX_QUEUE_LEN)
2000250c:	2bc8      	cmp	r3, #200	; 0xc8
	q->len++;
2000250e:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca
		q->start++;
20002512:	bf02      	ittt	eq
20002514:	7803      	ldrbeq	r3, [r0, #0]
20002516:	3301      	addeq	r3, #1
20002518:	7003      	strbeq	r3, [r0, #0]

	HEXQueueFixBounds(q);
2000251a:	f7ff bfdc 	b.w	200024d6 <HEXQueueFixBounds>

2000251e <HEXQueueExtractHex>:
}


//pulls an Intel hex command out of the buffer if one exists
	//returns 1 if command extracted, 0 if none found
uint8_t HEXQueueExtractHex(HEXQueue *q, uint8_t *outBuf) {
2000251e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(uint8_t i = 0; i < q->len - 5; i++) { //scan where queue is full enough for minimum len hex command
20002522:	f890 70ca 	ldrb.w	r7, [r0, #202]	; 0xca
20002526:	2300      	movs	r3, #0
20002528:	f1a7 0c05 	sub.w	ip, r7, #5
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
2000252c:	24c8      	movs	r4, #200	; 0xc8
	for(uint8_t i = 0; i < q->len - 5; i++) { //scan where queue is full enough for minimum len hex command
2000252e:	4563      	cmp	r3, ip
20002530:	db01      	blt.n	20002536 <HEXQueueExtractHex+0x18>
				//return dataLen+6;
				return 1;
			}
		}
	}
	return 0;
20002532:	2000      	movs	r0, #0
20002534:	e056      	b.n	200025e4 <HEXQueueExtractHex+0xc6>
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
20002536:	f890 8000 	ldrb.w	r8, [r0]
2000253a:	eb03 0208 	add.w	r2, r3, r8
2000253e:	fbb2 f6f4 	udiv	r6, r2, r4
20002542:	fb04 2216 	mls	r2, r4, r6, r2
	return q->buf[retIdx];
20002546:	4402      	add	r2, r0
			uint8_t dataLen = HEXQueueGetIdx(q, i+1);
20002548:	1c5d      	adds	r5, r3, #1
		if(HEXQueueGetIdx(q, i) == ':') {
2000254a:	7892      	ldrb	r2, [r2, #2]
2000254c:	2a3a      	cmp	r2, #58	; 0x3a
			uint8_t dataLen = HEXQueueGetIdx(q, i+1);
2000254e:	b2ed      	uxtb	r5, r5
		if(HEXQueueGetIdx(q, i) == ':') {
20002550:	d14a      	bne.n	200025e8 <HEXQueueExtractHex+0xca>
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
20002552:	eb05 0208 	add.w	r2, r5, r8
20002556:	fbb2 f6f4 	udiv	r6, r2, r4
2000255a:	fb04 2216 	mls	r2, r4, r6, r2
	return q->buf[retIdx];
2000255e:	4402      	add	r2, r0
20002560:	7896      	ldrb	r6, [r2, #2]
			if((q->len - i) >= 5 + dataLen) { //if hex fully received
20002562:	1afa      	subs	r2, r7, r3
20002564:	f106 0a04 	add.w	sl, r6, #4
20002568:	4592      	cmp	sl, r2
2000256a:	da3d      	bge.n	200025e8 <HEXQueueExtractHex+0xca>
				for(uint8_t j = 1; j < dataLen + 5; j++) {
2000256c:	f04f 0901 	mov.w	r9, #1
				uint8_t checksum = 0;
20002570:	f04f 0e00 	mov.w	lr, #0
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
20002574:	eb03 0209 	add.w	r2, r3, r9
20002578:	fa58 f282 	uxtab	r2, r8, r2
2000257c:	fbb2 fbf4 	udiv	fp, r2, r4
20002580:	fb04 221b 	mls	r2, r4, fp, r2
	return q->buf[retIdx];
20002584:	4402      	add	r2, r0
				for(uint8_t j = 1; j < dataLen + 5; j++) {
20002586:	f109 0901 	add.w	r9, r9, #1
					checksum += HEXQueueGetIdx(q, i+j);
2000258a:	7892      	ldrb	r2, [r2, #2]
				for(uint8_t j = 1; j < dataLen + 5; j++) {
2000258c:	fa5f f989 	uxtb.w	r9, r9
					checksum += HEXQueueGetIdx(q, i+j);
20002590:	4472      	add	r2, lr
				for(uint8_t j = 1; j < dataLen + 5; j++) {
20002592:	45ca      	cmp	sl, r9
					checksum += HEXQueueGetIdx(q, i+j);
20002594:	fa5f fe82 	uxtb.w	lr, r2
				for(uint8_t j = 1; j < dataLen + 5; j++) {
20002598:	daec      	bge.n	20002574 <HEXQueueExtractHex+0x56>
				if(checksum != HEXQueueGetIdx(q, i+dataLen+5)) {
2000259a:	1d5a      	adds	r2, r3, #5
2000259c:	4432      	add	r2, r6
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
2000259e:	fa58 f282 	uxtab	r2, r8, r2
200025a2:	fbb2 f8f4 	udiv	r8, r2, r4
200025a6:	fb04 2218 	mls	r2, r4, r8, r2
	return q->buf[retIdx];
200025aa:	4402      	add	r2, r0
				checksum = (~checksum)+1; //2's compliment
200025ac:	f1ce 0e00 	rsb	lr, lr, #0
				if(checksum != HEXQueueGetIdx(q, i+dataLen+5)) {
200025b0:	7892      	ldrb	r2, [r2, #2]
200025b2:	fa5f fe8e 	uxtb.w	lr, lr
200025b6:	4572      	cmp	r2, lr
200025b8:	d116      	bne.n	200025e8 <HEXQueueExtractHex+0xca>
				for(uint8_t j = 1; j < dataLen + 6; j++)
200025ba:	2401      	movs	r4, #1
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
200025bc:	25c8      	movs	r5, #200	; 0xc8
				for(uint8_t j = 1; j < dataLen + 6; j++)
200025be:	3605      	adds	r6, #5
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
200025c0:	7807      	ldrb	r7, [r0, #0]
200025c2:	191a      	adds	r2, r3, r4
200025c4:	fa57 f282 	uxtab	r2, r7, r2
200025c8:	fbb2 f7f5 	udiv	r7, r2, r5
200025cc:	fb05 2217 	mls	r2, r5, r7, r2
	return q->buf[retIdx];
200025d0:	4402      	add	r2, r0
200025d2:	7897      	ldrb	r7, [r2, #2]
					outBuf[j-1] = HEXQueueGetIdx(q, i+j);
200025d4:	190a      	adds	r2, r1, r4
				for(uint8_t j = 1; j < dataLen + 6; j++)
200025d6:	3401      	adds	r4, #1
200025d8:	b2e4      	uxtb	r4, r4
200025da:	42a6      	cmp	r6, r4
					outBuf[j-1] = HEXQueueGetIdx(q, i+j);
200025dc:	f802 7c01 	strb.w	r7, [r2, #-1]
				for(uint8_t j = 1; j < dataLen + 6; j++)
200025e0:	daee      	bge.n	200025c0 <HEXQueueExtractHex+0xa2>
				return 1;
200025e2:	2001      	movs	r0, #1
}
200025e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
200025e8:	462b      	mov	r3, r5
200025ea:	e7a0      	b.n	2000252e <HEXQueueExtractHex+0x10>

200025ec <TinyBLInit>:

	/* USER CODE END TIM7_Init 2 */

}

void TinyBLInit(void) {
200025ec:	b510      	push	{r4, lr}
200025ee:	b094      	sub	sp, #80	; 0x50
	HAL_Init();
200025f0:	f7ff f828 	bl	20001644 <HAL_Init>

	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
200025f4:	2214      	movs	r2, #20
200025f6:	2100      	movs	r1, #0
200025f8:	a808      	add	r0, sp, #32
200025fa:	f000 f9cb 	bl	20002994 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
200025fe:	2214      	movs	r2, #20
20002600:	2100      	movs	r1, #0
20002602:	a802      	add	r0, sp, #8
20002604:	f000 f9c6 	bl	20002994 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
20002608:	2300      	movs	r3, #0
2000260a:	4a2a      	ldr	r2, [pc, #168]	; (200026b4 <TinyBLInit+0xc8>)
2000260c:	9300      	str	r3, [sp, #0]
2000260e:	6c11      	ldr	r1, [r2, #64]	; 0x40
20002610:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
20002614:	6411      	str	r1, [r2, #64]	; 0x40
20002616:	6c12      	ldr	r2, [r2, #64]	; 0x40
20002618:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
2000261c:	9200      	str	r2, [sp, #0]
2000261e:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20002620:	4a25      	ldr	r2, [pc, #148]	; (200026b8 <TinyBLInit+0xcc>)
20002622:	9301      	str	r3, [sp, #4]
20002624:	6811      	ldr	r1, [r2, #0]
20002626:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
2000262a:	6011      	str	r1, [r2, #0]
2000262c:	6812      	ldr	r2, [r2, #0]
2000262e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
20002632:	2402      	movs	r4, #2
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20002634:	9201      	str	r2, [sp, #4]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
20002636:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2000263a:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
2000263c:	9407      	str	r4, [sp, #28]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
2000263e:	f04f 0c01 	mov.w	ip, #1
20002642:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 180;
20002644:	f04f 0e08 	mov.w	lr, #8
20002648:	23b4      	movs	r3, #180	; 0xb4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	RCC_OscInitStruct.PLL.PLLR = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000264a:	a807      	add	r0, sp, #28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
2000264c:	e9cd c20a 	strd	ip, r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 180;
20002650:	e9cd e30f 	strd	lr, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 2;
20002654:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
20002658:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000265a:	f7ff fb51 	bl	20001d00 <HAL_RCC_OscConfig>
2000265e:	b100      	cbz	r0, 20002662 <TinyBLInit+0x76>
	{
		for(;;);
20002660:	e7fe      	b.n	20002660 <TinyBLInit+0x74>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
20002662:	f7ff fb13 	bl	20001c8c <HAL_PWREx_EnableOverDrive>
20002666:	b100      	cbz	r0, 2000266a <TinyBLInit+0x7e>
	{
		for(;;);
20002668:	e7fe      	b.n	20002668 <TinyBLInit+0x7c>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2000266a:	230f      	movs	r3, #15
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2000266c:	e9cd 3402 	strd	r3, r4, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20002670:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
20002672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20002676:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
2000267a:	e9cd 0305 	strd	r0, r3, [sp, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
2000267e:	2105      	movs	r1, #5
20002680:	a802      	add	r0, sp, #8
20002682:	f7ff fd1d 	bl	200020c0 <HAL_RCC_ClockConfig>
20002686:	b100      	cbz	r0, 2000268a <TinyBLInit+0x9e>
	{
		for(;;);
20002688:	e7fe      	b.n	20002688 <TinyBLInit+0x9c>
	GPIO_InitStruct.Pin = GPIO_PIN_9;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);*/


	UartHandle.Instance        = USART3;
2000268a:	4b0c      	ldr	r3, [pc, #48]	; (200026bc <TinyBLInit+0xd0>)
	UartHandle.Init.BaudRate   = 57600;
2000268c:	490c      	ldr	r1, [pc, #48]	; (200026c0 <TinyBLInit+0xd4>)
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
	UartHandle.Init.Parity     = UART_PARITY_NONE;
2000268e:	6118      	str	r0, [r3, #16]
	UartHandle.Init.BaudRate   = 57600;
20002690:	f44f 4261 	mov.w	r2, #57600	; 0xe100
20002694:	e9c3 1200 	strd	r1, r2, [r3]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
20002698:	e9c3 0002 	strd	r0, r0, [r3, #8]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
2000269c:	6198      	str	r0, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
2000269e:	220c      	movs	r2, #12
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
200026a0:	61d8      	str	r0, [r3, #28]

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
200026a2:	4618      	mov	r0, r3
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
200026a4:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
200026a6:	f7ff febd 	bl	20002424 <HAL_UART_Init>
200026aa:	b100      	cbz	r0, 200026ae <TinyBLInit+0xc2>
	{
		//Initialization Error
		for(;;);
200026ac:	e7fe      	b.n	200026ac <TinyBLInit+0xc0>
	}

}
200026ae:	b014      	add	sp, #80	; 0x50
200026b0:	bd10      	pop	{r4, pc}
200026b2:	bf00      	nop
200026b4:	40023800 	.word	0x40023800
200026b8:	40007000 	.word	0x40007000
200026bc:	20002aac 	.word	0x20002aac
200026c0:	40004800 	.word	0x40004800

200026c4 <FlashEraseSectorIfNeeded>:
 */
static uint32_t GetSector(uint32_t Address)
{
	uint32_t sector = 0;

	if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
200026c4:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
200026c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
void FlashEraseSectorIfNeeded(uint32_t addr) {
200026cc:	b570      	push	{r4, r5, r6, lr}
	if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
200026ce:	d339      	bcc.n	20002744 <FlashEraseSectorIfNeeded+0x80>
	{
		sector = FLASH_SECTOR_0;
	}
	else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
200026d0:	f5a3 4280 	sub.w	r2, r3, #16384	; 0x4000
200026d4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
200026d8:	d336      	bcc.n	20002748 <FlashEraseSectorIfNeeded+0x84>
	{
		sector = FLASH_SECTOR_1;
	}
	else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
200026da:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
200026de:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
200026e2:	d333      	bcc.n	2000274c <FlashEraseSectorIfNeeded+0x88>
	{
		sector = FLASH_SECTOR_2;
	}
	else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
200026e4:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
200026e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
200026ec:	d330      	bcc.n	20002750 <FlashEraseSectorIfNeeded+0x8c>
	{
		sector = FLASH_SECTOR_3;
	}
	else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
200026ee:	f100 4077 	add.w	r0, r0, #4143972352	; 0xf7000000
200026f2:	f500 037f 	add.w	r3, r0, #16711680	; 0xff0000
200026f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200026fa:	d32b      	bcc.n	20002754 <FlashEraseSectorIfNeeded+0x90>
	{
		sector = FLASH_SECTOR_4;
	}
	else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
200026fc:	f500 037e 	add.w	r3, r0, #16646144	; 0xfe0000
20002700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
20002704:	d328      	bcc.n	20002758 <FlashEraseSectorIfNeeded+0x94>
	{
		sector = FLASH_SECTOR_5;
	}
	else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
20002706:	f500 007c 	add.w	r0, r0, #16515072	; 0xfc0000
	{
		sector = FLASH_SECTOR_6;
	}
	else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7) */
	{
		sector = FLASH_SECTOR_7;
2000270a:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
2000270e:	bf34      	ite	cc
20002710:	2406      	movcc	r4, #6
20002712:	2407      	movcs	r4, #7
	for(uint8_t i = 0; i < erasedSectorsLen; i++) {
20002714:	4d18      	ldr	r5, [pc, #96]	; (20002778 <FlashEraseSectorIfNeeded+0xb4>)
20002716:	4a19      	ldr	r2, [pc, #100]	; (2000277c <FlashEraseSectorIfNeeded+0xb8>)
20002718:	7828      	ldrb	r0, [r5, #0]
2000271a:	2300      	movs	r3, #0
2000271c:	4616      	mov	r6, r2
2000271e:	b2d9      	uxtb	r1, r3
20002720:	4288      	cmp	r0, r1
20002722:	d81b      	bhi.n	2000275c <FlashEraseSectorIfNeeded+0x98>
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
20002724:	4816      	ldr	r0, [pc, #88]	; (20002780 <FlashEraseSectorIfNeeded+0xbc>)
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
20002726:	4917      	ldr	r1, [pc, #92]	; (20002784 <FlashEraseSectorIfNeeded+0xc0>)
	EraseInitStruct.Sector        = sector;
20002728:	6084      	str	r4, [r0, #8]
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
2000272a:	2300      	movs	r3, #0
2000272c:	6003      	str	r3, [r0, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
2000272e:	2302      	movs	r3, #2
20002730:	6103      	str	r3, [r0, #16]
	EraseInitStruct.NbSectors     = 1;
20002732:	2301      	movs	r3, #1
20002734:	60c3      	str	r3, [r0, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
20002736:	f7ff f97f 	bl	20001a38 <HAL_FLASHEx_Erase>
2000273a:	b1b0      	cbz	r0, 2000276a <FlashEraseSectorIfNeeded+0xa6>
			BSP_LED_On(LED3);
2000273c:	2002      	movs	r0, #2
2000273e:	f7fe ff19 	bl	20001574 <BSP_LED_On>
		while (1) {
20002742:	e7fb      	b.n	2000273c <FlashEraseSectorIfNeeded+0x78>
		sector = FLASH_SECTOR_0;
20002744:	2400      	movs	r4, #0
20002746:	e7e5      	b.n	20002714 <FlashEraseSectorIfNeeded+0x50>
		sector = FLASH_SECTOR_1;
20002748:	2401      	movs	r4, #1
2000274a:	e7e3      	b.n	20002714 <FlashEraseSectorIfNeeded+0x50>
		sector = FLASH_SECTOR_2;
2000274c:	2402      	movs	r4, #2
2000274e:	e7e1      	b.n	20002714 <FlashEraseSectorIfNeeded+0x50>
		sector = FLASH_SECTOR_3;
20002750:	2403      	movs	r4, #3
20002752:	e7df      	b.n	20002714 <FlashEraseSectorIfNeeded+0x50>
		sector = FLASH_SECTOR_4;
20002754:	2404      	movs	r4, #4
20002756:	e7dd      	b.n	20002714 <FlashEraseSectorIfNeeded+0x50>
		sector = FLASH_SECTOR_5;
20002758:	2405      	movs	r4, #5
2000275a:	e7db      	b.n	20002714 <FlashEraseSectorIfNeeded+0x50>
		if(sector == erasedSectors[i])
2000275c:	f852 1b04 	ldr.w	r1, [r2], #4
20002760:	42a1      	cmp	r1, r4
20002762:	f103 0301 	add.w	r3, r3, #1
20002766:	d1da      	bne.n	2000271e <FlashEraseSectorIfNeeded+0x5a>
}
20002768:	bd70      	pop	{r4, r5, r6, pc}
	erasedSectors[erasedSectorsLen] = sector;
2000276a:	782b      	ldrb	r3, [r5, #0]
2000276c:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	erasedSectorsLen++;
20002770:	3301      	adds	r3, #1
20002772:	702b      	strb	r3, [r5, #0]
	return;
20002774:	e7f8      	b.n	20002768 <FlashEraseSectorIfNeeded+0xa4>
20002776:	bf00      	nop
20002778:	20002b18 	.word	0x20002b18
2000277c:	20002af8 	.word	0x20002af8
20002780:	20002a8c 	.word	0x20002a8c
20002784:	20002aa8 	.word	0x20002aa8

20002788 <ProcessHexFlash>:
uint8_t ProcessHexFlash() {
20002788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t dataLen = hexBuf[0];
2000278c:	4c18      	ldr	r4, [pc, #96]	; (200027f0 <ProcessHexFlash+0x68>)
	uint8_t cmdType = hexBuf[3];
2000278e:	78e5      	ldrb	r5, [r4, #3]
	uint8_t dataLen = hexBuf[0];
20002790:	f894 8000 	ldrb.w	r8, [r4]
	if(cmdType == 0) { //data
20002794:	b9fd      	cbnz	r5, 200027d6 <ProcessHexFlash+0x4e>
		uint32_t flashAddr = addrOffset + (((uint32_t)hexBuf[1])<<8) + (uint32_t)hexBuf[2];
20002796:	4b17      	ldr	r3, [pc, #92]	; (200027f4 <ProcessHexFlash+0x6c>)
20002798:	78a6      	ldrb	r6, [r4, #2]
2000279a:	681b      	ldr	r3, [r3, #0]
2000279c:	441e      	add	r6, r3
2000279e:	7863      	ldrb	r3, [r4, #1]
200027a0:	eb06 2603 	add.w	r6, r6, r3, lsl #8
		FlashEraseSectorIfNeeded(flashAddr);
200027a4:	4630      	mov	r0, r6
200027a6:	f7ff ff8d 	bl	200026c4 <FlashEraseSectorIfNeeded>
		for(uint8_t i = 0; i < dataLen; i++) {
200027aa:	3403      	adds	r4, #3
200027ac:	462f      	mov	r7, r5
200027ae:	b2fb      	uxtb	r3, r7
200027b0:	4598      	cmp	r8, r3
200027b2:	d802      	bhi.n	200027ba <ProcessHexFlash+0x32>
}
200027b4:	4628      	mov	r0, r5
200027b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddr+i, hexBuf[i+4]) != HAL_OK) {
200027ba:	2300      	movs	r3, #0
200027bc:	19b9      	adds	r1, r7, r6
200027be:	f814 2f01 	ldrb.w	r2, [r4, #1]!
200027c2:	4618      	mov	r0, r3
200027c4:	f7ff f896 	bl	200018f4 <HAL_FLASH_Program>
200027c8:	3701      	adds	r7, #1
200027ca:	2800      	cmp	r0, #0
200027cc:	d0ef      	beq.n	200027ae <ProcessHexFlash+0x26>
					BSP_LED_On(LED3);
200027ce:	2002      	movs	r0, #2
200027d0:	f7fe fed0 	bl	20001574 <BSP_LED_On>
				while (1)
200027d4:	e7fb      	b.n	200027ce <ProcessHexFlash+0x46>
	else if(cmdType == 1) { //EOF
200027d6:	2d01      	cmp	r5, #1
200027d8:	d0ec      	beq.n	200027b4 <ProcessHexFlash+0x2c>
200027da:	2d04      	cmp	r5, #4
200027dc:	d106      	bne.n	200027ec <ProcessHexFlash+0x64>
		addrOffset = (((uint32_t)hexBuf[4]) << 24) + (((uint32_t)hexBuf[5]) << 16);
200027de:	7963      	ldrb	r3, [r4, #5]
200027e0:	7922      	ldrb	r2, [r4, #4]
200027e2:	041b      	lsls	r3, r3, #16
200027e4:	eb03 6302 	add.w	r3, r3, r2, lsl #24
200027e8:	4a02      	ldr	r2, [pc, #8]	; (200027f4 <ProcessHexFlash+0x6c>)
200027ea:	6013      	str	r3, [r2, #0]
	if(cmdType == 0) { //data
200027ec:	2500      	movs	r5, #0
200027ee:	e7e1      	b.n	200027b4 <ProcessHexFlash+0x2c>
200027f0:	20002b19 	.word	0x20002b19
200027f4:	20002af4 	.word	0x20002af4

200027f8 <main>:
{  
200027f8:	b570      	push	{r4, r5, r6, lr}
200027fa:	b0ba      	sub	sp, #232	; 0xe8
	TinyBLInit();
200027fc:	f7ff fef6 	bl	200025ec <TinyBLInit>
	__HAL_RCC_GPIOB_CLK_ENABLE();
20002800:	2400      	movs	r4, #0
20002802:	4b33      	ldr	r3, [pc, #204]	; (200028d0 <main+0xd8>)
20002804:	9401      	str	r4, [sp, #4]
20002806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20002808:	4832      	ldr	r0, [pc, #200]	; (200028d4 <main+0xdc>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
2000280a:	f042 0202 	orr.w	r2, r2, #2
2000280e:	631a      	str	r2, [r3, #48]	; 0x30
20002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
20002812:	9404      	str	r4, [sp, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
20002814:	f003 0302 	and.w	r3, r3, #2
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
20002818:	2502      	movs	r5, #2
	GPIO_InitStruct.Pin = GPIO_PIN_0;
2000281a:	2601      	movs	r6, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
2000281c:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2000281e:	a902      	add	r1, sp, #8
	__HAL_RCC_GPIOB_CLK_ENABLE();
20002820:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
20002822:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20002824:	e9cd 6602 	strd	r6, r6, [sp, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20002828:	f7ff f956 	bl	20001ad8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
2000282c:	4622      	mov	r2, r4
2000282e:	4631      	mov	r1, r6
20002830:	4828      	ldr	r0, [pc, #160]	; (200028d4 <main+0xdc>)
20002832:	f7ff fa25 	bl	20001c80 <HAL_GPIO_WritePin>
	BSP_LED_Init(LED1);
20002836:	4620      	mov	r0, r4
20002838:	f7fe fe62 	bl	20001500 <BSP_LED_Init>
	BSP_LED_Init(LED2);
2000283c:	4630      	mov	r0, r6
2000283e:	f7fe fe5f 	bl	20001500 <BSP_LED_Init>
	BSP_LED_Init(LED3);
20002842:	4628      	mov	r0, r5
20002844:	f7fe fe5c 	bl	20001500 <BSP_LED_Init>
	HAL_FLASH_Unlock();
20002848:	f7ff f810 	bl	2000186c <HAL_FLASH_Unlock>
	FirstSector = GetSector(FLASH_USER_START_ADDR);
2000284c:	4b22      	ldr	r3, [pc, #136]	; (200028d8 <main+0xe0>)
	q->start = 0;
2000284e:	f8ad 401c 	strh.w	r4, [sp, #28]
20002852:	601d      	str	r5, [r3, #0]
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
20002854:	4b21      	ldr	r3, [pc, #132]	; (200028dc <main+0xe4>)
	q->len = 0;
20002856:	f88d 40e6 	strb.w	r4, [sp, #230]	; 0xe6
2000285a:	2206      	movs	r2, #6
2000285c:	601a      	str	r2, [r3, #0]
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
2000285e:	4b20      	ldr	r3, [pc, #128]	; (200028e0 <main+0xe8>)
			if(HEXQueueExtractHex(&q, hexBuf)) {
20002860:	4e20      	ldr	r6, [pc, #128]	; (200028e4 <main+0xec>)
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
20002862:	601c      	str	r4, [r3, #0]
	EraseInitStruct.NbSectors     = NbOfSectors;
20002864:	e9c3 5202 	strd	r5, r2, [r3, #8]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
20002868:	611d      	str	r5, [r3, #16]
				recMsgCount++;
2000286a:	4c1f      	ldr	r4, [pc, #124]	; (200028e8 <main+0xf0>)
		if((UartHandle.Instance->SR & UART_FLAG_RXNE) == UART_FLAG_RXNE) {
2000286c:	4d1f      	ldr	r5, [pc, #124]	; (200028ec <main+0xf4>)
2000286e:	682b      	ldr	r3, [r5, #0]
20002870:	681a      	ldr	r2, [r3, #0]
20002872:	0692      	lsls	r2, r2, #26
20002874:	d5fc      	bpl.n	20002870 <main+0x78>
			HEXQueueAdd(&q, (uint8_t)UartHandle.Instance->DR);
20002876:	6859      	ldr	r1, [r3, #4]
20002878:	a807      	add	r0, sp, #28
2000287a:	b2c9      	uxtb	r1, r1
2000287c:	f7ff fe3d 	bl	200024fa <HEXQueueAdd>
			if(HEXQueueExtractHex(&q, hexBuf)) {
20002880:	4631      	mov	r1, r6
20002882:	f7ff fe4c 	bl	2000251e <HEXQueueExtractHex>
20002886:	2800      	cmp	r0, #0
20002888:	d0f1      	beq.n	2000286e <main+0x76>
				recMsgCount++;
2000288a:	6823      	ldr	r3, [r4, #0]
2000288c:	3301      	adds	r3, #1
2000288e:	6023      	str	r3, [r4, #0]
	q->start = 0;
20002890:	2300      	movs	r3, #0
20002892:	f8ad 301c 	strh.w	r3, [sp, #28]
	q->len = 0;
20002896:	f88d 30e6 	strb.w	r3, [sp, #230]	; 0xe6
				uint8_t result = ProcessHexFlash();
2000289a:	f7ff ff75 	bl	20002788 <ProcessHexFlash>
				if(result == 1)
2000289e:	2801      	cmp	r0, #1
200028a0:	d1e5      	bne.n	2000286e <main+0x76>
	HAL_FLASH_Lock();
200028a2:	f7fe fff5 	bl	20001890 <HAL_FLASH_Lock>
		HAL_Delay(500);
200028a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
200028aa:	f7fe fef3 	bl	20001694 <HAL_Delay>
		BSP_LED_On(LED1);
200028ae:	2000      	movs	r0, #0
200028b0:	f7fe fe60 	bl	20001574 <BSP_LED_On>
		BSP_LED_On(LED3);
200028b4:	2002      	movs	r0, #2
200028b6:	f7fe fe5d 	bl	20001574 <BSP_LED_On>
		HAL_Delay(500);
200028ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
200028be:	f7fe fee9 	bl	20001694 <HAL_Delay>
		BSP_LED_Off(LED1);
200028c2:	2000      	movs	r0, #0
200028c4:	f7fe fe64 	bl	20001590 <BSP_LED_Off>
		BSP_LED_Off(LED3);
200028c8:	2002      	movs	r0, #2
200028ca:	f7fe fe61 	bl	20001590 <BSP_LED_Off>
	while (1)
200028ce:	e7ea      	b.n	200028a6 <main+0xae>
200028d0:	40023800 	.word	0x40023800
200028d4:	40020400 	.word	0x40020400
200028d8:	20002aa0 	.word	0x20002aa0
200028dc:	20002aa4 	.word	0x20002aa4
200028e0:	20002a8c 	.word	0x20002a8c
200028e4:	20002b19 	.word	0x20002b19
200028e8:	20002bc8 	.word	0x20002bc8
200028ec:	20002aac 	.word	0x20002aac

200028f0 <HAL_TIM_PeriodElapsedCallback>:
	// Check which version of the timer triggered this callback and toggle LED
	/*if (htim == &htim7)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	}*/
}
200028f0:	4770      	bx	lr
	...

200028f4 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
200028f4:	b510      	push	{r4, lr}
200028f6:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
200028f8:	4b1c      	ldr	r3, [pc, #112]	; (2000296c <HAL_UART_MspInit+0x78>)
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
200028fa:	481d      	ldr	r0, [pc, #116]	; (20002970 <HAL_UART_MspInit+0x7c>)
  USARTx_TX_GPIO_CLK_ENABLE();
200028fc:	2200      	movs	r2, #0
200028fe:	9200      	str	r2, [sp, #0]
20002900:	6b19      	ldr	r1, [r3, #48]	; 0x30
20002902:	f041 0108 	orr.w	r1, r1, #8
20002906:	6319      	str	r1, [r3, #48]	; 0x30
20002908:	6b19      	ldr	r1, [r3, #48]	; 0x30
2000290a:	f001 0108 	and.w	r1, r1, #8
2000290e:	9100      	str	r1, [sp, #0]
20002910:	9900      	ldr	r1, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
20002912:	9201      	str	r2, [sp, #4]
20002914:	6b19      	ldr	r1, [r3, #48]	; 0x30
20002916:	f041 0108 	orr.w	r1, r1, #8
2000291a:	6319      	str	r1, [r3, #48]	; 0x30
2000291c:	6b19      	ldr	r1, [r3, #48]	; 0x30
2000291e:	f001 0108 	and.w	r1, r1, #8
20002922:	9101      	str	r1, [sp, #4]
20002924:	9901      	ldr	r1, [sp, #4]
  USARTx_CLK_ENABLE();
20002926:	9202      	str	r2, [sp, #8]
20002928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2000292a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2000292e:	641a      	str	r2, [r3, #64]	; 0x40
20002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20002936:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
20002938:	f44f 7280 	mov.w	r2, #256	; 0x100
  USARTx_CLK_ENABLE();
2000293c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
2000293e:	2302      	movs	r3, #2
20002940:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
20002944:	2101      	movs	r1, #1
20002946:	2303      	movs	r3, #3
20002948:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
2000294c:	2407      	movs	r4, #7
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
2000294e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
20002950:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
20002952:	f7ff f8c1 	bl	20001ad8 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
20002956:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
2000295a:	4805      	ldr	r0, [pc, #20]	; (20002970 <HAL_UART_MspInit+0x7c>)
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
2000295c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
2000295e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
20002960:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
20002962:	f7ff f8b9 	bl	20001ad8 <HAL_GPIO_Init>
}
20002966:	b008      	add	sp, #32
20002968:	bd10      	pop	{r4, pc}
2000296a:	bf00      	nop
2000296c:	40023800 	.word	0x40023800
20002970:	40020c00 	.word	0x40020c00

20002974 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
20002974:	4770      	bx	lr

20002976 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
20002976:	e7fe      	b.n	20002976 <HardFault_Handler>

20002978 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
20002978:	e7fe      	b.n	20002978 <MemManage_Handler>

2000297a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
2000297a:	e7fe      	b.n	2000297a <BusFault_Handler>

2000297c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
2000297c:	e7fe      	b.n	2000297c <UsageFault_Handler>

2000297e <SVC_Handler>:
2000297e:	4770      	bx	lr

20002980 <DebugMon_Handler>:
20002980:	4770      	bx	lr

20002982 <PendSV_Handler>:
20002982:	4770      	bx	lr

20002984 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
20002984:	f7fe be74 	b.w	20001670 <HAL_IncTick>

20002988 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
20002988:	4801      	ldr	r0, [pc, #4]	; (20002990 <TIM7_IRQHandler+0x8>)
2000298a:	f7ff bc57 	b.w	2000223c <HAL_TIM_IRQHandler>
2000298e:	bf00      	nop
20002990:	20002b80 	.word	0x20002b80

20002994 <memset>:
20002994:	4402      	add	r2, r0
20002996:	4603      	mov	r3, r0
20002998:	4293      	cmp	r3, r2
2000299a:	d100      	bne.n	2000299e <memset+0xa>
2000299c:	4770      	bx	lr
2000299e:	f803 1b01 	strb.w	r1, [r3], #1
200029a2:	e7f9      	b.n	20002998 <memset+0x4>

200029a4 <__libc_init_array>:
200029a4:	b570      	push	{r4, r5, r6, lr}
200029a6:	4d0d      	ldr	r5, [pc, #52]	; (200029dc <__libc_init_array+0x38>)
200029a8:	4c0d      	ldr	r4, [pc, #52]	; (200029e0 <__libc_init_array+0x3c>)
200029aa:	1b64      	subs	r4, r4, r5
200029ac:	10a4      	asrs	r4, r4, #2
200029ae:	2600      	movs	r6, #0
200029b0:	42a6      	cmp	r6, r4
200029b2:	d109      	bne.n	200029c8 <__libc_init_array+0x24>
200029b4:	4d0b      	ldr	r5, [pc, #44]	; (200029e4 <__libc_init_array+0x40>)
200029b6:	4c0c      	ldr	r4, [pc, #48]	; (200029e8 <__libc_init_array+0x44>)
200029b8:	f000 f818 	bl	200029ec <_init>
200029bc:	1b64      	subs	r4, r4, r5
200029be:	10a4      	asrs	r4, r4, #2
200029c0:	2600      	movs	r6, #0
200029c2:	42a6      	cmp	r6, r4
200029c4:	d105      	bne.n	200029d2 <__libc_init_array+0x2e>
200029c6:	bd70      	pop	{r4, r5, r6, pc}
200029c8:	f855 3b04 	ldr.w	r3, [r5], #4
200029cc:	4798      	blx	r3
200029ce:	3601      	adds	r6, #1
200029d0:	e7ee      	b.n	200029b0 <__libc_init_array+0xc>
200029d2:	f855 3b04 	ldr.w	r3, [r5], #4
200029d6:	4798      	blx	r3
200029d8:	3601      	adds	r6, #1
200029da:	e7f2      	b.n	200029c2 <__libc_init_array+0x1e>
200029dc:	20002a2c 	.word	0x20002a2c
200029e0:	20002a2c 	.word	0x20002a2c
200029e4:	20002a2c 	.word	0x20002a2c
200029e8:	20002a30 	.word	0x20002a30

200029ec <_init>:
200029ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200029ee:	bf00      	nop
200029f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
200029f2:	bc08      	pop	{r3}
200029f4:	469e      	mov	lr, r3
200029f6:	4770      	bx	lr

200029f8 <_fini>:
200029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200029fa:	bf00      	nop
200029fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
200029fe:	bc08      	pop	{r3}
20002a00:	469e      	mov	lr, r3
20002a02:	4770      	bx	lr
