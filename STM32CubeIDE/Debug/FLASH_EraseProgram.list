
FLASH_EraseProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  20000000  20000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017fc  200001c4  200001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  200019c0  200019c0  000119c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  200019d8  200019d8  00011a00  2**0
                  CONTENTS
  4 .ARM          00000008  200019d8  200019d8  000119d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  200019e0  20001a00  00011a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  200019e0  200019e0  000119e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  200019e4  200019e4  000119e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  200019e8  200019e8  000119e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20001a00  20001a00  00011a00  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a3c  20001a3c  00011a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011a00  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00011a30  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004470  00000000  00000000  00011a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000115b  00000000  00000000  00015ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000498  00000000  00000000  00017040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000352  00000000  00000000  000174d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f8e8  00000000  00000000  0001782a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005982  00000000  00000000  00037112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf020  00000000  00000000  0003ca94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001098  00000000  00000000  000fbab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000fcb4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001c4 <__do_global_dtors_aux>:
200001c4:	b510      	push	{r4, lr}
200001c6:	4c05      	ldr	r4, [pc, #20]	; (200001dc <__do_global_dtors_aux+0x18>)
200001c8:	7823      	ldrb	r3, [r4, #0]
200001ca:	b933      	cbnz	r3, 200001da <__do_global_dtors_aux+0x16>
200001cc:	4b04      	ldr	r3, [pc, #16]	; (200001e0 <__do_global_dtors_aux+0x1c>)
200001ce:	b113      	cbz	r3, 200001d6 <__do_global_dtors_aux+0x12>
200001d0:	4804      	ldr	r0, [pc, #16]	; (200001e4 <__do_global_dtors_aux+0x20>)
200001d2:	f3af 8000 	nop.w
200001d6:	2301      	movs	r3, #1
200001d8:	7023      	strb	r3, [r4, #0]
200001da:	bd10      	pop	{r4, pc}
200001dc:	20001a00 	.word	0x20001a00
200001e0:	00000000 	.word	0x00000000
200001e4:	200019a8 	.word	0x200019a8

200001e8 <frame_dummy>:
200001e8:	b508      	push	{r3, lr}
200001ea:	4b03      	ldr	r3, [pc, #12]	; (200001f8 <frame_dummy+0x10>)
200001ec:	b11b      	cbz	r3, 200001f6 <frame_dummy+0xe>
200001ee:	4903      	ldr	r1, [pc, #12]	; (200001fc <frame_dummy+0x14>)
200001f0:	4803      	ldr	r0, [pc, #12]	; (20000200 <frame_dummy+0x18>)
200001f2:	f3af 8000 	nop.w
200001f6:	bd08      	pop	{r3, pc}
200001f8:	00000000 	.word	0x00000000
200001fc:	20001a04 	.word	0x20001a04
20000200:	200019a8 	.word	0x200019a8

20000204 <__aeabi_uldivmod>:
20000204:	b953      	cbnz	r3, 2000021c <__aeabi_uldivmod+0x18>
20000206:	b94a      	cbnz	r2, 2000021c <__aeabi_uldivmod+0x18>
20000208:	2900      	cmp	r1, #0
2000020a:	bf08      	it	eq
2000020c:	2800      	cmpeq	r0, #0
2000020e:	bf1c      	itt	ne
20000210:	f04f 31ff 	movne.w	r1, #4294967295
20000214:	f04f 30ff 	movne.w	r0, #4294967295
20000218:	f000 b970 	b.w	200004fc <__aeabi_idiv0>
2000021c:	f1ad 0c08 	sub.w	ip, sp, #8
20000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20000224:	f000 f806 	bl	20000234 <__udivmoddi4>
20000228:	f8dd e004 	ldr.w	lr, [sp, #4]
2000022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000230:	b004      	add	sp, #16
20000232:	4770      	bx	lr

20000234 <__udivmoddi4>:
20000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20000238:	9e08      	ldr	r6, [sp, #32]
2000023a:	460d      	mov	r5, r1
2000023c:	4604      	mov	r4, r0
2000023e:	460f      	mov	r7, r1
20000240:	2b00      	cmp	r3, #0
20000242:	d14a      	bne.n	200002da <__udivmoddi4+0xa6>
20000244:	428a      	cmp	r2, r1
20000246:	4694      	mov	ip, r2
20000248:	d965      	bls.n	20000316 <__udivmoddi4+0xe2>
2000024a:	fab2 f382 	clz	r3, r2
2000024e:	b143      	cbz	r3, 20000262 <__udivmoddi4+0x2e>
20000250:	fa02 fc03 	lsl.w	ip, r2, r3
20000254:	f1c3 0220 	rsb	r2, r3, #32
20000258:	409f      	lsls	r7, r3
2000025a:	fa20 f202 	lsr.w	r2, r0, r2
2000025e:	4317      	orrs	r7, r2
20000260:	409c      	lsls	r4, r3
20000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
20000266:	fa1f f58c 	uxth.w	r5, ip
2000026a:	fbb7 f1fe 	udiv	r1, r7, lr
2000026e:	0c22      	lsrs	r2, r4, #16
20000270:	fb0e 7711 	mls	r7, lr, r1, r7
20000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
20000278:	fb01 f005 	mul.w	r0, r1, r5
2000027c:	4290      	cmp	r0, r2
2000027e:	d90a      	bls.n	20000296 <__udivmoddi4+0x62>
20000280:	eb1c 0202 	adds.w	r2, ip, r2
20000284:	f101 37ff 	add.w	r7, r1, #4294967295
20000288:	f080 811c 	bcs.w	200004c4 <__udivmoddi4+0x290>
2000028c:	4290      	cmp	r0, r2
2000028e:	f240 8119 	bls.w	200004c4 <__udivmoddi4+0x290>
20000292:	3902      	subs	r1, #2
20000294:	4462      	add	r2, ip
20000296:	1a12      	subs	r2, r2, r0
20000298:	b2a4      	uxth	r4, r4
2000029a:	fbb2 f0fe 	udiv	r0, r2, lr
2000029e:	fb0e 2210 	mls	r2, lr, r0, r2
200002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
200002a6:	fb00 f505 	mul.w	r5, r0, r5
200002aa:	42a5      	cmp	r5, r4
200002ac:	d90a      	bls.n	200002c4 <__udivmoddi4+0x90>
200002ae:	eb1c 0404 	adds.w	r4, ip, r4
200002b2:	f100 32ff 	add.w	r2, r0, #4294967295
200002b6:	f080 8107 	bcs.w	200004c8 <__udivmoddi4+0x294>
200002ba:	42a5      	cmp	r5, r4
200002bc:	f240 8104 	bls.w	200004c8 <__udivmoddi4+0x294>
200002c0:	4464      	add	r4, ip
200002c2:	3802      	subs	r0, #2
200002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
200002c8:	1b64      	subs	r4, r4, r5
200002ca:	2100      	movs	r1, #0
200002cc:	b11e      	cbz	r6, 200002d6 <__udivmoddi4+0xa2>
200002ce:	40dc      	lsrs	r4, r3
200002d0:	2300      	movs	r3, #0
200002d2:	e9c6 4300 	strd	r4, r3, [r6]
200002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200002da:	428b      	cmp	r3, r1
200002dc:	d908      	bls.n	200002f0 <__udivmoddi4+0xbc>
200002de:	2e00      	cmp	r6, #0
200002e0:	f000 80ed 	beq.w	200004be <__udivmoddi4+0x28a>
200002e4:	2100      	movs	r1, #0
200002e6:	e9c6 0500 	strd	r0, r5, [r6]
200002ea:	4608      	mov	r0, r1
200002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200002f0:	fab3 f183 	clz	r1, r3
200002f4:	2900      	cmp	r1, #0
200002f6:	d149      	bne.n	2000038c <__udivmoddi4+0x158>
200002f8:	42ab      	cmp	r3, r5
200002fa:	d302      	bcc.n	20000302 <__udivmoddi4+0xce>
200002fc:	4282      	cmp	r2, r0
200002fe:	f200 80f8 	bhi.w	200004f2 <__udivmoddi4+0x2be>
20000302:	1a84      	subs	r4, r0, r2
20000304:	eb65 0203 	sbc.w	r2, r5, r3
20000308:	2001      	movs	r0, #1
2000030a:	4617      	mov	r7, r2
2000030c:	2e00      	cmp	r6, #0
2000030e:	d0e2      	beq.n	200002d6 <__udivmoddi4+0xa2>
20000310:	e9c6 4700 	strd	r4, r7, [r6]
20000314:	e7df      	b.n	200002d6 <__udivmoddi4+0xa2>
20000316:	b902      	cbnz	r2, 2000031a <__udivmoddi4+0xe6>
20000318:	deff      	udf	#255	; 0xff
2000031a:	fab2 f382 	clz	r3, r2
2000031e:	2b00      	cmp	r3, #0
20000320:	f040 8090 	bne.w	20000444 <__udivmoddi4+0x210>
20000324:	1a8a      	subs	r2, r1, r2
20000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000032a:	fa1f fe8c 	uxth.w	lr, ip
2000032e:	2101      	movs	r1, #1
20000330:	fbb2 f5f7 	udiv	r5, r2, r7
20000334:	fb07 2015 	mls	r0, r7, r5, r2
20000338:	0c22      	lsrs	r2, r4, #16
2000033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
2000033e:	fb0e f005 	mul.w	r0, lr, r5
20000342:	4290      	cmp	r0, r2
20000344:	d908      	bls.n	20000358 <__udivmoddi4+0x124>
20000346:	eb1c 0202 	adds.w	r2, ip, r2
2000034a:	f105 38ff 	add.w	r8, r5, #4294967295
2000034e:	d202      	bcs.n	20000356 <__udivmoddi4+0x122>
20000350:	4290      	cmp	r0, r2
20000352:	f200 80cb 	bhi.w	200004ec <__udivmoddi4+0x2b8>
20000356:	4645      	mov	r5, r8
20000358:	1a12      	subs	r2, r2, r0
2000035a:	b2a4      	uxth	r4, r4
2000035c:	fbb2 f0f7 	udiv	r0, r2, r7
20000360:	fb07 2210 	mls	r2, r7, r0, r2
20000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
20000368:	fb0e fe00 	mul.w	lr, lr, r0
2000036c:	45a6      	cmp	lr, r4
2000036e:	d908      	bls.n	20000382 <__udivmoddi4+0x14e>
20000370:	eb1c 0404 	adds.w	r4, ip, r4
20000374:	f100 32ff 	add.w	r2, r0, #4294967295
20000378:	d202      	bcs.n	20000380 <__udivmoddi4+0x14c>
2000037a:	45a6      	cmp	lr, r4
2000037c:	f200 80bb 	bhi.w	200004f6 <__udivmoddi4+0x2c2>
20000380:	4610      	mov	r0, r2
20000382:	eba4 040e 	sub.w	r4, r4, lr
20000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
2000038a:	e79f      	b.n	200002cc <__udivmoddi4+0x98>
2000038c:	f1c1 0720 	rsb	r7, r1, #32
20000390:	408b      	lsls	r3, r1
20000392:	fa22 fc07 	lsr.w	ip, r2, r7
20000396:	ea4c 0c03 	orr.w	ip, ip, r3
2000039a:	fa05 f401 	lsl.w	r4, r5, r1
2000039e:	fa20 f307 	lsr.w	r3, r0, r7
200003a2:	40fd      	lsrs	r5, r7
200003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
200003a8:	4323      	orrs	r3, r4
200003aa:	fbb5 f8f9 	udiv	r8, r5, r9
200003ae:	fa1f fe8c 	uxth.w	lr, ip
200003b2:	fb09 5518 	mls	r5, r9, r8, r5
200003b6:	0c1c      	lsrs	r4, r3, #16
200003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
200003bc:	fb08 f50e 	mul.w	r5, r8, lr
200003c0:	42a5      	cmp	r5, r4
200003c2:	fa02 f201 	lsl.w	r2, r2, r1
200003c6:	fa00 f001 	lsl.w	r0, r0, r1
200003ca:	d90b      	bls.n	200003e4 <__udivmoddi4+0x1b0>
200003cc:	eb1c 0404 	adds.w	r4, ip, r4
200003d0:	f108 3aff 	add.w	sl, r8, #4294967295
200003d4:	f080 8088 	bcs.w	200004e8 <__udivmoddi4+0x2b4>
200003d8:	42a5      	cmp	r5, r4
200003da:	f240 8085 	bls.w	200004e8 <__udivmoddi4+0x2b4>
200003de:	f1a8 0802 	sub.w	r8, r8, #2
200003e2:	4464      	add	r4, ip
200003e4:	1b64      	subs	r4, r4, r5
200003e6:	b29d      	uxth	r5, r3
200003e8:	fbb4 f3f9 	udiv	r3, r4, r9
200003ec:	fb09 4413 	mls	r4, r9, r3, r4
200003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
200003f4:	fb03 fe0e 	mul.w	lr, r3, lr
200003f8:	45a6      	cmp	lr, r4
200003fa:	d908      	bls.n	2000040e <__udivmoddi4+0x1da>
200003fc:	eb1c 0404 	adds.w	r4, ip, r4
20000400:	f103 35ff 	add.w	r5, r3, #4294967295
20000404:	d26c      	bcs.n	200004e0 <__udivmoddi4+0x2ac>
20000406:	45a6      	cmp	lr, r4
20000408:	d96a      	bls.n	200004e0 <__udivmoddi4+0x2ac>
2000040a:	3b02      	subs	r3, #2
2000040c:	4464      	add	r4, ip
2000040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
20000412:	fba3 9502 	umull	r9, r5, r3, r2
20000416:	eba4 040e 	sub.w	r4, r4, lr
2000041a:	42ac      	cmp	r4, r5
2000041c:	46c8      	mov	r8, r9
2000041e:	46ae      	mov	lr, r5
20000420:	d356      	bcc.n	200004d0 <__udivmoddi4+0x29c>
20000422:	d053      	beq.n	200004cc <__udivmoddi4+0x298>
20000424:	b156      	cbz	r6, 2000043c <__udivmoddi4+0x208>
20000426:	ebb0 0208 	subs.w	r2, r0, r8
2000042a:	eb64 040e 	sbc.w	r4, r4, lr
2000042e:	fa04 f707 	lsl.w	r7, r4, r7
20000432:	40ca      	lsrs	r2, r1
20000434:	40cc      	lsrs	r4, r1
20000436:	4317      	orrs	r7, r2
20000438:	e9c6 7400 	strd	r7, r4, [r6]
2000043c:	4618      	mov	r0, r3
2000043e:	2100      	movs	r1, #0
20000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000444:	f1c3 0120 	rsb	r1, r3, #32
20000448:	fa02 fc03 	lsl.w	ip, r2, r3
2000044c:	fa20 f201 	lsr.w	r2, r0, r1
20000450:	fa25 f101 	lsr.w	r1, r5, r1
20000454:	409d      	lsls	r5, r3
20000456:	432a      	orrs	r2, r5
20000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000045c:	fa1f fe8c 	uxth.w	lr, ip
20000460:	fbb1 f0f7 	udiv	r0, r1, r7
20000464:	fb07 1510 	mls	r5, r7, r0, r1
20000468:	0c11      	lsrs	r1, r2, #16
2000046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
2000046e:	fb00 f50e 	mul.w	r5, r0, lr
20000472:	428d      	cmp	r5, r1
20000474:	fa04 f403 	lsl.w	r4, r4, r3
20000478:	d908      	bls.n	2000048c <__udivmoddi4+0x258>
2000047a:	eb1c 0101 	adds.w	r1, ip, r1
2000047e:	f100 38ff 	add.w	r8, r0, #4294967295
20000482:	d22f      	bcs.n	200004e4 <__udivmoddi4+0x2b0>
20000484:	428d      	cmp	r5, r1
20000486:	d92d      	bls.n	200004e4 <__udivmoddi4+0x2b0>
20000488:	3802      	subs	r0, #2
2000048a:	4461      	add	r1, ip
2000048c:	1b49      	subs	r1, r1, r5
2000048e:	b292      	uxth	r2, r2
20000490:	fbb1 f5f7 	udiv	r5, r1, r7
20000494:	fb07 1115 	mls	r1, r7, r5, r1
20000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
2000049c:	fb05 f10e 	mul.w	r1, r5, lr
200004a0:	4291      	cmp	r1, r2
200004a2:	d908      	bls.n	200004b6 <__udivmoddi4+0x282>
200004a4:	eb1c 0202 	adds.w	r2, ip, r2
200004a8:	f105 38ff 	add.w	r8, r5, #4294967295
200004ac:	d216      	bcs.n	200004dc <__udivmoddi4+0x2a8>
200004ae:	4291      	cmp	r1, r2
200004b0:	d914      	bls.n	200004dc <__udivmoddi4+0x2a8>
200004b2:	3d02      	subs	r5, #2
200004b4:	4462      	add	r2, ip
200004b6:	1a52      	subs	r2, r2, r1
200004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
200004bc:	e738      	b.n	20000330 <__udivmoddi4+0xfc>
200004be:	4631      	mov	r1, r6
200004c0:	4630      	mov	r0, r6
200004c2:	e708      	b.n	200002d6 <__udivmoddi4+0xa2>
200004c4:	4639      	mov	r1, r7
200004c6:	e6e6      	b.n	20000296 <__udivmoddi4+0x62>
200004c8:	4610      	mov	r0, r2
200004ca:	e6fb      	b.n	200002c4 <__udivmoddi4+0x90>
200004cc:	4548      	cmp	r0, r9
200004ce:	d2a9      	bcs.n	20000424 <__udivmoddi4+0x1f0>
200004d0:	ebb9 0802 	subs.w	r8, r9, r2
200004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
200004d8:	3b01      	subs	r3, #1
200004da:	e7a3      	b.n	20000424 <__udivmoddi4+0x1f0>
200004dc:	4645      	mov	r5, r8
200004de:	e7ea      	b.n	200004b6 <__udivmoddi4+0x282>
200004e0:	462b      	mov	r3, r5
200004e2:	e794      	b.n	2000040e <__udivmoddi4+0x1da>
200004e4:	4640      	mov	r0, r8
200004e6:	e7d1      	b.n	2000048c <__udivmoddi4+0x258>
200004e8:	46d0      	mov	r8, sl
200004ea:	e77b      	b.n	200003e4 <__udivmoddi4+0x1b0>
200004ec:	3d02      	subs	r5, #2
200004ee:	4462      	add	r2, ip
200004f0:	e732      	b.n	20000358 <__udivmoddi4+0x124>
200004f2:	4608      	mov	r0, r1
200004f4:	e70a      	b.n	2000030c <__udivmoddi4+0xd8>
200004f6:	4464      	add	r4, ip
200004f8:	3802      	subs	r0, #2
200004fa:	e742      	b.n	20000382 <__udivmoddi4+0x14e>

200004fc <__aeabi_idiv0>:
200004fc:	4770      	bx	lr
200004fe:	bf00      	nop

20000500 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
20000500:	b580      	push	{r7, lr}
20000502:	b08a      	sub	sp, #40	; 0x28
20000504:	af00      	add	r7, sp, #0
20000506:	4603      	mov	r3, r0
20000508:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
2000050a:	79fb      	ldrb	r3, [r7, #7]
2000050c:	2b00      	cmp	r3, #0
2000050e:	d10e      	bne.n	2000052e <BSP_LED_Init+0x2e>
20000510:	2300      	movs	r3, #0
20000512:	613b      	str	r3, [r7, #16]
20000514:	4b1f      	ldr	r3, [pc, #124]	; (20000594 <BSP_LED_Init+0x94>)
20000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000518:	4a1e      	ldr	r2, [pc, #120]	; (20000594 <BSP_LED_Init+0x94>)
2000051a:	f043 0302 	orr.w	r3, r3, #2
2000051e:	6313      	str	r3, [r2, #48]	; 0x30
20000520:	4b1c      	ldr	r3, [pc, #112]	; (20000594 <BSP_LED_Init+0x94>)
20000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000524:	f003 0302 	and.w	r3, r3, #2
20000528:	613b      	str	r3, [r7, #16]
2000052a:	693b      	ldr	r3, [r7, #16]
2000052c:	e00d      	b.n	2000054a <BSP_LED_Init+0x4a>
2000052e:	2300      	movs	r3, #0
20000530:	60fb      	str	r3, [r7, #12]
20000532:	4b18      	ldr	r3, [pc, #96]	; (20000594 <BSP_LED_Init+0x94>)
20000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000536:	4a17      	ldr	r2, [pc, #92]	; (20000594 <BSP_LED_Init+0x94>)
20000538:	f043 0302 	orr.w	r3, r3, #2
2000053c:	6313      	str	r3, [r2, #48]	; 0x30
2000053e:	4b15      	ldr	r3, [pc, #84]	; (20000594 <BSP_LED_Init+0x94>)
20000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000542:	f003 0302 	and.w	r3, r3, #2
20000546:	60fb      	str	r3, [r7, #12]
20000548:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
2000054a:	79fb      	ldrb	r3, [r7, #7]
2000054c:	4a12      	ldr	r2, [pc, #72]	; (20000598 <BSP_LED_Init+0x98>)
2000054e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
20000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20000554:	2301      	movs	r3, #1
20000556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20000558:	2300      	movs	r3, #0
2000055a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
2000055c:	2302      	movs	r3, #2
2000055e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20000560:	79fb      	ldrb	r3, [r7, #7]
20000562:	4a0e      	ldr	r2, [pc, #56]	; (2000059c <BSP_LED_Init+0x9c>)
20000564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20000568:	f107 0214 	add.w	r2, r7, #20
2000056c:	4611      	mov	r1, r2
2000056e:	4618      	mov	r0, r3
20000570:	f000 f9e0 	bl	20000934 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
20000574:	79fb      	ldrb	r3, [r7, #7]
20000576:	4a09      	ldr	r2, [pc, #36]	; (2000059c <BSP_LED_Init+0x9c>)
20000578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
2000057c:	79fb      	ldrb	r3, [r7, #7]
2000057e:	4a06      	ldr	r2, [pc, #24]	; (20000598 <BSP_LED_Init+0x98>)
20000580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
20000584:	2200      	movs	r2, #0
20000586:	4619      	mov	r1, r3
20000588:	f000 fb68 	bl	20000c5c <HAL_GPIO_WritePin>
}
2000058c:	bf00      	nop
2000058e:	3728      	adds	r7, #40	; 0x28
20000590:	46bd      	mov	sp, r7
20000592:	bd80      	pop	{r7, pc}
20000594:	40023800 	.word	0x40023800
20000598:	200019c0 	.word	0x200019c0
2000059c:	200019e8 	.word	0x200019e8

200005a0 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
200005a0:	b580      	push	{r7, lr}
200005a2:	b082      	sub	sp, #8
200005a4:	af00      	add	r7, sp, #0
200005a6:	4603      	mov	r3, r0
200005a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
200005aa:	79fb      	ldrb	r3, [r7, #7]
200005ac:	4a07      	ldr	r2, [pc, #28]	; (200005cc <BSP_LED_On+0x2c>)
200005ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
200005b2:	79fb      	ldrb	r3, [r7, #7]
200005b4:	4a06      	ldr	r2, [pc, #24]	; (200005d0 <BSP_LED_On+0x30>)
200005b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
200005ba:	2201      	movs	r2, #1
200005bc:	4619      	mov	r1, r3
200005be:	f000 fb4d 	bl	20000c5c <HAL_GPIO_WritePin>
}
200005c2:	bf00      	nop
200005c4:	3708      	adds	r7, #8
200005c6:	46bd      	mov	sp, r7
200005c8:	bd80      	pop	{r7, pc}
200005ca:	bf00      	nop
200005cc:	200019e8 	.word	0x200019e8
200005d0:	200019c0 	.word	0x200019c0

200005d4 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
200005d4:	b580      	push	{r7, lr}
200005d6:	b082      	sub	sp, #8
200005d8:	af00      	add	r7, sp, #0
200005da:	4603      	mov	r3, r0
200005dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
200005de:	79fb      	ldrb	r3, [r7, #7]
200005e0:	4a07      	ldr	r2, [pc, #28]	; (20000600 <BSP_LED_Off+0x2c>)
200005e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
200005e6:	79fb      	ldrb	r3, [r7, #7]
200005e8:	4a06      	ldr	r2, [pc, #24]	; (20000604 <BSP_LED_Off+0x30>)
200005ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
200005ee:	2200      	movs	r2, #0
200005f0:	4619      	mov	r1, r3
200005f2:	f000 fb33 	bl	20000c5c <HAL_GPIO_WritePin>
}
200005f6:	bf00      	nop
200005f8:	3708      	adds	r7, #8
200005fa:	46bd      	mov	sp, r7
200005fc:	bd80      	pop	{r7, pc}
200005fe:	bf00      	nop
20000600:	200019e8 	.word	0x200019e8
20000604:	200019c0 	.word	0x200019c0

20000608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20000608:	b480      	push	{r7}
2000060a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
2000060c:	4b16      	ldr	r3, [pc, #88]	; (20000668 <SystemInit+0x60>)
2000060e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20000612:	4a15      	ldr	r2, [pc, #84]	; (20000668 <SystemInit+0x60>)
20000614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20000618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
2000061c:	4b13      	ldr	r3, [pc, #76]	; (2000066c <SystemInit+0x64>)
2000061e:	681b      	ldr	r3, [r3, #0]
20000620:	4a12      	ldr	r2, [pc, #72]	; (2000066c <SystemInit+0x64>)
20000622:	f043 0301 	orr.w	r3, r3, #1
20000626:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20000628:	4b10      	ldr	r3, [pc, #64]	; (2000066c <SystemInit+0x64>)
2000062a:	2200      	movs	r2, #0
2000062c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
2000062e:	4b0f      	ldr	r3, [pc, #60]	; (2000066c <SystemInit+0x64>)
20000630:	681b      	ldr	r3, [r3, #0]
20000632:	4a0e      	ldr	r2, [pc, #56]	; (2000066c <SystemInit+0x64>)
20000634:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
20000638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000063c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
2000063e:	4b0b      	ldr	r3, [pc, #44]	; (2000066c <SystemInit+0x64>)
20000640:	4a0b      	ldr	r2, [pc, #44]	; (20000670 <SystemInit+0x68>)
20000642:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20000644:	4b09      	ldr	r3, [pc, #36]	; (2000066c <SystemInit+0x64>)
20000646:	681b      	ldr	r3, [r3, #0]
20000648:	4a08      	ldr	r2, [pc, #32]	; (2000066c <SystemInit+0x64>)
2000064a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000064e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20000650:	4b06      	ldr	r3, [pc, #24]	; (2000066c <SystemInit+0x64>)
20000652:	2200      	movs	r2, #0
20000654:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
20000656:	4b04      	ldr	r3, [pc, #16]	; (20000668 <SystemInit+0x60>)
20000658:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
2000065c:	609a      	str	r2, [r3, #8]
#endif
}
2000065e:	bf00      	nop
20000660:	46bd      	mov	sp, r7
20000662:	f85d 7b04 	ldr.w	r7, [sp], #4
20000666:	4770      	bx	lr
20000668:	e000ed00 	.word	0xe000ed00
2000066c:	40023800 	.word	0x40023800
20000670:	24003010 	.word	0x24003010

20000674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20000674:	b580      	push	{r7, lr}
20000676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20000678:	4b0e      	ldr	r3, [pc, #56]	; (200006b4 <HAL_Init+0x40>)
2000067a:	681b      	ldr	r3, [r3, #0]
2000067c:	4a0d      	ldr	r2, [pc, #52]	; (200006b4 <HAL_Init+0x40>)
2000067e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20000682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
20000684:	4b0b      	ldr	r3, [pc, #44]	; (200006b4 <HAL_Init+0x40>)
20000686:	681b      	ldr	r3, [r3, #0]
20000688:	4a0a      	ldr	r2, [pc, #40]	; (200006b4 <HAL_Init+0x40>)
2000068a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2000068e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20000690:	4b08      	ldr	r3, [pc, #32]	; (200006b4 <HAL_Init+0x40>)
20000692:	681b      	ldr	r3, [r3, #0]
20000694:	4a07      	ldr	r2, [pc, #28]	; (200006b4 <HAL_Init+0x40>)
20000696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000069a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2000069c:	2003      	movs	r0, #3
2000069e:	f000 f915 	bl	200008cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
200006a2:	200f      	movs	r0, #15
200006a4:	f000 f810 	bl	200006c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
200006a8:	f000 f806 	bl	200006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
200006ac:	2300      	movs	r3, #0
}
200006ae:	4618      	mov	r0, r3
200006b0:	bd80      	pop	{r7, pc}
200006b2:	bf00      	nop
200006b4:	40023c00 	.word	0x40023c00

200006b8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
200006b8:	b480      	push	{r7}
200006ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
200006bc:	bf00      	nop
200006be:	46bd      	mov	sp, r7
200006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200006c4:	4770      	bx	lr
	...

200006c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
200006c8:	b580      	push	{r7, lr}
200006ca:	b082      	sub	sp, #8
200006cc:	af00      	add	r7, sp, #0
200006ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
200006d0:	4b12      	ldr	r3, [pc, #72]	; (2000071c <HAL_InitTick+0x54>)
200006d2:	681a      	ldr	r2, [r3, #0]
200006d4:	4b12      	ldr	r3, [pc, #72]	; (20000720 <HAL_InitTick+0x58>)
200006d6:	781b      	ldrb	r3, [r3, #0]
200006d8:	4619      	mov	r1, r3
200006da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
200006de:	fbb3 f3f1 	udiv	r3, r3, r1
200006e2:	fbb2 f3f3 	udiv	r3, r2, r3
200006e6:	4618      	mov	r0, r3
200006e8:	f000 f917 	bl	2000091a <HAL_SYSTICK_Config>
200006ec:	4603      	mov	r3, r0
200006ee:	2b00      	cmp	r3, #0
200006f0:	d001      	beq.n	200006f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
200006f2:	2301      	movs	r3, #1
200006f4:	e00e      	b.n	20000714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
200006f6:	687b      	ldr	r3, [r7, #4]
200006f8:	2b0f      	cmp	r3, #15
200006fa:	d80a      	bhi.n	20000712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
200006fc:	2200      	movs	r2, #0
200006fe:	6879      	ldr	r1, [r7, #4]
20000700:	f04f 30ff 	mov.w	r0, #4294967295
20000704:	f000 f8ed 	bl	200008e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20000708:	4a06      	ldr	r2, [pc, #24]	; (20000724 <HAL_InitTick+0x5c>)
2000070a:	687b      	ldr	r3, [r7, #4]
2000070c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2000070e:	2300      	movs	r3, #0
20000710:	e000      	b.n	20000714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
20000712:	2301      	movs	r3, #1
}
20000714:	4618      	mov	r0, r3
20000716:	3708      	adds	r7, #8
20000718:	46bd      	mov	sp, r7
2000071a:	bd80      	pop	{r7, pc}
2000071c:	200019f4 	.word	0x200019f4
20000720:	200019fc 	.word	0x200019fc
20000724:	200019f8 	.word	0x200019f8

20000728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20000728:	b480      	push	{r7}
2000072a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
2000072c:	4b06      	ldr	r3, [pc, #24]	; (20000748 <HAL_IncTick+0x20>)
2000072e:	781b      	ldrb	r3, [r3, #0]
20000730:	461a      	mov	r2, r3
20000732:	4b06      	ldr	r3, [pc, #24]	; (2000074c <HAL_IncTick+0x24>)
20000734:	681b      	ldr	r3, [r3, #0]
20000736:	4413      	add	r3, r2
20000738:	4a04      	ldr	r2, [pc, #16]	; (2000074c <HAL_IncTick+0x24>)
2000073a:	6013      	str	r3, [r2, #0]
}
2000073c:	bf00      	nop
2000073e:	46bd      	mov	sp, r7
20000740:	f85d 7b04 	ldr.w	r7, [sp], #4
20000744:	4770      	bx	lr
20000746:	bf00      	nop
20000748:	200019fc 	.word	0x200019fc
2000074c:	20001a1c 	.word	0x20001a1c

20000750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20000750:	b480      	push	{r7}
20000752:	af00      	add	r7, sp, #0
  return uwTick;
20000754:	4b03      	ldr	r3, [pc, #12]	; (20000764 <HAL_GetTick+0x14>)
20000756:	681b      	ldr	r3, [r3, #0]
}
20000758:	4618      	mov	r0, r3
2000075a:	46bd      	mov	sp, r7
2000075c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000760:	4770      	bx	lr
20000762:	bf00      	nop
20000764:	20001a1c 	.word	0x20001a1c

20000768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20000768:	b480      	push	{r7}
2000076a:	b085      	sub	sp, #20
2000076c:	af00      	add	r7, sp, #0
2000076e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20000770:	687b      	ldr	r3, [r7, #4]
20000772:	f003 0307 	and.w	r3, r3, #7
20000776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20000778:	4b0c      	ldr	r3, [pc, #48]	; (200007ac <__NVIC_SetPriorityGrouping+0x44>)
2000077a:	68db      	ldr	r3, [r3, #12]
2000077c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000077e:	68ba      	ldr	r2, [r7, #8]
20000780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
20000784:	4013      	ands	r3, r2
20000786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20000788:	68fb      	ldr	r3, [r7, #12]
2000078a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2000078c:	68bb      	ldr	r3, [r7, #8]
2000078e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
20000790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
20000794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20000798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000079a:	4a04      	ldr	r2, [pc, #16]	; (200007ac <__NVIC_SetPriorityGrouping+0x44>)
2000079c:	68bb      	ldr	r3, [r7, #8]
2000079e:	60d3      	str	r3, [r2, #12]
}
200007a0:	bf00      	nop
200007a2:	3714      	adds	r7, #20
200007a4:	46bd      	mov	sp, r7
200007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
200007aa:	4770      	bx	lr
200007ac:	e000ed00 	.word	0xe000ed00

200007b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
200007b0:	b480      	push	{r7}
200007b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200007b4:	4b04      	ldr	r3, [pc, #16]	; (200007c8 <__NVIC_GetPriorityGrouping+0x18>)
200007b6:	68db      	ldr	r3, [r3, #12]
200007b8:	0a1b      	lsrs	r3, r3, #8
200007ba:	f003 0307 	and.w	r3, r3, #7
}
200007be:	4618      	mov	r0, r3
200007c0:	46bd      	mov	sp, r7
200007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
200007c6:	4770      	bx	lr
200007c8:	e000ed00 	.word	0xe000ed00

200007cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
200007cc:	b480      	push	{r7}
200007ce:	b083      	sub	sp, #12
200007d0:	af00      	add	r7, sp, #0
200007d2:	4603      	mov	r3, r0
200007d4:	6039      	str	r1, [r7, #0]
200007d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200007d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
200007dc:	2b00      	cmp	r3, #0
200007de:	db0a      	blt.n	200007f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200007e0:	683b      	ldr	r3, [r7, #0]
200007e2:	b2da      	uxtb	r2, r3
200007e4:	490c      	ldr	r1, [pc, #48]	; (20000818 <__NVIC_SetPriority+0x4c>)
200007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
200007ea:	0112      	lsls	r2, r2, #4
200007ec:	b2d2      	uxtb	r2, r2
200007ee:	440b      	add	r3, r1
200007f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
200007f4:	e00a      	b.n	2000080c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200007f6:	683b      	ldr	r3, [r7, #0]
200007f8:	b2da      	uxtb	r2, r3
200007fa:	4908      	ldr	r1, [pc, #32]	; (2000081c <__NVIC_SetPriority+0x50>)
200007fc:	79fb      	ldrb	r3, [r7, #7]
200007fe:	f003 030f 	and.w	r3, r3, #15
20000802:	3b04      	subs	r3, #4
20000804:	0112      	lsls	r2, r2, #4
20000806:	b2d2      	uxtb	r2, r2
20000808:	440b      	add	r3, r1
2000080a:	761a      	strb	r2, [r3, #24]
}
2000080c:	bf00      	nop
2000080e:	370c      	adds	r7, #12
20000810:	46bd      	mov	sp, r7
20000812:	f85d 7b04 	ldr.w	r7, [sp], #4
20000816:	4770      	bx	lr
20000818:	e000e100 	.word	0xe000e100
2000081c:	e000ed00 	.word	0xe000ed00

20000820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20000820:	b480      	push	{r7}
20000822:	b089      	sub	sp, #36	; 0x24
20000824:	af00      	add	r7, sp, #0
20000826:	60f8      	str	r0, [r7, #12]
20000828:	60b9      	str	r1, [r7, #8]
2000082a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
2000082c:	68fb      	ldr	r3, [r7, #12]
2000082e:	f003 0307 	and.w	r3, r3, #7
20000832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20000834:	69fb      	ldr	r3, [r7, #28]
20000836:	f1c3 0307 	rsb	r3, r3, #7
2000083a:	2b04      	cmp	r3, #4
2000083c:	bf28      	it	cs
2000083e:	2304      	movcs	r3, #4
20000840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20000842:	69fb      	ldr	r3, [r7, #28]
20000844:	3304      	adds	r3, #4
20000846:	2b06      	cmp	r3, #6
20000848:	d902      	bls.n	20000850 <NVIC_EncodePriority+0x30>
2000084a:	69fb      	ldr	r3, [r7, #28]
2000084c:	3b03      	subs	r3, #3
2000084e:	e000      	b.n	20000852 <NVIC_EncodePriority+0x32>
20000850:	2300      	movs	r3, #0
20000852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20000854:	f04f 32ff 	mov.w	r2, #4294967295
20000858:	69bb      	ldr	r3, [r7, #24]
2000085a:	fa02 f303 	lsl.w	r3, r2, r3
2000085e:	43da      	mvns	r2, r3
20000860:	68bb      	ldr	r3, [r7, #8]
20000862:	401a      	ands	r2, r3
20000864:	697b      	ldr	r3, [r7, #20]
20000866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20000868:	f04f 31ff 	mov.w	r1, #4294967295
2000086c:	697b      	ldr	r3, [r7, #20]
2000086e:	fa01 f303 	lsl.w	r3, r1, r3
20000872:	43d9      	mvns	r1, r3
20000874:	687b      	ldr	r3, [r7, #4]
20000876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20000878:	4313      	orrs	r3, r2
         );
}
2000087a:	4618      	mov	r0, r3
2000087c:	3724      	adds	r7, #36	; 0x24
2000087e:	46bd      	mov	sp, r7
20000880:	f85d 7b04 	ldr.w	r7, [sp], #4
20000884:	4770      	bx	lr
	...

20000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20000888:	b580      	push	{r7, lr}
2000088a:	b082      	sub	sp, #8
2000088c:	af00      	add	r7, sp, #0
2000088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20000890:	687b      	ldr	r3, [r7, #4]
20000892:	3b01      	subs	r3, #1
20000894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20000898:	d301      	bcc.n	2000089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
2000089a:	2301      	movs	r3, #1
2000089c:	e00f      	b.n	200008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000089e:	4a0a      	ldr	r2, [pc, #40]	; (200008c8 <SysTick_Config+0x40>)
200008a0:	687b      	ldr	r3, [r7, #4]
200008a2:	3b01      	subs	r3, #1
200008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
200008a6:	210f      	movs	r1, #15
200008a8:	f04f 30ff 	mov.w	r0, #4294967295
200008ac:	f7ff ff8e 	bl	200007cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
200008b0:	4b05      	ldr	r3, [pc, #20]	; (200008c8 <SysTick_Config+0x40>)
200008b2:	2200      	movs	r2, #0
200008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200008b6:	4b04      	ldr	r3, [pc, #16]	; (200008c8 <SysTick_Config+0x40>)
200008b8:	2207      	movs	r2, #7
200008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200008bc:	2300      	movs	r3, #0
}
200008be:	4618      	mov	r0, r3
200008c0:	3708      	adds	r7, #8
200008c2:	46bd      	mov	sp, r7
200008c4:	bd80      	pop	{r7, pc}
200008c6:	bf00      	nop
200008c8:	e000e010 	.word	0xe000e010

200008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200008cc:	b580      	push	{r7, lr}
200008ce:	b082      	sub	sp, #8
200008d0:	af00      	add	r7, sp, #0
200008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
200008d4:	6878      	ldr	r0, [r7, #4]
200008d6:	f7ff ff47 	bl	20000768 <__NVIC_SetPriorityGrouping>
}
200008da:	bf00      	nop
200008dc:	3708      	adds	r7, #8
200008de:	46bd      	mov	sp, r7
200008e0:	bd80      	pop	{r7, pc}

200008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
200008e2:	b580      	push	{r7, lr}
200008e4:	b086      	sub	sp, #24
200008e6:	af00      	add	r7, sp, #0
200008e8:	4603      	mov	r3, r0
200008ea:	60b9      	str	r1, [r7, #8]
200008ec:	607a      	str	r2, [r7, #4]
200008ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
200008f0:	2300      	movs	r3, #0
200008f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
200008f4:	f7ff ff5c 	bl	200007b0 <__NVIC_GetPriorityGrouping>
200008f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
200008fa:	687a      	ldr	r2, [r7, #4]
200008fc:	68b9      	ldr	r1, [r7, #8]
200008fe:	6978      	ldr	r0, [r7, #20]
20000900:	f7ff ff8e 	bl	20000820 <NVIC_EncodePriority>
20000904:	4602      	mov	r2, r0
20000906:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000090a:	4611      	mov	r1, r2
2000090c:	4618      	mov	r0, r3
2000090e:	f7ff ff5d 	bl	200007cc <__NVIC_SetPriority>
}
20000912:	bf00      	nop
20000914:	3718      	adds	r7, #24
20000916:	46bd      	mov	sp, r7
20000918:	bd80      	pop	{r7, pc}

2000091a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000091a:	b580      	push	{r7, lr}
2000091c:	b082      	sub	sp, #8
2000091e:	af00      	add	r7, sp, #0
20000920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
20000922:	6878      	ldr	r0, [r7, #4]
20000924:	f7ff ffb0 	bl	20000888 <SysTick_Config>
20000928:	4603      	mov	r3, r0
}
2000092a:	4618      	mov	r0, r3
2000092c:	3708      	adds	r7, #8
2000092e:	46bd      	mov	sp, r7
20000930:	bd80      	pop	{r7, pc}
	...

20000934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20000934:	b480      	push	{r7}
20000936:	b089      	sub	sp, #36	; 0x24
20000938:	af00      	add	r7, sp, #0
2000093a:	6078      	str	r0, [r7, #4]
2000093c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
2000093e:	2300      	movs	r3, #0
20000940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
20000942:	2300      	movs	r3, #0
20000944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
20000946:	2300      	movs	r3, #0
20000948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
2000094a:	2300      	movs	r3, #0
2000094c:	61fb      	str	r3, [r7, #28]
2000094e:	e165      	b.n	20000c1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
20000950:	2201      	movs	r2, #1
20000952:	69fb      	ldr	r3, [r7, #28]
20000954:	fa02 f303 	lsl.w	r3, r2, r3
20000958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
2000095a:	683b      	ldr	r3, [r7, #0]
2000095c:	681b      	ldr	r3, [r3, #0]
2000095e:	697a      	ldr	r2, [r7, #20]
20000960:	4013      	ands	r3, r2
20000962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
20000964:	693a      	ldr	r2, [r7, #16]
20000966:	697b      	ldr	r3, [r7, #20]
20000968:	429a      	cmp	r2, r3
2000096a:	f040 8154 	bne.w	20000c16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
2000096e:	683b      	ldr	r3, [r7, #0]
20000970:	685b      	ldr	r3, [r3, #4]
20000972:	f003 0303 	and.w	r3, r3, #3
20000976:	2b01      	cmp	r3, #1
20000978:	d005      	beq.n	20000986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
2000097a:	683b      	ldr	r3, [r7, #0]
2000097c:	685b      	ldr	r3, [r3, #4]
2000097e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20000982:	2b02      	cmp	r3, #2
20000984:	d130      	bne.n	200009e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
20000986:	687b      	ldr	r3, [r7, #4]
20000988:	689b      	ldr	r3, [r3, #8]
2000098a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
2000098c:	69fb      	ldr	r3, [r7, #28]
2000098e:	005b      	lsls	r3, r3, #1
20000990:	2203      	movs	r2, #3
20000992:	fa02 f303 	lsl.w	r3, r2, r3
20000996:	43db      	mvns	r3, r3
20000998:	69ba      	ldr	r2, [r7, #24]
2000099a:	4013      	ands	r3, r2
2000099c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2000099e:	683b      	ldr	r3, [r7, #0]
200009a0:	68da      	ldr	r2, [r3, #12]
200009a2:	69fb      	ldr	r3, [r7, #28]
200009a4:	005b      	lsls	r3, r3, #1
200009a6:	fa02 f303 	lsl.w	r3, r2, r3
200009aa:	69ba      	ldr	r2, [r7, #24]
200009ac:	4313      	orrs	r3, r2
200009ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
200009b0:	687b      	ldr	r3, [r7, #4]
200009b2:	69ba      	ldr	r2, [r7, #24]
200009b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
200009b6:	687b      	ldr	r3, [r7, #4]
200009b8:	685b      	ldr	r3, [r3, #4]
200009ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
200009bc:	2201      	movs	r2, #1
200009be:	69fb      	ldr	r3, [r7, #28]
200009c0:	fa02 f303 	lsl.w	r3, r2, r3
200009c4:	43db      	mvns	r3, r3
200009c6:	69ba      	ldr	r2, [r7, #24]
200009c8:	4013      	ands	r3, r2
200009ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
200009cc:	683b      	ldr	r3, [r7, #0]
200009ce:	685b      	ldr	r3, [r3, #4]
200009d0:	091b      	lsrs	r3, r3, #4
200009d2:	f003 0201 	and.w	r2, r3, #1
200009d6:	69fb      	ldr	r3, [r7, #28]
200009d8:	fa02 f303 	lsl.w	r3, r2, r3
200009dc:	69ba      	ldr	r2, [r7, #24]
200009de:	4313      	orrs	r3, r2
200009e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
200009e2:	687b      	ldr	r3, [r7, #4]
200009e4:	69ba      	ldr	r2, [r7, #24]
200009e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
200009e8:	683b      	ldr	r3, [r7, #0]
200009ea:	685b      	ldr	r3, [r3, #4]
200009ec:	f003 0303 	and.w	r3, r3, #3
200009f0:	2b03      	cmp	r3, #3
200009f2:	d017      	beq.n	20000a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
200009f4:	687b      	ldr	r3, [r7, #4]
200009f6:	68db      	ldr	r3, [r3, #12]
200009f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
200009fa:	69fb      	ldr	r3, [r7, #28]
200009fc:	005b      	lsls	r3, r3, #1
200009fe:	2203      	movs	r2, #3
20000a00:	fa02 f303 	lsl.w	r3, r2, r3
20000a04:	43db      	mvns	r3, r3
20000a06:	69ba      	ldr	r2, [r7, #24]
20000a08:	4013      	ands	r3, r2
20000a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
20000a0c:	683b      	ldr	r3, [r7, #0]
20000a0e:	689a      	ldr	r2, [r3, #8]
20000a10:	69fb      	ldr	r3, [r7, #28]
20000a12:	005b      	lsls	r3, r3, #1
20000a14:	fa02 f303 	lsl.w	r3, r2, r3
20000a18:	69ba      	ldr	r2, [r7, #24]
20000a1a:	4313      	orrs	r3, r2
20000a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
20000a1e:	687b      	ldr	r3, [r7, #4]
20000a20:	69ba      	ldr	r2, [r7, #24]
20000a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20000a24:	683b      	ldr	r3, [r7, #0]
20000a26:	685b      	ldr	r3, [r3, #4]
20000a28:	f003 0303 	and.w	r3, r3, #3
20000a2c:	2b02      	cmp	r3, #2
20000a2e:	d123      	bne.n	20000a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
20000a30:	69fb      	ldr	r3, [r7, #28]
20000a32:	08da      	lsrs	r2, r3, #3
20000a34:	687b      	ldr	r3, [r7, #4]
20000a36:	3208      	adds	r2, #8
20000a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20000a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20000a3e:	69fb      	ldr	r3, [r7, #28]
20000a40:	f003 0307 	and.w	r3, r3, #7
20000a44:	009b      	lsls	r3, r3, #2
20000a46:	220f      	movs	r2, #15
20000a48:	fa02 f303 	lsl.w	r3, r2, r3
20000a4c:	43db      	mvns	r3, r3
20000a4e:	69ba      	ldr	r2, [r7, #24]
20000a50:	4013      	ands	r3, r2
20000a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
20000a54:	683b      	ldr	r3, [r7, #0]
20000a56:	691a      	ldr	r2, [r3, #16]
20000a58:	69fb      	ldr	r3, [r7, #28]
20000a5a:	f003 0307 	and.w	r3, r3, #7
20000a5e:	009b      	lsls	r3, r3, #2
20000a60:	fa02 f303 	lsl.w	r3, r2, r3
20000a64:	69ba      	ldr	r2, [r7, #24]
20000a66:	4313      	orrs	r3, r2
20000a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
20000a6a:	69fb      	ldr	r3, [r7, #28]
20000a6c:	08da      	lsrs	r2, r3, #3
20000a6e:	687b      	ldr	r3, [r7, #4]
20000a70:	3208      	adds	r2, #8
20000a72:	69b9      	ldr	r1, [r7, #24]
20000a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20000a78:	687b      	ldr	r3, [r7, #4]
20000a7a:	681b      	ldr	r3, [r3, #0]
20000a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
20000a7e:	69fb      	ldr	r3, [r7, #28]
20000a80:	005b      	lsls	r3, r3, #1
20000a82:	2203      	movs	r2, #3
20000a84:	fa02 f303 	lsl.w	r3, r2, r3
20000a88:	43db      	mvns	r3, r3
20000a8a:	69ba      	ldr	r2, [r7, #24]
20000a8c:	4013      	ands	r3, r2
20000a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
20000a90:	683b      	ldr	r3, [r7, #0]
20000a92:	685b      	ldr	r3, [r3, #4]
20000a94:	f003 0203 	and.w	r2, r3, #3
20000a98:	69fb      	ldr	r3, [r7, #28]
20000a9a:	005b      	lsls	r3, r3, #1
20000a9c:	fa02 f303 	lsl.w	r3, r2, r3
20000aa0:	69ba      	ldr	r2, [r7, #24]
20000aa2:	4313      	orrs	r3, r2
20000aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
20000aa6:	687b      	ldr	r3, [r7, #4]
20000aa8:	69ba      	ldr	r2, [r7, #24]
20000aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
20000aac:	683b      	ldr	r3, [r7, #0]
20000aae:	685b      	ldr	r3, [r3, #4]
20000ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
20000ab4:	2b00      	cmp	r3, #0
20000ab6:	f000 80ae 	beq.w	20000c16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20000aba:	2300      	movs	r3, #0
20000abc:	60fb      	str	r3, [r7, #12]
20000abe:	4b5d      	ldr	r3, [pc, #372]	; (20000c34 <HAL_GPIO_Init+0x300>)
20000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20000ac2:	4a5c      	ldr	r2, [pc, #368]	; (20000c34 <HAL_GPIO_Init+0x300>)
20000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20000ac8:	6453      	str	r3, [r2, #68]	; 0x44
20000aca:	4b5a      	ldr	r3, [pc, #360]	; (20000c34 <HAL_GPIO_Init+0x300>)
20000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20000ad2:	60fb      	str	r3, [r7, #12]
20000ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
20000ad6:	4a58      	ldr	r2, [pc, #352]	; (20000c38 <HAL_GPIO_Init+0x304>)
20000ad8:	69fb      	ldr	r3, [r7, #28]
20000ada:	089b      	lsrs	r3, r3, #2
20000adc:	3302      	adds	r3, #2
20000ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20000ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20000ae4:	69fb      	ldr	r3, [r7, #28]
20000ae6:	f003 0303 	and.w	r3, r3, #3
20000aea:	009b      	lsls	r3, r3, #2
20000aec:	220f      	movs	r2, #15
20000aee:	fa02 f303 	lsl.w	r3, r2, r3
20000af2:	43db      	mvns	r3, r3
20000af4:	69ba      	ldr	r2, [r7, #24]
20000af6:	4013      	ands	r3, r2
20000af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20000afa:	687b      	ldr	r3, [r7, #4]
20000afc:	4a4f      	ldr	r2, [pc, #316]	; (20000c3c <HAL_GPIO_Init+0x308>)
20000afe:	4293      	cmp	r3, r2
20000b00:	d025      	beq.n	20000b4e <HAL_GPIO_Init+0x21a>
20000b02:	687b      	ldr	r3, [r7, #4]
20000b04:	4a4e      	ldr	r2, [pc, #312]	; (20000c40 <HAL_GPIO_Init+0x30c>)
20000b06:	4293      	cmp	r3, r2
20000b08:	d01f      	beq.n	20000b4a <HAL_GPIO_Init+0x216>
20000b0a:	687b      	ldr	r3, [r7, #4]
20000b0c:	4a4d      	ldr	r2, [pc, #308]	; (20000c44 <HAL_GPIO_Init+0x310>)
20000b0e:	4293      	cmp	r3, r2
20000b10:	d019      	beq.n	20000b46 <HAL_GPIO_Init+0x212>
20000b12:	687b      	ldr	r3, [r7, #4]
20000b14:	4a4c      	ldr	r2, [pc, #304]	; (20000c48 <HAL_GPIO_Init+0x314>)
20000b16:	4293      	cmp	r3, r2
20000b18:	d013      	beq.n	20000b42 <HAL_GPIO_Init+0x20e>
20000b1a:	687b      	ldr	r3, [r7, #4]
20000b1c:	4a4b      	ldr	r2, [pc, #300]	; (20000c4c <HAL_GPIO_Init+0x318>)
20000b1e:	4293      	cmp	r3, r2
20000b20:	d00d      	beq.n	20000b3e <HAL_GPIO_Init+0x20a>
20000b22:	687b      	ldr	r3, [r7, #4]
20000b24:	4a4a      	ldr	r2, [pc, #296]	; (20000c50 <HAL_GPIO_Init+0x31c>)
20000b26:	4293      	cmp	r3, r2
20000b28:	d007      	beq.n	20000b3a <HAL_GPIO_Init+0x206>
20000b2a:	687b      	ldr	r3, [r7, #4]
20000b2c:	4a49      	ldr	r2, [pc, #292]	; (20000c54 <HAL_GPIO_Init+0x320>)
20000b2e:	4293      	cmp	r3, r2
20000b30:	d101      	bne.n	20000b36 <HAL_GPIO_Init+0x202>
20000b32:	2306      	movs	r3, #6
20000b34:	e00c      	b.n	20000b50 <HAL_GPIO_Init+0x21c>
20000b36:	2307      	movs	r3, #7
20000b38:	e00a      	b.n	20000b50 <HAL_GPIO_Init+0x21c>
20000b3a:	2305      	movs	r3, #5
20000b3c:	e008      	b.n	20000b50 <HAL_GPIO_Init+0x21c>
20000b3e:	2304      	movs	r3, #4
20000b40:	e006      	b.n	20000b50 <HAL_GPIO_Init+0x21c>
20000b42:	2303      	movs	r3, #3
20000b44:	e004      	b.n	20000b50 <HAL_GPIO_Init+0x21c>
20000b46:	2302      	movs	r3, #2
20000b48:	e002      	b.n	20000b50 <HAL_GPIO_Init+0x21c>
20000b4a:	2301      	movs	r3, #1
20000b4c:	e000      	b.n	20000b50 <HAL_GPIO_Init+0x21c>
20000b4e:	2300      	movs	r3, #0
20000b50:	69fa      	ldr	r2, [r7, #28]
20000b52:	f002 0203 	and.w	r2, r2, #3
20000b56:	0092      	lsls	r2, r2, #2
20000b58:	4093      	lsls	r3, r2
20000b5a:	69ba      	ldr	r2, [r7, #24]
20000b5c:	4313      	orrs	r3, r2
20000b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
20000b60:	4935      	ldr	r1, [pc, #212]	; (20000c38 <HAL_GPIO_Init+0x304>)
20000b62:	69fb      	ldr	r3, [r7, #28]
20000b64:	089b      	lsrs	r3, r3, #2
20000b66:	3302      	adds	r3, #2
20000b68:	69ba      	ldr	r2, [r7, #24]
20000b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20000b6e:	4b3a      	ldr	r3, [pc, #232]	; (20000c58 <HAL_GPIO_Init+0x324>)
20000b70:	689b      	ldr	r3, [r3, #8]
20000b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20000b74:	693b      	ldr	r3, [r7, #16]
20000b76:	43db      	mvns	r3, r3
20000b78:	69ba      	ldr	r2, [r7, #24]
20000b7a:	4013      	ands	r3, r2
20000b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
20000b7e:	683b      	ldr	r3, [r7, #0]
20000b80:	685b      	ldr	r3, [r3, #4]
20000b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
20000b86:	2b00      	cmp	r3, #0
20000b88:	d003      	beq.n	20000b92 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
20000b8a:	69ba      	ldr	r2, [r7, #24]
20000b8c:	693b      	ldr	r3, [r7, #16]
20000b8e:	4313      	orrs	r3, r2
20000b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
20000b92:	4a31      	ldr	r2, [pc, #196]	; (20000c58 <HAL_GPIO_Init+0x324>)
20000b94:	69bb      	ldr	r3, [r7, #24]
20000b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20000b98:	4b2f      	ldr	r3, [pc, #188]	; (20000c58 <HAL_GPIO_Init+0x324>)
20000b9a:	68db      	ldr	r3, [r3, #12]
20000b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20000b9e:	693b      	ldr	r3, [r7, #16]
20000ba0:	43db      	mvns	r3, r3
20000ba2:	69ba      	ldr	r2, [r7, #24]
20000ba4:	4013      	ands	r3, r2
20000ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
20000ba8:	683b      	ldr	r3, [r7, #0]
20000baa:	685b      	ldr	r3, [r3, #4]
20000bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
20000bb0:	2b00      	cmp	r3, #0
20000bb2:	d003      	beq.n	20000bbc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
20000bb4:	69ba      	ldr	r2, [r7, #24]
20000bb6:	693b      	ldr	r3, [r7, #16]
20000bb8:	4313      	orrs	r3, r2
20000bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20000bbc:	4a26      	ldr	r2, [pc, #152]	; (20000c58 <HAL_GPIO_Init+0x324>)
20000bbe:	69bb      	ldr	r3, [r7, #24]
20000bc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
20000bc2:	4b25      	ldr	r3, [pc, #148]	; (20000c58 <HAL_GPIO_Init+0x324>)
20000bc4:	685b      	ldr	r3, [r3, #4]
20000bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20000bc8:	693b      	ldr	r3, [r7, #16]
20000bca:	43db      	mvns	r3, r3
20000bcc:	69ba      	ldr	r2, [r7, #24]
20000bce:	4013      	ands	r3, r2
20000bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
20000bd2:	683b      	ldr	r3, [r7, #0]
20000bd4:	685b      	ldr	r3, [r3, #4]
20000bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20000bda:	2b00      	cmp	r3, #0
20000bdc:	d003      	beq.n	20000be6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
20000bde:	69ba      	ldr	r2, [r7, #24]
20000be0:	693b      	ldr	r3, [r7, #16]
20000be2:	4313      	orrs	r3, r2
20000be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
20000be6:	4a1c      	ldr	r2, [pc, #112]	; (20000c58 <HAL_GPIO_Init+0x324>)
20000be8:	69bb      	ldr	r3, [r7, #24]
20000bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20000bec:	4b1a      	ldr	r3, [pc, #104]	; (20000c58 <HAL_GPIO_Init+0x324>)
20000bee:	681b      	ldr	r3, [r3, #0]
20000bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20000bf2:	693b      	ldr	r3, [r7, #16]
20000bf4:	43db      	mvns	r3, r3
20000bf6:	69ba      	ldr	r2, [r7, #24]
20000bf8:	4013      	ands	r3, r2
20000bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
20000bfc:	683b      	ldr	r3, [r7, #0]
20000bfe:	685b      	ldr	r3, [r3, #4]
20000c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000c04:	2b00      	cmp	r3, #0
20000c06:	d003      	beq.n	20000c10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
20000c08:	69ba      	ldr	r2, [r7, #24]
20000c0a:	693b      	ldr	r3, [r7, #16]
20000c0c:	4313      	orrs	r3, r2
20000c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20000c10:	4a11      	ldr	r2, [pc, #68]	; (20000c58 <HAL_GPIO_Init+0x324>)
20000c12:	69bb      	ldr	r3, [r7, #24]
20000c14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
20000c16:	69fb      	ldr	r3, [r7, #28]
20000c18:	3301      	adds	r3, #1
20000c1a:	61fb      	str	r3, [r7, #28]
20000c1c:	69fb      	ldr	r3, [r7, #28]
20000c1e:	2b0f      	cmp	r3, #15
20000c20:	f67f ae96 	bls.w	20000950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
20000c24:	bf00      	nop
20000c26:	bf00      	nop
20000c28:	3724      	adds	r7, #36	; 0x24
20000c2a:	46bd      	mov	sp, r7
20000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000c30:	4770      	bx	lr
20000c32:	bf00      	nop
20000c34:	40023800 	.word	0x40023800
20000c38:	40013800 	.word	0x40013800
20000c3c:	40020000 	.word	0x40020000
20000c40:	40020400 	.word	0x40020400
20000c44:	40020800 	.word	0x40020800
20000c48:	40020c00 	.word	0x40020c00
20000c4c:	40021000 	.word	0x40021000
20000c50:	40021400 	.word	0x40021400
20000c54:	40021800 	.word	0x40021800
20000c58:	40013c00 	.word	0x40013c00

20000c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20000c5c:	b480      	push	{r7}
20000c5e:	b083      	sub	sp, #12
20000c60:	af00      	add	r7, sp, #0
20000c62:	6078      	str	r0, [r7, #4]
20000c64:	460b      	mov	r3, r1
20000c66:	807b      	strh	r3, [r7, #2]
20000c68:	4613      	mov	r3, r2
20000c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20000c6c:	787b      	ldrb	r3, [r7, #1]
20000c6e:	2b00      	cmp	r3, #0
20000c70:	d003      	beq.n	20000c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
20000c72:	887a      	ldrh	r2, [r7, #2]
20000c74:	687b      	ldr	r3, [r7, #4]
20000c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
20000c78:	e003      	b.n	20000c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
20000c7a:	887b      	ldrh	r3, [r7, #2]
20000c7c:	041a      	lsls	r2, r3, #16
20000c7e:	687b      	ldr	r3, [r7, #4]
20000c80:	619a      	str	r2, [r3, #24]
}
20000c82:	bf00      	nop
20000c84:	370c      	adds	r7, #12
20000c86:	46bd      	mov	sp, r7
20000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
20000c8c:	4770      	bx	lr
	...

20000c90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
20000c90:	b580      	push	{r7, lr}
20000c92:	b082      	sub	sp, #8
20000c94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
20000c96:	2300      	movs	r3, #0
20000c98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
20000c9a:	2300      	movs	r3, #0
20000c9c:	603b      	str	r3, [r7, #0]
20000c9e:	4b20      	ldr	r3, [pc, #128]	; (20000d20 <HAL_PWREx_EnableOverDrive+0x90>)
20000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000ca2:	4a1f      	ldr	r2, [pc, #124]	; (20000d20 <HAL_PWREx_EnableOverDrive+0x90>)
20000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20000ca8:	6413      	str	r3, [r2, #64]	; 0x40
20000caa:	4b1d      	ldr	r3, [pc, #116]	; (20000d20 <HAL_PWREx_EnableOverDrive+0x90>)
20000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20000cb2:	603b      	str	r3, [r7, #0]
20000cb4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
20000cb6:	4b1b      	ldr	r3, [pc, #108]	; (20000d24 <HAL_PWREx_EnableOverDrive+0x94>)
20000cb8:	2201      	movs	r2, #1
20000cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20000cbc:	f7ff fd48 	bl	20000750 <HAL_GetTick>
20000cc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20000cc2:	e009      	b.n	20000cd8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20000cc4:	f7ff fd44 	bl	20000750 <HAL_GetTick>
20000cc8:	4602      	mov	r2, r0
20000cca:	687b      	ldr	r3, [r7, #4]
20000ccc:	1ad3      	subs	r3, r2, r3
20000cce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20000cd2:	d901      	bls.n	20000cd8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
20000cd4:	2303      	movs	r3, #3
20000cd6:	e01f      	b.n	20000d18 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20000cd8:	4b13      	ldr	r3, [pc, #76]	; (20000d28 <HAL_PWREx_EnableOverDrive+0x98>)
20000cda:	685b      	ldr	r3, [r3, #4]
20000cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20000ce4:	d1ee      	bne.n	20000cc4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20000ce6:	4b11      	ldr	r3, [pc, #68]	; (20000d2c <HAL_PWREx_EnableOverDrive+0x9c>)
20000ce8:	2201      	movs	r2, #1
20000cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20000cec:	f7ff fd30 	bl	20000750 <HAL_GetTick>
20000cf0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20000cf2:	e009      	b.n	20000d08 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20000cf4:	f7ff fd2c 	bl	20000750 <HAL_GetTick>
20000cf8:	4602      	mov	r2, r0
20000cfa:	687b      	ldr	r3, [r7, #4]
20000cfc:	1ad3      	subs	r3, r2, r3
20000cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20000d02:	d901      	bls.n	20000d08 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
20000d04:	2303      	movs	r3, #3
20000d06:	e007      	b.n	20000d18 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20000d08:	4b07      	ldr	r3, [pc, #28]	; (20000d28 <HAL_PWREx_EnableOverDrive+0x98>)
20000d0a:	685b      	ldr	r3, [r3, #4]
20000d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20000d10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
20000d14:	d1ee      	bne.n	20000cf4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
20000d16:	2300      	movs	r3, #0
}
20000d18:	4618      	mov	r0, r3
20000d1a:	3708      	adds	r7, #8
20000d1c:	46bd      	mov	sp, r7
20000d1e:	bd80      	pop	{r7, pc}
20000d20:	40023800 	.word	0x40023800
20000d24:	420e0040 	.word	0x420e0040
20000d28:	40007000 	.word	0x40007000
20000d2c:	420e0044 	.word	0x420e0044

20000d30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20000d30:	b580      	push	{r7, lr}
20000d32:	b086      	sub	sp, #24
20000d34:	af00      	add	r7, sp, #0
20000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
20000d38:	687b      	ldr	r3, [r7, #4]
20000d3a:	2b00      	cmp	r3, #0
20000d3c:	d101      	bne.n	20000d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
20000d3e:	2301      	movs	r3, #1
20000d40:	e26f      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20000d42:	687b      	ldr	r3, [r7, #4]
20000d44:	681b      	ldr	r3, [r3, #0]
20000d46:	f003 0301 	and.w	r3, r3, #1
20000d4a:	2b00      	cmp	r3, #0
20000d4c:	d075      	beq.n	20000e3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20000d4e:	4b88      	ldr	r3, [pc, #544]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000d50:	689b      	ldr	r3, [r3, #8]
20000d52:	f003 030c 	and.w	r3, r3, #12
20000d56:	2b04      	cmp	r3, #4
20000d58:	d00c      	beq.n	20000d74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20000d5a:	4b85      	ldr	r3, [pc, #532]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000d5c:	689b      	ldr	r3, [r3, #8]
20000d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20000d62:	2b08      	cmp	r3, #8
20000d64:	d112      	bne.n	20000d8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20000d66:	4b82      	ldr	r3, [pc, #520]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000d68:	685b      	ldr	r3, [r3, #4]
20000d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20000d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20000d72:	d10b      	bne.n	20000d8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20000d74:	4b7e      	ldr	r3, [pc, #504]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000d76:	681b      	ldr	r3, [r3, #0]
20000d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20000d7c:	2b00      	cmp	r3, #0
20000d7e:	d05b      	beq.n	20000e38 <HAL_RCC_OscConfig+0x108>
20000d80:	687b      	ldr	r3, [r7, #4]
20000d82:	685b      	ldr	r3, [r3, #4]
20000d84:	2b00      	cmp	r3, #0
20000d86:	d157      	bne.n	20000e38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
20000d88:	2301      	movs	r3, #1
20000d8a:	e24a      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20000d8c:	687b      	ldr	r3, [r7, #4]
20000d8e:	685b      	ldr	r3, [r3, #4]
20000d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20000d94:	d106      	bne.n	20000da4 <HAL_RCC_OscConfig+0x74>
20000d96:	4b76      	ldr	r3, [pc, #472]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000d98:	681b      	ldr	r3, [r3, #0]
20000d9a:	4a75      	ldr	r2, [pc, #468]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000da0:	6013      	str	r3, [r2, #0]
20000da2:	e01d      	b.n	20000de0 <HAL_RCC_OscConfig+0xb0>
20000da4:	687b      	ldr	r3, [r7, #4]
20000da6:	685b      	ldr	r3, [r3, #4]
20000da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20000dac:	d10c      	bne.n	20000dc8 <HAL_RCC_OscConfig+0x98>
20000dae:	4b70      	ldr	r3, [pc, #448]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000db0:	681b      	ldr	r3, [r3, #0]
20000db2:	4a6f      	ldr	r2, [pc, #444]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20000db8:	6013      	str	r3, [r2, #0]
20000dba:	4b6d      	ldr	r3, [pc, #436]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000dbc:	681b      	ldr	r3, [r3, #0]
20000dbe:	4a6c      	ldr	r2, [pc, #432]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000dc4:	6013      	str	r3, [r2, #0]
20000dc6:	e00b      	b.n	20000de0 <HAL_RCC_OscConfig+0xb0>
20000dc8:	4b69      	ldr	r3, [pc, #420]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000dca:	681b      	ldr	r3, [r3, #0]
20000dcc:	4a68      	ldr	r2, [pc, #416]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000dd2:	6013      	str	r3, [r2, #0]
20000dd4:	4b66      	ldr	r3, [pc, #408]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000dd6:	681b      	ldr	r3, [r3, #0]
20000dd8:	4a65      	ldr	r2, [pc, #404]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
20000dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
20000de0:	687b      	ldr	r3, [r7, #4]
20000de2:	685b      	ldr	r3, [r3, #4]
20000de4:	2b00      	cmp	r3, #0
20000de6:	d013      	beq.n	20000e10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20000de8:	f7ff fcb2 	bl	20000750 <HAL_GetTick>
20000dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20000dee:	e008      	b.n	20000e02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20000df0:	f7ff fcae 	bl	20000750 <HAL_GetTick>
20000df4:	4602      	mov	r2, r0
20000df6:	693b      	ldr	r3, [r7, #16]
20000df8:	1ad3      	subs	r3, r2, r3
20000dfa:	2b64      	cmp	r3, #100	; 0x64
20000dfc:	d901      	bls.n	20000e02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
20000dfe:	2303      	movs	r3, #3
20000e00:	e20f      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20000e02:	4b5b      	ldr	r3, [pc, #364]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000e04:	681b      	ldr	r3, [r3, #0]
20000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20000e0a:	2b00      	cmp	r3, #0
20000e0c:	d0f0      	beq.n	20000df0 <HAL_RCC_OscConfig+0xc0>
20000e0e:	e014      	b.n	20000e3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20000e10:	f7ff fc9e 	bl	20000750 <HAL_GetTick>
20000e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20000e16:	e008      	b.n	20000e2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20000e18:	f7ff fc9a 	bl	20000750 <HAL_GetTick>
20000e1c:	4602      	mov	r2, r0
20000e1e:	693b      	ldr	r3, [r7, #16]
20000e20:	1ad3      	subs	r3, r2, r3
20000e22:	2b64      	cmp	r3, #100	; 0x64
20000e24:	d901      	bls.n	20000e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
20000e26:	2303      	movs	r3, #3
20000e28:	e1fb      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20000e2a:	4b51      	ldr	r3, [pc, #324]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000e2c:	681b      	ldr	r3, [r3, #0]
20000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20000e32:	2b00      	cmp	r3, #0
20000e34:	d1f0      	bne.n	20000e18 <HAL_RCC_OscConfig+0xe8>
20000e36:	e000      	b.n	20000e3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20000e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20000e3a:	687b      	ldr	r3, [r7, #4]
20000e3c:	681b      	ldr	r3, [r3, #0]
20000e3e:	f003 0302 	and.w	r3, r3, #2
20000e42:	2b00      	cmp	r3, #0
20000e44:	d063      	beq.n	20000f0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20000e46:	4b4a      	ldr	r3, [pc, #296]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000e48:	689b      	ldr	r3, [r3, #8]
20000e4a:	f003 030c 	and.w	r3, r3, #12
20000e4e:	2b00      	cmp	r3, #0
20000e50:	d00b      	beq.n	20000e6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20000e52:	4b47      	ldr	r3, [pc, #284]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000e54:	689b      	ldr	r3, [r3, #8]
20000e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20000e5a:	2b08      	cmp	r3, #8
20000e5c:	d11c      	bne.n	20000e98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20000e5e:	4b44      	ldr	r3, [pc, #272]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000e60:	685b      	ldr	r3, [r3, #4]
20000e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20000e66:	2b00      	cmp	r3, #0
20000e68:	d116      	bne.n	20000e98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20000e6a:	4b41      	ldr	r3, [pc, #260]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000e6c:	681b      	ldr	r3, [r3, #0]
20000e6e:	f003 0302 	and.w	r3, r3, #2
20000e72:	2b00      	cmp	r3, #0
20000e74:	d005      	beq.n	20000e82 <HAL_RCC_OscConfig+0x152>
20000e76:	687b      	ldr	r3, [r7, #4]
20000e78:	68db      	ldr	r3, [r3, #12]
20000e7a:	2b01      	cmp	r3, #1
20000e7c:	d001      	beq.n	20000e82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
20000e7e:	2301      	movs	r3, #1
20000e80:	e1cf      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20000e82:	4b3b      	ldr	r3, [pc, #236]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000e84:	681b      	ldr	r3, [r3, #0]
20000e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20000e8a:	687b      	ldr	r3, [r7, #4]
20000e8c:	691b      	ldr	r3, [r3, #16]
20000e8e:	00db      	lsls	r3, r3, #3
20000e90:	4937      	ldr	r1, [pc, #220]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000e92:	4313      	orrs	r3, r2
20000e94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20000e96:	e03a      	b.n	20000f0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
20000e98:	687b      	ldr	r3, [r7, #4]
20000e9a:	68db      	ldr	r3, [r3, #12]
20000e9c:	2b00      	cmp	r3, #0
20000e9e:	d020      	beq.n	20000ee2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20000ea0:	4b34      	ldr	r3, [pc, #208]	; (20000f74 <HAL_RCC_OscConfig+0x244>)
20000ea2:	2201      	movs	r2, #1
20000ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20000ea6:	f7ff fc53 	bl	20000750 <HAL_GetTick>
20000eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20000eac:	e008      	b.n	20000ec0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20000eae:	f7ff fc4f 	bl	20000750 <HAL_GetTick>
20000eb2:	4602      	mov	r2, r0
20000eb4:	693b      	ldr	r3, [r7, #16]
20000eb6:	1ad3      	subs	r3, r2, r3
20000eb8:	2b02      	cmp	r3, #2
20000eba:	d901      	bls.n	20000ec0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
20000ebc:	2303      	movs	r3, #3
20000ebe:	e1b0      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20000ec0:	4b2b      	ldr	r3, [pc, #172]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000ec2:	681b      	ldr	r3, [r3, #0]
20000ec4:	f003 0302 	and.w	r3, r3, #2
20000ec8:	2b00      	cmp	r3, #0
20000eca:	d0f0      	beq.n	20000eae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20000ecc:	4b28      	ldr	r3, [pc, #160]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000ece:	681b      	ldr	r3, [r3, #0]
20000ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20000ed4:	687b      	ldr	r3, [r7, #4]
20000ed6:	691b      	ldr	r3, [r3, #16]
20000ed8:	00db      	lsls	r3, r3, #3
20000eda:	4925      	ldr	r1, [pc, #148]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000edc:	4313      	orrs	r3, r2
20000ede:	600b      	str	r3, [r1, #0]
20000ee0:	e015      	b.n	20000f0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
20000ee2:	4b24      	ldr	r3, [pc, #144]	; (20000f74 <HAL_RCC_OscConfig+0x244>)
20000ee4:	2200      	movs	r2, #0
20000ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20000ee8:	f7ff fc32 	bl	20000750 <HAL_GetTick>
20000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20000eee:	e008      	b.n	20000f02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20000ef0:	f7ff fc2e 	bl	20000750 <HAL_GetTick>
20000ef4:	4602      	mov	r2, r0
20000ef6:	693b      	ldr	r3, [r7, #16]
20000ef8:	1ad3      	subs	r3, r2, r3
20000efa:	2b02      	cmp	r3, #2
20000efc:	d901      	bls.n	20000f02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
20000efe:	2303      	movs	r3, #3
20000f00:	e18f      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20000f02:	4b1b      	ldr	r3, [pc, #108]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000f04:	681b      	ldr	r3, [r3, #0]
20000f06:	f003 0302 	and.w	r3, r3, #2
20000f0a:	2b00      	cmp	r3, #0
20000f0c:	d1f0      	bne.n	20000ef0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20000f0e:	687b      	ldr	r3, [r7, #4]
20000f10:	681b      	ldr	r3, [r3, #0]
20000f12:	f003 0308 	and.w	r3, r3, #8
20000f16:	2b00      	cmp	r3, #0
20000f18:	d036      	beq.n	20000f88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
20000f1a:	687b      	ldr	r3, [r7, #4]
20000f1c:	695b      	ldr	r3, [r3, #20]
20000f1e:	2b00      	cmp	r3, #0
20000f20:	d016      	beq.n	20000f50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
20000f22:	4b15      	ldr	r3, [pc, #84]	; (20000f78 <HAL_RCC_OscConfig+0x248>)
20000f24:	2201      	movs	r2, #1
20000f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20000f28:	f7ff fc12 	bl	20000750 <HAL_GetTick>
20000f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20000f2e:	e008      	b.n	20000f42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20000f30:	f7ff fc0e 	bl	20000750 <HAL_GetTick>
20000f34:	4602      	mov	r2, r0
20000f36:	693b      	ldr	r3, [r7, #16]
20000f38:	1ad3      	subs	r3, r2, r3
20000f3a:	2b02      	cmp	r3, #2
20000f3c:	d901      	bls.n	20000f42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
20000f3e:	2303      	movs	r3, #3
20000f40:	e16f      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20000f42:	4b0b      	ldr	r3, [pc, #44]	; (20000f70 <HAL_RCC_OscConfig+0x240>)
20000f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000f46:	f003 0302 	and.w	r3, r3, #2
20000f4a:	2b00      	cmp	r3, #0
20000f4c:	d0f0      	beq.n	20000f30 <HAL_RCC_OscConfig+0x200>
20000f4e:	e01b      	b.n	20000f88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20000f50:	4b09      	ldr	r3, [pc, #36]	; (20000f78 <HAL_RCC_OscConfig+0x248>)
20000f52:	2200      	movs	r2, #0
20000f54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
20000f56:	f7ff fbfb 	bl	20000750 <HAL_GetTick>
20000f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20000f5c:	e00e      	b.n	20000f7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20000f5e:	f7ff fbf7 	bl	20000750 <HAL_GetTick>
20000f62:	4602      	mov	r2, r0
20000f64:	693b      	ldr	r3, [r7, #16]
20000f66:	1ad3      	subs	r3, r2, r3
20000f68:	2b02      	cmp	r3, #2
20000f6a:	d907      	bls.n	20000f7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
20000f6c:	2303      	movs	r3, #3
20000f6e:	e158      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
20000f70:	40023800 	.word	0x40023800
20000f74:	42470000 	.word	0x42470000
20000f78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20000f7c:	4b88      	ldr	r3, [pc, #544]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20000f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000f80:	f003 0302 	and.w	r3, r3, #2
20000f84:	2b00      	cmp	r3, #0
20000f86:	d1ea      	bne.n	20000f5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20000f88:	687b      	ldr	r3, [r7, #4]
20000f8a:	681b      	ldr	r3, [r3, #0]
20000f8c:	f003 0304 	and.w	r3, r3, #4
20000f90:	2b00      	cmp	r3, #0
20000f92:	f000 8097 	beq.w	200010c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
20000f96:	2300      	movs	r3, #0
20000f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
20000f9a:	4b81      	ldr	r3, [pc, #516]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20000fa2:	2b00      	cmp	r3, #0
20000fa4:	d10f      	bne.n	20000fc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
20000fa6:	2300      	movs	r3, #0
20000fa8:	60bb      	str	r3, [r7, #8]
20000faa:	4b7d      	ldr	r3, [pc, #500]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000fae:	4a7c      	ldr	r2, [pc, #496]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20000fb4:	6413      	str	r3, [r2, #64]	; 0x40
20000fb6:	4b7a      	ldr	r3, [pc, #488]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20000fbe:	60bb      	str	r3, [r7, #8]
20000fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
20000fc2:	2301      	movs	r3, #1
20000fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20000fc6:	4b77      	ldr	r3, [pc, #476]	; (200011a4 <HAL_RCC_OscConfig+0x474>)
20000fc8:	681b      	ldr	r3, [r3, #0]
20000fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
20000fce:	2b00      	cmp	r3, #0
20000fd0:	d118      	bne.n	20001004 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
20000fd2:	4b74      	ldr	r3, [pc, #464]	; (200011a4 <HAL_RCC_OscConfig+0x474>)
20000fd4:	681b      	ldr	r3, [r3, #0]
20000fd6:	4a73      	ldr	r2, [pc, #460]	; (200011a4 <HAL_RCC_OscConfig+0x474>)
20000fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20000fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
20000fde:	f7ff fbb7 	bl	20000750 <HAL_GetTick>
20000fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20000fe4:	e008      	b.n	20000ff8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20000fe6:	f7ff fbb3 	bl	20000750 <HAL_GetTick>
20000fea:	4602      	mov	r2, r0
20000fec:	693b      	ldr	r3, [r7, #16]
20000fee:	1ad3      	subs	r3, r2, r3
20000ff0:	2b02      	cmp	r3, #2
20000ff2:	d901      	bls.n	20000ff8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
20000ff4:	2303      	movs	r3, #3
20000ff6:	e114      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20000ff8:	4b6a      	ldr	r3, [pc, #424]	; (200011a4 <HAL_RCC_OscConfig+0x474>)
20000ffa:	681b      	ldr	r3, [r3, #0]
20000ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001000:	2b00      	cmp	r3, #0
20001002:	d0f0      	beq.n	20000fe6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20001004:	687b      	ldr	r3, [r7, #4]
20001006:	689b      	ldr	r3, [r3, #8]
20001008:	2b01      	cmp	r3, #1
2000100a:	d106      	bne.n	2000101a <HAL_RCC_OscConfig+0x2ea>
2000100c:	4b64      	ldr	r3, [pc, #400]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
2000100e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001010:	4a63      	ldr	r2, [pc, #396]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20001012:	f043 0301 	orr.w	r3, r3, #1
20001016:	6713      	str	r3, [r2, #112]	; 0x70
20001018:	e01c      	b.n	20001054 <HAL_RCC_OscConfig+0x324>
2000101a:	687b      	ldr	r3, [r7, #4]
2000101c:	689b      	ldr	r3, [r3, #8]
2000101e:	2b05      	cmp	r3, #5
20001020:	d10c      	bne.n	2000103c <HAL_RCC_OscConfig+0x30c>
20001022:	4b5f      	ldr	r3, [pc, #380]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20001024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001026:	4a5e      	ldr	r2, [pc, #376]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20001028:	f043 0304 	orr.w	r3, r3, #4
2000102c:	6713      	str	r3, [r2, #112]	; 0x70
2000102e:	4b5c      	ldr	r3, [pc, #368]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20001030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001032:	4a5b      	ldr	r2, [pc, #364]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20001034:	f043 0301 	orr.w	r3, r3, #1
20001038:	6713      	str	r3, [r2, #112]	; 0x70
2000103a:	e00b      	b.n	20001054 <HAL_RCC_OscConfig+0x324>
2000103c:	4b58      	ldr	r3, [pc, #352]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
2000103e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001040:	4a57      	ldr	r2, [pc, #348]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20001042:	f023 0301 	bic.w	r3, r3, #1
20001046:	6713      	str	r3, [r2, #112]	; 0x70
20001048:	4b55      	ldr	r3, [pc, #340]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
2000104a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000104c:	4a54      	ldr	r2, [pc, #336]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
2000104e:	f023 0304 	bic.w	r3, r3, #4
20001052:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20001054:	687b      	ldr	r3, [r7, #4]
20001056:	689b      	ldr	r3, [r3, #8]
20001058:	2b00      	cmp	r3, #0
2000105a:	d015      	beq.n	20001088 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000105c:	f7ff fb78 	bl	20000750 <HAL_GetTick>
20001060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20001062:	e00a      	b.n	2000107a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001064:	f7ff fb74 	bl	20000750 <HAL_GetTick>
20001068:	4602      	mov	r2, r0
2000106a:	693b      	ldr	r3, [r7, #16]
2000106c:	1ad3      	subs	r3, r2, r3
2000106e:	f241 3288 	movw	r2, #5000	; 0x1388
20001072:	4293      	cmp	r3, r2
20001074:	d901      	bls.n	2000107a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
20001076:	2303      	movs	r3, #3
20001078:	e0d3      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000107a:	4b49      	ldr	r3, [pc, #292]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
2000107c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000107e:	f003 0302 	and.w	r3, r3, #2
20001082:	2b00      	cmp	r3, #0
20001084:	d0ee      	beq.n	20001064 <HAL_RCC_OscConfig+0x334>
20001086:	e014      	b.n	200010b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
20001088:	f7ff fb62 	bl	20000750 <HAL_GetTick>
2000108c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000108e:	e00a      	b.n	200010a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001090:	f7ff fb5e 	bl	20000750 <HAL_GetTick>
20001094:	4602      	mov	r2, r0
20001096:	693b      	ldr	r3, [r7, #16]
20001098:	1ad3      	subs	r3, r2, r3
2000109a:	f241 3288 	movw	r2, #5000	; 0x1388
2000109e:	4293      	cmp	r3, r2
200010a0:	d901      	bls.n	200010a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
200010a2:	2303      	movs	r3, #3
200010a4:	e0bd      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
200010a6:	4b3e      	ldr	r3, [pc, #248]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
200010a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200010aa:	f003 0302 	and.w	r3, r3, #2
200010ae:	2b00      	cmp	r3, #0
200010b0:	d1ee      	bne.n	20001090 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
200010b2:	7dfb      	ldrb	r3, [r7, #23]
200010b4:	2b01      	cmp	r3, #1
200010b6:	d105      	bne.n	200010c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
200010b8:	4b39      	ldr	r3, [pc, #228]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
200010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200010bc:	4a38      	ldr	r2, [pc, #224]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
200010be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
200010c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
200010c4:	687b      	ldr	r3, [r7, #4]
200010c6:	699b      	ldr	r3, [r3, #24]
200010c8:	2b00      	cmp	r3, #0
200010ca:	f000 80a9 	beq.w	20001220 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
200010ce:	4b34      	ldr	r3, [pc, #208]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
200010d0:	689b      	ldr	r3, [r3, #8]
200010d2:	f003 030c 	and.w	r3, r3, #12
200010d6:	2b08      	cmp	r3, #8
200010d8:	d05c      	beq.n	20001194 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
200010da:	687b      	ldr	r3, [r7, #4]
200010dc:	699b      	ldr	r3, [r3, #24]
200010de:	2b02      	cmp	r3, #2
200010e0:	d141      	bne.n	20001166 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
200010e2:	4b31      	ldr	r3, [pc, #196]	; (200011a8 <HAL_RCC_OscConfig+0x478>)
200010e4:	2200      	movs	r2, #0
200010e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200010e8:	f7ff fb32 	bl	20000750 <HAL_GetTick>
200010ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200010ee:	e008      	b.n	20001102 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200010f0:	f7ff fb2e 	bl	20000750 <HAL_GetTick>
200010f4:	4602      	mov	r2, r0
200010f6:	693b      	ldr	r3, [r7, #16]
200010f8:	1ad3      	subs	r3, r2, r3
200010fa:	2b02      	cmp	r3, #2
200010fc:	d901      	bls.n	20001102 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
200010fe:	2303      	movs	r3, #3
20001100:	e08f      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20001102:	4b27      	ldr	r3, [pc, #156]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20001104:	681b      	ldr	r3, [r3, #0]
20001106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000110a:	2b00      	cmp	r3, #0
2000110c:	d1f0      	bne.n	200010f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
2000110e:	687b      	ldr	r3, [r7, #4]
20001110:	69da      	ldr	r2, [r3, #28]
20001112:	687b      	ldr	r3, [r7, #4]
20001114:	6a1b      	ldr	r3, [r3, #32]
20001116:	431a      	orrs	r2, r3
20001118:	687b      	ldr	r3, [r7, #4]
2000111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000111c:	019b      	lsls	r3, r3, #6
2000111e:	431a      	orrs	r2, r3
20001120:	687b      	ldr	r3, [r7, #4]
20001122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20001124:	085b      	lsrs	r3, r3, #1
20001126:	3b01      	subs	r3, #1
20001128:	041b      	lsls	r3, r3, #16
2000112a:	431a      	orrs	r2, r3
2000112c:	687b      	ldr	r3, [r7, #4]
2000112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001130:	061b      	lsls	r3, r3, #24
20001132:	491b      	ldr	r1, [pc, #108]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20001134:	4313      	orrs	r3, r2
20001136:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20001138:	4b1b      	ldr	r3, [pc, #108]	; (200011a8 <HAL_RCC_OscConfig+0x478>)
2000113a:	2201      	movs	r2, #1
2000113c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000113e:	f7ff fb07 	bl	20000750 <HAL_GetTick>
20001142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20001144:	e008      	b.n	20001158 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20001146:	f7ff fb03 	bl	20000750 <HAL_GetTick>
2000114a:	4602      	mov	r2, r0
2000114c:	693b      	ldr	r3, [r7, #16]
2000114e:	1ad3      	subs	r3, r2, r3
20001150:	2b02      	cmp	r3, #2
20001152:	d901      	bls.n	20001158 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
20001154:	2303      	movs	r3, #3
20001156:	e064      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20001158:	4b11      	ldr	r3, [pc, #68]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
2000115a:	681b      	ldr	r3, [r3, #0]
2000115c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20001160:	2b00      	cmp	r3, #0
20001162:	d0f0      	beq.n	20001146 <HAL_RCC_OscConfig+0x416>
20001164:	e05c      	b.n	20001220 <HAL_RCC_OscConfig+0x4f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20001166:	4b10      	ldr	r3, [pc, #64]	; (200011a8 <HAL_RCC_OscConfig+0x478>)
20001168:	2200      	movs	r2, #0
2000116a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000116c:	f7ff faf0 	bl	20000750 <HAL_GetTick>
20001170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20001172:	e008      	b.n	20001186 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20001174:	f7ff faec 	bl	20000750 <HAL_GetTick>
20001178:	4602      	mov	r2, r0
2000117a:	693b      	ldr	r3, [r7, #16]
2000117c:	1ad3      	subs	r3, r2, r3
2000117e:	2b02      	cmp	r3, #2
20001180:	d901      	bls.n	20001186 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
20001182:	2303      	movs	r3, #3
20001184:	e04d      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20001186:	4b06      	ldr	r3, [pc, #24]	; (200011a0 <HAL_RCC_OscConfig+0x470>)
20001188:	681b      	ldr	r3, [r3, #0]
2000118a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000118e:	2b00      	cmp	r3, #0
20001190:	d1f0      	bne.n	20001174 <HAL_RCC_OscConfig+0x444>
20001192:	e045      	b.n	20001220 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
20001194:	687b      	ldr	r3, [r7, #4]
20001196:	699b      	ldr	r3, [r3, #24]
20001198:	2b01      	cmp	r3, #1
2000119a:	d107      	bne.n	200011ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
2000119c:	2301      	movs	r3, #1
2000119e:	e040      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
200011a0:	40023800 	.word	0x40023800
200011a4:	40007000 	.word	0x40007000
200011a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
200011ac:	4b1f      	ldr	r3, [pc, #124]	; (2000122c <HAL_RCC_OscConfig+0x4fc>)
200011ae:	685b      	ldr	r3, [r3, #4]
200011b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
200011b2:	687b      	ldr	r3, [r7, #4]
200011b4:	699b      	ldr	r3, [r3, #24]
200011b6:	2b01      	cmp	r3, #1
200011b8:	d030      	beq.n	2000121c <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
200011ba:	68fb      	ldr	r3, [r7, #12]
200011bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
200011c0:	687b      	ldr	r3, [r7, #4]
200011c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
200011c4:	429a      	cmp	r2, r3
200011c6:	d129      	bne.n	2000121c <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
200011c8:	68fb      	ldr	r3, [r7, #12]
200011ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
200011ce:	687b      	ldr	r3, [r7, #4]
200011d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
200011d2:	429a      	cmp	r2, r3
200011d4:	d122      	bne.n	2000121c <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
200011d6:	68fa      	ldr	r2, [r7, #12]
200011d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
200011dc:	4013      	ands	r3, r2
200011de:	687a      	ldr	r2, [r7, #4]
200011e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
200011e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
200011e4:	4293      	cmp	r3, r2
200011e6:	d119      	bne.n	2000121c <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
200011e8:	68fb      	ldr	r3, [r7, #12]
200011ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
200011ee:	687b      	ldr	r3, [r7, #4]
200011f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200011f2:	085b      	lsrs	r3, r3, #1
200011f4:	3b01      	subs	r3, #1
200011f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
200011f8:	429a      	cmp	r2, r3
200011fa:	d10f      	bne.n	2000121c <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
200011fc:	68fb      	ldr	r3, [r7, #12]
200011fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
20001202:	687b      	ldr	r3, [r7, #4]
20001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001206:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20001208:	429a      	cmp	r2, r3
2000120a:	d107      	bne.n	2000121c <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
2000120c:	68fb      	ldr	r3, [r7, #12]
2000120e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
20001212:	687b      	ldr	r3, [r7, #4]
20001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001216:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20001218:	429a      	cmp	r2, r3
2000121a:	d001      	beq.n	20001220 <HAL_RCC_OscConfig+0x4f0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
2000121c:	2301      	movs	r3, #1
2000121e:	e000      	b.n	20001222 <HAL_RCC_OscConfig+0x4f2>
        }
      }
    }
  }
  return HAL_OK;
20001220:	2300      	movs	r3, #0
}
20001222:	4618      	mov	r0, r3
20001224:	3718      	adds	r7, #24
20001226:	46bd      	mov	sp, r7
20001228:	bd80      	pop	{r7, pc}
2000122a:	bf00      	nop
2000122c:	40023800 	.word	0x40023800

20001230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
20001230:	b580      	push	{r7, lr}
20001232:	b084      	sub	sp, #16
20001234:	af00      	add	r7, sp, #0
20001236:	6078      	str	r0, [r7, #4]
20001238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
2000123a:	687b      	ldr	r3, [r7, #4]
2000123c:	2b00      	cmp	r3, #0
2000123e:	d101      	bne.n	20001244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
20001240:	2301      	movs	r3, #1
20001242:	e0cc      	b.n	200013de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
20001244:	4b68      	ldr	r3, [pc, #416]	; (200013e8 <HAL_RCC_ClockConfig+0x1b8>)
20001246:	681b      	ldr	r3, [r3, #0]
20001248:	f003 030f 	and.w	r3, r3, #15
2000124c:	683a      	ldr	r2, [r7, #0]
2000124e:	429a      	cmp	r2, r3
20001250:	d90c      	bls.n	2000126c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20001252:	4b65      	ldr	r3, [pc, #404]	; (200013e8 <HAL_RCC_ClockConfig+0x1b8>)
20001254:	683a      	ldr	r2, [r7, #0]
20001256:	b2d2      	uxtb	r2, r2
20001258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000125a:	4b63      	ldr	r3, [pc, #396]	; (200013e8 <HAL_RCC_ClockConfig+0x1b8>)
2000125c:	681b      	ldr	r3, [r3, #0]
2000125e:	f003 030f 	and.w	r3, r3, #15
20001262:	683a      	ldr	r2, [r7, #0]
20001264:	429a      	cmp	r2, r3
20001266:	d001      	beq.n	2000126c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
20001268:	2301      	movs	r3, #1
2000126a:	e0b8      	b.n	200013de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2000126c:	687b      	ldr	r3, [r7, #4]
2000126e:	681b      	ldr	r3, [r3, #0]
20001270:	f003 0302 	and.w	r3, r3, #2
20001274:	2b00      	cmp	r3, #0
20001276:	d020      	beq.n	200012ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20001278:	687b      	ldr	r3, [r7, #4]
2000127a:	681b      	ldr	r3, [r3, #0]
2000127c:	f003 0304 	and.w	r3, r3, #4
20001280:	2b00      	cmp	r3, #0
20001282:	d005      	beq.n	20001290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20001284:	4b59      	ldr	r3, [pc, #356]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
20001286:	689b      	ldr	r3, [r3, #8]
20001288:	4a58      	ldr	r2, [pc, #352]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
2000128a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2000128e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20001290:	687b      	ldr	r3, [r7, #4]
20001292:	681b      	ldr	r3, [r3, #0]
20001294:	f003 0308 	and.w	r3, r3, #8
20001298:	2b00      	cmp	r3, #0
2000129a:	d005      	beq.n	200012a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
2000129c:	4b53      	ldr	r3, [pc, #332]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
2000129e:	689b      	ldr	r3, [r3, #8]
200012a0:	4a52      	ldr	r2, [pc, #328]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
200012a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
200012a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
200012a8:	4b50      	ldr	r3, [pc, #320]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
200012aa:	689b      	ldr	r3, [r3, #8]
200012ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
200012b0:	687b      	ldr	r3, [r7, #4]
200012b2:	689b      	ldr	r3, [r3, #8]
200012b4:	494d      	ldr	r1, [pc, #308]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
200012b6:	4313      	orrs	r3, r2
200012b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
200012ba:	687b      	ldr	r3, [r7, #4]
200012bc:	681b      	ldr	r3, [r3, #0]
200012be:	f003 0301 	and.w	r3, r3, #1
200012c2:	2b00      	cmp	r3, #0
200012c4:	d044      	beq.n	20001350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
200012c6:	687b      	ldr	r3, [r7, #4]
200012c8:	685b      	ldr	r3, [r3, #4]
200012ca:	2b01      	cmp	r3, #1
200012cc:	d107      	bne.n	200012de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
200012ce:	4b47      	ldr	r3, [pc, #284]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
200012d0:	681b      	ldr	r3, [r3, #0]
200012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200012d6:	2b00      	cmp	r3, #0
200012d8:	d119      	bne.n	2000130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
200012da:	2301      	movs	r3, #1
200012dc:	e07f      	b.n	200013de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
200012de:	687b      	ldr	r3, [r7, #4]
200012e0:	685b      	ldr	r3, [r3, #4]
200012e2:	2b02      	cmp	r3, #2
200012e4:	d003      	beq.n	200012ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
200012e6:	687b      	ldr	r3, [r7, #4]
200012e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
200012ea:	2b03      	cmp	r3, #3
200012ec:	d107      	bne.n	200012fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200012ee:	4b3f      	ldr	r3, [pc, #252]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
200012f0:	681b      	ldr	r3, [r3, #0]
200012f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200012f6:	2b00      	cmp	r3, #0
200012f8:	d109      	bne.n	2000130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
200012fa:	2301      	movs	r3, #1
200012fc:	e06f      	b.n	200013de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200012fe:	4b3b      	ldr	r3, [pc, #236]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
20001300:	681b      	ldr	r3, [r3, #0]
20001302:	f003 0302 	and.w	r3, r3, #2
20001306:	2b00      	cmp	r3, #0
20001308:	d101      	bne.n	2000130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000130a:	2301      	movs	r3, #1
2000130c:	e067      	b.n	200013de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000130e:	4b37      	ldr	r3, [pc, #220]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
20001310:	689b      	ldr	r3, [r3, #8]
20001312:	f023 0203 	bic.w	r2, r3, #3
20001316:	687b      	ldr	r3, [r7, #4]
20001318:	685b      	ldr	r3, [r3, #4]
2000131a:	4934      	ldr	r1, [pc, #208]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
2000131c:	4313      	orrs	r3, r2
2000131e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
20001320:	f7ff fa16 	bl	20000750 <HAL_GetTick>
20001324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20001326:	e00a      	b.n	2000133e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20001328:	f7ff fa12 	bl	20000750 <HAL_GetTick>
2000132c:	4602      	mov	r2, r0
2000132e:	68fb      	ldr	r3, [r7, #12]
20001330:	1ad3      	subs	r3, r2, r3
20001332:	f241 3288 	movw	r2, #5000	; 0x1388
20001336:	4293      	cmp	r3, r2
20001338:	d901      	bls.n	2000133e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
2000133a:	2303      	movs	r3, #3
2000133c:	e04f      	b.n	200013de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000133e:	4b2b      	ldr	r3, [pc, #172]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
20001340:	689b      	ldr	r3, [r3, #8]
20001342:	f003 020c 	and.w	r2, r3, #12
20001346:	687b      	ldr	r3, [r7, #4]
20001348:	685b      	ldr	r3, [r3, #4]
2000134a:	009b      	lsls	r3, r3, #2
2000134c:	429a      	cmp	r2, r3
2000134e:	d1eb      	bne.n	20001328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
20001350:	4b25      	ldr	r3, [pc, #148]	; (200013e8 <HAL_RCC_ClockConfig+0x1b8>)
20001352:	681b      	ldr	r3, [r3, #0]
20001354:	f003 030f 	and.w	r3, r3, #15
20001358:	683a      	ldr	r2, [r7, #0]
2000135a:	429a      	cmp	r2, r3
2000135c:	d20c      	bcs.n	20001378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000135e:	4b22      	ldr	r3, [pc, #136]	; (200013e8 <HAL_RCC_ClockConfig+0x1b8>)
20001360:	683a      	ldr	r2, [r7, #0]
20001362:	b2d2      	uxtb	r2, r2
20001364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20001366:	4b20      	ldr	r3, [pc, #128]	; (200013e8 <HAL_RCC_ClockConfig+0x1b8>)
20001368:	681b      	ldr	r3, [r3, #0]
2000136a:	f003 030f 	and.w	r3, r3, #15
2000136e:	683a      	ldr	r2, [r7, #0]
20001370:	429a      	cmp	r2, r3
20001372:	d001      	beq.n	20001378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
20001374:	2301      	movs	r3, #1
20001376:	e032      	b.n	200013de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20001378:	687b      	ldr	r3, [r7, #4]
2000137a:	681b      	ldr	r3, [r3, #0]
2000137c:	f003 0304 	and.w	r3, r3, #4
20001380:	2b00      	cmp	r3, #0
20001382:	d008      	beq.n	20001396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20001384:	4b19      	ldr	r3, [pc, #100]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
20001386:	689b      	ldr	r3, [r3, #8]
20001388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
2000138c:	687b      	ldr	r3, [r7, #4]
2000138e:	68db      	ldr	r3, [r3, #12]
20001390:	4916      	ldr	r1, [pc, #88]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
20001392:	4313      	orrs	r3, r2
20001394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20001396:	687b      	ldr	r3, [r7, #4]
20001398:	681b      	ldr	r3, [r3, #0]
2000139a:	f003 0308 	and.w	r3, r3, #8
2000139e:	2b00      	cmp	r3, #0
200013a0:	d009      	beq.n	200013b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
200013a2:	4b12      	ldr	r3, [pc, #72]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
200013a4:	689b      	ldr	r3, [r3, #8]
200013a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
200013aa:	687b      	ldr	r3, [r7, #4]
200013ac:	691b      	ldr	r3, [r3, #16]
200013ae:	00db      	lsls	r3, r3, #3
200013b0:	490e      	ldr	r1, [pc, #56]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
200013b2:	4313      	orrs	r3, r2
200013b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
200013b6:	f000 f821 	bl	200013fc <HAL_RCC_GetSysClockFreq>
200013ba:	4602      	mov	r2, r0
200013bc:	4b0b      	ldr	r3, [pc, #44]	; (200013ec <HAL_RCC_ClockConfig+0x1bc>)
200013be:	689b      	ldr	r3, [r3, #8]
200013c0:	091b      	lsrs	r3, r3, #4
200013c2:	f003 030f 	and.w	r3, r3, #15
200013c6:	490a      	ldr	r1, [pc, #40]	; (200013f0 <HAL_RCC_ClockConfig+0x1c0>)
200013c8:	5ccb      	ldrb	r3, [r1, r3]
200013ca:	fa22 f303 	lsr.w	r3, r2, r3
200013ce:	4a09      	ldr	r2, [pc, #36]	; (200013f4 <HAL_RCC_ClockConfig+0x1c4>)
200013d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
200013d2:	4b09      	ldr	r3, [pc, #36]	; (200013f8 <HAL_RCC_ClockConfig+0x1c8>)
200013d4:	681b      	ldr	r3, [r3, #0]
200013d6:	4618      	mov	r0, r3
200013d8:	f7ff f976 	bl	200006c8 <HAL_InitTick>

  return HAL_OK;
200013dc:	2300      	movs	r3, #0
}
200013de:	4618      	mov	r0, r3
200013e0:	3710      	adds	r7, #16
200013e2:	46bd      	mov	sp, r7
200013e4:	bd80      	pop	{r7, pc}
200013e6:	bf00      	nop
200013e8:	40023c00 	.word	0x40023c00
200013ec:	40023800 	.word	0x40023800
200013f0:	200019c8 	.word	0x200019c8
200013f4:	200019f4 	.word	0x200019f4
200013f8:	200019f8 	.word	0x200019f8

200013fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
200013fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20001400:	b094      	sub	sp, #80	; 0x50
20001402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
20001404:	2300      	movs	r3, #0
20001406:	647b      	str	r3, [r7, #68]	; 0x44
20001408:	2300      	movs	r3, #0
2000140a:	64fb      	str	r3, [r7, #76]	; 0x4c
2000140c:	2300      	movs	r3, #0
2000140e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
20001410:	2300      	movs	r3, #0
20001412:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20001414:	4b79      	ldr	r3, [pc, #484]	; (200015fc <HAL_RCC_GetSysClockFreq+0x200>)
20001416:	689b      	ldr	r3, [r3, #8]
20001418:	f003 030c 	and.w	r3, r3, #12
2000141c:	2b08      	cmp	r3, #8
2000141e:	d00d      	beq.n	2000143c <HAL_RCC_GetSysClockFreq+0x40>
20001420:	2b08      	cmp	r3, #8
20001422:	f200 80e1 	bhi.w	200015e8 <HAL_RCC_GetSysClockFreq+0x1ec>
20001426:	2b00      	cmp	r3, #0
20001428:	d002      	beq.n	20001430 <HAL_RCC_GetSysClockFreq+0x34>
2000142a:	2b04      	cmp	r3, #4
2000142c:	d003      	beq.n	20001436 <HAL_RCC_GetSysClockFreq+0x3a>
2000142e:	e0db      	b.n	200015e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20001430:	4b73      	ldr	r3, [pc, #460]	; (20001600 <HAL_RCC_GetSysClockFreq+0x204>)
20001432:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
20001434:	e0db      	b.n	200015ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20001436:	4b73      	ldr	r3, [pc, #460]	; (20001604 <HAL_RCC_GetSysClockFreq+0x208>)
20001438:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
2000143a:	e0d8      	b.n	200015ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000143c:	4b6f      	ldr	r3, [pc, #444]	; (200015fc <HAL_RCC_GetSysClockFreq+0x200>)
2000143e:	685b      	ldr	r3, [r3, #4]
20001440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20001444:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20001446:	4b6d      	ldr	r3, [pc, #436]	; (200015fc <HAL_RCC_GetSysClockFreq+0x200>)
20001448:	685b      	ldr	r3, [r3, #4]
2000144a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000144e:	2b00      	cmp	r3, #0
20001450:	d063      	beq.n	2000151a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20001452:	4b6a      	ldr	r3, [pc, #424]	; (200015fc <HAL_RCC_GetSysClockFreq+0x200>)
20001454:	685b      	ldr	r3, [r3, #4]
20001456:	099b      	lsrs	r3, r3, #6
20001458:	2200      	movs	r2, #0
2000145a:	63bb      	str	r3, [r7, #56]	; 0x38
2000145c:	63fa      	str	r2, [r7, #60]	; 0x3c
2000145e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001460:	f3c3 0308 	ubfx	r3, r3, #0, #9
20001464:	633b      	str	r3, [r7, #48]	; 0x30
20001466:	2300      	movs	r3, #0
20001468:	637b      	str	r3, [r7, #52]	; 0x34
2000146a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
2000146e:	4622      	mov	r2, r4
20001470:	462b      	mov	r3, r5
20001472:	f04f 0000 	mov.w	r0, #0
20001476:	f04f 0100 	mov.w	r1, #0
2000147a:	0159      	lsls	r1, r3, #5
2000147c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20001480:	0150      	lsls	r0, r2, #5
20001482:	4602      	mov	r2, r0
20001484:	460b      	mov	r3, r1
20001486:	4621      	mov	r1, r4
20001488:	1a51      	subs	r1, r2, r1
2000148a:	6139      	str	r1, [r7, #16]
2000148c:	4629      	mov	r1, r5
2000148e:	eb63 0301 	sbc.w	r3, r3, r1
20001492:	617b      	str	r3, [r7, #20]
20001494:	f04f 0200 	mov.w	r2, #0
20001498:	f04f 0300 	mov.w	r3, #0
2000149c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
200014a0:	4659      	mov	r1, fp
200014a2:	018b      	lsls	r3, r1, #6
200014a4:	4651      	mov	r1, sl
200014a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
200014aa:	4651      	mov	r1, sl
200014ac:	018a      	lsls	r2, r1, #6
200014ae:	4651      	mov	r1, sl
200014b0:	ebb2 0801 	subs.w	r8, r2, r1
200014b4:	4659      	mov	r1, fp
200014b6:	eb63 0901 	sbc.w	r9, r3, r1
200014ba:	f04f 0200 	mov.w	r2, #0
200014be:	f04f 0300 	mov.w	r3, #0
200014c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
200014c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
200014ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
200014ce:	4690      	mov	r8, r2
200014d0:	4699      	mov	r9, r3
200014d2:	4623      	mov	r3, r4
200014d4:	eb18 0303 	adds.w	r3, r8, r3
200014d8:	60bb      	str	r3, [r7, #8]
200014da:	462b      	mov	r3, r5
200014dc:	eb49 0303 	adc.w	r3, r9, r3
200014e0:	60fb      	str	r3, [r7, #12]
200014e2:	f04f 0200 	mov.w	r2, #0
200014e6:	f04f 0300 	mov.w	r3, #0
200014ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
200014ee:	4629      	mov	r1, r5
200014f0:	024b      	lsls	r3, r1, #9
200014f2:	4621      	mov	r1, r4
200014f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
200014f8:	4621      	mov	r1, r4
200014fa:	024a      	lsls	r2, r1, #9
200014fc:	4610      	mov	r0, r2
200014fe:	4619      	mov	r1, r3
20001500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20001502:	2200      	movs	r2, #0
20001504:	62bb      	str	r3, [r7, #40]	; 0x28
20001506:	62fa      	str	r2, [r7, #44]	; 0x2c
20001508:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
2000150c:	f7fe fe7a 	bl	20000204 <__aeabi_uldivmod>
20001510:	4602      	mov	r2, r0
20001512:	460b      	mov	r3, r1
20001514:	4613      	mov	r3, r2
20001516:	64fb      	str	r3, [r7, #76]	; 0x4c
20001518:	e058      	b.n	200015cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000151a:	4b38      	ldr	r3, [pc, #224]	; (200015fc <HAL_RCC_GetSysClockFreq+0x200>)
2000151c:	685b      	ldr	r3, [r3, #4]
2000151e:	099b      	lsrs	r3, r3, #6
20001520:	2200      	movs	r2, #0
20001522:	4618      	mov	r0, r3
20001524:	4611      	mov	r1, r2
20001526:	f3c0 0308 	ubfx	r3, r0, #0, #9
2000152a:	623b      	str	r3, [r7, #32]
2000152c:	2300      	movs	r3, #0
2000152e:	627b      	str	r3, [r7, #36]	; 0x24
20001530:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
20001534:	4642      	mov	r2, r8
20001536:	464b      	mov	r3, r9
20001538:	f04f 0000 	mov.w	r0, #0
2000153c:	f04f 0100 	mov.w	r1, #0
20001540:	0159      	lsls	r1, r3, #5
20001542:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20001546:	0150      	lsls	r0, r2, #5
20001548:	4602      	mov	r2, r0
2000154a:	460b      	mov	r3, r1
2000154c:	4641      	mov	r1, r8
2000154e:	ebb2 0a01 	subs.w	sl, r2, r1
20001552:	4649      	mov	r1, r9
20001554:	eb63 0b01 	sbc.w	fp, r3, r1
20001558:	f04f 0200 	mov.w	r2, #0
2000155c:	f04f 0300 	mov.w	r3, #0
20001560:	ea4f 138b 	mov.w	r3, fp, lsl #6
20001564:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
20001568:	ea4f 128a 	mov.w	r2, sl, lsl #6
2000156c:	ebb2 040a 	subs.w	r4, r2, sl
20001570:	eb63 050b 	sbc.w	r5, r3, fp
20001574:	f04f 0200 	mov.w	r2, #0
20001578:	f04f 0300 	mov.w	r3, #0
2000157c:	00eb      	lsls	r3, r5, #3
2000157e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20001582:	00e2      	lsls	r2, r4, #3
20001584:	4614      	mov	r4, r2
20001586:	461d      	mov	r5, r3
20001588:	4643      	mov	r3, r8
2000158a:	18e3      	adds	r3, r4, r3
2000158c:	603b      	str	r3, [r7, #0]
2000158e:	464b      	mov	r3, r9
20001590:	eb45 0303 	adc.w	r3, r5, r3
20001594:	607b      	str	r3, [r7, #4]
20001596:	f04f 0200 	mov.w	r2, #0
2000159a:	f04f 0300 	mov.w	r3, #0
2000159e:	e9d7 4500 	ldrd	r4, r5, [r7]
200015a2:	4629      	mov	r1, r5
200015a4:	028b      	lsls	r3, r1, #10
200015a6:	4621      	mov	r1, r4
200015a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
200015ac:	4621      	mov	r1, r4
200015ae:	028a      	lsls	r2, r1, #10
200015b0:	4610      	mov	r0, r2
200015b2:	4619      	mov	r1, r3
200015b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
200015b6:	2200      	movs	r2, #0
200015b8:	61bb      	str	r3, [r7, #24]
200015ba:	61fa      	str	r2, [r7, #28]
200015bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
200015c0:	f7fe fe20 	bl	20000204 <__aeabi_uldivmod>
200015c4:	4602      	mov	r2, r0
200015c6:	460b      	mov	r3, r1
200015c8:	4613      	mov	r3, r2
200015ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
200015cc:	4b0b      	ldr	r3, [pc, #44]	; (200015fc <HAL_RCC_GetSysClockFreq+0x200>)
200015ce:	685b      	ldr	r3, [r3, #4]
200015d0:	0c1b      	lsrs	r3, r3, #16
200015d2:	f003 0303 	and.w	r3, r3, #3
200015d6:	3301      	adds	r3, #1
200015d8:	005b      	lsls	r3, r3, #1
200015da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
200015dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
200015de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
200015e0:	fbb2 f3f3 	udiv	r3, r2, r3
200015e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
200015e6:	e002      	b.n	200015ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
200015e8:	4b05      	ldr	r3, [pc, #20]	; (20001600 <HAL_RCC_GetSysClockFreq+0x204>)
200015ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
200015ec:	bf00      	nop
    }
  }
  return sysclockfreq;
200015ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
200015f0:	4618      	mov	r0, r3
200015f2:	3750      	adds	r7, #80	; 0x50
200015f4:	46bd      	mov	sp, r7
200015f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
200015fa:	bf00      	nop
200015fc:	40023800 	.word	0x40023800
20001600:	00f42400 	.word	0x00f42400
20001604:	007a1200 	.word	0x007a1200

20001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
20001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 20001640 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
2000160c:	480d      	ldr	r0, [pc, #52]	; (20001644 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
2000160e:	490e      	ldr	r1, [pc, #56]	; (20001648 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
20001610:	4a0e      	ldr	r2, [pc, #56]	; (2000164c <LoopFillZerobss+0x1e>)
  movs r3, #0
20001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
20001614:	e002      	b.n	2000161c <LoopCopyDataInit>

20001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
2000161a:	3304      	adds	r3, #4

2000161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
2000161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
2000161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
20001620:	d3f9      	bcc.n	20001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20001622:	4a0b      	ldr	r2, [pc, #44]	; (20001650 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
20001624:	4c0b      	ldr	r4, [pc, #44]	; (20001654 <LoopFillZerobss+0x26>)
  movs r3, #0
20001626:	2300      	movs	r3, #0
  b LoopFillZerobss
20001628:	e001      	b.n	2000162e <LoopFillZerobss>

2000162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
2000162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
2000162c:	3204      	adds	r2, #4

2000162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
2000162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
20001630:	d3fb      	bcc.n	2000162a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
20001632:	f7fe ffe9 	bl	20000608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20001636:	f000 f993 	bl	20001960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2000163a:	f000 f80f 	bl	2000165c <main>
  bx  lr    
2000163e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20001640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
20001644:	200019e8 	.word	0x200019e8
  ldr r1, =_edata
20001648:	20001a00 	.word	0x20001a00
  ldr r2, =_sidata
2000164c:	200019e8 	.word	0x200019e8
  ldr r2, =_sbss
20001650:	20001a00 	.word	0x20001a00
  ldr r4, =_ebss
20001654:	20001a3c 	.word	0x20001a3c

20001658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20001658:	e7fe      	b.n	20001658 <ADC_IRQHandler>
	...

2000165c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{  
2000165c:	b580      	push	{r7, lr}
2000165e:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
20001660:	f7ff f808 	bl	20000674 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
20001664:	f000 f8de 	bl	20001824 <SystemClock_Config>

  /* Initialize LED1, LED2 and LED3 */
  BSP_LED_Init(LED1);
20001668:	2000      	movs	r0, #0
2000166a:	f7fe ff49 	bl	20000500 <BSP_LED_Init>
  BSP_LED_Init(LED2);
2000166e:	2001      	movs	r0, #1
20001670:	f7fe ff46 	bl	20000500 <BSP_LED_Init>
  BSP_LED_Init(LED3);
20001674:	2002      	movs	r0, #2
20001676:	f7fe ff43 	bl	20000500 <BSP_LED_Init>

  /* Erase the user Flash area
    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

  /* Get the 1st sector to erase */
  FirstSector = GetSector(FLASH_USER_START_ADDR);
2000167a:	481b      	ldr	r0, [pc, #108]	; (200016e8 <main+0x8c>)
2000167c:	f000 f840 	bl	20001700 <GetSector>
20001680:	4603      	mov	r3, r0
20001682:	4a1a      	ldr	r2, [pc, #104]	; (200016ec <main+0x90>)
20001684:	6013      	str	r3, [r2, #0]
  /* Get the number of sector to erase from 1st sector*/
  NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
20001686:	481a      	ldr	r0, [pc, #104]	; (200016f0 <main+0x94>)
20001688:	f000 f8a4 	bl	200017d4 <GetSectorSize>
2000168c:	4602      	mov	r2, r0
2000168e:	4b19      	ldr	r3, [pc, #100]	; (200016f4 <main+0x98>)
20001690:	4413      	add	r3, r2
20001692:	4618      	mov	r0, r3
20001694:	f000 f834 	bl	20001700 <GetSector>
20001698:	4602      	mov	r2, r0
2000169a:	4b14      	ldr	r3, [pc, #80]	; (200016ec <main+0x90>)
2000169c:	681b      	ldr	r3, [r3, #0]
2000169e:	1ad3      	subs	r3, r2, r3
200016a0:	3301      	adds	r3, #1
200016a2:	4a15      	ldr	r2, [pc, #84]	; (200016f8 <main+0x9c>)
200016a4:	6013      	str	r3, [r2, #0]
  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
200016a6:	4b15      	ldr	r3, [pc, #84]	; (200016fc <main+0xa0>)
200016a8:	2200      	movs	r2, #0
200016aa:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
200016ac:	4b13      	ldr	r3, [pc, #76]	; (200016fc <main+0xa0>)
200016ae:	2202      	movs	r2, #2
200016b0:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector        = FirstSector;
200016b2:	4b0e      	ldr	r3, [pc, #56]	; (200016ec <main+0x90>)
200016b4:	681b      	ldr	r3, [r3, #0]
200016b6:	4a11      	ldr	r2, [pc, #68]	; (200016fc <main+0xa0>)
200016b8:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors     = NbOfSectors;
200016ba:	4b0f      	ldr	r3, [pc, #60]	; (200016f8 <main+0x9c>)
200016bc:	681b      	ldr	r3, [r3, #0]
200016be:	4a0f      	ldr	r2, [pc, #60]	; (200016fc <main+0xa0>)
200016c0:	60d3      	str	r3, [r2, #12]

  /* Infinite loop */
  while (1)
  {
	  //HAL_Delay(500);
	  BSP_LED_On(LED1);
200016c2:	2000      	movs	r0, #0
200016c4:	f7fe ff6c 	bl	200005a0 <BSP_LED_On>
	  BSP_LED_On(LED2);
200016c8:	2001      	movs	r0, #1
200016ca:	f7fe ff69 	bl	200005a0 <BSP_LED_On>
	  BSP_LED_On(LED3);
200016ce:	2002      	movs	r0, #2
200016d0:	f7fe ff66 	bl	200005a0 <BSP_LED_On>
	  //HAL_Delay(500);
	  BSP_LED_Off(LED1);
200016d4:	2000      	movs	r0, #0
200016d6:	f7fe ff7d 	bl	200005d4 <BSP_LED_Off>
	  BSP_LED_Off(LED2);
200016da:	2001      	movs	r0, #1
200016dc:	f7fe ff7a 	bl	200005d4 <BSP_LED_Off>
	  BSP_LED_Off(LED3);
200016e0:	2002      	movs	r0, #2
200016e2:	f7fe ff77 	bl	200005d4 <BSP_LED_Off>
	  BSP_LED_On(LED1);
200016e6:	e7ec      	b.n	200016c2 <main+0x66>
200016e8:	08008000 	.word	0x08008000
200016ec:	20001a20 	.word	0x20001a20
200016f0:	08060000 	.word	0x08060000
200016f4:	0805ffff 	.word	0x0805ffff
200016f8:	20001a24 	.word	0x20001a24
200016fc:	20001a28 	.word	0x20001a28

20001700 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
20001700:	b480      	push	{r7}
20001702:	b085      	sub	sp, #20
20001704:	af00      	add	r7, sp, #0
20001706:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
20001708:	2300      	movs	r3, #0
2000170a:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
2000170c:	687b      	ldr	r3, [r7, #4]
2000170e:	4a2a      	ldr	r2, [pc, #168]	; (200017b8 <GetSector+0xb8>)
20001710:	4293      	cmp	r3, r2
20001712:	d206      	bcs.n	20001722 <GetSector+0x22>
20001714:	687b      	ldr	r3, [r7, #4]
20001716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2000171a:	d302      	bcc.n	20001722 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
2000171c:	2300      	movs	r3, #0
2000171e:	60fb      	str	r3, [r7, #12]
20001720:	e043      	b.n	200017aa <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
20001722:	687b      	ldr	r3, [r7, #4]
20001724:	4a25      	ldr	r2, [pc, #148]	; (200017bc <GetSector+0xbc>)
20001726:	4293      	cmp	r3, r2
20001728:	d206      	bcs.n	20001738 <GetSector+0x38>
2000172a:	687b      	ldr	r3, [r7, #4]
2000172c:	4a22      	ldr	r2, [pc, #136]	; (200017b8 <GetSector+0xb8>)
2000172e:	4293      	cmp	r3, r2
20001730:	d302      	bcc.n	20001738 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
20001732:	2301      	movs	r3, #1
20001734:	60fb      	str	r3, [r7, #12]
20001736:	e038      	b.n	200017aa <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
20001738:	687b      	ldr	r3, [r7, #4]
2000173a:	4a21      	ldr	r2, [pc, #132]	; (200017c0 <GetSector+0xc0>)
2000173c:	4293      	cmp	r3, r2
2000173e:	d206      	bcs.n	2000174e <GetSector+0x4e>
20001740:	687b      	ldr	r3, [r7, #4]
20001742:	4a1e      	ldr	r2, [pc, #120]	; (200017bc <GetSector+0xbc>)
20001744:	4293      	cmp	r3, r2
20001746:	d302      	bcc.n	2000174e <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
20001748:	2302      	movs	r3, #2
2000174a:	60fb      	str	r3, [r7, #12]
2000174c:	e02d      	b.n	200017aa <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
2000174e:	687b      	ldr	r3, [r7, #4]
20001750:	4a1c      	ldr	r2, [pc, #112]	; (200017c4 <GetSector+0xc4>)
20001752:	4293      	cmp	r3, r2
20001754:	d806      	bhi.n	20001764 <GetSector+0x64>
20001756:	687b      	ldr	r3, [r7, #4]
20001758:	4a19      	ldr	r2, [pc, #100]	; (200017c0 <GetSector+0xc0>)
2000175a:	4293      	cmp	r3, r2
2000175c:	d302      	bcc.n	20001764 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
2000175e:	2303      	movs	r3, #3
20001760:	60fb      	str	r3, [r7, #12]
20001762:	e022      	b.n	200017aa <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
20001764:	687b      	ldr	r3, [r7, #4]
20001766:	4a18      	ldr	r2, [pc, #96]	; (200017c8 <GetSector+0xc8>)
20001768:	4293      	cmp	r3, r2
2000176a:	d806      	bhi.n	2000177a <GetSector+0x7a>
2000176c:	687b      	ldr	r3, [r7, #4]
2000176e:	4a15      	ldr	r2, [pc, #84]	; (200017c4 <GetSector+0xc4>)
20001770:	4293      	cmp	r3, r2
20001772:	d902      	bls.n	2000177a <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
20001774:	2304      	movs	r3, #4
20001776:	60fb      	str	r3, [r7, #12]
20001778:	e017      	b.n	200017aa <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
2000177a:	687b      	ldr	r3, [r7, #4]
2000177c:	4a13      	ldr	r2, [pc, #76]	; (200017cc <GetSector+0xcc>)
2000177e:	4293      	cmp	r3, r2
20001780:	d806      	bhi.n	20001790 <GetSector+0x90>
20001782:	687b      	ldr	r3, [r7, #4]
20001784:	4a10      	ldr	r2, [pc, #64]	; (200017c8 <GetSector+0xc8>)
20001786:	4293      	cmp	r3, r2
20001788:	d902      	bls.n	20001790 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
2000178a:	2305      	movs	r3, #5
2000178c:	60fb      	str	r3, [r7, #12]
2000178e:	e00c      	b.n	200017aa <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
20001790:	687b      	ldr	r3, [r7, #4]
20001792:	4a0f      	ldr	r2, [pc, #60]	; (200017d0 <GetSector+0xd0>)
20001794:	4293      	cmp	r3, r2
20001796:	d806      	bhi.n	200017a6 <GetSector+0xa6>
20001798:	687b      	ldr	r3, [r7, #4]
2000179a:	4a0c      	ldr	r2, [pc, #48]	; (200017cc <GetSector+0xcc>)
2000179c:	4293      	cmp	r3, r2
2000179e:	d902      	bls.n	200017a6 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
200017a0:	2306      	movs	r3, #6
200017a2:	60fb      	str	r3, [r7, #12]
200017a4:	e001      	b.n	200017aa <GetSector+0xaa>
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7) */
  {
    sector = FLASH_SECTOR_7;
200017a6:	2307      	movs	r3, #7
200017a8:	60fb      	str	r3, [r7, #12]
  }
  return sector;
200017aa:	68fb      	ldr	r3, [r7, #12]
}
200017ac:	4618      	mov	r0, r3
200017ae:	3714      	adds	r7, #20
200017b0:	46bd      	mov	sp, r7
200017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
200017b6:	4770      	bx	lr
200017b8:	08004000 	.word	0x08004000
200017bc:	08008000 	.word	0x08008000
200017c0:	0800c000 	.word	0x0800c000
200017c4:	0800ffff 	.word	0x0800ffff
200017c8:	0801ffff 	.word	0x0801ffff
200017cc:	0803ffff 	.word	0x0803ffff
200017d0:	0805ffff 	.word	0x0805ffff

200017d4 <GetSectorSize>:
  * @brief  Gets sector Size
  * @param  None
  * @retval The size of a given sector
  */
static uint32_t GetSectorSize(uint32_t Sector)
{
200017d4:	b480      	push	{r7}
200017d6:	b085      	sub	sp, #20
200017d8:	af00      	add	r7, sp, #0
200017da:	6078      	str	r0, [r7, #4]
  uint32_t sectorsize = 0x00;
200017dc:	2300      	movs	r3, #0
200017de:	60fb      	str	r3, [r7, #12]
  if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) || (Sector == FLASH_SECTOR_3))
200017e0:	687b      	ldr	r3, [r7, #4]
200017e2:	2b00      	cmp	r3, #0
200017e4:	d008      	beq.n	200017f8 <GetSectorSize+0x24>
200017e6:	687b      	ldr	r3, [r7, #4]
200017e8:	2b01      	cmp	r3, #1
200017ea:	d005      	beq.n	200017f8 <GetSectorSize+0x24>
200017ec:	687b      	ldr	r3, [r7, #4]
200017ee:	2b02      	cmp	r3, #2
200017f0:	d002      	beq.n	200017f8 <GetSectorSize+0x24>
200017f2:	687b      	ldr	r3, [r7, #4]
200017f4:	2b03      	cmp	r3, #3
200017f6:	d103      	bne.n	20001800 <GetSectorSize+0x2c>
  {
    sectorsize = 16 * 1024;
200017f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
200017fc:	60fb      	str	r3, [r7, #12]
200017fe:	e009      	b.n	20001814 <GetSectorSize+0x40>
  }
  else if(Sector == FLASH_SECTOR_4)
20001800:	687b      	ldr	r3, [r7, #4]
20001802:	2b04      	cmp	r3, #4
20001804:	d103      	bne.n	2000180e <GetSectorSize+0x3a>
  {
    sectorsize = 64 * 1024;
20001806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000180a:	60fb      	str	r3, [r7, #12]
2000180c:	e002      	b.n	20001814 <GetSectorSize+0x40>
  }
  else
  {
    sectorsize = 128 * 1024;
2000180e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
20001812:	60fb      	str	r3, [r7, #12]
  }  
  return sectorsize;
20001814:	68fb      	ldr	r3, [r7, #12]
}
20001816:	4618      	mov	r0, r3
20001818:	3714      	adds	r7, #20
2000181a:	46bd      	mov	sp, r7
2000181c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001820:	4770      	bx	lr
	...

20001824 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
20001824:	b580      	push	{r7, lr}
20001826:	b096      	sub	sp, #88	; 0x58
20001828:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
2000182a:	2300      	movs	r3, #0
2000182c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
20001830:	2300      	movs	r3, #0
20001832:	60bb      	str	r3, [r7, #8]
20001834:	4b31      	ldr	r3, [pc, #196]	; (200018fc <SystemClock_Config+0xd8>)
20001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001838:	4a30      	ldr	r2, [pc, #192]	; (200018fc <SystemClock_Config+0xd8>)
2000183a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000183e:	6413      	str	r3, [r2, #64]	; 0x40
20001840:	4b2e      	ldr	r3, [pc, #184]	; (200018fc <SystemClock_Config+0xd8>)
20001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20001848:	60bb      	str	r3, [r7, #8]
2000184a:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2000184c:	2300      	movs	r3, #0
2000184e:	607b      	str	r3, [r7, #4]
20001850:	4b2b      	ldr	r3, [pc, #172]	; (20001900 <SystemClock_Config+0xdc>)
20001852:	681b      	ldr	r3, [r3, #0]
20001854:	4a2a      	ldr	r2, [pc, #168]	; (20001900 <SystemClock_Config+0xdc>)
20001856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
2000185a:	6013      	str	r3, [r2, #0]
2000185c:	4b28      	ldr	r3, [pc, #160]	; (20001900 <SystemClock_Config+0xdc>)
2000185e:	681b      	ldr	r3, [r3, #0]
20001860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
20001864:	607b      	str	r3, [r7, #4]
20001866:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
20001868:	2301      	movs	r3, #1
2000186a:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
2000186c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
20001870:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20001872:	2302      	movs	r3, #2
20001874:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
20001876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000187a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
2000187c:	2308      	movs	r3, #8
2000187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
20001880:	f44f 73b4 	mov.w	r3, #360	; 0x168
20001884:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
20001886:	2302      	movs	r3, #2
20001888:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
2000188a:	2307      	movs	r3, #7
2000188c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
2000188e:	2302      	movs	r3, #2
20001890:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
20001892:	f107 030c 	add.w	r3, r7, #12
20001896:	4618      	mov	r0, r3
20001898:	f7ff fa4a 	bl	20000d30 <HAL_RCC_OscConfig>
2000189c:	4603      	mov	r3, r0
2000189e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
200018a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
200018a6:	2b00      	cmp	r3, #0
200018a8:	d000      	beq.n	200018ac <SystemClock_Config+0x88>
  {
    while(1) { ; }
200018aa:	e7fe      	b.n	200018aa <SystemClock_Config+0x86>
  }
  
  /* Activate the OverDrive to reach the 180 MHz Frequency */  
  ret = HAL_PWREx_EnableOverDrive();
200018ac:	f7ff f9f0 	bl	20000c90 <HAL_PWREx_EnableOverDrive>
200018b0:	4603      	mov	r3, r0
200018b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
200018b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
200018ba:	2b00      	cmp	r3, #0
200018bc:	d000      	beq.n	200018c0 <SystemClock_Config+0x9c>
  {
    while(1) { ; }
200018be:	e7fe      	b.n	200018be <SystemClock_Config+0x9a>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
200018c0:	230f      	movs	r3, #15
200018c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
200018c4:	2302      	movs	r3, #2
200018c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
200018c8:	2300      	movs	r3, #0
200018ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
200018cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
200018d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
200018d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
200018d6:	653b      	str	r3, [r7, #80]	; 0x50
  
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
200018d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
200018dc:	2105      	movs	r1, #5
200018de:	4618      	mov	r0, r3
200018e0:	f7ff fca6 	bl	20001230 <HAL_RCC_ClockConfig>
200018e4:	4603      	mov	r3, r0
200018e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
200018ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
200018ee:	2b00      	cmp	r3, #0
200018f0:	d000      	beq.n	200018f4 <SystemClock_Config+0xd0>
  {
    while(1) { ; }
200018f2:	e7fe      	b.n	200018f2 <SystemClock_Config+0xce>
  }
}
200018f4:	bf00      	nop
200018f6:	3758      	adds	r7, #88	; 0x58
200018f8:	46bd      	mov	sp, r7
200018fa:	bd80      	pop	{r7, pc}
200018fc:	40023800 	.word	0x40023800
20001900:	40007000 	.word	0x40007000

20001904 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
20001904:	b480      	push	{r7}
20001906:	af00      	add	r7, sp, #0
}
20001908:	bf00      	nop
2000190a:	46bd      	mov	sp, r7
2000190c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001910:	4770      	bx	lr

20001912 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
20001912:	b480      	push	{r7}
20001914:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
20001916:	e7fe      	b.n	20001916 <HardFault_Handler+0x4>

20001918 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
20001918:	b480      	push	{r7}
2000191a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
2000191c:	e7fe      	b.n	2000191c <MemManage_Handler+0x4>

2000191e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
2000191e:	b480      	push	{r7}
20001920:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
20001922:	e7fe      	b.n	20001922 <BusFault_Handler+0x4>

20001924 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
20001924:	b480      	push	{r7}
20001926:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
20001928:	e7fe      	b.n	20001928 <UsageFault_Handler+0x4>

2000192a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
2000192a:	b480      	push	{r7}
2000192c:	af00      	add	r7, sp, #0
}
2000192e:	bf00      	nop
20001930:	46bd      	mov	sp, r7
20001932:	f85d 7b04 	ldr.w	r7, [sp], #4
20001936:	4770      	bx	lr

20001938 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
20001938:	b480      	push	{r7}
2000193a:	af00      	add	r7, sp, #0
}
2000193c:	bf00      	nop
2000193e:	46bd      	mov	sp, r7
20001940:	f85d 7b04 	ldr.w	r7, [sp], #4
20001944:	4770      	bx	lr

20001946 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
20001946:	b480      	push	{r7}
20001948:	af00      	add	r7, sp, #0
}
2000194a:	bf00      	nop
2000194c:	46bd      	mov	sp, r7
2000194e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001952:	4770      	bx	lr

20001954 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
20001954:	b580      	push	{r7, lr}
20001956:	af00      	add	r7, sp, #0
  HAL_IncTick();
20001958:	f7fe fee6 	bl	20000728 <HAL_IncTick>
}
2000195c:	bf00      	nop
2000195e:	bd80      	pop	{r7, pc}

20001960 <__libc_init_array>:
20001960:	b570      	push	{r4, r5, r6, lr}
20001962:	4d0d      	ldr	r5, [pc, #52]	; (20001998 <__libc_init_array+0x38>)
20001964:	4c0d      	ldr	r4, [pc, #52]	; (2000199c <__libc_init_array+0x3c>)
20001966:	1b64      	subs	r4, r4, r5
20001968:	10a4      	asrs	r4, r4, #2
2000196a:	2600      	movs	r6, #0
2000196c:	42a6      	cmp	r6, r4
2000196e:	d109      	bne.n	20001984 <__libc_init_array+0x24>
20001970:	4d0b      	ldr	r5, [pc, #44]	; (200019a0 <__libc_init_array+0x40>)
20001972:	4c0c      	ldr	r4, [pc, #48]	; (200019a4 <__libc_init_array+0x44>)
20001974:	f000 f818 	bl	200019a8 <_init>
20001978:	1b64      	subs	r4, r4, r5
2000197a:	10a4      	asrs	r4, r4, #2
2000197c:	2600      	movs	r6, #0
2000197e:	42a6      	cmp	r6, r4
20001980:	d105      	bne.n	2000198e <__libc_init_array+0x2e>
20001982:	bd70      	pop	{r4, r5, r6, pc}
20001984:	f855 3b04 	ldr.w	r3, [r5], #4
20001988:	4798      	blx	r3
2000198a:	3601      	adds	r6, #1
2000198c:	e7ee      	b.n	2000196c <__libc_init_array+0xc>
2000198e:	f855 3b04 	ldr.w	r3, [r5], #4
20001992:	4798      	blx	r3
20001994:	3601      	adds	r6, #1
20001996:	e7f2      	b.n	2000197e <__libc_init_array+0x1e>
20001998:	200019e0 	.word	0x200019e0
2000199c:	200019e0 	.word	0x200019e0
200019a0:	200019e0 	.word	0x200019e0
200019a4:	200019e4 	.word	0x200019e4

200019a8 <_init>:
200019a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200019aa:	bf00      	nop
200019ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
200019ae:	bc08      	pop	{r3}
200019b0:	469e      	mov	lr, r3
200019b2:	4770      	bx	lr

200019b4 <_fini>:
200019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200019b6:	bf00      	nop
200019b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
200019ba:	bc08      	pop	{r3}
200019bc:	469e      	mov	lr, r3
200019be:	4770      	bx	lr
