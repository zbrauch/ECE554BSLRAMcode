
FLASH_EraseProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  20000000  20000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002238  200001c4  200001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  200023fc  200023fc  000123fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20002450  20002450  00012478  2**0
                  CONTENTS
  4 .ARM          00000008  20002450  20002450  00012450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20002458  20002478  00012478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20002458  20002458  00012458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  2000245c  2000245c  0001245c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20002460  20002460  00012460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20002478  20002478  00012478  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024fc  200024fc  00012478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012478  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000124a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008252  00000000  00000000  000124eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000165a  00000000  00000000  0001a73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c8  00000000  00000000  0001bd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000528  00000000  00000000  0001c460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002120b  00000000  00000000  0001c988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000953c  00000000  00000000  0003db93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caa5d  00000000  00000000  000470cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a6c  00000000  00000000  00111b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00113598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001c4 <__do_global_dtors_aux>:
200001c4:	b510      	push	{r4, lr}
200001c6:	4c05      	ldr	r4, [pc, #20]	; (200001dc <__do_global_dtors_aux+0x18>)
200001c8:	7823      	ldrb	r3, [r4, #0]
200001ca:	b933      	cbnz	r3, 200001da <__do_global_dtors_aux+0x16>
200001cc:	4b04      	ldr	r3, [pc, #16]	; (200001e0 <__do_global_dtors_aux+0x1c>)
200001ce:	b113      	cbz	r3, 200001d6 <__do_global_dtors_aux+0x12>
200001d0:	4804      	ldr	r0, [pc, #16]	; (200001e4 <__do_global_dtors_aux+0x20>)
200001d2:	f3af 8000 	nop.w
200001d6:	2301      	movs	r3, #1
200001d8:	7023      	strb	r3, [r4, #0]
200001da:	bd10      	pop	{r4, pc}
200001dc:	20002478 	.word	0x20002478
200001e0:	00000000 	.word	0x00000000
200001e4:	200023e4 	.word	0x200023e4

200001e8 <frame_dummy>:
200001e8:	b508      	push	{r3, lr}
200001ea:	4b03      	ldr	r3, [pc, #12]	; (200001f8 <frame_dummy+0x10>)
200001ec:	b11b      	cbz	r3, 200001f6 <frame_dummy+0xe>
200001ee:	4903      	ldr	r1, [pc, #12]	; (200001fc <frame_dummy+0x14>)
200001f0:	4803      	ldr	r0, [pc, #12]	; (20000200 <frame_dummy+0x18>)
200001f2:	f3af 8000 	nop.w
200001f6:	bd08      	pop	{r3, pc}
200001f8:	00000000 	.word	0x00000000
200001fc:	2000247c 	.word	0x2000247c
20000200:	200023e4 	.word	0x200023e4

20000204 <__aeabi_uldivmod>:
20000204:	b953      	cbnz	r3, 2000021c <__aeabi_uldivmod+0x18>
20000206:	b94a      	cbnz	r2, 2000021c <__aeabi_uldivmod+0x18>
20000208:	2900      	cmp	r1, #0
2000020a:	bf08      	it	eq
2000020c:	2800      	cmpeq	r0, #0
2000020e:	bf1c      	itt	ne
20000210:	f04f 31ff 	movne.w	r1, #4294967295
20000214:	f04f 30ff 	movne.w	r0, #4294967295
20000218:	f000 b970 	b.w	200004fc <__aeabi_idiv0>
2000021c:	f1ad 0c08 	sub.w	ip, sp, #8
20000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20000224:	f000 f806 	bl	20000234 <__udivmoddi4>
20000228:	f8dd e004 	ldr.w	lr, [sp, #4]
2000022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000230:	b004      	add	sp, #16
20000232:	4770      	bx	lr

20000234 <__udivmoddi4>:
20000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20000238:	9e08      	ldr	r6, [sp, #32]
2000023a:	460d      	mov	r5, r1
2000023c:	4604      	mov	r4, r0
2000023e:	460f      	mov	r7, r1
20000240:	2b00      	cmp	r3, #0
20000242:	d14a      	bne.n	200002da <__udivmoddi4+0xa6>
20000244:	428a      	cmp	r2, r1
20000246:	4694      	mov	ip, r2
20000248:	d965      	bls.n	20000316 <__udivmoddi4+0xe2>
2000024a:	fab2 f382 	clz	r3, r2
2000024e:	b143      	cbz	r3, 20000262 <__udivmoddi4+0x2e>
20000250:	fa02 fc03 	lsl.w	ip, r2, r3
20000254:	f1c3 0220 	rsb	r2, r3, #32
20000258:	409f      	lsls	r7, r3
2000025a:	fa20 f202 	lsr.w	r2, r0, r2
2000025e:	4317      	orrs	r7, r2
20000260:	409c      	lsls	r4, r3
20000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
20000266:	fa1f f58c 	uxth.w	r5, ip
2000026a:	fbb7 f1fe 	udiv	r1, r7, lr
2000026e:	0c22      	lsrs	r2, r4, #16
20000270:	fb0e 7711 	mls	r7, lr, r1, r7
20000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
20000278:	fb01 f005 	mul.w	r0, r1, r5
2000027c:	4290      	cmp	r0, r2
2000027e:	d90a      	bls.n	20000296 <__udivmoddi4+0x62>
20000280:	eb1c 0202 	adds.w	r2, ip, r2
20000284:	f101 37ff 	add.w	r7, r1, #4294967295
20000288:	f080 811c 	bcs.w	200004c4 <__udivmoddi4+0x290>
2000028c:	4290      	cmp	r0, r2
2000028e:	f240 8119 	bls.w	200004c4 <__udivmoddi4+0x290>
20000292:	3902      	subs	r1, #2
20000294:	4462      	add	r2, ip
20000296:	1a12      	subs	r2, r2, r0
20000298:	b2a4      	uxth	r4, r4
2000029a:	fbb2 f0fe 	udiv	r0, r2, lr
2000029e:	fb0e 2210 	mls	r2, lr, r0, r2
200002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
200002a6:	fb00 f505 	mul.w	r5, r0, r5
200002aa:	42a5      	cmp	r5, r4
200002ac:	d90a      	bls.n	200002c4 <__udivmoddi4+0x90>
200002ae:	eb1c 0404 	adds.w	r4, ip, r4
200002b2:	f100 32ff 	add.w	r2, r0, #4294967295
200002b6:	f080 8107 	bcs.w	200004c8 <__udivmoddi4+0x294>
200002ba:	42a5      	cmp	r5, r4
200002bc:	f240 8104 	bls.w	200004c8 <__udivmoddi4+0x294>
200002c0:	4464      	add	r4, ip
200002c2:	3802      	subs	r0, #2
200002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
200002c8:	1b64      	subs	r4, r4, r5
200002ca:	2100      	movs	r1, #0
200002cc:	b11e      	cbz	r6, 200002d6 <__udivmoddi4+0xa2>
200002ce:	40dc      	lsrs	r4, r3
200002d0:	2300      	movs	r3, #0
200002d2:	e9c6 4300 	strd	r4, r3, [r6]
200002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200002da:	428b      	cmp	r3, r1
200002dc:	d908      	bls.n	200002f0 <__udivmoddi4+0xbc>
200002de:	2e00      	cmp	r6, #0
200002e0:	f000 80ed 	beq.w	200004be <__udivmoddi4+0x28a>
200002e4:	2100      	movs	r1, #0
200002e6:	e9c6 0500 	strd	r0, r5, [r6]
200002ea:	4608      	mov	r0, r1
200002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200002f0:	fab3 f183 	clz	r1, r3
200002f4:	2900      	cmp	r1, #0
200002f6:	d149      	bne.n	2000038c <__udivmoddi4+0x158>
200002f8:	42ab      	cmp	r3, r5
200002fa:	d302      	bcc.n	20000302 <__udivmoddi4+0xce>
200002fc:	4282      	cmp	r2, r0
200002fe:	f200 80f8 	bhi.w	200004f2 <__udivmoddi4+0x2be>
20000302:	1a84      	subs	r4, r0, r2
20000304:	eb65 0203 	sbc.w	r2, r5, r3
20000308:	2001      	movs	r0, #1
2000030a:	4617      	mov	r7, r2
2000030c:	2e00      	cmp	r6, #0
2000030e:	d0e2      	beq.n	200002d6 <__udivmoddi4+0xa2>
20000310:	e9c6 4700 	strd	r4, r7, [r6]
20000314:	e7df      	b.n	200002d6 <__udivmoddi4+0xa2>
20000316:	b902      	cbnz	r2, 2000031a <__udivmoddi4+0xe6>
20000318:	deff      	udf	#255	; 0xff
2000031a:	fab2 f382 	clz	r3, r2
2000031e:	2b00      	cmp	r3, #0
20000320:	f040 8090 	bne.w	20000444 <__udivmoddi4+0x210>
20000324:	1a8a      	subs	r2, r1, r2
20000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000032a:	fa1f fe8c 	uxth.w	lr, ip
2000032e:	2101      	movs	r1, #1
20000330:	fbb2 f5f7 	udiv	r5, r2, r7
20000334:	fb07 2015 	mls	r0, r7, r5, r2
20000338:	0c22      	lsrs	r2, r4, #16
2000033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
2000033e:	fb0e f005 	mul.w	r0, lr, r5
20000342:	4290      	cmp	r0, r2
20000344:	d908      	bls.n	20000358 <__udivmoddi4+0x124>
20000346:	eb1c 0202 	adds.w	r2, ip, r2
2000034a:	f105 38ff 	add.w	r8, r5, #4294967295
2000034e:	d202      	bcs.n	20000356 <__udivmoddi4+0x122>
20000350:	4290      	cmp	r0, r2
20000352:	f200 80cb 	bhi.w	200004ec <__udivmoddi4+0x2b8>
20000356:	4645      	mov	r5, r8
20000358:	1a12      	subs	r2, r2, r0
2000035a:	b2a4      	uxth	r4, r4
2000035c:	fbb2 f0f7 	udiv	r0, r2, r7
20000360:	fb07 2210 	mls	r2, r7, r0, r2
20000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
20000368:	fb0e fe00 	mul.w	lr, lr, r0
2000036c:	45a6      	cmp	lr, r4
2000036e:	d908      	bls.n	20000382 <__udivmoddi4+0x14e>
20000370:	eb1c 0404 	adds.w	r4, ip, r4
20000374:	f100 32ff 	add.w	r2, r0, #4294967295
20000378:	d202      	bcs.n	20000380 <__udivmoddi4+0x14c>
2000037a:	45a6      	cmp	lr, r4
2000037c:	f200 80bb 	bhi.w	200004f6 <__udivmoddi4+0x2c2>
20000380:	4610      	mov	r0, r2
20000382:	eba4 040e 	sub.w	r4, r4, lr
20000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
2000038a:	e79f      	b.n	200002cc <__udivmoddi4+0x98>
2000038c:	f1c1 0720 	rsb	r7, r1, #32
20000390:	408b      	lsls	r3, r1
20000392:	fa22 fc07 	lsr.w	ip, r2, r7
20000396:	ea4c 0c03 	orr.w	ip, ip, r3
2000039a:	fa05 f401 	lsl.w	r4, r5, r1
2000039e:	fa20 f307 	lsr.w	r3, r0, r7
200003a2:	40fd      	lsrs	r5, r7
200003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
200003a8:	4323      	orrs	r3, r4
200003aa:	fbb5 f8f9 	udiv	r8, r5, r9
200003ae:	fa1f fe8c 	uxth.w	lr, ip
200003b2:	fb09 5518 	mls	r5, r9, r8, r5
200003b6:	0c1c      	lsrs	r4, r3, #16
200003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
200003bc:	fb08 f50e 	mul.w	r5, r8, lr
200003c0:	42a5      	cmp	r5, r4
200003c2:	fa02 f201 	lsl.w	r2, r2, r1
200003c6:	fa00 f001 	lsl.w	r0, r0, r1
200003ca:	d90b      	bls.n	200003e4 <__udivmoddi4+0x1b0>
200003cc:	eb1c 0404 	adds.w	r4, ip, r4
200003d0:	f108 3aff 	add.w	sl, r8, #4294967295
200003d4:	f080 8088 	bcs.w	200004e8 <__udivmoddi4+0x2b4>
200003d8:	42a5      	cmp	r5, r4
200003da:	f240 8085 	bls.w	200004e8 <__udivmoddi4+0x2b4>
200003de:	f1a8 0802 	sub.w	r8, r8, #2
200003e2:	4464      	add	r4, ip
200003e4:	1b64      	subs	r4, r4, r5
200003e6:	b29d      	uxth	r5, r3
200003e8:	fbb4 f3f9 	udiv	r3, r4, r9
200003ec:	fb09 4413 	mls	r4, r9, r3, r4
200003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
200003f4:	fb03 fe0e 	mul.w	lr, r3, lr
200003f8:	45a6      	cmp	lr, r4
200003fa:	d908      	bls.n	2000040e <__udivmoddi4+0x1da>
200003fc:	eb1c 0404 	adds.w	r4, ip, r4
20000400:	f103 35ff 	add.w	r5, r3, #4294967295
20000404:	d26c      	bcs.n	200004e0 <__udivmoddi4+0x2ac>
20000406:	45a6      	cmp	lr, r4
20000408:	d96a      	bls.n	200004e0 <__udivmoddi4+0x2ac>
2000040a:	3b02      	subs	r3, #2
2000040c:	4464      	add	r4, ip
2000040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
20000412:	fba3 9502 	umull	r9, r5, r3, r2
20000416:	eba4 040e 	sub.w	r4, r4, lr
2000041a:	42ac      	cmp	r4, r5
2000041c:	46c8      	mov	r8, r9
2000041e:	46ae      	mov	lr, r5
20000420:	d356      	bcc.n	200004d0 <__udivmoddi4+0x29c>
20000422:	d053      	beq.n	200004cc <__udivmoddi4+0x298>
20000424:	b156      	cbz	r6, 2000043c <__udivmoddi4+0x208>
20000426:	ebb0 0208 	subs.w	r2, r0, r8
2000042a:	eb64 040e 	sbc.w	r4, r4, lr
2000042e:	fa04 f707 	lsl.w	r7, r4, r7
20000432:	40ca      	lsrs	r2, r1
20000434:	40cc      	lsrs	r4, r1
20000436:	4317      	orrs	r7, r2
20000438:	e9c6 7400 	strd	r7, r4, [r6]
2000043c:	4618      	mov	r0, r3
2000043e:	2100      	movs	r1, #0
20000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000444:	f1c3 0120 	rsb	r1, r3, #32
20000448:	fa02 fc03 	lsl.w	ip, r2, r3
2000044c:	fa20 f201 	lsr.w	r2, r0, r1
20000450:	fa25 f101 	lsr.w	r1, r5, r1
20000454:	409d      	lsls	r5, r3
20000456:	432a      	orrs	r2, r5
20000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000045c:	fa1f fe8c 	uxth.w	lr, ip
20000460:	fbb1 f0f7 	udiv	r0, r1, r7
20000464:	fb07 1510 	mls	r5, r7, r0, r1
20000468:	0c11      	lsrs	r1, r2, #16
2000046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
2000046e:	fb00 f50e 	mul.w	r5, r0, lr
20000472:	428d      	cmp	r5, r1
20000474:	fa04 f403 	lsl.w	r4, r4, r3
20000478:	d908      	bls.n	2000048c <__udivmoddi4+0x258>
2000047a:	eb1c 0101 	adds.w	r1, ip, r1
2000047e:	f100 38ff 	add.w	r8, r0, #4294967295
20000482:	d22f      	bcs.n	200004e4 <__udivmoddi4+0x2b0>
20000484:	428d      	cmp	r5, r1
20000486:	d92d      	bls.n	200004e4 <__udivmoddi4+0x2b0>
20000488:	3802      	subs	r0, #2
2000048a:	4461      	add	r1, ip
2000048c:	1b49      	subs	r1, r1, r5
2000048e:	b292      	uxth	r2, r2
20000490:	fbb1 f5f7 	udiv	r5, r1, r7
20000494:	fb07 1115 	mls	r1, r7, r5, r1
20000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
2000049c:	fb05 f10e 	mul.w	r1, r5, lr
200004a0:	4291      	cmp	r1, r2
200004a2:	d908      	bls.n	200004b6 <__udivmoddi4+0x282>
200004a4:	eb1c 0202 	adds.w	r2, ip, r2
200004a8:	f105 38ff 	add.w	r8, r5, #4294967295
200004ac:	d216      	bcs.n	200004dc <__udivmoddi4+0x2a8>
200004ae:	4291      	cmp	r1, r2
200004b0:	d914      	bls.n	200004dc <__udivmoddi4+0x2a8>
200004b2:	3d02      	subs	r5, #2
200004b4:	4462      	add	r2, ip
200004b6:	1a52      	subs	r2, r2, r1
200004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
200004bc:	e738      	b.n	20000330 <__udivmoddi4+0xfc>
200004be:	4631      	mov	r1, r6
200004c0:	4630      	mov	r0, r6
200004c2:	e708      	b.n	200002d6 <__udivmoddi4+0xa2>
200004c4:	4639      	mov	r1, r7
200004c6:	e6e6      	b.n	20000296 <__udivmoddi4+0x62>
200004c8:	4610      	mov	r0, r2
200004ca:	e6fb      	b.n	200002c4 <__udivmoddi4+0x90>
200004cc:	4548      	cmp	r0, r9
200004ce:	d2a9      	bcs.n	20000424 <__udivmoddi4+0x1f0>
200004d0:	ebb9 0802 	subs.w	r8, r9, r2
200004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
200004d8:	3b01      	subs	r3, #1
200004da:	e7a3      	b.n	20000424 <__udivmoddi4+0x1f0>
200004dc:	4645      	mov	r5, r8
200004de:	e7ea      	b.n	200004b6 <__udivmoddi4+0x282>
200004e0:	462b      	mov	r3, r5
200004e2:	e794      	b.n	2000040e <__udivmoddi4+0x1da>
200004e4:	4640      	mov	r0, r8
200004e6:	e7d1      	b.n	2000048c <__udivmoddi4+0x258>
200004e8:	46d0      	mov	r8, sl
200004ea:	e77b      	b.n	200003e4 <__udivmoddi4+0x1b0>
200004ec:	3d02      	subs	r5, #2
200004ee:	4462      	add	r2, ip
200004f0:	e732      	b.n	20000358 <__udivmoddi4+0x124>
200004f2:	4608      	mov	r0, r1
200004f4:	e70a      	b.n	2000030c <__udivmoddi4+0xd8>
200004f6:	4464      	add	r4, ip
200004f8:	3802      	subs	r0, #2
200004fa:	e742      	b.n	20000382 <__udivmoddi4+0x14e>

200004fc <__aeabi_idiv0>:
200004fc:	4770      	bx	lr
200004fe:	bf00      	nop

20000500 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
20000500:	b580      	push	{r7, lr}
20000502:	b08a      	sub	sp, #40	; 0x28
20000504:	af00      	add	r7, sp, #0
20000506:	4603      	mov	r3, r0
20000508:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
2000050a:	79fb      	ldrb	r3, [r7, #7]
2000050c:	2b00      	cmp	r3, #0
2000050e:	d10e      	bne.n	2000052e <BSP_LED_Init+0x2e>
20000510:	2300      	movs	r3, #0
20000512:	613b      	str	r3, [r7, #16]
20000514:	4b1f      	ldr	r3, [pc, #124]	; (20000594 <BSP_LED_Init+0x94>)
20000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000518:	4a1e      	ldr	r2, [pc, #120]	; (20000594 <BSP_LED_Init+0x94>)
2000051a:	f043 0302 	orr.w	r3, r3, #2
2000051e:	6313      	str	r3, [r2, #48]	; 0x30
20000520:	4b1c      	ldr	r3, [pc, #112]	; (20000594 <BSP_LED_Init+0x94>)
20000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000524:	f003 0302 	and.w	r3, r3, #2
20000528:	613b      	str	r3, [r7, #16]
2000052a:	693b      	ldr	r3, [r7, #16]
2000052c:	e00d      	b.n	2000054a <BSP_LED_Init+0x4a>
2000052e:	2300      	movs	r3, #0
20000530:	60fb      	str	r3, [r7, #12]
20000532:	4b18      	ldr	r3, [pc, #96]	; (20000594 <BSP_LED_Init+0x94>)
20000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000536:	4a17      	ldr	r2, [pc, #92]	; (20000594 <BSP_LED_Init+0x94>)
20000538:	f043 0302 	orr.w	r3, r3, #2
2000053c:	6313      	str	r3, [r2, #48]	; 0x30
2000053e:	4b15      	ldr	r3, [pc, #84]	; (20000594 <BSP_LED_Init+0x94>)
20000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000542:	f003 0302 	and.w	r3, r3, #2
20000546:	60fb      	str	r3, [r7, #12]
20000548:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
2000054a:	79fb      	ldrb	r3, [r7, #7]
2000054c:	4a12      	ldr	r2, [pc, #72]	; (20000598 <BSP_LED_Init+0x98>)
2000054e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
20000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20000554:	2301      	movs	r3, #1
20000556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20000558:	2300      	movs	r3, #0
2000055a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
2000055c:	2302      	movs	r3, #2
2000055e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20000560:	79fb      	ldrb	r3, [r7, #7]
20000562:	4a0e      	ldr	r2, [pc, #56]	; (2000059c <BSP_LED_Init+0x9c>)
20000564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20000568:	f107 0214 	add.w	r2, r7, #20
2000056c:	4611      	mov	r1, r2
2000056e:	4618      	mov	r0, r3
20000570:	f000 f9fe 	bl	20000970 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
20000574:	79fb      	ldrb	r3, [r7, #7]
20000576:	4a09      	ldr	r2, [pc, #36]	; (2000059c <BSP_LED_Init+0x9c>)
20000578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
2000057c:	79fb      	ldrb	r3, [r7, #7]
2000057e:	4a06      	ldr	r2, [pc, #24]	; (20000598 <BSP_LED_Init+0x98>)
20000580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
20000584:	2200      	movs	r2, #0
20000586:	4619      	mov	r1, r3
20000588:	f000 fb86 	bl	20000c98 <HAL_GPIO_WritePin>
}
2000058c:	bf00      	nop
2000058e:	3728      	adds	r7, #40	; 0x28
20000590:	46bd      	mov	sp, r7
20000592:	bd80      	pop	{r7, pc}
20000594:	40023800 	.word	0x40023800
20000598:	20002430 	.word	0x20002430
2000059c:	20002460 	.word	0x20002460

200005a0 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
200005a0:	b580      	push	{r7, lr}
200005a2:	b082      	sub	sp, #8
200005a4:	af00      	add	r7, sp, #0
200005a6:	4603      	mov	r3, r0
200005a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
200005aa:	79fb      	ldrb	r3, [r7, #7]
200005ac:	4a07      	ldr	r2, [pc, #28]	; (200005cc <BSP_LED_On+0x2c>)
200005ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
200005b2:	79fb      	ldrb	r3, [r7, #7]
200005b4:	4a06      	ldr	r2, [pc, #24]	; (200005d0 <BSP_LED_On+0x30>)
200005b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
200005ba:	2201      	movs	r2, #1
200005bc:	4619      	mov	r1, r3
200005be:	f000 fb6b 	bl	20000c98 <HAL_GPIO_WritePin>
}
200005c2:	bf00      	nop
200005c4:	3708      	adds	r7, #8
200005c6:	46bd      	mov	sp, r7
200005c8:	bd80      	pop	{r7, pc}
200005ca:	bf00      	nop
200005cc:	20002460 	.word	0x20002460
200005d0:	20002430 	.word	0x20002430

200005d4 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
200005d4:	b580      	push	{r7, lr}
200005d6:	b082      	sub	sp, #8
200005d8:	af00      	add	r7, sp, #0
200005da:	4603      	mov	r3, r0
200005dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
200005de:	79fb      	ldrb	r3, [r7, #7]
200005e0:	4a07      	ldr	r2, [pc, #28]	; (20000600 <BSP_LED_Off+0x2c>)
200005e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
200005e6:	79fb      	ldrb	r3, [r7, #7]
200005e8:	4a06      	ldr	r2, [pc, #24]	; (20000604 <BSP_LED_Off+0x30>)
200005ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
200005ee:	2200      	movs	r2, #0
200005f0:	4619      	mov	r1, r3
200005f2:	f000 fb51 	bl	20000c98 <HAL_GPIO_WritePin>
}
200005f6:	bf00      	nop
200005f8:	3708      	adds	r7, #8
200005fa:	46bd      	mov	sp, r7
200005fc:	bd80      	pop	{r7, pc}
200005fe:	bf00      	nop
20000600:	20002460 	.word	0x20002460
20000604:	20002430 	.word	0x20002430

20000608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20000608:	b480      	push	{r7}
2000060a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
2000060c:	4b16      	ldr	r3, [pc, #88]	; (20000668 <SystemInit+0x60>)
2000060e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20000612:	4a15      	ldr	r2, [pc, #84]	; (20000668 <SystemInit+0x60>)
20000614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20000618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
2000061c:	4b13      	ldr	r3, [pc, #76]	; (2000066c <SystemInit+0x64>)
2000061e:	681b      	ldr	r3, [r3, #0]
20000620:	4a12      	ldr	r2, [pc, #72]	; (2000066c <SystemInit+0x64>)
20000622:	f043 0301 	orr.w	r3, r3, #1
20000626:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20000628:	4b10      	ldr	r3, [pc, #64]	; (2000066c <SystemInit+0x64>)
2000062a:	2200      	movs	r2, #0
2000062c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
2000062e:	4b0f      	ldr	r3, [pc, #60]	; (2000066c <SystemInit+0x64>)
20000630:	681b      	ldr	r3, [r3, #0]
20000632:	4a0e      	ldr	r2, [pc, #56]	; (2000066c <SystemInit+0x64>)
20000634:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
20000638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000063c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
2000063e:	4b0b      	ldr	r3, [pc, #44]	; (2000066c <SystemInit+0x64>)
20000640:	4a0b      	ldr	r2, [pc, #44]	; (20000670 <SystemInit+0x68>)
20000642:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20000644:	4b09      	ldr	r3, [pc, #36]	; (2000066c <SystemInit+0x64>)
20000646:	681b      	ldr	r3, [r3, #0]
20000648:	4a08      	ldr	r2, [pc, #32]	; (2000066c <SystemInit+0x64>)
2000064a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000064e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20000650:	4b06      	ldr	r3, [pc, #24]	; (2000066c <SystemInit+0x64>)
20000652:	2200      	movs	r2, #0
20000654:	60da      	str	r2, [r3, #12]


  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
20000656:	4b04      	ldr	r3, [pc, #16]	; (20000668 <SystemInit+0x60>)
20000658:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
2000065c:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
2000065e:	bf00      	nop
20000660:	46bd      	mov	sp, r7
20000662:	f85d 7b04 	ldr.w	r7, [sp], #4
20000666:	4770      	bx	lr
20000668:	e000ed00 	.word	0xe000ed00
2000066c:	40023800 	.word	0x40023800
20000670:	24003010 	.word	0x24003010

20000674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20000674:	b580      	push	{r7, lr}
20000676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20000678:	4b0b      	ldr	r3, [pc, #44]	; (200006a8 <HAL_Init+0x34>)
2000067a:	681b      	ldr	r3, [r3, #0]
2000067c:	4a0a      	ldr	r2, [pc, #40]	; (200006a8 <HAL_Init+0x34>)
2000067e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20000682:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20000684:	4b08      	ldr	r3, [pc, #32]	; (200006a8 <HAL_Init+0x34>)
20000686:	681b      	ldr	r3, [r3, #0]
20000688:	4a07      	ldr	r2, [pc, #28]	; (200006a8 <HAL_Init+0x34>)
2000068a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000068e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20000690:	2003      	movs	r0, #3
20000692:	f000 f939 	bl	20000908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20000696:	200f      	movs	r0, #15
20000698:	f000 f810 	bl	200006bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
2000069c:	f000 f806 	bl	200006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
200006a0:	2300      	movs	r3, #0
}
200006a2:	4618      	mov	r0, r3
200006a4:	bd80      	pop	{r7, pc}
200006a6:	bf00      	nop
200006a8:	40023c00 	.word	0x40023c00

200006ac <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
200006ac:	b480      	push	{r7}
200006ae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
200006b0:	bf00      	nop
200006b2:	46bd      	mov	sp, r7
200006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
200006b8:	4770      	bx	lr
	...

200006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
200006bc:	b580      	push	{r7, lr}
200006be:	b082      	sub	sp, #8
200006c0:	af00      	add	r7, sp, #0
200006c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
200006c4:	4b12      	ldr	r3, [pc, #72]	; (20000710 <HAL_InitTick+0x54>)
200006c6:	681a      	ldr	r2, [r3, #0]
200006c8:	4b12      	ldr	r3, [pc, #72]	; (20000714 <HAL_InitTick+0x58>)
200006ca:	781b      	ldrb	r3, [r3, #0]
200006cc:	4619      	mov	r1, r3
200006ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
200006d2:	fbb3 f3f1 	udiv	r3, r3, r1
200006d6:	fbb2 f3f3 	udiv	r3, r2, r3
200006da:	4618      	mov	r0, r3
200006dc:	f000 f93b 	bl	20000956 <HAL_SYSTICK_Config>
200006e0:	4603      	mov	r3, r0
200006e2:	2b00      	cmp	r3, #0
200006e4:	d001      	beq.n	200006ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
200006e6:	2301      	movs	r3, #1
200006e8:	e00e      	b.n	20000708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
200006ea:	687b      	ldr	r3, [r7, #4]
200006ec:	2b0f      	cmp	r3, #15
200006ee:	d80a      	bhi.n	20000706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
200006f0:	2200      	movs	r2, #0
200006f2:	6879      	ldr	r1, [r7, #4]
200006f4:	f04f 30ff 	mov.w	r0, #4294967295
200006f8:	f000 f911 	bl	2000091e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
200006fc:	4a06      	ldr	r2, [pc, #24]	; (20000718 <HAL_InitTick+0x5c>)
200006fe:	687b      	ldr	r3, [r7, #4]
20000700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
20000702:	2300      	movs	r3, #0
20000704:	e000      	b.n	20000708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
20000706:	2301      	movs	r3, #1
}
20000708:	4618      	mov	r0, r3
2000070a:	3708      	adds	r7, #8
2000070c:	46bd      	mov	sp, r7
2000070e:	bd80      	pop	{r7, pc}
20000710:	2000246c 	.word	0x2000246c
20000714:	20002474 	.word	0x20002474
20000718:	20002470 	.word	0x20002470

2000071c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
2000071c:	b480      	push	{r7}
2000071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20000720:	4b06      	ldr	r3, [pc, #24]	; (2000073c <HAL_IncTick+0x20>)
20000722:	781b      	ldrb	r3, [r3, #0]
20000724:	461a      	mov	r2, r3
20000726:	4b06      	ldr	r3, [pc, #24]	; (20000740 <HAL_IncTick+0x24>)
20000728:	681b      	ldr	r3, [r3, #0]
2000072a:	4413      	add	r3, r2
2000072c:	4a04      	ldr	r2, [pc, #16]	; (20000740 <HAL_IncTick+0x24>)
2000072e:	6013      	str	r3, [r2, #0]
}
20000730:	bf00      	nop
20000732:	46bd      	mov	sp, r7
20000734:	f85d 7b04 	ldr.w	r7, [sp], #4
20000738:	4770      	bx	lr
2000073a:	bf00      	nop
2000073c:	20002474 	.word	0x20002474
20000740:	20002494 	.word	0x20002494

20000744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20000744:	b480      	push	{r7}
20000746:	af00      	add	r7, sp, #0
  return uwTick;
20000748:	4b03      	ldr	r3, [pc, #12]	; (20000758 <HAL_GetTick+0x14>)
2000074a:	681b      	ldr	r3, [r3, #0]
}
2000074c:	4618      	mov	r0, r3
2000074e:	46bd      	mov	sp, r7
20000750:	f85d 7b04 	ldr.w	r7, [sp], #4
20000754:	4770      	bx	lr
20000756:	bf00      	nop
20000758:	20002494 	.word	0x20002494

2000075c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
2000075c:	b580      	push	{r7, lr}
2000075e:	b084      	sub	sp, #16
20000760:	af00      	add	r7, sp, #0
20000762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20000764:	f7ff ffee 	bl	20000744 <HAL_GetTick>
20000768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
2000076a:	687b      	ldr	r3, [r7, #4]
2000076c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
2000076e:	68fb      	ldr	r3, [r7, #12]
20000770:	f1b3 3fff 	cmp.w	r3, #4294967295
20000774:	d005      	beq.n	20000782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
20000776:	4b0a      	ldr	r3, [pc, #40]	; (200007a0 <HAL_Delay+0x44>)
20000778:	781b      	ldrb	r3, [r3, #0]
2000077a:	461a      	mov	r2, r3
2000077c:	68fb      	ldr	r3, [r7, #12]
2000077e:	4413      	add	r3, r2
20000780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
20000782:	bf00      	nop
20000784:	f7ff ffde 	bl	20000744 <HAL_GetTick>
20000788:	4602      	mov	r2, r0
2000078a:	68bb      	ldr	r3, [r7, #8]
2000078c:	1ad3      	subs	r3, r2, r3
2000078e:	68fa      	ldr	r2, [r7, #12]
20000790:	429a      	cmp	r2, r3
20000792:	d8f7      	bhi.n	20000784 <HAL_Delay+0x28>
  {
  }
}
20000794:	bf00      	nop
20000796:	bf00      	nop
20000798:	3710      	adds	r7, #16
2000079a:	46bd      	mov	sp, r7
2000079c:	bd80      	pop	{r7, pc}
2000079e:	bf00      	nop
200007a0:	20002474 	.word	0x20002474

200007a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200007a4:	b480      	push	{r7}
200007a6:	b085      	sub	sp, #20
200007a8:	af00      	add	r7, sp, #0
200007aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
200007ac:	687b      	ldr	r3, [r7, #4]
200007ae:	f003 0307 	and.w	r3, r3, #7
200007b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
200007b4:	4b0c      	ldr	r3, [pc, #48]	; (200007e8 <__NVIC_SetPriorityGrouping+0x44>)
200007b6:	68db      	ldr	r3, [r3, #12]
200007b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200007ba:	68ba      	ldr	r2, [r7, #8]
200007bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
200007c0:	4013      	ands	r3, r2
200007c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
200007c4:	68fb      	ldr	r3, [r7, #12]
200007c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
200007c8:	68bb      	ldr	r3, [r7, #8]
200007ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
200007cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
200007d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
200007d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
200007d6:	4a04      	ldr	r2, [pc, #16]	; (200007e8 <__NVIC_SetPriorityGrouping+0x44>)
200007d8:	68bb      	ldr	r3, [r7, #8]
200007da:	60d3      	str	r3, [r2, #12]
}
200007dc:	bf00      	nop
200007de:	3714      	adds	r7, #20
200007e0:	46bd      	mov	sp, r7
200007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200007e6:	4770      	bx	lr
200007e8:	e000ed00 	.word	0xe000ed00

200007ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
200007ec:	b480      	push	{r7}
200007ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200007f0:	4b04      	ldr	r3, [pc, #16]	; (20000804 <__NVIC_GetPriorityGrouping+0x18>)
200007f2:	68db      	ldr	r3, [r3, #12]
200007f4:	0a1b      	lsrs	r3, r3, #8
200007f6:	f003 0307 	and.w	r3, r3, #7
}
200007fa:	4618      	mov	r0, r3
200007fc:	46bd      	mov	sp, r7
200007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20000802:	4770      	bx	lr
20000804:	e000ed00 	.word	0xe000ed00

20000808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000808:	b480      	push	{r7}
2000080a:	b083      	sub	sp, #12
2000080c:	af00      	add	r7, sp, #0
2000080e:	4603      	mov	r3, r0
20000810:	6039      	str	r1, [r7, #0]
20000812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20000814:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000818:	2b00      	cmp	r3, #0
2000081a:	db0a      	blt.n	20000832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000081c:	683b      	ldr	r3, [r7, #0]
2000081e:	b2da      	uxtb	r2, r3
20000820:	490c      	ldr	r1, [pc, #48]	; (20000854 <__NVIC_SetPriority+0x4c>)
20000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000826:	0112      	lsls	r2, r2, #4
20000828:	b2d2      	uxtb	r2, r2
2000082a:	440b      	add	r3, r1
2000082c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000830:	e00a      	b.n	20000848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000832:	683b      	ldr	r3, [r7, #0]
20000834:	b2da      	uxtb	r2, r3
20000836:	4908      	ldr	r1, [pc, #32]	; (20000858 <__NVIC_SetPriority+0x50>)
20000838:	79fb      	ldrb	r3, [r7, #7]
2000083a:	f003 030f 	and.w	r3, r3, #15
2000083e:	3b04      	subs	r3, #4
20000840:	0112      	lsls	r2, r2, #4
20000842:	b2d2      	uxtb	r2, r2
20000844:	440b      	add	r3, r1
20000846:	761a      	strb	r2, [r3, #24]
}
20000848:	bf00      	nop
2000084a:	370c      	adds	r7, #12
2000084c:	46bd      	mov	sp, r7
2000084e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000852:	4770      	bx	lr
20000854:	e000e100 	.word	0xe000e100
20000858:	e000ed00 	.word	0xe000ed00

2000085c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2000085c:	b480      	push	{r7}
2000085e:	b089      	sub	sp, #36	; 0x24
20000860:	af00      	add	r7, sp, #0
20000862:	60f8      	str	r0, [r7, #12]
20000864:	60b9      	str	r1, [r7, #8]
20000866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20000868:	68fb      	ldr	r3, [r7, #12]
2000086a:	f003 0307 	and.w	r3, r3, #7
2000086e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20000870:	69fb      	ldr	r3, [r7, #28]
20000872:	f1c3 0307 	rsb	r3, r3, #7
20000876:	2b04      	cmp	r3, #4
20000878:	bf28      	it	cs
2000087a:	2304      	movcs	r3, #4
2000087c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000087e:	69fb      	ldr	r3, [r7, #28]
20000880:	3304      	adds	r3, #4
20000882:	2b06      	cmp	r3, #6
20000884:	d902      	bls.n	2000088c <NVIC_EncodePriority+0x30>
20000886:	69fb      	ldr	r3, [r7, #28]
20000888:	3b03      	subs	r3, #3
2000088a:	e000      	b.n	2000088e <NVIC_EncodePriority+0x32>
2000088c:	2300      	movs	r3, #0
2000088e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20000890:	f04f 32ff 	mov.w	r2, #4294967295
20000894:	69bb      	ldr	r3, [r7, #24]
20000896:	fa02 f303 	lsl.w	r3, r2, r3
2000089a:	43da      	mvns	r2, r3
2000089c:	68bb      	ldr	r3, [r7, #8]
2000089e:	401a      	ands	r2, r3
200008a0:	697b      	ldr	r3, [r7, #20]
200008a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
200008a4:	f04f 31ff 	mov.w	r1, #4294967295
200008a8:	697b      	ldr	r3, [r7, #20]
200008aa:	fa01 f303 	lsl.w	r3, r1, r3
200008ae:	43d9      	mvns	r1, r3
200008b0:	687b      	ldr	r3, [r7, #4]
200008b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200008b4:	4313      	orrs	r3, r2
         );
}
200008b6:	4618      	mov	r0, r3
200008b8:	3724      	adds	r7, #36	; 0x24
200008ba:	46bd      	mov	sp, r7
200008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
200008c0:	4770      	bx	lr
	...

200008c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
200008c4:	b580      	push	{r7, lr}
200008c6:	b082      	sub	sp, #8
200008c8:	af00      	add	r7, sp, #0
200008ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
200008cc:	687b      	ldr	r3, [r7, #4]
200008ce:	3b01      	subs	r3, #1
200008d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
200008d4:	d301      	bcc.n	200008da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
200008d6:	2301      	movs	r3, #1
200008d8:	e00f      	b.n	200008fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
200008da:	4a0a      	ldr	r2, [pc, #40]	; (20000904 <SysTick_Config+0x40>)
200008dc:	687b      	ldr	r3, [r7, #4]
200008de:	3b01      	subs	r3, #1
200008e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
200008e2:	210f      	movs	r1, #15
200008e4:	f04f 30ff 	mov.w	r0, #4294967295
200008e8:	f7ff ff8e 	bl	20000808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
200008ec:	4b05      	ldr	r3, [pc, #20]	; (20000904 <SysTick_Config+0x40>)
200008ee:	2200      	movs	r2, #0
200008f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200008f2:	4b04      	ldr	r3, [pc, #16]	; (20000904 <SysTick_Config+0x40>)
200008f4:	2207      	movs	r2, #7
200008f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200008f8:	2300      	movs	r3, #0
}
200008fa:	4618      	mov	r0, r3
200008fc:	3708      	adds	r7, #8
200008fe:	46bd      	mov	sp, r7
20000900:	bd80      	pop	{r7, pc}
20000902:	bf00      	nop
20000904:	e000e010 	.word	0xe000e010

20000908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20000908:	b580      	push	{r7, lr}
2000090a:	b082      	sub	sp, #8
2000090c:	af00      	add	r7, sp, #0
2000090e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20000910:	6878      	ldr	r0, [r7, #4]
20000912:	f7ff ff47 	bl	200007a4 <__NVIC_SetPriorityGrouping>
}
20000916:	bf00      	nop
20000918:	3708      	adds	r7, #8
2000091a:	46bd      	mov	sp, r7
2000091c:	bd80      	pop	{r7, pc}

2000091e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
2000091e:	b580      	push	{r7, lr}
20000920:	b086      	sub	sp, #24
20000922:	af00      	add	r7, sp, #0
20000924:	4603      	mov	r3, r0
20000926:	60b9      	str	r1, [r7, #8]
20000928:	607a      	str	r2, [r7, #4]
2000092a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
2000092c:	2300      	movs	r3, #0
2000092e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20000930:	f7ff ff5c 	bl	200007ec <__NVIC_GetPriorityGrouping>
20000934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
20000936:	687a      	ldr	r2, [r7, #4]
20000938:	68b9      	ldr	r1, [r7, #8]
2000093a:	6978      	ldr	r0, [r7, #20]
2000093c:	f7ff ff8e 	bl	2000085c <NVIC_EncodePriority>
20000940:	4602      	mov	r2, r0
20000942:	f997 300f 	ldrsb.w	r3, [r7, #15]
20000946:	4611      	mov	r1, r2
20000948:	4618      	mov	r0, r3
2000094a:	f7ff ff5d 	bl	20000808 <__NVIC_SetPriority>
}
2000094e:	bf00      	nop
20000950:	3718      	adds	r7, #24
20000952:	46bd      	mov	sp, r7
20000954:	bd80      	pop	{r7, pc}

20000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
20000956:	b580      	push	{r7, lr}
20000958:	b082      	sub	sp, #8
2000095a:	af00      	add	r7, sp, #0
2000095c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2000095e:	6878      	ldr	r0, [r7, #4]
20000960:	f7ff ffb0 	bl	200008c4 <SysTick_Config>
20000964:	4603      	mov	r3, r0
}
20000966:	4618      	mov	r0, r3
20000968:	3708      	adds	r7, #8
2000096a:	46bd      	mov	sp, r7
2000096c:	bd80      	pop	{r7, pc}
	...

20000970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20000970:	b480      	push	{r7}
20000972:	b089      	sub	sp, #36	; 0x24
20000974:	af00      	add	r7, sp, #0
20000976:	6078      	str	r0, [r7, #4]
20000978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
2000097a:	2300      	movs	r3, #0
2000097c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
2000097e:	2300      	movs	r3, #0
20000980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
20000982:	2300      	movs	r3, #0
20000984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
20000986:	2300      	movs	r3, #0
20000988:	61fb      	str	r3, [r7, #28]
2000098a:	e165      	b.n	20000c58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
2000098c:	2201      	movs	r2, #1
2000098e:	69fb      	ldr	r3, [r7, #28]
20000990:	fa02 f303 	lsl.w	r3, r2, r3
20000994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
20000996:	683b      	ldr	r3, [r7, #0]
20000998:	681b      	ldr	r3, [r3, #0]
2000099a:	697a      	ldr	r2, [r7, #20]
2000099c:	4013      	ands	r3, r2
2000099e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
200009a0:	693a      	ldr	r2, [r7, #16]
200009a2:	697b      	ldr	r3, [r7, #20]
200009a4:	429a      	cmp	r2, r3
200009a6:	f040 8154 	bne.w	20000c52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
200009aa:	683b      	ldr	r3, [r7, #0]
200009ac:	685b      	ldr	r3, [r3, #4]
200009ae:	f003 0303 	and.w	r3, r3, #3
200009b2:	2b01      	cmp	r3, #1
200009b4:	d005      	beq.n	200009c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
200009b6:	683b      	ldr	r3, [r7, #0]
200009b8:	685b      	ldr	r3, [r3, #4]
200009ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
200009be:	2b02      	cmp	r3, #2
200009c0:	d130      	bne.n	20000a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
200009c2:	687b      	ldr	r3, [r7, #4]
200009c4:	689b      	ldr	r3, [r3, #8]
200009c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
200009c8:	69fb      	ldr	r3, [r7, #28]
200009ca:	005b      	lsls	r3, r3, #1
200009cc:	2203      	movs	r2, #3
200009ce:	fa02 f303 	lsl.w	r3, r2, r3
200009d2:	43db      	mvns	r3, r3
200009d4:	69ba      	ldr	r2, [r7, #24]
200009d6:	4013      	ands	r3, r2
200009d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
200009da:	683b      	ldr	r3, [r7, #0]
200009dc:	68da      	ldr	r2, [r3, #12]
200009de:	69fb      	ldr	r3, [r7, #28]
200009e0:	005b      	lsls	r3, r3, #1
200009e2:	fa02 f303 	lsl.w	r3, r2, r3
200009e6:	69ba      	ldr	r2, [r7, #24]
200009e8:	4313      	orrs	r3, r2
200009ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
200009ec:	687b      	ldr	r3, [r7, #4]
200009ee:	69ba      	ldr	r2, [r7, #24]
200009f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
200009f2:	687b      	ldr	r3, [r7, #4]
200009f4:	685b      	ldr	r3, [r3, #4]
200009f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
200009f8:	2201      	movs	r2, #1
200009fa:	69fb      	ldr	r3, [r7, #28]
200009fc:	fa02 f303 	lsl.w	r3, r2, r3
20000a00:	43db      	mvns	r3, r3
20000a02:	69ba      	ldr	r2, [r7, #24]
20000a04:	4013      	ands	r3, r2
20000a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
20000a08:	683b      	ldr	r3, [r7, #0]
20000a0a:	685b      	ldr	r3, [r3, #4]
20000a0c:	091b      	lsrs	r3, r3, #4
20000a0e:	f003 0201 	and.w	r2, r3, #1
20000a12:	69fb      	ldr	r3, [r7, #28]
20000a14:	fa02 f303 	lsl.w	r3, r2, r3
20000a18:	69ba      	ldr	r2, [r7, #24]
20000a1a:	4313      	orrs	r3, r2
20000a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
20000a1e:	687b      	ldr	r3, [r7, #4]
20000a20:	69ba      	ldr	r2, [r7, #24]
20000a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20000a24:	683b      	ldr	r3, [r7, #0]
20000a26:	685b      	ldr	r3, [r3, #4]
20000a28:	f003 0303 	and.w	r3, r3, #3
20000a2c:	2b03      	cmp	r3, #3
20000a2e:	d017      	beq.n	20000a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
20000a30:	687b      	ldr	r3, [r7, #4]
20000a32:	68db      	ldr	r3, [r3, #12]
20000a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
20000a36:	69fb      	ldr	r3, [r7, #28]
20000a38:	005b      	lsls	r3, r3, #1
20000a3a:	2203      	movs	r2, #3
20000a3c:	fa02 f303 	lsl.w	r3, r2, r3
20000a40:	43db      	mvns	r3, r3
20000a42:	69ba      	ldr	r2, [r7, #24]
20000a44:	4013      	ands	r3, r2
20000a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
20000a48:	683b      	ldr	r3, [r7, #0]
20000a4a:	689a      	ldr	r2, [r3, #8]
20000a4c:	69fb      	ldr	r3, [r7, #28]
20000a4e:	005b      	lsls	r3, r3, #1
20000a50:	fa02 f303 	lsl.w	r3, r2, r3
20000a54:	69ba      	ldr	r2, [r7, #24]
20000a56:	4313      	orrs	r3, r2
20000a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
20000a5a:	687b      	ldr	r3, [r7, #4]
20000a5c:	69ba      	ldr	r2, [r7, #24]
20000a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20000a60:	683b      	ldr	r3, [r7, #0]
20000a62:	685b      	ldr	r3, [r3, #4]
20000a64:	f003 0303 	and.w	r3, r3, #3
20000a68:	2b02      	cmp	r3, #2
20000a6a:	d123      	bne.n	20000ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
20000a6c:	69fb      	ldr	r3, [r7, #28]
20000a6e:	08da      	lsrs	r2, r3, #3
20000a70:	687b      	ldr	r3, [r7, #4]
20000a72:	3208      	adds	r2, #8
20000a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20000a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20000a7a:	69fb      	ldr	r3, [r7, #28]
20000a7c:	f003 0307 	and.w	r3, r3, #7
20000a80:	009b      	lsls	r3, r3, #2
20000a82:	220f      	movs	r2, #15
20000a84:	fa02 f303 	lsl.w	r3, r2, r3
20000a88:	43db      	mvns	r3, r3
20000a8a:	69ba      	ldr	r2, [r7, #24]
20000a8c:	4013      	ands	r3, r2
20000a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
20000a90:	683b      	ldr	r3, [r7, #0]
20000a92:	691a      	ldr	r2, [r3, #16]
20000a94:	69fb      	ldr	r3, [r7, #28]
20000a96:	f003 0307 	and.w	r3, r3, #7
20000a9a:	009b      	lsls	r3, r3, #2
20000a9c:	fa02 f303 	lsl.w	r3, r2, r3
20000aa0:	69ba      	ldr	r2, [r7, #24]
20000aa2:	4313      	orrs	r3, r2
20000aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
20000aa6:	69fb      	ldr	r3, [r7, #28]
20000aa8:	08da      	lsrs	r2, r3, #3
20000aaa:	687b      	ldr	r3, [r7, #4]
20000aac:	3208      	adds	r2, #8
20000aae:	69b9      	ldr	r1, [r7, #24]
20000ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20000ab4:	687b      	ldr	r3, [r7, #4]
20000ab6:	681b      	ldr	r3, [r3, #0]
20000ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
20000aba:	69fb      	ldr	r3, [r7, #28]
20000abc:	005b      	lsls	r3, r3, #1
20000abe:	2203      	movs	r2, #3
20000ac0:	fa02 f303 	lsl.w	r3, r2, r3
20000ac4:	43db      	mvns	r3, r3
20000ac6:	69ba      	ldr	r2, [r7, #24]
20000ac8:	4013      	ands	r3, r2
20000aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
20000acc:	683b      	ldr	r3, [r7, #0]
20000ace:	685b      	ldr	r3, [r3, #4]
20000ad0:	f003 0203 	and.w	r2, r3, #3
20000ad4:	69fb      	ldr	r3, [r7, #28]
20000ad6:	005b      	lsls	r3, r3, #1
20000ad8:	fa02 f303 	lsl.w	r3, r2, r3
20000adc:	69ba      	ldr	r2, [r7, #24]
20000ade:	4313      	orrs	r3, r2
20000ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
20000ae2:	687b      	ldr	r3, [r7, #4]
20000ae4:	69ba      	ldr	r2, [r7, #24]
20000ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
20000ae8:	683b      	ldr	r3, [r7, #0]
20000aea:	685b      	ldr	r3, [r3, #4]
20000aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
20000af0:	2b00      	cmp	r3, #0
20000af2:	f000 80ae 	beq.w	20000c52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20000af6:	2300      	movs	r3, #0
20000af8:	60fb      	str	r3, [r7, #12]
20000afa:	4b5d      	ldr	r3, [pc, #372]	; (20000c70 <HAL_GPIO_Init+0x300>)
20000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20000afe:	4a5c      	ldr	r2, [pc, #368]	; (20000c70 <HAL_GPIO_Init+0x300>)
20000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20000b04:	6453      	str	r3, [r2, #68]	; 0x44
20000b06:	4b5a      	ldr	r3, [pc, #360]	; (20000c70 <HAL_GPIO_Init+0x300>)
20000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20000b0e:	60fb      	str	r3, [r7, #12]
20000b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
20000b12:	4a58      	ldr	r2, [pc, #352]	; (20000c74 <HAL_GPIO_Init+0x304>)
20000b14:	69fb      	ldr	r3, [r7, #28]
20000b16:	089b      	lsrs	r3, r3, #2
20000b18:	3302      	adds	r3, #2
20000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20000b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20000b20:	69fb      	ldr	r3, [r7, #28]
20000b22:	f003 0303 	and.w	r3, r3, #3
20000b26:	009b      	lsls	r3, r3, #2
20000b28:	220f      	movs	r2, #15
20000b2a:	fa02 f303 	lsl.w	r3, r2, r3
20000b2e:	43db      	mvns	r3, r3
20000b30:	69ba      	ldr	r2, [r7, #24]
20000b32:	4013      	ands	r3, r2
20000b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20000b36:	687b      	ldr	r3, [r7, #4]
20000b38:	4a4f      	ldr	r2, [pc, #316]	; (20000c78 <HAL_GPIO_Init+0x308>)
20000b3a:	4293      	cmp	r3, r2
20000b3c:	d025      	beq.n	20000b8a <HAL_GPIO_Init+0x21a>
20000b3e:	687b      	ldr	r3, [r7, #4]
20000b40:	4a4e      	ldr	r2, [pc, #312]	; (20000c7c <HAL_GPIO_Init+0x30c>)
20000b42:	4293      	cmp	r3, r2
20000b44:	d01f      	beq.n	20000b86 <HAL_GPIO_Init+0x216>
20000b46:	687b      	ldr	r3, [r7, #4]
20000b48:	4a4d      	ldr	r2, [pc, #308]	; (20000c80 <HAL_GPIO_Init+0x310>)
20000b4a:	4293      	cmp	r3, r2
20000b4c:	d019      	beq.n	20000b82 <HAL_GPIO_Init+0x212>
20000b4e:	687b      	ldr	r3, [r7, #4]
20000b50:	4a4c      	ldr	r2, [pc, #304]	; (20000c84 <HAL_GPIO_Init+0x314>)
20000b52:	4293      	cmp	r3, r2
20000b54:	d013      	beq.n	20000b7e <HAL_GPIO_Init+0x20e>
20000b56:	687b      	ldr	r3, [r7, #4]
20000b58:	4a4b      	ldr	r2, [pc, #300]	; (20000c88 <HAL_GPIO_Init+0x318>)
20000b5a:	4293      	cmp	r3, r2
20000b5c:	d00d      	beq.n	20000b7a <HAL_GPIO_Init+0x20a>
20000b5e:	687b      	ldr	r3, [r7, #4]
20000b60:	4a4a      	ldr	r2, [pc, #296]	; (20000c8c <HAL_GPIO_Init+0x31c>)
20000b62:	4293      	cmp	r3, r2
20000b64:	d007      	beq.n	20000b76 <HAL_GPIO_Init+0x206>
20000b66:	687b      	ldr	r3, [r7, #4]
20000b68:	4a49      	ldr	r2, [pc, #292]	; (20000c90 <HAL_GPIO_Init+0x320>)
20000b6a:	4293      	cmp	r3, r2
20000b6c:	d101      	bne.n	20000b72 <HAL_GPIO_Init+0x202>
20000b6e:	2306      	movs	r3, #6
20000b70:	e00c      	b.n	20000b8c <HAL_GPIO_Init+0x21c>
20000b72:	2307      	movs	r3, #7
20000b74:	e00a      	b.n	20000b8c <HAL_GPIO_Init+0x21c>
20000b76:	2305      	movs	r3, #5
20000b78:	e008      	b.n	20000b8c <HAL_GPIO_Init+0x21c>
20000b7a:	2304      	movs	r3, #4
20000b7c:	e006      	b.n	20000b8c <HAL_GPIO_Init+0x21c>
20000b7e:	2303      	movs	r3, #3
20000b80:	e004      	b.n	20000b8c <HAL_GPIO_Init+0x21c>
20000b82:	2302      	movs	r3, #2
20000b84:	e002      	b.n	20000b8c <HAL_GPIO_Init+0x21c>
20000b86:	2301      	movs	r3, #1
20000b88:	e000      	b.n	20000b8c <HAL_GPIO_Init+0x21c>
20000b8a:	2300      	movs	r3, #0
20000b8c:	69fa      	ldr	r2, [r7, #28]
20000b8e:	f002 0203 	and.w	r2, r2, #3
20000b92:	0092      	lsls	r2, r2, #2
20000b94:	4093      	lsls	r3, r2
20000b96:	69ba      	ldr	r2, [r7, #24]
20000b98:	4313      	orrs	r3, r2
20000b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
20000b9c:	4935      	ldr	r1, [pc, #212]	; (20000c74 <HAL_GPIO_Init+0x304>)
20000b9e:	69fb      	ldr	r3, [r7, #28]
20000ba0:	089b      	lsrs	r3, r3, #2
20000ba2:	3302      	adds	r3, #2
20000ba4:	69ba      	ldr	r2, [r7, #24]
20000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20000baa:	4b3a      	ldr	r3, [pc, #232]	; (20000c94 <HAL_GPIO_Init+0x324>)
20000bac:	689b      	ldr	r3, [r3, #8]
20000bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20000bb0:	693b      	ldr	r3, [r7, #16]
20000bb2:	43db      	mvns	r3, r3
20000bb4:	69ba      	ldr	r2, [r7, #24]
20000bb6:	4013      	ands	r3, r2
20000bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
20000bba:	683b      	ldr	r3, [r7, #0]
20000bbc:	685b      	ldr	r3, [r3, #4]
20000bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
20000bc2:	2b00      	cmp	r3, #0
20000bc4:	d003      	beq.n	20000bce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
20000bc6:	69ba      	ldr	r2, [r7, #24]
20000bc8:	693b      	ldr	r3, [r7, #16]
20000bca:	4313      	orrs	r3, r2
20000bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
20000bce:	4a31      	ldr	r2, [pc, #196]	; (20000c94 <HAL_GPIO_Init+0x324>)
20000bd0:	69bb      	ldr	r3, [r7, #24]
20000bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20000bd4:	4b2f      	ldr	r3, [pc, #188]	; (20000c94 <HAL_GPIO_Init+0x324>)
20000bd6:	68db      	ldr	r3, [r3, #12]
20000bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20000bda:	693b      	ldr	r3, [r7, #16]
20000bdc:	43db      	mvns	r3, r3
20000bde:	69ba      	ldr	r2, [r7, #24]
20000be0:	4013      	ands	r3, r2
20000be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
20000be4:	683b      	ldr	r3, [r7, #0]
20000be6:	685b      	ldr	r3, [r3, #4]
20000be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
20000bec:	2b00      	cmp	r3, #0
20000bee:	d003      	beq.n	20000bf8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
20000bf0:	69ba      	ldr	r2, [r7, #24]
20000bf2:	693b      	ldr	r3, [r7, #16]
20000bf4:	4313      	orrs	r3, r2
20000bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20000bf8:	4a26      	ldr	r2, [pc, #152]	; (20000c94 <HAL_GPIO_Init+0x324>)
20000bfa:	69bb      	ldr	r3, [r7, #24]
20000bfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
20000bfe:	4b25      	ldr	r3, [pc, #148]	; (20000c94 <HAL_GPIO_Init+0x324>)
20000c00:	685b      	ldr	r3, [r3, #4]
20000c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20000c04:	693b      	ldr	r3, [r7, #16]
20000c06:	43db      	mvns	r3, r3
20000c08:	69ba      	ldr	r2, [r7, #24]
20000c0a:	4013      	ands	r3, r2
20000c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
20000c0e:	683b      	ldr	r3, [r7, #0]
20000c10:	685b      	ldr	r3, [r3, #4]
20000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20000c16:	2b00      	cmp	r3, #0
20000c18:	d003      	beq.n	20000c22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
20000c1a:	69ba      	ldr	r2, [r7, #24]
20000c1c:	693b      	ldr	r3, [r7, #16]
20000c1e:	4313      	orrs	r3, r2
20000c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
20000c22:	4a1c      	ldr	r2, [pc, #112]	; (20000c94 <HAL_GPIO_Init+0x324>)
20000c24:	69bb      	ldr	r3, [r7, #24]
20000c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20000c28:	4b1a      	ldr	r3, [pc, #104]	; (20000c94 <HAL_GPIO_Init+0x324>)
20000c2a:	681b      	ldr	r3, [r3, #0]
20000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20000c2e:	693b      	ldr	r3, [r7, #16]
20000c30:	43db      	mvns	r3, r3
20000c32:	69ba      	ldr	r2, [r7, #24]
20000c34:	4013      	ands	r3, r2
20000c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
20000c38:	683b      	ldr	r3, [r7, #0]
20000c3a:	685b      	ldr	r3, [r3, #4]
20000c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000c40:	2b00      	cmp	r3, #0
20000c42:	d003      	beq.n	20000c4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
20000c44:	69ba      	ldr	r2, [r7, #24]
20000c46:	693b      	ldr	r3, [r7, #16]
20000c48:	4313      	orrs	r3, r2
20000c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20000c4c:	4a11      	ldr	r2, [pc, #68]	; (20000c94 <HAL_GPIO_Init+0x324>)
20000c4e:	69bb      	ldr	r3, [r7, #24]
20000c50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
20000c52:	69fb      	ldr	r3, [r7, #28]
20000c54:	3301      	adds	r3, #1
20000c56:	61fb      	str	r3, [r7, #28]
20000c58:	69fb      	ldr	r3, [r7, #28]
20000c5a:	2b0f      	cmp	r3, #15
20000c5c:	f67f ae96 	bls.w	2000098c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
20000c60:	bf00      	nop
20000c62:	bf00      	nop
20000c64:	3724      	adds	r7, #36	; 0x24
20000c66:	46bd      	mov	sp, r7
20000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
20000c6c:	4770      	bx	lr
20000c6e:	bf00      	nop
20000c70:	40023800 	.word	0x40023800
20000c74:	40013800 	.word	0x40013800
20000c78:	40020000 	.word	0x40020000
20000c7c:	40020400 	.word	0x40020400
20000c80:	40020800 	.word	0x40020800
20000c84:	40020c00 	.word	0x40020c00
20000c88:	40021000 	.word	0x40021000
20000c8c:	40021400 	.word	0x40021400
20000c90:	40021800 	.word	0x40021800
20000c94:	40013c00 	.word	0x40013c00

20000c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20000c98:	b480      	push	{r7}
20000c9a:	b083      	sub	sp, #12
20000c9c:	af00      	add	r7, sp, #0
20000c9e:	6078      	str	r0, [r7, #4]
20000ca0:	460b      	mov	r3, r1
20000ca2:	807b      	strh	r3, [r7, #2]
20000ca4:	4613      	mov	r3, r2
20000ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20000ca8:	787b      	ldrb	r3, [r7, #1]
20000caa:	2b00      	cmp	r3, #0
20000cac:	d003      	beq.n	20000cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
20000cae:	887a      	ldrh	r2, [r7, #2]
20000cb0:	687b      	ldr	r3, [r7, #4]
20000cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
20000cb4:	e003      	b.n	20000cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
20000cb6:	887b      	ldrh	r3, [r7, #2]
20000cb8:	041a      	lsls	r2, r3, #16
20000cba:	687b      	ldr	r3, [r7, #4]
20000cbc:	619a      	str	r2, [r3, #24]
}
20000cbe:	bf00      	nop
20000cc0:	370c      	adds	r7, #12
20000cc2:	46bd      	mov	sp, r7
20000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
20000cc8:	4770      	bx	lr
	...

20000ccc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
20000ccc:	b580      	push	{r7, lr}
20000cce:	b082      	sub	sp, #8
20000cd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
20000cd2:	2300      	movs	r3, #0
20000cd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
20000cd6:	2300      	movs	r3, #0
20000cd8:	603b      	str	r3, [r7, #0]
20000cda:	4b20      	ldr	r3, [pc, #128]	; (20000d5c <HAL_PWREx_EnableOverDrive+0x90>)
20000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000cde:	4a1f      	ldr	r2, [pc, #124]	; (20000d5c <HAL_PWREx_EnableOverDrive+0x90>)
20000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20000ce4:	6413      	str	r3, [r2, #64]	; 0x40
20000ce6:	4b1d      	ldr	r3, [pc, #116]	; (20000d5c <HAL_PWREx_EnableOverDrive+0x90>)
20000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20000cee:	603b      	str	r3, [r7, #0]
20000cf0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
20000cf2:	4b1b      	ldr	r3, [pc, #108]	; (20000d60 <HAL_PWREx_EnableOverDrive+0x94>)
20000cf4:	2201      	movs	r2, #1
20000cf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20000cf8:	f7ff fd24 	bl	20000744 <HAL_GetTick>
20000cfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20000cfe:	e009      	b.n	20000d14 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20000d00:	f7ff fd20 	bl	20000744 <HAL_GetTick>
20000d04:	4602      	mov	r2, r0
20000d06:	687b      	ldr	r3, [r7, #4]
20000d08:	1ad3      	subs	r3, r2, r3
20000d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20000d0e:	d901      	bls.n	20000d14 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
20000d10:	2303      	movs	r3, #3
20000d12:	e01f      	b.n	20000d54 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20000d14:	4b13      	ldr	r3, [pc, #76]	; (20000d64 <HAL_PWREx_EnableOverDrive+0x98>)
20000d16:	685b      	ldr	r3, [r3, #4]
20000d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20000d20:	d1ee      	bne.n	20000d00 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20000d22:	4b11      	ldr	r3, [pc, #68]	; (20000d68 <HAL_PWREx_EnableOverDrive+0x9c>)
20000d24:	2201      	movs	r2, #1
20000d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20000d28:	f7ff fd0c 	bl	20000744 <HAL_GetTick>
20000d2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20000d2e:	e009      	b.n	20000d44 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20000d30:	f7ff fd08 	bl	20000744 <HAL_GetTick>
20000d34:	4602      	mov	r2, r0
20000d36:	687b      	ldr	r3, [r7, #4]
20000d38:	1ad3      	subs	r3, r2, r3
20000d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20000d3e:	d901      	bls.n	20000d44 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
20000d40:	2303      	movs	r3, #3
20000d42:	e007      	b.n	20000d54 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20000d44:	4b07      	ldr	r3, [pc, #28]	; (20000d64 <HAL_PWREx_EnableOverDrive+0x98>)
20000d46:	685b      	ldr	r3, [r3, #4]
20000d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20000d4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
20000d50:	d1ee      	bne.n	20000d30 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
20000d52:	2300      	movs	r3, #0
}
20000d54:	4618      	mov	r0, r3
20000d56:	3708      	adds	r7, #8
20000d58:	46bd      	mov	sp, r7
20000d5a:	bd80      	pop	{r7, pc}
20000d5c:	40023800 	.word	0x40023800
20000d60:	420e0040 	.word	0x420e0040
20000d64:	40007000 	.word	0x40007000
20000d68:	420e0044 	.word	0x420e0044

20000d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20000d6c:	b580      	push	{r7, lr}
20000d6e:	b086      	sub	sp, #24
20000d70:	af00      	add	r7, sp, #0
20000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
20000d74:	687b      	ldr	r3, [r7, #4]
20000d76:	2b00      	cmp	r3, #0
20000d78:	d101      	bne.n	20000d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
20000d7a:	2301      	movs	r3, #1
20000d7c:	e26f      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20000d7e:	687b      	ldr	r3, [r7, #4]
20000d80:	681b      	ldr	r3, [r3, #0]
20000d82:	f003 0301 	and.w	r3, r3, #1
20000d86:	2b00      	cmp	r3, #0
20000d88:	d075      	beq.n	20000e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20000d8a:	4b88      	ldr	r3, [pc, #544]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000d8c:	689b      	ldr	r3, [r3, #8]
20000d8e:	f003 030c 	and.w	r3, r3, #12
20000d92:	2b04      	cmp	r3, #4
20000d94:	d00c      	beq.n	20000db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20000d96:	4b85      	ldr	r3, [pc, #532]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000d98:	689b      	ldr	r3, [r3, #8]
20000d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20000d9e:	2b08      	cmp	r3, #8
20000da0:	d112      	bne.n	20000dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20000da2:	4b82      	ldr	r3, [pc, #520]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000da4:	685b      	ldr	r3, [r3, #4]
20000da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20000daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20000dae:	d10b      	bne.n	20000dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20000db0:	4b7e      	ldr	r3, [pc, #504]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000db2:	681b      	ldr	r3, [r3, #0]
20000db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20000db8:	2b00      	cmp	r3, #0
20000dba:	d05b      	beq.n	20000e74 <HAL_RCC_OscConfig+0x108>
20000dbc:	687b      	ldr	r3, [r7, #4]
20000dbe:	685b      	ldr	r3, [r3, #4]
20000dc0:	2b00      	cmp	r3, #0
20000dc2:	d157      	bne.n	20000e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
20000dc4:	2301      	movs	r3, #1
20000dc6:	e24a      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20000dc8:	687b      	ldr	r3, [r7, #4]
20000dca:	685b      	ldr	r3, [r3, #4]
20000dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20000dd0:	d106      	bne.n	20000de0 <HAL_RCC_OscConfig+0x74>
20000dd2:	4b76      	ldr	r3, [pc, #472]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000dd4:	681b      	ldr	r3, [r3, #0]
20000dd6:	4a75      	ldr	r2, [pc, #468]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000ddc:	6013      	str	r3, [r2, #0]
20000dde:	e01d      	b.n	20000e1c <HAL_RCC_OscConfig+0xb0>
20000de0:	687b      	ldr	r3, [r7, #4]
20000de2:	685b      	ldr	r3, [r3, #4]
20000de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20000de8:	d10c      	bne.n	20000e04 <HAL_RCC_OscConfig+0x98>
20000dea:	4b70      	ldr	r3, [pc, #448]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000dec:	681b      	ldr	r3, [r3, #0]
20000dee:	4a6f      	ldr	r2, [pc, #444]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20000df4:	6013      	str	r3, [r2, #0]
20000df6:	4b6d      	ldr	r3, [pc, #436]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000df8:	681b      	ldr	r3, [r3, #0]
20000dfa:	4a6c      	ldr	r2, [pc, #432]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000e00:	6013      	str	r3, [r2, #0]
20000e02:	e00b      	b.n	20000e1c <HAL_RCC_OscConfig+0xb0>
20000e04:	4b69      	ldr	r3, [pc, #420]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000e06:	681b      	ldr	r3, [r3, #0]
20000e08:	4a68      	ldr	r2, [pc, #416]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000e0e:	6013      	str	r3, [r2, #0]
20000e10:	4b66      	ldr	r3, [pc, #408]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000e12:	681b      	ldr	r3, [r3, #0]
20000e14:	4a65      	ldr	r2, [pc, #404]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
20000e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
20000e1c:	687b      	ldr	r3, [r7, #4]
20000e1e:	685b      	ldr	r3, [r3, #4]
20000e20:	2b00      	cmp	r3, #0
20000e22:	d013      	beq.n	20000e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20000e24:	f7ff fc8e 	bl	20000744 <HAL_GetTick>
20000e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20000e2a:	e008      	b.n	20000e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20000e2c:	f7ff fc8a 	bl	20000744 <HAL_GetTick>
20000e30:	4602      	mov	r2, r0
20000e32:	693b      	ldr	r3, [r7, #16]
20000e34:	1ad3      	subs	r3, r2, r3
20000e36:	2b64      	cmp	r3, #100	; 0x64
20000e38:	d901      	bls.n	20000e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
20000e3a:	2303      	movs	r3, #3
20000e3c:	e20f      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20000e3e:	4b5b      	ldr	r3, [pc, #364]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000e40:	681b      	ldr	r3, [r3, #0]
20000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20000e46:	2b00      	cmp	r3, #0
20000e48:	d0f0      	beq.n	20000e2c <HAL_RCC_OscConfig+0xc0>
20000e4a:	e014      	b.n	20000e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20000e4c:	f7ff fc7a 	bl	20000744 <HAL_GetTick>
20000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20000e52:	e008      	b.n	20000e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20000e54:	f7ff fc76 	bl	20000744 <HAL_GetTick>
20000e58:	4602      	mov	r2, r0
20000e5a:	693b      	ldr	r3, [r7, #16]
20000e5c:	1ad3      	subs	r3, r2, r3
20000e5e:	2b64      	cmp	r3, #100	; 0x64
20000e60:	d901      	bls.n	20000e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
20000e62:	2303      	movs	r3, #3
20000e64:	e1fb      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20000e66:	4b51      	ldr	r3, [pc, #324]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000e68:	681b      	ldr	r3, [r3, #0]
20000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20000e6e:	2b00      	cmp	r3, #0
20000e70:	d1f0      	bne.n	20000e54 <HAL_RCC_OscConfig+0xe8>
20000e72:	e000      	b.n	20000e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20000e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20000e76:	687b      	ldr	r3, [r7, #4]
20000e78:	681b      	ldr	r3, [r3, #0]
20000e7a:	f003 0302 	and.w	r3, r3, #2
20000e7e:	2b00      	cmp	r3, #0
20000e80:	d063      	beq.n	20000f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20000e82:	4b4a      	ldr	r3, [pc, #296]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000e84:	689b      	ldr	r3, [r3, #8]
20000e86:	f003 030c 	and.w	r3, r3, #12
20000e8a:	2b00      	cmp	r3, #0
20000e8c:	d00b      	beq.n	20000ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20000e8e:	4b47      	ldr	r3, [pc, #284]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000e90:	689b      	ldr	r3, [r3, #8]
20000e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20000e96:	2b08      	cmp	r3, #8
20000e98:	d11c      	bne.n	20000ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20000e9a:	4b44      	ldr	r3, [pc, #272]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000e9c:	685b      	ldr	r3, [r3, #4]
20000e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20000ea2:	2b00      	cmp	r3, #0
20000ea4:	d116      	bne.n	20000ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20000ea6:	4b41      	ldr	r3, [pc, #260]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000ea8:	681b      	ldr	r3, [r3, #0]
20000eaa:	f003 0302 	and.w	r3, r3, #2
20000eae:	2b00      	cmp	r3, #0
20000eb0:	d005      	beq.n	20000ebe <HAL_RCC_OscConfig+0x152>
20000eb2:	687b      	ldr	r3, [r7, #4]
20000eb4:	68db      	ldr	r3, [r3, #12]
20000eb6:	2b01      	cmp	r3, #1
20000eb8:	d001      	beq.n	20000ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
20000eba:	2301      	movs	r3, #1
20000ebc:	e1cf      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20000ebe:	4b3b      	ldr	r3, [pc, #236]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000ec0:	681b      	ldr	r3, [r3, #0]
20000ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20000ec6:	687b      	ldr	r3, [r7, #4]
20000ec8:	691b      	ldr	r3, [r3, #16]
20000eca:	00db      	lsls	r3, r3, #3
20000ecc:	4937      	ldr	r1, [pc, #220]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000ece:	4313      	orrs	r3, r2
20000ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20000ed2:	e03a      	b.n	20000f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
20000ed4:	687b      	ldr	r3, [r7, #4]
20000ed6:	68db      	ldr	r3, [r3, #12]
20000ed8:	2b00      	cmp	r3, #0
20000eda:	d020      	beq.n	20000f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20000edc:	4b34      	ldr	r3, [pc, #208]	; (20000fb0 <HAL_RCC_OscConfig+0x244>)
20000ede:	2201      	movs	r2, #1
20000ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20000ee2:	f7ff fc2f 	bl	20000744 <HAL_GetTick>
20000ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20000ee8:	e008      	b.n	20000efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20000eea:	f7ff fc2b 	bl	20000744 <HAL_GetTick>
20000eee:	4602      	mov	r2, r0
20000ef0:	693b      	ldr	r3, [r7, #16]
20000ef2:	1ad3      	subs	r3, r2, r3
20000ef4:	2b02      	cmp	r3, #2
20000ef6:	d901      	bls.n	20000efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
20000ef8:	2303      	movs	r3, #3
20000efa:	e1b0      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20000efc:	4b2b      	ldr	r3, [pc, #172]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000efe:	681b      	ldr	r3, [r3, #0]
20000f00:	f003 0302 	and.w	r3, r3, #2
20000f04:	2b00      	cmp	r3, #0
20000f06:	d0f0      	beq.n	20000eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20000f08:	4b28      	ldr	r3, [pc, #160]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000f0a:	681b      	ldr	r3, [r3, #0]
20000f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20000f10:	687b      	ldr	r3, [r7, #4]
20000f12:	691b      	ldr	r3, [r3, #16]
20000f14:	00db      	lsls	r3, r3, #3
20000f16:	4925      	ldr	r1, [pc, #148]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000f18:	4313      	orrs	r3, r2
20000f1a:	600b      	str	r3, [r1, #0]
20000f1c:	e015      	b.n	20000f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
20000f1e:	4b24      	ldr	r3, [pc, #144]	; (20000fb0 <HAL_RCC_OscConfig+0x244>)
20000f20:	2200      	movs	r2, #0
20000f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20000f24:	f7ff fc0e 	bl	20000744 <HAL_GetTick>
20000f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20000f2a:	e008      	b.n	20000f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20000f2c:	f7ff fc0a 	bl	20000744 <HAL_GetTick>
20000f30:	4602      	mov	r2, r0
20000f32:	693b      	ldr	r3, [r7, #16]
20000f34:	1ad3      	subs	r3, r2, r3
20000f36:	2b02      	cmp	r3, #2
20000f38:	d901      	bls.n	20000f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
20000f3a:	2303      	movs	r3, #3
20000f3c:	e18f      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20000f3e:	4b1b      	ldr	r3, [pc, #108]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000f40:	681b      	ldr	r3, [r3, #0]
20000f42:	f003 0302 	and.w	r3, r3, #2
20000f46:	2b00      	cmp	r3, #0
20000f48:	d1f0      	bne.n	20000f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20000f4a:	687b      	ldr	r3, [r7, #4]
20000f4c:	681b      	ldr	r3, [r3, #0]
20000f4e:	f003 0308 	and.w	r3, r3, #8
20000f52:	2b00      	cmp	r3, #0
20000f54:	d036      	beq.n	20000fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
20000f56:	687b      	ldr	r3, [r7, #4]
20000f58:	695b      	ldr	r3, [r3, #20]
20000f5a:	2b00      	cmp	r3, #0
20000f5c:	d016      	beq.n	20000f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
20000f5e:	4b15      	ldr	r3, [pc, #84]	; (20000fb4 <HAL_RCC_OscConfig+0x248>)
20000f60:	2201      	movs	r2, #1
20000f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20000f64:	f7ff fbee 	bl	20000744 <HAL_GetTick>
20000f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20000f6a:	e008      	b.n	20000f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20000f6c:	f7ff fbea 	bl	20000744 <HAL_GetTick>
20000f70:	4602      	mov	r2, r0
20000f72:	693b      	ldr	r3, [r7, #16]
20000f74:	1ad3      	subs	r3, r2, r3
20000f76:	2b02      	cmp	r3, #2
20000f78:	d901      	bls.n	20000f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
20000f7a:	2303      	movs	r3, #3
20000f7c:	e16f      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20000f7e:	4b0b      	ldr	r3, [pc, #44]	; (20000fac <HAL_RCC_OscConfig+0x240>)
20000f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000f82:	f003 0302 	and.w	r3, r3, #2
20000f86:	2b00      	cmp	r3, #0
20000f88:	d0f0      	beq.n	20000f6c <HAL_RCC_OscConfig+0x200>
20000f8a:	e01b      	b.n	20000fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20000f8c:	4b09      	ldr	r3, [pc, #36]	; (20000fb4 <HAL_RCC_OscConfig+0x248>)
20000f8e:	2200      	movs	r2, #0
20000f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
20000f92:	f7ff fbd7 	bl	20000744 <HAL_GetTick>
20000f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20000f98:	e00e      	b.n	20000fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20000f9a:	f7ff fbd3 	bl	20000744 <HAL_GetTick>
20000f9e:	4602      	mov	r2, r0
20000fa0:	693b      	ldr	r3, [r7, #16]
20000fa2:	1ad3      	subs	r3, r2, r3
20000fa4:	2b02      	cmp	r3, #2
20000fa6:	d907      	bls.n	20000fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
20000fa8:	2303      	movs	r3, #3
20000faa:	e158      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
20000fac:	40023800 	.word	0x40023800
20000fb0:	42470000 	.word	0x42470000
20000fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20000fb8:	4b88      	ldr	r3, [pc, #544]	; (200011dc <HAL_RCC_OscConfig+0x470>)
20000fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000fbc:	f003 0302 	and.w	r3, r3, #2
20000fc0:	2b00      	cmp	r3, #0
20000fc2:	d1ea      	bne.n	20000f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20000fc4:	687b      	ldr	r3, [r7, #4]
20000fc6:	681b      	ldr	r3, [r3, #0]
20000fc8:	f003 0304 	and.w	r3, r3, #4
20000fcc:	2b00      	cmp	r3, #0
20000fce:	f000 8097 	beq.w	20001100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
20000fd2:	2300      	movs	r3, #0
20000fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
20000fd6:	4b81      	ldr	r3, [pc, #516]	; (200011dc <HAL_RCC_OscConfig+0x470>)
20000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20000fde:	2b00      	cmp	r3, #0
20000fe0:	d10f      	bne.n	20001002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
20000fe2:	2300      	movs	r3, #0
20000fe4:	60bb      	str	r3, [r7, #8]
20000fe6:	4b7d      	ldr	r3, [pc, #500]	; (200011dc <HAL_RCC_OscConfig+0x470>)
20000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000fea:	4a7c      	ldr	r2, [pc, #496]	; (200011dc <HAL_RCC_OscConfig+0x470>)
20000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20000ff0:	6413      	str	r3, [r2, #64]	; 0x40
20000ff2:	4b7a      	ldr	r3, [pc, #488]	; (200011dc <HAL_RCC_OscConfig+0x470>)
20000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20000ffa:	60bb      	str	r3, [r7, #8]
20000ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
20000ffe:	2301      	movs	r3, #1
20001000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20001002:	4b77      	ldr	r3, [pc, #476]	; (200011e0 <HAL_RCC_OscConfig+0x474>)
20001004:	681b      	ldr	r3, [r3, #0]
20001006:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000100a:	2b00      	cmp	r3, #0
2000100c:	d118      	bne.n	20001040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
2000100e:	4b74      	ldr	r3, [pc, #464]	; (200011e0 <HAL_RCC_OscConfig+0x474>)
20001010:	681b      	ldr	r3, [r3, #0]
20001012:	4a73      	ldr	r2, [pc, #460]	; (200011e0 <HAL_RCC_OscConfig+0x474>)
20001014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000101a:	f7ff fb93 	bl	20000744 <HAL_GetTick>
2000101e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20001020:	e008      	b.n	20001034 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20001022:	f7ff fb8f 	bl	20000744 <HAL_GetTick>
20001026:	4602      	mov	r2, r0
20001028:	693b      	ldr	r3, [r7, #16]
2000102a:	1ad3      	subs	r3, r2, r3
2000102c:	2b02      	cmp	r3, #2
2000102e:	d901      	bls.n	20001034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
20001030:	2303      	movs	r3, #3
20001032:	e114      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20001034:	4b6a      	ldr	r3, [pc, #424]	; (200011e0 <HAL_RCC_OscConfig+0x474>)
20001036:	681b      	ldr	r3, [r3, #0]
20001038:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000103c:	2b00      	cmp	r3, #0
2000103e:	d0f0      	beq.n	20001022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20001040:	687b      	ldr	r3, [r7, #4]
20001042:	689b      	ldr	r3, [r3, #8]
20001044:	2b01      	cmp	r3, #1
20001046:	d106      	bne.n	20001056 <HAL_RCC_OscConfig+0x2ea>
20001048:	4b64      	ldr	r3, [pc, #400]	; (200011dc <HAL_RCC_OscConfig+0x470>)
2000104a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000104c:	4a63      	ldr	r2, [pc, #396]	; (200011dc <HAL_RCC_OscConfig+0x470>)
2000104e:	f043 0301 	orr.w	r3, r3, #1
20001052:	6713      	str	r3, [r2, #112]	; 0x70
20001054:	e01c      	b.n	20001090 <HAL_RCC_OscConfig+0x324>
20001056:	687b      	ldr	r3, [r7, #4]
20001058:	689b      	ldr	r3, [r3, #8]
2000105a:	2b05      	cmp	r3, #5
2000105c:	d10c      	bne.n	20001078 <HAL_RCC_OscConfig+0x30c>
2000105e:	4b5f      	ldr	r3, [pc, #380]	; (200011dc <HAL_RCC_OscConfig+0x470>)
20001060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001062:	4a5e      	ldr	r2, [pc, #376]	; (200011dc <HAL_RCC_OscConfig+0x470>)
20001064:	f043 0304 	orr.w	r3, r3, #4
20001068:	6713      	str	r3, [r2, #112]	; 0x70
2000106a:	4b5c      	ldr	r3, [pc, #368]	; (200011dc <HAL_RCC_OscConfig+0x470>)
2000106c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000106e:	4a5b      	ldr	r2, [pc, #364]	; (200011dc <HAL_RCC_OscConfig+0x470>)
20001070:	f043 0301 	orr.w	r3, r3, #1
20001074:	6713      	str	r3, [r2, #112]	; 0x70
20001076:	e00b      	b.n	20001090 <HAL_RCC_OscConfig+0x324>
20001078:	4b58      	ldr	r3, [pc, #352]	; (200011dc <HAL_RCC_OscConfig+0x470>)
2000107a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000107c:	4a57      	ldr	r2, [pc, #348]	; (200011dc <HAL_RCC_OscConfig+0x470>)
2000107e:	f023 0301 	bic.w	r3, r3, #1
20001082:	6713      	str	r3, [r2, #112]	; 0x70
20001084:	4b55      	ldr	r3, [pc, #340]	; (200011dc <HAL_RCC_OscConfig+0x470>)
20001086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001088:	4a54      	ldr	r2, [pc, #336]	; (200011dc <HAL_RCC_OscConfig+0x470>)
2000108a:	f023 0304 	bic.w	r3, r3, #4
2000108e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20001090:	687b      	ldr	r3, [r7, #4]
20001092:	689b      	ldr	r3, [r3, #8]
20001094:	2b00      	cmp	r3, #0
20001096:	d015      	beq.n	200010c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20001098:	f7ff fb54 	bl	20000744 <HAL_GetTick>
2000109c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000109e:	e00a      	b.n	200010b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
200010a0:	f7ff fb50 	bl	20000744 <HAL_GetTick>
200010a4:	4602      	mov	r2, r0
200010a6:	693b      	ldr	r3, [r7, #16]
200010a8:	1ad3      	subs	r3, r2, r3
200010aa:	f241 3288 	movw	r2, #5000	; 0x1388
200010ae:	4293      	cmp	r3, r2
200010b0:	d901      	bls.n	200010b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
200010b2:	2303      	movs	r3, #3
200010b4:	e0d3      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200010b6:	4b49      	ldr	r3, [pc, #292]	; (200011dc <HAL_RCC_OscConfig+0x470>)
200010b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200010ba:	f003 0302 	and.w	r3, r3, #2
200010be:	2b00      	cmp	r3, #0
200010c0:	d0ee      	beq.n	200010a0 <HAL_RCC_OscConfig+0x334>
200010c2:	e014      	b.n	200010ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
200010c4:	f7ff fb3e 	bl	20000744 <HAL_GetTick>
200010c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
200010ca:	e00a      	b.n	200010e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
200010cc:	f7ff fb3a 	bl	20000744 <HAL_GetTick>
200010d0:	4602      	mov	r2, r0
200010d2:	693b      	ldr	r3, [r7, #16]
200010d4:	1ad3      	subs	r3, r2, r3
200010d6:	f241 3288 	movw	r2, #5000	; 0x1388
200010da:	4293      	cmp	r3, r2
200010dc:	d901      	bls.n	200010e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
200010de:	2303      	movs	r3, #3
200010e0:	e0bd      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
200010e2:	4b3e      	ldr	r3, [pc, #248]	; (200011dc <HAL_RCC_OscConfig+0x470>)
200010e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200010e6:	f003 0302 	and.w	r3, r3, #2
200010ea:	2b00      	cmp	r3, #0
200010ec:	d1ee      	bne.n	200010cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
200010ee:	7dfb      	ldrb	r3, [r7, #23]
200010f0:	2b01      	cmp	r3, #1
200010f2:	d105      	bne.n	20001100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
200010f4:	4b39      	ldr	r3, [pc, #228]	; (200011dc <HAL_RCC_OscConfig+0x470>)
200010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200010f8:	4a38      	ldr	r2, [pc, #224]	; (200011dc <HAL_RCC_OscConfig+0x470>)
200010fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
200010fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20001100:	687b      	ldr	r3, [r7, #4]
20001102:	699b      	ldr	r3, [r3, #24]
20001104:	2b00      	cmp	r3, #0
20001106:	f000 80a9 	beq.w	2000125c <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2000110a:	4b34      	ldr	r3, [pc, #208]	; (200011dc <HAL_RCC_OscConfig+0x470>)
2000110c:	689b      	ldr	r3, [r3, #8]
2000110e:	f003 030c 	and.w	r3, r3, #12
20001112:	2b08      	cmp	r3, #8
20001114:	d05c      	beq.n	200011d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20001116:	687b      	ldr	r3, [r7, #4]
20001118:	699b      	ldr	r3, [r3, #24]
2000111a:	2b02      	cmp	r3, #2
2000111c:	d141      	bne.n	200011a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000111e:	4b31      	ldr	r3, [pc, #196]	; (200011e4 <HAL_RCC_OscConfig+0x478>)
20001120:	2200      	movs	r2, #0
20001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
20001124:	f7ff fb0e 	bl	20000744 <HAL_GetTick>
20001128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000112a:	e008      	b.n	2000113e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000112c:	f7ff fb0a 	bl	20000744 <HAL_GetTick>
20001130:	4602      	mov	r2, r0
20001132:	693b      	ldr	r3, [r7, #16]
20001134:	1ad3      	subs	r3, r2, r3
20001136:	2b02      	cmp	r3, #2
20001138:	d901      	bls.n	2000113e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
2000113a:	2303      	movs	r3, #3
2000113c:	e08f      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000113e:	4b27      	ldr	r3, [pc, #156]	; (200011dc <HAL_RCC_OscConfig+0x470>)
20001140:	681b      	ldr	r3, [r3, #0]
20001142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20001146:	2b00      	cmp	r3, #0
20001148:	d1f0      	bne.n	2000112c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
2000114a:	687b      	ldr	r3, [r7, #4]
2000114c:	69da      	ldr	r2, [r3, #28]
2000114e:	687b      	ldr	r3, [r7, #4]
20001150:	6a1b      	ldr	r3, [r3, #32]
20001152:	431a      	orrs	r2, r3
20001154:	687b      	ldr	r3, [r7, #4]
20001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001158:	019b      	lsls	r3, r3, #6
2000115a:	431a      	orrs	r2, r3
2000115c:	687b      	ldr	r3, [r7, #4]
2000115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20001160:	085b      	lsrs	r3, r3, #1
20001162:	3b01      	subs	r3, #1
20001164:	041b      	lsls	r3, r3, #16
20001166:	431a      	orrs	r2, r3
20001168:	687b      	ldr	r3, [r7, #4]
2000116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000116c:	061b      	lsls	r3, r3, #24
2000116e:	491b      	ldr	r1, [pc, #108]	; (200011dc <HAL_RCC_OscConfig+0x470>)
20001170:	4313      	orrs	r3, r2
20001172:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20001174:	4b1b      	ldr	r3, [pc, #108]	; (200011e4 <HAL_RCC_OscConfig+0x478>)
20001176:	2201      	movs	r2, #1
20001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000117a:	f7ff fae3 	bl	20000744 <HAL_GetTick>
2000117e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20001180:	e008      	b.n	20001194 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20001182:	f7ff fadf 	bl	20000744 <HAL_GetTick>
20001186:	4602      	mov	r2, r0
20001188:	693b      	ldr	r3, [r7, #16]
2000118a:	1ad3      	subs	r3, r2, r3
2000118c:	2b02      	cmp	r3, #2
2000118e:	d901      	bls.n	20001194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
20001190:	2303      	movs	r3, #3
20001192:	e064      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20001194:	4b11      	ldr	r3, [pc, #68]	; (200011dc <HAL_RCC_OscConfig+0x470>)
20001196:	681b      	ldr	r3, [r3, #0]
20001198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000119c:	2b00      	cmp	r3, #0
2000119e:	d0f0      	beq.n	20001182 <HAL_RCC_OscConfig+0x416>
200011a0:	e05c      	b.n	2000125c <HAL_RCC_OscConfig+0x4f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
200011a2:	4b10      	ldr	r3, [pc, #64]	; (200011e4 <HAL_RCC_OscConfig+0x478>)
200011a4:	2200      	movs	r2, #0
200011a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200011a8:	f7ff facc 	bl	20000744 <HAL_GetTick>
200011ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200011ae:	e008      	b.n	200011c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200011b0:	f7ff fac8 	bl	20000744 <HAL_GetTick>
200011b4:	4602      	mov	r2, r0
200011b6:	693b      	ldr	r3, [r7, #16]
200011b8:	1ad3      	subs	r3, r2, r3
200011ba:	2b02      	cmp	r3, #2
200011bc:	d901      	bls.n	200011c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
200011be:	2303      	movs	r3, #3
200011c0:	e04d      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200011c2:	4b06      	ldr	r3, [pc, #24]	; (200011dc <HAL_RCC_OscConfig+0x470>)
200011c4:	681b      	ldr	r3, [r3, #0]
200011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200011ca:	2b00      	cmp	r3, #0
200011cc:	d1f0      	bne.n	200011b0 <HAL_RCC_OscConfig+0x444>
200011ce:	e045      	b.n	2000125c <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
200011d0:	687b      	ldr	r3, [r7, #4]
200011d2:	699b      	ldr	r3, [r3, #24]
200011d4:	2b01      	cmp	r3, #1
200011d6:	d107      	bne.n	200011e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
200011d8:	2301      	movs	r3, #1
200011da:	e040      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
200011dc:	40023800 	.word	0x40023800
200011e0:	40007000 	.word	0x40007000
200011e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
200011e8:	4b1f      	ldr	r3, [pc, #124]	; (20001268 <HAL_RCC_OscConfig+0x4fc>)
200011ea:	685b      	ldr	r3, [r3, #4]
200011ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
200011ee:	687b      	ldr	r3, [r7, #4]
200011f0:	699b      	ldr	r3, [r3, #24]
200011f2:	2b01      	cmp	r3, #1
200011f4:	d030      	beq.n	20001258 <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
200011f6:	68fb      	ldr	r3, [r7, #12]
200011f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
200011fc:	687b      	ldr	r3, [r7, #4]
200011fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20001200:	429a      	cmp	r2, r3
20001202:	d129      	bne.n	20001258 <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20001204:	68fb      	ldr	r3, [r7, #12]
20001206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000120a:	687b      	ldr	r3, [r7, #4]
2000120c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000120e:	429a      	cmp	r2, r3
20001210:	d122      	bne.n	20001258 <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20001212:	68fa      	ldr	r2, [r7, #12]
20001214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
20001218:	4013      	ands	r3, r2
2000121a:	687a      	ldr	r2, [r7, #4]
2000121c:	6a52      	ldr	r2, [r2, #36]	; 0x24
2000121e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20001220:	4293      	cmp	r3, r2
20001222:	d119      	bne.n	20001258 <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20001224:	68fb      	ldr	r3, [r7, #12]
20001226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2000122a:	687b      	ldr	r3, [r7, #4]
2000122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000122e:	085b      	lsrs	r3, r3, #1
20001230:	3b01      	subs	r3, #1
20001232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20001234:	429a      	cmp	r2, r3
20001236:	d10f      	bne.n	20001258 <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20001238:	68fb      	ldr	r3, [r7, #12]
2000123a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
2000123e:	687b      	ldr	r3, [r7, #4]
20001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20001244:	429a      	cmp	r2, r3
20001246:	d107      	bne.n	20001258 <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
20001248:	68fb      	ldr	r3, [r7, #12]
2000124a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
2000124e:	687b      	ldr	r3, [r7, #4]
20001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001252:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20001254:	429a      	cmp	r2, r3
20001256:	d001      	beq.n	2000125c <HAL_RCC_OscConfig+0x4f0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
20001258:	2301      	movs	r3, #1
2000125a:	e000      	b.n	2000125e <HAL_RCC_OscConfig+0x4f2>
        }
      }
    }
  }
  return HAL_OK;
2000125c:	2300      	movs	r3, #0
}
2000125e:	4618      	mov	r0, r3
20001260:	3718      	adds	r7, #24
20001262:	46bd      	mov	sp, r7
20001264:	bd80      	pop	{r7, pc}
20001266:	bf00      	nop
20001268:	40023800 	.word	0x40023800

2000126c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2000126c:	b580      	push	{r7, lr}
2000126e:	b084      	sub	sp, #16
20001270:	af00      	add	r7, sp, #0
20001272:	6078      	str	r0, [r7, #4]
20001274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
20001276:	687b      	ldr	r3, [r7, #4]
20001278:	2b00      	cmp	r3, #0
2000127a:	d101      	bne.n	20001280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2000127c:	2301      	movs	r3, #1
2000127e:	e0cc      	b.n	2000141a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
20001280:	4b68      	ldr	r3, [pc, #416]	; (20001424 <HAL_RCC_ClockConfig+0x1b8>)
20001282:	681b      	ldr	r3, [r3, #0]
20001284:	f003 030f 	and.w	r3, r3, #15
20001288:	683a      	ldr	r2, [r7, #0]
2000128a:	429a      	cmp	r2, r3
2000128c:	d90c      	bls.n	200012a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000128e:	4b65      	ldr	r3, [pc, #404]	; (20001424 <HAL_RCC_ClockConfig+0x1b8>)
20001290:	683a      	ldr	r2, [r7, #0]
20001292:	b2d2      	uxtb	r2, r2
20001294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20001296:	4b63      	ldr	r3, [pc, #396]	; (20001424 <HAL_RCC_ClockConfig+0x1b8>)
20001298:	681b      	ldr	r3, [r3, #0]
2000129a:	f003 030f 	and.w	r3, r3, #15
2000129e:	683a      	ldr	r2, [r7, #0]
200012a0:	429a      	cmp	r2, r3
200012a2:	d001      	beq.n	200012a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
200012a4:	2301      	movs	r3, #1
200012a6:	e0b8      	b.n	2000141a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
200012a8:	687b      	ldr	r3, [r7, #4]
200012aa:	681b      	ldr	r3, [r3, #0]
200012ac:	f003 0302 	and.w	r3, r3, #2
200012b0:	2b00      	cmp	r3, #0
200012b2:	d020      	beq.n	200012f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
200012b4:	687b      	ldr	r3, [r7, #4]
200012b6:	681b      	ldr	r3, [r3, #0]
200012b8:	f003 0304 	and.w	r3, r3, #4
200012bc:	2b00      	cmp	r3, #0
200012be:	d005      	beq.n	200012cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
200012c0:	4b59      	ldr	r3, [pc, #356]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
200012c2:	689b      	ldr	r3, [r3, #8]
200012c4:	4a58      	ldr	r2, [pc, #352]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
200012c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
200012ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
200012cc:	687b      	ldr	r3, [r7, #4]
200012ce:	681b      	ldr	r3, [r3, #0]
200012d0:	f003 0308 	and.w	r3, r3, #8
200012d4:	2b00      	cmp	r3, #0
200012d6:	d005      	beq.n	200012e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
200012d8:	4b53      	ldr	r3, [pc, #332]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
200012da:	689b      	ldr	r3, [r3, #8]
200012dc:	4a52      	ldr	r2, [pc, #328]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
200012de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
200012e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
200012e4:	4b50      	ldr	r3, [pc, #320]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
200012e6:	689b      	ldr	r3, [r3, #8]
200012e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
200012ec:	687b      	ldr	r3, [r7, #4]
200012ee:	689b      	ldr	r3, [r3, #8]
200012f0:	494d      	ldr	r1, [pc, #308]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
200012f2:	4313      	orrs	r3, r2
200012f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
200012f6:	687b      	ldr	r3, [r7, #4]
200012f8:	681b      	ldr	r3, [r3, #0]
200012fa:	f003 0301 	and.w	r3, r3, #1
200012fe:	2b00      	cmp	r3, #0
20001300:	d044      	beq.n	2000138c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20001302:	687b      	ldr	r3, [r7, #4]
20001304:	685b      	ldr	r3, [r3, #4]
20001306:	2b01      	cmp	r3, #1
20001308:	d107      	bne.n	2000131a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000130a:	4b47      	ldr	r3, [pc, #284]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
2000130c:	681b      	ldr	r3, [r3, #0]
2000130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20001312:	2b00      	cmp	r3, #0
20001314:	d119      	bne.n	2000134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20001316:	2301      	movs	r3, #1
20001318:	e07f      	b.n	2000141a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000131a:	687b      	ldr	r3, [r7, #4]
2000131c:	685b      	ldr	r3, [r3, #4]
2000131e:	2b02      	cmp	r3, #2
20001320:	d003      	beq.n	2000132a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
20001322:	687b      	ldr	r3, [r7, #4]
20001324:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20001326:	2b03      	cmp	r3, #3
20001328:	d107      	bne.n	2000133a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000132a:	4b3f      	ldr	r3, [pc, #252]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
2000132c:	681b      	ldr	r3, [r3, #0]
2000132e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20001332:	2b00      	cmp	r3, #0
20001334:	d109      	bne.n	2000134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20001336:	2301      	movs	r3, #1
20001338:	e06f      	b.n	2000141a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000133a:	4b3b      	ldr	r3, [pc, #236]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
2000133c:	681b      	ldr	r3, [r3, #0]
2000133e:	f003 0302 	and.w	r3, r3, #2
20001342:	2b00      	cmp	r3, #0
20001344:	d101      	bne.n	2000134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20001346:	2301      	movs	r3, #1
20001348:	e067      	b.n	2000141a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000134a:	4b37      	ldr	r3, [pc, #220]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
2000134c:	689b      	ldr	r3, [r3, #8]
2000134e:	f023 0203 	bic.w	r2, r3, #3
20001352:	687b      	ldr	r3, [r7, #4]
20001354:	685b      	ldr	r3, [r3, #4]
20001356:	4934      	ldr	r1, [pc, #208]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
20001358:	4313      	orrs	r3, r2
2000135a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
2000135c:	f7ff f9f2 	bl	20000744 <HAL_GetTick>
20001360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20001362:	e00a      	b.n	2000137a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20001364:	f7ff f9ee 	bl	20000744 <HAL_GetTick>
20001368:	4602      	mov	r2, r0
2000136a:	68fb      	ldr	r3, [r7, #12]
2000136c:	1ad3      	subs	r3, r2, r3
2000136e:	f241 3288 	movw	r2, #5000	; 0x1388
20001372:	4293      	cmp	r3, r2
20001374:	d901      	bls.n	2000137a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
20001376:	2303      	movs	r3, #3
20001378:	e04f      	b.n	2000141a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000137a:	4b2b      	ldr	r3, [pc, #172]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
2000137c:	689b      	ldr	r3, [r3, #8]
2000137e:	f003 020c 	and.w	r2, r3, #12
20001382:	687b      	ldr	r3, [r7, #4]
20001384:	685b      	ldr	r3, [r3, #4]
20001386:	009b      	lsls	r3, r3, #2
20001388:	429a      	cmp	r2, r3
2000138a:	d1eb      	bne.n	20001364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
2000138c:	4b25      	ldr	r3, [pc, #148]	; (20001424 <HAL_RCC_ClockConfig+0x1b8>)
2000138e:	681b      	ldr	r3, [r3, #0]
20001390:	f003 030f 	and.w	r3, r3, #15
20001394:	683a      	ldr	r2, [r7, #0]
20001396:	429a      	cmp	r2, r3
20001398:	d20c      	bcs.n	200013b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000139a:	4b22      	ldr	r3, [pc, #136]	; (20001424 <HAL_RCC_ClockConfig+0x1b8>)
2000139c:	683a      	ldr	r2, [r7, #0]
2000139e:	b2d2      	uxtb	r2, r2
200013a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
200013a2:	4b20      	ldr	r3, [pc, #128]	; (20001424 <HAL_RCC_ClockConfig+0x1b8>)
200013a4:	681b      	ldr	r3, [r3, #0]
200013a6:	f003 030f 	and.w	r3, r3, #15
200013aa:	683a      	ldr	r2, [r7, #0]
200013ac:	429a      	cmp	r2, r3
200013ae:	d001      	beq.n	200013b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
200013b0:	2301      	movs	r3, #1
200013b2:	e032      	b.n	2000141a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
200013b4:	687b      	ldr	r3, [r7, #4]
200013b6:	681b      	ldr	r3, [r3, #0]
200013b8:	f003 0304 	and.w	r3, r3, #4
200013bc:	2b00      	cmp	r3, #0
200013be:	d008      	beq.n	200013d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
200013c0:	4b19      	ldr	r3, [pc, #100]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
200013c2:	689b      	ldr	r3, [r3, #8]
200013c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
200013c8:	687b      	ldr	r3, [r7, #4]
200013ca:	68db      	ldr	r3, [r3, #12]
200013cc:	4916      	ldr	r1, [pc, #88]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
200013ce:	4313      	orrs	r3, r2
200013d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
200013d2:	687b      	ldr	r3, [r7, #4]
200013d4:	681b      	ldr	r3, [r3, #0]
200013d6:	f003 0308 	and.w	r3, r3, #8
200013da:	2b00      	cmp	r3, #0
200013dc:	d009      	beq.n	200013f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
200013de:	4b12      	ldr	r3, [pc, #72]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
200013e0:	689b      	ldr	r3, [r3, #8]
200013e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
200013e6:	687b      	ldr	r3, [r7, #4]
200013e8:	691b      	ldr	r3, [r3, #16]
200013ea:	00db      	lsls	r3, r3, #3
200013ec:	490e      	ldr	r1, [pc, #56]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
200013ee:	4313      	orrs	r3, r2
200013f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
200013f2:	f000 f821 	bl	20001438 <HAL_RCC_GetSysClockFreq>
200013f6:	4602      	mov	r2, r0
200013f8:	4b0b      	ldr	r3, [pc, #44]	; (20001428 <HAL_RCC_ClockConfig+0x1bc>)
200013fa:	689b      	ldr	r3, [r3, #8]
200013fc:	091b      	lsrs	r3, r3, #4
200013fe:	f003 030f 	and.w	r3, r3, #15
20001402:	490a      	ldr	r1, [pc, #40]	; (2000142c <HAL_RCC_ClockConfig+0x1c0>)
20001404:	5ccb      	ldrb	r3, [r1, r3]
20001406:	fa22 f303 	lsr.w	r3, r2, r3
2000140a:	4a09      	ldr	r2, [pc, #36]	; (20001430 <HAL_RCC_ClockConfig+0x1c4>)
2000140c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
2000140e:	4b09      	ldr	r3, [pc, #36]	; (20001434 <HAL_RCC_ClockConfig+0x1c8>)
20001410:	681b      	ldr	r3, [r3, #0]
20001412:	4618      	mov	r0, r3
20001414:	f7ff f952 	bl	200006bc <HAL_InitTick>

  return HAL_OK;
20001418:	2300      	movs	r3, #0
}
2000141a:	4618      	mov	r0, r3
2000141c:	3710      	adds	r7, #16
2000141e:	46bd      	mov	sp, r7
20001420:	bd80      	pop	{r7, pc}
20001422:	bf00      	nop
20001424:	40023c00 	.word	0x40023c00
20001428:	40023800 	.word	0x40023800
2000142c:	20002438 	.word	0x20002438
20001430:	2000246c 	.word	0x2000246c
20001434:	20002470 	.word	0x20002470

20001438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
20001438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
2000143c:	b094      	sub	sp, #80	; 0x50
2000143e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
20001440:	2300      	movs	r3, #0
20001442:	647b      	str	r3, [r7, #68]	; 0x44
20001444:	2300      	movs	r3, #0
20001446:	64fb      	str	r3, [r7, #76]	; 0x4c
20001448:	2300      	movs	r3, #0
2000144a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
2000144c:	2300      	movs	r3, #0
2000144e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20001450:	4b79      	ldr	r3, [pc, #484]	; (20001638 <HAL_RCC_GetSysClockFreq+0x200>)
20001452:	689b      	ldr	r3, [r3, #8]
20001454:	f003 030c 	and.w	r3, r3, #12
20001458:	2b08      	cmp	r3, #8
2000145a:	d00d      	beq.n	20001478 <HAL_RCC_GetSysClockFreq+0x40>
2000145c:	2b08      	cmp	r3, #8
2000145e:	f200 80e1 	bhi.w	20001624 <HAL_RCC_GetSysClockFreq+0x1ec>
20001462:	2b00      	cmp	r3, #0
20001464:	d002      	beq.n	2000146c <HAL_RCC_GetSysClockFreq+0x34>
20001466:	2b04      	cmp	r3, #4
20001468:	d003      	beq.n	20001472 <HAL_RCC_GetSysClockFreq+0x3a>
2000146a:	e0db      	b.n	20001624 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
2000146c:	4b73      	ldr	r3, [pc, #460]	; (2000163c <HAL_RCC_GetSysClockFreq+0x204>)
2000146e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
20001470:	e0db      	b.n	2000162a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20001472:	4b73      	ldr	r3, [pc, #460]	; (20001640 <HAL_RCC_GetSysClockFreq+0x208>)
20001474:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
20001476:	e0d8      	b.n	2000162a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20001478:	4b6f      	ldr	r3, [pc, #444]	; (20001638 <HAL_RCC_GetSysClockFreq+0x200>)
2000147a:	685b      	ldr	r3, [r3, #4]
2000147c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20001480:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20001482:	4b6d      	ldr	r3, [pc, #436]	; (20001638 <HAL_RCC_GetSysClockFreq+0x200>)
20001484:	685b      	ldr	r3, [r3, #4]
20001486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000148a:	2b00      	cmp	r3, #0
2000148c:	d063      	beq.n	20001556 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000148e:	4b6a      	ldr	r3, [pc, #424]	; (20001638 <HAL_RCC_GetSysClockFreq+0x200>)
20001490:	685b      	ldr	r3, [r3, #4]
20001492:	099b      	lsrs	r3, r3, #6
20001494:	2200      	movs	r2, #0
20001496:	63bb      	str	r3, [r7, #56]	; 0x38
20001498:	63fa      	str	r2, [r7, #60]	; 0x3c
2000149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000149c:	f3c3 0308 	ubfx	r3, r3, #0, #9
200014a0:	633b      	str	r3, [r7, #48]	; 0x30
200014a2:	2300      	movs	r3, #0
200014a4:	637b      	str	r3, [r7, #52]	; 0x34
200014a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
200014aa:	4622      	mov	r2, r4
200014ac:	462b      	mov	r3, r5
200014ae:	f04f 0000 	mov.w	r0, #0
200014b2:	f04f 0100 	mov.w	r1, #0
200014b6:	0159      	lsls	r1, r3, #5
200014b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
200014bc:	0150      	lsls	r0, r2, #5
200014be:	4602      	mov	r2, r0
200014c0:	460b      	mov	r3, r1
200014c2:	4621      	mov	r1, r4
200014c4:	1a51      	subs	r1, r2, r1
200014c6:	6139      	str	r1, [r7, #16]
200014c8:	4629      	mov	r1, r5
200014ca:	eb63 0301 	sbc.w	r3, r3, r1
200014ce:	617b      	str	r3, [r7, #20]
200014d0:	f04f 0200 	mov.w	r2, #0
200014d4:	f04f 0300 	mov.w	r3, #0
200014d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
200014dc:	4659      	mov	r1, fp
200014de:	018b      	lsls	r3, r1, #6
200014e0:	4651      	mov	r1, sl
200014e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
200014e6:	4651      	mov	r1, sl
200014e8:	018a      	lsls	r2, r1, #6
200014ea:	4651      	mov	r1, sl
200014ec:	ebb2 0801 	subs.w	r8, r2, r1
200014f0:	4659      	mov	r1, fp
200014f2:	eb63 0901 	sbc.w	r9, r3, r1
200014f6:	f04f 0200 	mov.w	r2, #0
200014fa:	f04f 0300 	mov.w	r3, #0
200014fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
20001502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
20001506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
2000150a:	4690      	mov	r8, r2
2000150c:	4699      	mov	r9, r3
2000150e:	4623      	mov	r3, r4
20001510:	eb18 0303 	adds.w	r3, r8, r3
20001514:	60bb      	str	r3, [r7, #8]
20001516:	462b      	mov	r3, r5
20001518:	eb49 0303 	adc.w	r3, r9, r3
2000151c:	60fb      	str	r3, [r7, #12]
2000151e:	f04f 0200 	mov.w	r2, #0
20001522:	f04f 0300 	mov.w	r3, #0
20001526:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
2000152a:	4629      	mov	r1, r5
2000152c:	024b      	lsls	r3, r1, #9
2000152e:	4621      	mov	r1, r4
20001530:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
20001534:	4621      	mov	r1, r4
20001536:	024a      	lsls	r2, r1, #9
20001538:	4610      	mov	r0, r2
2000153a:	4619      	mov	r1, r3
2000153c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
2000153e:	2200      	movs	r2, #0
20001540:	62bb      	str	r3, [r7, #40]	; 0x28
20001542:	62fa      	str	r2, [r7, #44]	; 0x2c
20001544:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
20001548:	f7fe fe5c 	bl	20000204 <__aeabi_uldivmod>
2000154c:	4602      	mov	r2, r0
2000154e:	460b      	mov	r3, r1
20001550:	4613      	mov	r3, r2
20001552:	64fb      	str	r3, [r7, #76]	; 0x4c
20001554:	e058      	b.n	20001608 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20001556:	4b38      	ldr	r3, [pc, #224]	; (20001638 <HAL_RCC_GetSysClockFreq+0x200>)
20001558:	685b      	ldr	r3, [r3, #4]
2000155a:	099b      	lsrs	r3, r3, #6
2000155c:	2200      	movs	r2, #0
2000155e:	4618      	mov	r0, r3
20001560:	4611      	mov	r1, r2
20001562:	f3c0 0308 	ubfx	r3, r0, #0, #9
20001566:	623b      	str	r3, [r7, #32]
20001568:	2300      	movs	r3, #0
2000156a:	627b      	str	r3, [r7, #36]	; 0x24
2000156c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
20001570:	4642      	mov	r2, r8
20001572:	464b      	mov	r3, r9
20001574:	f04f 0000 	mov.w	r0, #0
20001578:	f04f 0100 	mov.w	r1, #0
2000157c:	0159      	lsls	r1, r3, #5
2000157e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20001582:	0150      	lsls	r0, r2, #5
20001584:	4602      	mov	r2, r0
20001586:	460b      	mov	r3, r1
20001588:	4641      	mov	r1, r8
2000158a:	ebb2 0a01 	subs.w	sl, r2, r1
2000158e:	4649      	mov	r1, r9
20001590:	eb63 0b01 	sbc.w	fp, r3, r1
20001594:	f04f 0200 	mov.w	r2, #0
20001598:	f04f 0300 	mov.w	r3, #0
2000159c:	ea4f 138b 	mov.w	r3, fp, lsl #6
200015a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
200015a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
200015a8:	ebb2 040a 	subs.w	r4, r2, sl
200015ac:	eb63 050b 	sbc.w	r5, r3, fp
200015b0:	f04f 0200 	mov.w	r2, #0
200015b4:	f04f 0300 	mov.w	r3, #0
200015b8:	00eb      	lsls	r3, r5, #3
200015ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
200015be:	00e2      	lsls	r2, r4, #3
200015c0:	4614      	mov	r4, r2
200015c2:	461d      	mov	r5, r3
200015c4:	4643      	mov	r3, r8
200015c6:	18e3      	adds	r3, r4, r3
200015c8:	603b      	str	r3, [r7, #0]
200015ca:	464b      	mov	r3, r9
200015cc:	eb45 0303 	adc.w	r3, r5, r3
200015d0:	607b      	str	r3, [r7, #4]
200015d2:	f04f 0200 	mov.w	r2, #0
200015d6:	f04f 0300 	mov.w	r3, #0
200015da:	e9d7 4500 	ldrd	r4, r5, [r7]
200015de:	4629      	mov	r1, r5
200015e0:	028b      	lsls	r3, r1, #10
200015e2:	4621      	mov	r1, r4
200015e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
200015e8:	4621      	mov	r1, r4
200015ea:	028a      	lsls	r2, r1, #10
200015ec:	4610      	mov	r0, r2
200015ee:	4619      	mov	r1, r3
200015f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
200015f2:	2200      	movs	r2, #0
200015f4:	61bb      	str	r3, [r7, #24]
200015f6:	61fa      	str	r2, [r7, #28]
200015f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
200015fc:	f7fe fe02 	bl	20000204 <__aeabi_uldivmod>
20001600:	4602      	mov	r2, r0
20001602:	460b      	mov	r3, r1
20001604:	4613      	mov	r3, r2
20001606:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
20001608:	4b0b      	ldr	r3, [pc, #44]	; (20001638 <HAL_RCC_GetSysClockFreq+0x200>)
2000160a:	685b      	ldr	r3, [r3, #4]
2000160c:	0c1b      	lsrs	r3, r3, #16
2000160e:	f003 0303 	and.w	r3, r3, #3
20001612:	3301      	adds	r3, #1
20001614:	005b      	lsls	r3, r3, #1
20001616:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
20001618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
2000161a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
2000161c:	fbb2 f3f3 	udiv	r3, r2, r3
20001620:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
20001622:	e002      	b.n	2000162a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20001624:	4b05      	ldr	r3, [pc, #20]	; (2000163c <HAL_RCC_GetSysClockFreq+0x204>)
20001626:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
20001628:	bf00      	nop
    }
  }
  return sysclockfreq;
2000162a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
2000162c:	4618      	mov	r0, r3
2000162e:	3750      	adds	r7, #80	; 0x50
20001630:	46bd      	mov	sp, r7
20001632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20001636:	bf00      	nop
20001638:	40023800 	.word	0x40023800
2000163c:	00f42400 	.word	0x00f42400
20001640:	007a1200 	.word	0x007a1200

20001644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20001644:	b480      	push	{r7}
20001646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
20001648:	4b03      	ldr	r3, [pc, #12]	; (20001658 <HAL_RCC_GetHCLKFreq+0x14>)
2000164a:	681b      	ldr	r3, [r3, #0]
}
2000164c:	4618      	mov	r0, r3
2000164e:	46bd      	mov	sp, r7
20001650:	f85d 7b04 	ldr.w	r7, [sp], #4
20001654:	4770      	bx	lr
20001656:	bf00      	nop
20001658:	2000246c 	.word	0x2000246c

2000165c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
2000165c:	b580      	push	{r7, lr}
2000165e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
20001660:	f7ff fff0 	bl	20001644 <HAL_RCC_GetHCLKFreq>
20001664:	4602      	mov	r2, r0
20001666:	4b05      	ldr	r3, [pc, #20]	; (2000167c <HAL_RCC_GetPCLK1Freq+0x20>)
20001668:	689b      	ldr	r3, [r3, #8]
2000166a:	0a9b      	lsrs	r3, r3, #10
2000166c:	f003 0307 	and.w	r3, r3, #7
20001670:	4903      	ldr	r1, [pc, #12]	; (20001680 <HAL_RCC_GetPCLK1Freq+0x24>)
20001672:	5ccb      	ldrb	r3, [r1, r3]
20001674:	fa22 f303 	lsr.w	r3, r2, r3
}
20001678:	4618      	mov	r0, r3
2000167a:	bd80      	pop	{r7, pc}
2000167c:	40023800 	.word	0x40023800
20001680:	20002448 	.word	0x20002448

20001684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
20001684:	b580      	push	{r7, lr}
20001686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
20001688:	f7ff ffdc 	bl	20001644 <HAL_RCC_GetHCLKFreq>
2000168c:	4602      	mov	r2, r0
2000168e:	4b05      	ldr	r3, [pc, #20]	; (200016a4 <HAL_RCC_GetPCLK2Freq+0x20>)
20001690:	689b      	ldr	r3, [r3, #8]
20001692:	0b5b      	lsrs	r3, r3, #13
20001694:	f003 0307 	and.w	r3, r3, #7
20001698:	4903      	ldr	r1, [pc, #12]	; (200016a8 <HAL_RCC_GetPCLK2Freq+0x24>)
2000169a:	5ccb      	ldrb	r3, [r1, r3]
2000169c:	fa22 f303 	lsr.w	r3, r2, r3
}
200016a0:	4618      	mov	r0, r3
200016a2:	bd80      	pop	{r7, pc}
200016a4:	40023800 	.word	0x40023800
200016a8:	20002448 	.word	0x20002448

200016ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
200016ac:	b580      	push	{r7, lr}
200016ae:	b082      	sub	sp, #8
200016b0:	af00      	add	r7, sp, #0
200016b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
200016b4:	687b      	ldr	r3, [r7, #4]
200016b6:	2b00      	cmp	r3, #0
200016b8:	d101      	bne.n	200016be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
200016ba:	2301      	movs	r3, #1
200016bc:	e042      	b.n	20001744 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
200016be:	687b      	ldr	r3, [r7, #4]
200016c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
200016c4:	b2db      	uxtb	r3, r3
200016c6:	2b00      	cmp	r3, #0
200016c8:	d106      	bne.n	200016d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
200016ca:	687b      	ldr	r3, [r7, #4]
200016cc:	2200      	movs	r2, #0
200016ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
200016d2:	6878      	ldr	r0, [r7, #4]
200016d4:	f000 fdda 	bl	2000228c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
200016d8:	687b      	ldr	r3, [r7, #4]
200016da:	2224      	movs	r2, #36	; 0x24
200016dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
200016e0:	687b      	ldr	r3, [r7, #4]
200016e2:	681b      	ldr	r3, [r3, #0]
200016e4:	68da      	ldr	r2, [r3, #12]
200016e6:	687b      	ldr	r3, [r7, #4]
200016e8:	681b      	ldr	r3, [r3, #0]
200016ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
200016ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
200016f0:	6878      	ldr	r0, [r7, #4]
200016f2:	f000 f973 	bl	200019dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
200016f6:	687b      	ldr	r3, [r7, #4]
200016f8:	681b      	ldr	r3, [r3, #0]
200016fa:	691a      	ldr	r2, [r3, #16]
200016fc:	687b      	ldr	r3, [r7, #4]
200016fe:	681b      	ldr	r3, [r3, #0]
20001700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
20001704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
20001706:	687b      	ldr	r3, [r7, #4]
20001708:	681b      	ldr	r3, [r3, #0]
2000170a:	695a      	ldr	r2, [r3, #20]
2000170c:	687b      	ldr	r3, [r7, #4]
2000170e:	681b      	ldr	r3, [r3, #0]
20001710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
20001714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
20001716:	687b      	ldr	r3, [r7, #4]
20001718:	681b      	ldr	r3, [r3, #0]
2000171a:	68da      	ldr	r2, [r3, #12]
2000171c:	687b      	ldr	r3, [r7, #4]
2000171e:	681b      	ldr	r3, [r3, #0]
20001720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
20001724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
20001726:	687b      	ldr	r3, [r7, #4]
20001728:	2200      	movs	r2, #0
2000172a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
2000172c:	687b      	ldr	r3, [r7, #4]
2000172e:	2220      	movs	r2, #32
20001730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
20001734:	687b      	ldr	r3, [r7, #4]
20001736:	2220      	movs	r2, #32
20001738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
2000173c:	687b      	ldr	r3, [r7, #4]
2000173e:	2200      	movs	r2, #0
20001740:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
20001742:	2300      	movs	r3, #0
}
20001744:	4618      	mov	r0, r3
20001746:	3708      	adds	r7, #8
20001748:	46bd      	mov	sp, r7
2000174a:	bd80      	pop	{r7, pc}

2000174c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2000174c:	b580      	push	{r7, lr}
2000174e:	b08a      	sub	sp, #40	; 0x28
20001750:	af02      	add	r7, sp, #8
20001752:	60f8      	str	r0, [r7, #12]
20001754:	60b9      	str	r1, [r7, #8]
20001756:	603b      	str	r3, [r7, #0]
20001758:	4613      	mov	r3, r2
2000175a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
2000175c:	2300      	movs	r3, #0
2000175e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
20001760:	68fb      	ldr	r3, [r7, #12]
20001762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20001766:	b2db      	uxtb	r3, r3
20001768:	2b20      	cmp	r3, #32
2000176a:	d175      	bne.n	20001858 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
2000176c:	68bb      	ldr	r3, [r7, #8]
2000176e:	2b00      	cmp	r3, #0
20001770:	d002      	beq.n	20001778 <HAL_UART_Transmit+0x2c>
20001772:	88fb      	ldrh	r3, [r7, #6]
20001774:	2b00      	cmp	r3, #0
20001776:	d101      	bne.n	2000177c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
20001778:	2301      	movs	r3, #1
2000177a:	e06e      	b.n	2000185a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
2000177c:	68fb      	ldr	r3, [r7, #12]
2000177e:	2200      	movs	r2, #0
20001780:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
20001782:	68fb      	ldr	r3, [r7, #12]
20001784:	2221      	movs	r2, #33	; 0x21
20001786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
2000178a:	f7fe ffdb 	bl	20000744 <HAL_GetTick>
2000178e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
20001790:	68fb      	ldr	r3, [r7, #12]
20001792:	88fa      	ldrh	r2, [r7, #6]
20001794:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
20001796:	68fb      	ldr	r3, [r7, #12]
20001798:	88fa      	ldrh	r2, [r7, #6]
2000179a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
2000179c:	68fb      	ldr	r3, [r7, #12]
2000179e:	689b      	ldr	r3, [r3, #8]
200017a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
200017a4:	d108      	bne.n	200017b8 <HAL_UART_Transmit+0x6c>
200017a6:	68fb      	ldr	r3, [r7, #12]
200017a8:	691b      	ldr	r3, [r3, #16]
200017aa:	2b00      	cmp	r3, #0
200017ac:	d104      	bne.n	200017b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
200017ae:	2300      	movs	r3, #0
200017b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
200017b2:	68bb      	ldr	r3, [r7, #8]
200017b4:	61bb      	str	r3, [r7, #24]
200017b6:	e003      	b.n	200017c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
200017b8:	68bb      	ldr	r3, [r7, #8]
200017ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
200017bc:	2300      	movs	r3, #0
200017be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
200017c0:	e02e      	b.n	20001820 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
200017c2:	683b      	ldr	r3, [r7, #0]
200017c4:	9300      	str	r3, [sp, #0]
200017c6:	697b      	ldr	r3, [r7, #20]
200017c8:	2200      	movs	r2, #0
200017ca:	2180      	movs	r1, #128	; 0x80
200017cc:	68f8      	ldr	r0, [r7, #12]
200017ce:	f000 f848 	bl	20001862 <UART_WaitOnFlagUntilTimeout>
200017d2:	4603      	mov	r3, r0
200017d4:	2b00      	cmp	r3, #0
200017d6:	d005      	beq.n	200017e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
200017d8:	68fb      	ldr	r3, [r7, #12]
200017da:	2220      	movs	r2, #32
200017dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
200017e0:	2303      	movs	r3, #3
200017e2:	e03a      	b.n	2000185a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
200017e4:	69fb      	ldr	r3, [r7, #28]
200017e6:	2b00      	cmp	r3, #0
200017e8:	d10b      	bne.n	20001802 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
200017ea:	69bb      	ldr	r3, [r7, #24]
200017ec:	881b      	ldrh	r3, [r3, #0]
200017ee:	461a      	mov	r2, r3
200017f0:	68fb      	ldr	r3, [r7, #12]
200017f2:	681b      	ldr	r3, [r3, #0]
200017f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
200017f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
200017fa:	69bb      	ldr	r3, [r7, #24]
200017fc:	3302      	adds	r3, #2
200017fe:	61bb      	str	r3, [r7, #24]
20001800:	e007      	b.n	20001812 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
20001802:	69fb      	ldr	r3, [r7, #28]
20001804:	781a      	ldrb	r2, [r3, #0]
20001806:	68fb      	ldr	r3, [r7, #12]
20001808:	681b      	ldr	r3, [r3, #0]
2000180a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
2000180c:	69fb      	ldr	r3, [r7, #28]
2000180e:	3301      	adds	r3, #1
20001810:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
20001812:	68fb      	ldr	r3, [r7, #12]
20001814:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
20001816:	b29b      	uxth	r3, r3
20001818:	3b01      	subs	r3, #1
2000181a:	b29a      	uxth	r2, r3
2000181c:	68fb      	ldr	r3, [r7, #12]
2000181e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
20001820:	68fb      	ldr	r3, [r7, #12]
20001822:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
20001824:	b29b      	uxth	r3, r3
20001826:	2b00      	cmp	r3, #0
20001828:	d1cb      	bne.n	200017c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
2000182a:	683b      	ldr	r3, [r7, #0]
2000182c:	9300      	str	r3, [sp, #0]
2000182e:	697b      	ldr	r3, [r7, #20]
20001830:	2200      	movs	r2, #0
20001832:	2140      	movs	r1, #64	; 0x40
20001834:	68f8      	ldr	r0, [r7, #12]
20001836:	f000 f814 	bl	20001862 <UART_WaitOnFlagUntilTimeout>
2000183a:	4603      	mov	r3, r0
2000183c:	2b00      	cmp	r3, #0
2000183e:	d005      	beq.n	2000184c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
20001840:	68fb      	ldr	r3, [r7, #12]
20001842:	2220      	movs	r2, #32
20001844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
20001848:	2303      	movs	r3, #3
2000184a:	e006      	b.n	2000185a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
2000184c:	68fb      	ldr	r3, [r7, #12]
2000184e:	2220      	movs	r2, #32
20001850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
20001854:	2300      	movs	r3, #0
20001856:	e000      	b.n	2000185a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
20001858:	2302      	movs	r3, #2
  }
}
2000185a:	4618      	mov	r0, r3
2000185c:	3720      	adds	r7, #32
2000185e:	46bd      	mov	sp, r7
20001860:	bd80      	pop	{r7, pc}

20001862 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
20001862:	b580      	push	{r7, lr}
20001864:	b086      	sub	sp, #24
20001866:	af00      	add	r7, sp, #0
20001868:	60f8      	str	r0, [r7, #12]
2000186a:	60b9      	str	r1, [r7, #8]
2000186c:	603b      	str	r3, [r7, #0]
2000186e:	4613      	mov	r3, r2
20001870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
20001872:	e03b      	b.n	200018ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
20001874:	6a3b      	ldr	r3, [r7, #32]
20001876:	f1b3 3fff 	cmp.w	r3, #4294967295
2000187a:	d037      	beq.n	200018ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000187c:	f7fe ff62 	bl	20000744 <HAL_GetTick>
20001880:	4602      	mov	r2, r0
20001882:	683b      	ldr	r3, [r7, #0]
20001884:	1ad3      	subs	r3, r2, r3
20001886:	6a3a      	ldr	r2, [r7, #32]
20001888:	429a      	cmp	r2, r3
2000188a:	d302      	bcc.n	20001892 <UART_WaitOnFlagUntilTimeout+0x30>
2000188c:	6a3b      	ldr	r3, [r7, #32]
2000188e:	2b00      	cmp	r3, #0
20001890:	d101      	bne.n	20001896 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
20001892:	2303      	movs	r3, #3
20001894:	e03a      	b.n	2000190c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
20001896:	68fb      	ldr	r3, [r7, #12]
20001898:	681b      	ldr	r3, [r3, #0]
2000189a:	68db      	ldr	r3, [r3, #12]
2000189c:	f003 0304 	and.w	r3, r3, #4
200018a0:	2b00      	cmp	r3, #0
200018a2:	d023      	beq.n	200018ec <UART_WaitOnFlagUntilTimeout+0x8a>
200018a4:	68bb      	ldr	r3, [r7, #8]
200018a6:	2b80      	cmp	r3, #128	; 0x80
200018a8:	d020      	beq.n	200018ec <UART_WaitOnFlagUntilTimeout+0x8a>
200018aa:	68bb      	ldr	r3, [r7, #8]
200018ac:	2b40      	cmp	r3, #64	; 0x40
200018ae:	d01d      	beq.n	200018ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
200018b0:	68fb      	ldr	r3, [r7, #12]
200018b2:	681b      	ldr	r3, [r3, #0]
200018b4:	681b      	ldr	r3, [r3, #0]
200018b6:	f003 0308 	and.w	r3, r3, #8
200018ba:	2b08      	cmp	r3, #8
200018bc:	d116      	bne.n	200018ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
200018be:	2300      	movs	r3, #0
200018c0:	617b      	str	r3, [r7, #20]
200018c2:	68fb      	ldr	r3, [r7, #12]
200018c4:	681b      	ldr	r3, [r3, #0]
200018c6:	681b      	ldr	r3, [r3, #0]
200018c8:	617b      	str	r3, [r7, #20]
200018ca:	68fb      	ldr	r3, [r7, #12]
200018cc:	681b      	ldr	r3, [r3, #0]
200018ce:	685b      	ldr	r3, [r3, #4]
200018d0:	617b      	str	r3, [r7, #20]
200018d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
200018d4:	68f8      	ldr	r0, [r7, #12]
200018d6:	f000 f81d 	bl	20001914 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
200018da:	68fb      	ldr	r3, [r7, #12]
200018dc:	2208      	movs	r2, #8
200018de:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
200018e0:	68fb      	ldr	r3, [r7, #12]
200018e2:	2200      	movs	r2, #0
200018e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
200018e8:	2301      	movs	r3, #1
200018ea:	e00f      	b.n	2000190c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
200018ec:	68fb      	ldr	r3, [r7, #12]
200018ee:	681b      	ldr	r3, [r3, #0]
200018f0:	681a      	ldr	r2, [r3, #0]
200018f2:	68bb      	ldr	r3, [r7, #8]
200018f4:	4013      	ands	r3, r2
200018f6:	68ba      	ldr	r2, [r7, #8]
200018f8:	429a      	cmp	r2, r3
200018fa:	bf0c      	ite	eq
200018fc:	2301      	moveq	r3, #1
200018fe:	2300      	movne	r3, #0
20001900:	b2db      	uxtb	r3, r3
20001902:	461a      	mov	r2, r3
20001904:	79fb      	ldrb	r3, [r7, #7]
20001906:	429a      	cmp	r2, r3
20001908:	d0b4      	beq.n	20001874 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
2000190a:	2300      	movs	r3, #0
}
2000190c:	4618      	mov	r0, r3
2000190e:	3718      	adds	r7, #24
20001910:	46bd      	mov	sp, r7
20001912:	bd80      	pop	{r7, pc}

20001914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
20001914:	b480      	push	{r7}
20001916:	b095      	sub	sp, #84	; 0x54
20001918:	af00      	add	r7, sp, #0
2000191a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
2000191c:	687b      	ldr	r3, [r7, #4]
2000191e:	681b      	ldr	r3, [r3, #0]
20001920:	330c      	adds	r3, #12
20001922:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20001924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001926:	e853 3f00 	ldrex	r3, [r3]
2000192a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
2000192c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000192e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
20001932:	64fb      	str	r3, [r7, #76]	; 0x4c
20001934:	687b      	ldr	r3, [r7, #4]
20001936:	681b      	ldr	r3, [r3, #0]
20001938:	330c      	adds	r3, #12
2000193a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
2000193c:	643a      	str	r2, [r7, #64]	; 0x40
2000193e:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
20001940:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
20001942:	6c3a      	ldr	r2, [r7, #64]	; 0x40
20001944:	e841 2300 	strex	r3, r2, [r1]
20001948:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
2000194a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000194c:	2b00      	cmp	r3, #0
2000194e:	d1e5      	bne.n	2000191c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
20001950:	687b      	ldr	r3, [r7, #4]
20001952:	681b      	ldr	r3, [r3, #0]
20001954:	3314      	adds	r3, #20
20001956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20001958:	6a3b      	ldr	r3, [r7, #32]
2000195a:	e853 3f00 	ldrex	r3, [r3]
2000195e:	61fb      	str	r3, [r7, #28]
   return(result);
20001960:	69fb      	ldr	r3, [r7, #28]
20001962:	f023 0301 	bic.w	r3, r3, #1
20001966:	64bb      	str	r3, [r7, #72]	; 0x48
20001968:	687b      	ldr	r3, [r7, #4]
2000196a:	681b      	ldr	r3, [r3, #0]
2000196c:	3314      	adds	r3, #20
2000196e:	6cba      	ldr	r2, [r7, #72]	; 0x48
20001970:	62fa      	str	r2, [r7, #44]	; 0x2c
20001972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
20001974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
20001976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001978:	e841 2300 	strex	r3, r2, [r1]
2000197c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
2000197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001980:	2b00      	cmp	r3, #0
20001982:	d1e5      	bne.n	20001950 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
20001984:	687b      	ldr	r3, [r7, #4]
20001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001988:	2b01      	cmp	r3, #1
2000198a:	d119      	bne.n	200019c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
2000198c:	687b      	ldr	r3, [r7, #4]
2000198e:	681b      	ldr	r3, [r3, #0]
20001990:	330c      	adds	r3, #12
20001992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
20001994:	68fb      	ldr	r3, [r7, #12]
20001996:	e853 3f00 	ldrex	r3, [r3]
2000199a:	60bb      	str	r3, [r7, #8]
   return(result);
2000199c:	68bb      	ldr	r3, [r7, #8]
2000199e:	f023 0310 	bic.w	r3, r3, #16
200019a2:	647b      	str	r3, [r7, #68]	; 0x44
200019a4:	687b      	ldr	r3, [r7, #4]
200019a6:	681b      	ldr	r3, [r3, #0]
200019a8:	330c      	adds	r3, #12
200019aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
200019ac:	61ba      	str	r2, [r7, #24]
200019ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
200019b0:	6979      	ldr	r1, [r7, #20]
200019b2:	69ba      	ldr	r2, [r7, #24]
200019b4:	e841 2300 	strex	r3, r2, [r1]
200019b8:	613b      	str	r3, [r7, #16]
   return(result);
200019ba:	693b      	ldr	r3, [r7, #16]
200019bc:	2b00      	cmp	r3, #0
200019be:	d1e5      	bne.n	2000198c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
200019c0:	687b      	ldr	r3, [r7, #4]
200019c2:	2220      	movs	r2, #32
200019c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
200019c8:	687b      	ldr	r3, [r7, #4]
200019ca:	2200      	movs	r2, #0
200019cc:	631a      	str	r2, [r3, #48]	; 0x30
}
200019ce:	bf00      	nop
200019d0:	3754      	adds	r7, #84	; 0x54
200019d2:	46bd      	mov	sp, r7
200019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200019d8:	4770      	bx	lr
	...

200019dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
200019dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
200019e0:	b0c0      	sub	sp, #256	; 0x100
200019e2:	af00      	add	r7, sp, #0
200019e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
200019e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200019ec:	681b      	ldr	r3, [r3, #0]
200019ee:	691b      	ldr	r3, [r3, #16]
200019f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
200019f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200019f8:	68d9      	ldr	r1, [r3, #12]
200019fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200019fe:	681a      	ldr	r2, [r3, #0]
20001a00:	ea40 0301 	orr.w	r3, r0, r1
20001a04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
20001a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001a0a:	689a      	ldr	r2, [r3, #8]
20001a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001a10:	691b      	ldr	r3, [r3, #16]
20001a12:	431a      	orrs	r2, r3
20001a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001a18:	695b      	ldr	r3, [r3, #20]
20001a1a:	431a      	orrs	r2, r3
20001a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001a20:	69db      	ldr	r3, [r3, #28]
20001a22:	4313      	orrs	r3, r2
20001a24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
20001a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001a2c:	681b      	ldr	r3, [r3, #0]
20001a2e:	68db      	ldr	r3, [r3, #12]
20001a30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
20001a34:	f021 010c 	bic.w	r1, r1, #12
20001a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001a3c:	681a      	ldr	r2, [r3, #0]
20001a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
20001a42:	430b      	orrs	r3, r1
20001a44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
20001a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001a4a:	681b      	ldr	r3, [r3, #0]
20001a4c:	695b      	ldr	r3, [r3, #20]
20001a4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
20001a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001a56:	6999      	ldr	r1, [r3, #24]
20001a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001a5c:	681a      	ldr	r2, [r3, #0]
20001a5e:	ea40 0301 	orr.w	r3, r0, r1
20001a62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
20001a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001a68:	681a      	ldr	r2, [r3, #0]
20001a6a:	4b8f      	ldr	r3, [pc, #572]	; (20001ca8 <UART_SetConfig+0x2cc>)
20001a6c:	429a      	cmp	r2, r3
20001a6e:	d005      	beq.n	20001a7c <UART_SetConfig+0xa0>
20001a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001a74:	681a      	ldr	r2, [r3, #0]
20001a76:	4b8d      	ldr	r3, [pc, #564]	; (20001cac <UART_SetConfig+0x2d0>)
20001a78:	429a      	cmp	r2, r3
20001a7a:	d104      	bne.n	20001a86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
20001a7c:	f7ff fe02 	bl	20001684 <HAL_RCC_GetPCLK2Freq>
20001a80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
20001a84:	e003      	b.n	20001a8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
20001a86:	f7ff fde9 	bl	2000165c <HAL_RCC_GetPCLK1Freq>
20001a8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
20001a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001a92:	69db      	ldr	r3, [r3, #28]
20001a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20001a98:	f040 810c 	bne.w	20001cb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
20001a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20001aa0:	2200      	movs	r2, #0
20001aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
20001aa6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
20001aaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
20001aae:	4622      	mov	r2, r4
20001ab0:	462b      	mov	r3, r5
20001ab2:	1891      	adds	r1, r2, r2
20001ab4:	65b9      	str	r1, [r7, #88]	; 0x58
20001ab6:	415b      	adcs	r3, r3
20001ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
20001aba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
20001abe:	4621      	mov	r1, r4
20001ac0:	eb12 0801 	adds.w	r8, r2, r1
20001ac4:	4629      	mov	r1, r5
20001ac6:	eb43 0901 	adc.w	r9, r3, r1
20001aca:	f04f 0200 	mov.w	r2, #0
20001ace:	f04f 0300 	mov.w	r3, #0
20001ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
20001ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
20001ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
20001ade:	4690      	mov	r8, r2
20001ae0:	4699      	mov	r9, r3
20001ae2:	4623      	mov	r3, r4
20001ae4:	eb18 0303 	adds.w	r3, r8, r3
20001ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
20001aec:	462b      	mov	r3, r5
20001aee:	eb49 0303 	adc.w	r3, r9, r3
20001af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
20001af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001afa:	685b      	ldr	r3, [r3, #4]
20001afc:	2200      	movs	r2, #0
20001afe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
20001b02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
20001b06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
20001b0a:	460b      	mov	r3, r1
20001b0c:	18db      	adds	r3, r3, r3
20001b0e:	653b      	str	r3, [r7, #80]	; 0x50
20001b10:	4613      	mov	r3, r2
20001b12:	eb42 0303 	adc.w	r3, r2, r3
20001b16:	657b      	str	r3, [r7, #84]	; 0x54
20001b18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
20001b1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
20001b20:	f7fe fb70 	bl	20000204 <__aeabi_uldivmod>
20001b24:	4602      	mov	r2, r0
20001b26:	460b      	mov	r3, r1
20001b28:	4b61      	ldr	r3, [pc, #388]	; (20001cb0 <UART_SetConfig+0x2d4>)
20001b2a:	fba3 2302 	umull	r2, r3, r3, r2
20001b2e:	095b      	lsrs	r3, r3, #5
20001b30:	011c      	lsls	r4, r3, #4
20001b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20001b36:	2200      	movs	r2, #0
20001b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
20001b3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
20001b40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
20001b44:	4642      	mov	r2, r8
20001b46:	464b      	mov	r3, r9
20001b48:	1891      	adds	r1, r2, r2
20001b4a:	64b9      	str	r1, [r7, #72]	; 0x48
20001b4c:	415b      	adcs	r3, r3
20001b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
20001b50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
20001b54:	4641      	mov	r1, r8
20001b56:	eb12 0a01 	adds.w	sl, r2, r1
20001b5a:	4649      	mov	r1, r9
20001b5c:	eb43 0b01 	adc.w	fp, r3, r1
20001b60:	f04f 0200 	mov.w	r2, #0
20001b64:	f04f 0300 	mov.w	r3, #0
20001b68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
20001b6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
20001b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
20001b74:	4692      	mov	sl, r2
20001b76:	469b      	mov	fp, r3
20001b78:	4643      	mov	r3, r8
20001b7a:	eb1a 0303 	adds.w	r3, sl, r3
20001b7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
20001b82:	464b      	mov	r3, r9
20001b84:	eb4b 0303 	adc.w	r3, fp, r3
20001b88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
20001b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001b90:	685b      	ldr	r3, [r3, #4]
20001b92:	2200      	movs	r2, #0
20001b94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
20001b98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
20001b9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
20001ba0:	460b      	mov	r3, r1
20001ba2:	18db      	adds	r3, r3, r3
20001ba4:	643b      	str	r3, [r7, #64]	; 0x40
20001ba6:	4613      	mov	r3, r2
20001ba8:	eb42 0303 	adc.w	r3, r2, r3
20001bac:	647b      	str	r3, [r7, #68]	; 0x44
20001bae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
20001bb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
20001bb6:	f7fe fb25 	bl	20000204 <__aeabi_uldivmod>
20001bba:	4602      	mov	r2, r0
20001bbc:	460b      	mov	r3, r1
20001bbe:	4611      	mov	r1, r2
20001bc0:	4b3b      	ldr	r3, [pc, #236]	; (20001cb0 <UART_SetConfig+0x2d4>)
20001bc2:	fba3 2301 	umull	r2, r3, r3, r1
20001bc6:	095b      	lsrs	r3, r3, #5
20001bc8:	2264      	movs	r2, #100	; 0x64
20001bca:	fb02 f303 	mul.w	r3, r2, r3
20001bce:	1acb      	subs	r3, r1, r3
20001bd0:	00db      	lsls	r3, r3, #3
20001bd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
20001bd6:	4b36      	ldr	r3, [pc, #216]	; (20001cb0 <UART_SetConfig+0x2d4>)
20001bd8:	fba3 2302 	umull	r2, r3, r3, r2
20001bdc:	095b      	lsrs	r3, r3, #5
20001bde:	005b      	lsls	r3, r3, #1
20001be0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
20001be4:	441c      	add	r4, r3
20001be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20001bea:	2200      	movs	r2, #0
20001bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
20001bf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
20001bf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
20001bf8:	4642      	mov	r2, r8
20001bfa:	464b      	mov	r3, r9
20001bfc:	1891      	adds	r1, r2, r2
20001bfe:	63b9      	str	r1, [r7, #56]	; 0x38
20001c00:	415b      	adcs	r3, r3
20001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
20001c04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
20001c08:	4641      	mov	r1, r8
20001c0a:	1851      	adds	r1, r2, r1
20001c0c:	6339      	str	r1, [r7, #48]	; 0x30
20001c0e:	4649      	mov	r1, r9
20001c10:	414b      	adcs	r3, r1
20001c12:	637b      	str	r3, [r7, #52]	; 0x34
20001c14:	f04f 0200 	mov.w	r2, #0
20001c18:	f04f 0300 	mov.w	r3, #0
20001c1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
20001c20:	4659      	mov	r1, fp
20001c22:	00cb      	lsls	r3, r1, #3
20001c24:	4651      	mov	r1, sl
20001c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
20001c2a:	4651      	mov	r1, sl
20001c2c:	00ca      	lsls	r2, r1, #3
20001c2e:	4610      	mov	r0, r2
20001c30:	4619      	mov	r1, r3
20001c32:	4603      	mov	r3, r0
20001c34:	4642      	mov	r2, r8
20001c36:	189b      	adds	r3, r3, r2
20001c38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
20001c3c:	464b      	mov	r3, r9
20001c3e:	460a      	mov	r2, r1
20001c40:	eb42 0303 	adc.w	r3, r2, r3
20001c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
20001c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001c4c:	685b      	ldr	r3, [r3, #4]
20001c4e:	2200      	movs	r2, #0
20001c50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
20001c54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
20001c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
20001c5c:	460b      	mov	r3, r1
20001c5e:	18db      	adds	r3, r3, r3
20001c60:	62bb      	str	r3, [r7, #40]	; 0x28
20001c62:	4613      	mov	r3, r2
20001c64:	eb42 0303 	adc.w	r3, r2, r3
20001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
20001c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
20001c6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
20001c72:	f7fe fac7 	bl	20000204 <__aeabi_uldivmod>
20001c76:	4602      	mov	r2, r0
20001c78:	460b      	mov	r3, r1
20001c7a:	4b0d      	ldr	r3, [pc, #52]	; (20001cb0 <UART_SetConfig+0x2d4>)
20001c7c:	fba3 1302 	umull	r1, r3, r3, r2
20001c80:	095b      	lsrs	r3, r3, #5
20001c82:	2164      	movs	r1, #100	; 0x64
20001c84:	fb01 f303 	mul.w	r3, r1, r3
20001c88:	1ad3      	subs	r3, r2, r3
20001c8a:	00db      	lsls	r3, r3, #3
20001c8c:	3332      	adds	r3, #50	; 0x32
20001c8e:	4a08      	ldr	r2, [pc, #32]	; (20001cb0 <UART_SetConfig+0x2d4>)
20001c90:	fba2 2303 	umull	r2, r3, r2, r3
20001c94:	095b      	lsrs	r3, r3, #5
20001c96:	f003 0207 	and.w	r2, r3, #7
20001c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001c9e:	681b      	ldr	r3, [r3, #0]
20001ca0:	4422      	add	r2, r4
20001ca2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
20001ca4:	e106      	b.n	20001eb4 <UART_SetConfig+0x4d8>
20001ca6:	bf00      	nop
20001ca8:	40011000 	.word	0x40011000
20001cac:	40011400 	.word	0x40011400
20001cb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
20001cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20001cb8:	2200      	movs	r2, #0
20001cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
20001cbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
20001cc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
20001cc6:	4642      	mov	r2, r8
20001cc8:	464b      	mov	r3, r9
20001cca:	1891      	adds	r1, r2, r2
20001ccc:	6239      	str	r1, [r7, #32]
20001cce:	415b      	adcs	r3, r3
20001cd0:	627b      	str	r3, [r7, #36]	; 0x24
20001cd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
20001cd6:	4641      	mov	r1, r8
20001cd8:	1854      	adds	r4, r2, r1
20001cda:	4649      	mov	r1, r9
20001cdc:	eb43 0501 	adc.w	r5, r3, r1
20001ce0:	f04f 0200 	mov.w	r2, #0
20001ce4:	f04f 0300 	mov.w	r3, #0
20001ce8:	00eb      	lsls	r3, r5, #3
20001cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20001cee:	00e2      	lsls	r2, r4, #3
20001cf0:	4614      	mov	r4, r2
20001cf2:	461d      	mov	r5, r3
20001cf4:	4643      	mov	r3, r8
20001cf6:	18e3      	adds	r3, r4, r3
20001cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
20001cfc:	464b      	mov	r3, r9
20001cfe:	eb45 0303 	adc.w	r3, r5, r3
20001d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
20001d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001d0a:	685b      	ldr	r3, [r3, #4]
20001d0c:	2200      	movs	r2, #0
20001d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
20001d12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
20001d16:	f04f 0200 	mov.w	r2, #0
20001d1a:	f04f 0300 	mov.w	r3, #0
20001d1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
20001d22:	4629      	mov	r1, r5
20001d24:	008b      	lsls	r3, r1, #2
20001d26:	4621      	mov	r1, r4
20001d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
20001d2c:	4621      	mov	r1, r4
20001d2e:	008a      	lsls	r2, r1, #2
20001d30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
20001d34:	f7fe fa66 	bl	20000204 <__aeabi_uldivmod>
20001d38:	4602      	mov	r2, r0
20001d3a:	460b      	mov	r3, r1
20001d3c:	4b60      	ldr	r3, [pc, #384]	; (20001ec0 <UART_SetConfig+0x4e4>)
20001d3e:	fba3 2302 	umull	r2, r3, r3, r2
20001d42:	095b      	lsrs	r3, r3, #5
20001d44:	011c      	lsls	r4, r3, #4
20001d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20001d4a:	2200      	movs	r2, #0
20001d4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
20001d50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
20001d54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
20001d58:	4642      	mov	r2, r8
20001d5a:	464b      	mov	r3, r9
20001d5c:	1891      	adds	r1, r2, r2
20001d5e:	61b9      	str	r1, [r7, #24]
20001d60:	415b      	adcs	r3, r3
20001d62:	61fb      	str	r3, [r7, #28]
20001d64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20001d68:	4641      	mov	r1, r8
20001d6a:	1851      	adds	r1, r2, r1
20001d6c:	6139      	str	r1, [r7, #16]
20001d6e:	4649      	mov	r1, r9
20001d70:	414b      	adcs	r3, r1
20001d72:	617b      	str	r3, [r7, #20]
20001d74:	f04f 0200 	mov.w	r2, #0
20001d78:	f04f 0300 	mov.w	r3, #0
20001d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
20001d80:	4659      	mov	r1, fp
20001d82:	00cb      	lsls	r3, r1, #3
20001d84:	4651      	mov	r1, sl
20001d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
20001d8a:	4651      	mov	r1, sl
20001d8c:	00ca      	lsls	r2, r1, #3
20001d8e:	4610      	mov	r0, r2
20001d90:	4619      	mov	r1, r3
20001d92:	4603      	mov	r3, r0
20001d94:	4642      	mov	r2, r8
20001d96:	189b      	adds	r3, r3, r2
20001d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
20001d9c:	464b      	mov	r3, r9
20001d9e:	460a      	mov	r2, r1
20001da0:	eb42 0303 	adc.w	r3, r2, r3
20001da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
20001da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001dac:	685b      	ldr	r3, [r3, #4]
20001dae:	2200      	movs	r2, #0
20001db0:	67bb      	str	r3, [r7, #120]	; 0x78
20001db2:	67fa      	str	r2, [r7, #124]	; 0x7c
20001db4:	f04f 0200 	mov.w	r2, #0
20001db8:	f04f 0300 	mov.w	r3, #0
20001dbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
20001dc0:	4649      	mov	r1, r9
20001dc2:	008b      	lsls	r3, r1, #2
20001dc4:	4641      	mov	r1, r8
20001dc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
20001dca:	4641      	mov	r1, r8
20001dcc:	008a      	lsls	r2, r1, #2
20001dce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
20001dd2:	f7fe fa17 	bl	20000204 <__aeabi_uldivmod>
20001dd6:	4602      	mov	r2, r0
20001dd8:	460b      	mov	r3, r1
20001dda:	4611      	mov	r1, r2
20001ddc:	4b38      	ldr	r3, [pc, #224]	; (20001ec0 <UART_SetConfig+0x4e4>)
20001dde:	fba3 2301 	umull	r2, r3, r3, r1
20001de2:	095b      	lsrs	r3, r3, #5
20001de4:	2264      	movs	r2, #100	; 0x64
20001de6:	fb02 f303 	mul.w	r3, r2, r3
20001dea:	1acb      	subs	r3, r1, r3
20001dec:	011b      	lsls	r3, r3, #4
20001dee:	3332      	adds	r3, #50	; 0x32
20001df0:	4a33      	ldr	r2, [pc, #204]	; (20001ec0 <UART_SetConfig+0x4e4>)
20001df2:	fba2 2303 	umull	r2, r3, r2, r3
20001df6:	095b      	lsrs	r3, r3, #5
20001df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
20001dfc:	441c      	add	r4, r3
20001dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20001e02:	2200      	movs	r2, #0
20001e04:	673b      	str	r3, [r7, #112]	; 0x70
20001e06:	677a      	str	r2, [r7, #116]	; 0x74
20001e08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
20001e0c:	4642      	mov	r2, r8
20001e0e:	464b      	mov	r3, r9
20001e10:	1891      	adds	r1, r2, r2
20001e12:	60b9      	str	r1, [r7, #8]
20001e14:	415b      	adcs	r3, r3
20001e16:	60fb      	str	r3, [r7, #12]
20001e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
20001e1c:	4641      	mov	r1, r8
20001e1e:	1851      	adds	r1, r2, r1
20001e20:	6039      	str	r1, [r7, #0]
20001e22:	4649      	mov	r1, r9
20001e24:	414b      	adcs	r3, r1
20001e26:	607b      	str	r3, [r7, #4]
20001e28:	f04f 0200 	mov.w	r2, #0
20001e2c:	f04f 0300 	mov.w	r3, #0
20001e30:	e9d7 ab00 	ldrd	sl, fp, [r7]
20001e34:	4659      	mov	r1, fp
20001e36:	00cb      	lsls	r3, r1, #3
20001e38:	4651      	mov	r1, sl
20001e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
20001e3e:	4651      	mov	r1, sl
20001e40:	00ca      	lsls	r2, r1, #3
20001e42:	4610      	mov	r0, r2
20001e44:	4619      	mov	r1, r3
20001e46:	4603      	mov	r3, r0
20001e48:	4642      	mov	r2, r8
20001e4a:	189b      	adds	r3, r3, r2
20001e4c:	66bb      	str	r3, [r7, #104]	; 0x68
20001e4e:	464b      	mov	r3, r9
20001e50:	460a      	mov	r2, r1
20001e52:	eb42 0303 	adc.w	r3, r2, r3
20001e56:	66fb      	str	r3, [r7, #108]	; 0x6c
20001e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001e5c:	685b      	ldr	r3, [r3, #4]
20001e5e:	2200      	movs	r2, #0
20001e60:	663b      	str	r3, [r7, #96]	; 0x60
20001e62:	667a      	str	r2, [r7, #100]	; 0x64
20001e64:	f04f 0200 	mov.w	r2, #0
20001e68:	f04f 0300 	mov.w	r3, #0
20001e6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
20001e70:	4649      	mov	r1, r9
20001e72:	008b      	lsls	r3, r1, #2
20001e74:	4641      	mov	r1, r8
20001e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
20001e7a:	4641      	mov	r1, r8
20001e7c:	008a      	lsls	r2, r1, #2
20001e7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
20001e82:	f7fe f9bf 	bl	20000204 <__aeabi_uldivmod>
20001e86:	4602      	mov	r2, r0
20001e88:	460b      	mov	r3, r1
20001e8a:	4b0d      	ldr	r3, [pc, #52]	; (20001ec0 <UART_SetConfig+0x4e4>)
20001e8c:	fba3 1302 	umull	r1, r3, r3, r2
20001e90:	095b      	lsrs	r3, r3, #5
20001e92:	2164      	movs	r1, #100	; 0x64
20001e94:	fb01 f303 	mul.w	r3, r1, r3
20001e98:	1ad3      	subs	r3, r2, r3
20001e9a:	011b      	lsls	r3, r3, #4
20001e9c:	3332      	adds	r3, #50	; 0x32
20001e9e:	4a08      	ldr	r2, [pc, #32]	; (20001ec0 <UART_SetConfig+0x4e4>)
20001ea0:	fba2 2303 	umull	r2, r3, r2, r3
20001ea4:	095b      	lsrs	r3, r3, #5
20001ea6:	f003 020f 	and.w	r2, r3, #15
20001eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20001eae:	681b      	ldr	r3, [r3, #0]
20001eb0:	4422      	add	r2, r4
20001eb2:	609a      	str	r2, [r3, #8]
}
20001eb4:	bf00      	nop
20001eb6:	f507 7780 	add.w	r7, r7, #256	; 0x100
20001eba:	46bd      	mov	sp, r7
20001ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20001ec0:	51eb851f 	.word	0x51eb851f

20001ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
20001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 20001efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20001ec8:	480d      	ldr	r0, [pc, #52]	; (20001f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
20001eca:	490e      	ldr	r1, [pc, #56]	; (20001f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
20001ecc:	4a0e      	ldr	r2, [pc, #56]	; (20001f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
20001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
20001ed0:	e002      	b.n	20001ed8 <LoopCopyDataInit>

20001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20001ed6:	3304      	adds	r3, #4

20001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
20001edc:	d3f9      	bcc.n	20001ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20001ede:	4a0b      	ldr	r2, [pc, #44]	; (20001f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
20001ee0:	4c0b      	ldr	r4, [pc, #44]	; (20001f10 <LoopFillZerobss+0x26>)
  movs r3, #0
20001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
20001ee4:	e001      	b.n	20001eea <LoopFillZerobss>

20001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20001ee8:	3204      	adds	r2, #4

20001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
20001eec:	d3fb      	bcc.n	20001ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
20001eee:	f7fe fb8b 	bl	20000608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20001ef2:	f000 fa53 	bl	2000239c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20001ef6:	f000 f80f 	bl	20001f18 <main>
  bx  lr    
20001efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20001efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
20001f00:	20002460 	.word	0x20002460
  ldr r1, =_edata
20001f04:	20002478 	.word	0x20002478
  ldr r2, =_sidata
20001f08:	20002460 	.word	0x20002460
  ldr r2, =_sbss
20001f0c:	20002478 	.word	0x20002478
  ldr r4, =_ebss
20001f10:	200024fc 	.word	0x200024fc

20001f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20001f14:	e7fe      	b.n	20001f14 <ADC_IRQHandler>
	...

20001f18 <main>:
 * @retval None
 */


int main(void)
{  
20001f18:	b5b0      	push	{r4, r5, r7, lr}
20001f1a:	b08e      	sub	sp, #56	; 0x38
20001f1c:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
20001f1e:	f7fe fba9 	bl	20000674 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
20001f22:	f000 f943 	bl	200021ac <SystemClock_Config>

	/* Initialize LED1, LED2 and LED3 */
	BSP_LED_Init(LED1);
20001f26:	2000      	movs	r0, #0
20001f28:	f7fe faea 	bl	20000500 <BSP_LED_Init>
	BSP_LED_Init(LED2);
20001f2c:	2001      	movs	r0, #1
20001f2e:	f7fe fae7 	bl	20000500 <BSP_LED_Init>
	BSP_LED_Init(LED3);
20001f32:	2002      	movs	r0, #2
20001f34:	f7fe fae4 	bl	20000500 <BSP_LED_Init>

	//UART init
	UartHandle.Instance        = USARTx;
20001f38:	4b4a      	ldr	r3, [pc, #296]	; (20002064 <main+0x14c>)
20001f3a:	4a4b      	ldr	r2, [pc, #300]	; (20002068 <main+0x150>)
20001f3c:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 115200;
20001f3e:	4b49      	ldr	r3, [pc, #292]	; (20002064 <main+0x14c>)
20001f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
20001f44:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
20001f46:	4b47      	ldr	r3, [pc, #284]	; (20002064 <main+0x14c>)
20001f48:	2200      	movs	r2, #0
20001f4a:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
20001f4c:	4b45      	ldr	r3, [pc, #276]	; (20002064 <main+0x14c>)
20001f4e:	2200      	movs	r2, #0
20001f50:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
20001f52:	4b44      	ldr	r3, [pc, #272]	; (20002064 <main+0x14c>)
20001f54:	2200      	movs	r2, #0
20001f56:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
20001f58:	4b42      	ldr	r3, [pc, #264]	; (20002064 <main+0x14c>)
20001f5a:	2200      	movs	r2, #0
20001f5c:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
20001f5e:	4b41      	ldr	r3, [pc, #260]	; (20002064 <main+0x14c>)
20001f60:	220c      	movs	r2, #12
20001f62:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
20001f64:	4b3f      	ldr	r3, [pc, #252]	; (20002064 <main+0x14c>)
20001f66:	2200      	movs	r2, #0
20001f68:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
20001f6a:	483e      	ldr	r0, [pc, #248]	; (20002064 <main+0x14c>)
20001f6c:	f7ff fb9e 	bl	200016ac <HAL_UART_Init>
20001f70:	4603      	mov	r3, r0
20001f72:	2b00      	cmp	r3, #0
20001f74:	d003      	beq.n	20001f7e <main+0x66>
	{
		//Initialization Error
		BSP_LED_On(LED2);
20001f76:	2001      	movs	r0, #1
20001f78:	f7fe fb12 	bl	200005a0 <BSP_LED_On>
		for(;;);
20001f7c:	e7fe      	b.n	20001f7c <main+0x64>

	/* Erase the user Flash area
    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	/* Get the 1st sector to erase */
	FirstSector = GetSector(FLASH_USER_START_ADDR);
20001f7e:	483b      	ldr	r0, [pc, #236]	; (2000206c <main+0x154>)
20001f80:	f000 f882 	bl	20002088 <GetSector>
20001f84:	4603      	mov	r3, r0
20001f86:	4a3a      	ldr	r2, [pc, #232]	; (20002070 <main+0x158>)
20001f88:	6013      	str	r3, [r2, #0]
	/* Get the number of sector to erase from 1st sector*/
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
20001f8a:	483a      	ldr	r0, [pc, #232]	; (20002074 <main+0x15c>)
20001f8c:	f000 f8e6 	bl	2000215c <GetSectorSize>
20001f90:	4602      	mov	r2, r0
20001f92:	4b39      	ldr	r3, [pc, #228]	; (20002078 <main+0x160>)
20001f94:	4413      	add	r3, r2
20001f96:	4618      	mov	r0, r3
20001f98:	f000 f876 	bl	20002088 <GetSector>
20001f9c:	4602      	mov	r2, r0
20001f9e:	4b34      	ldr	r3, [pc, #208]	; (20002070 <main+0x158>)
20001fa0:	681b      	ldr	r3, [r3, #0]
20001fa2:	1ad3      	subs	r3, r2, r3
20001fa4:	3301      	adds	r3, #1
20001fa6:	4a35      	ldr	r2, [pc, #212]	; (2000207c <main+0x164>)
20001fa8:	6013      	str	r3, [r2, #0]
	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
20001faa:	4b35      	ldr	r3, [pc, #212]	; (20002080 <main+0x168>)
20001fac:	2200      	movs	r2, #0
20001fae:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
20001fb0:	4b33      	ldr	r3, [pc, #204]	; (20002080 <main+0x168>)
20001fb2:	2202      	movs	r2, #2
20001fb4:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FirstSector;
20001fb6:	4b2e      	ldr	r3, [pc, #184]	; (20002070 <main+0x158>)
20001fb8:	681b      	ldr	r3, [r3, #0]
20001fba:	4a31      	ldr	r2, [pc, #196]	; (20002080 <main+0x168>)
20001fbc:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
20001fbe:	4b2f      	ldr	r3, [pc, #188]	; (2000207c <main+0x164>)
20001fc0:	681b      	ldr	r3, [r3, #0]
20001fc2:	4a2f      	ldr	r2, [pc, #188]	; (20002080 <main+0x168>)
20001fc4:	60d3      	str	r3, [r2, #12]


	uint8_t printout[50] = "Hello from RAM!\r\n";
20001fc6:	4b2f      	ldr	r3, [pc, #188]	; (20002084 <main+0x16c>)
20001fc8:	463c      	mov	r4, r7
20001fca:	461d      	mov	r5, r3
20001fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
20001fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
20001fd0:	682b      	ldr	r3, [r5, #0]
20001fd2:	8023      	strh	r3, [r4, #0]
20001fd4:	f107 0312 	add.w	r3, r7, #18
20001fd8:	2220      	movs	r2, #32
20001fda:	2100      	movs	r1, #0
20001fdc:	4618      	mov	r0, r3
20001fde:	f000 f9d5 	bl	2000238c <memset>
	for(uint8_t i = 0; i < 10; i++) {
20001fe2:	2300      	movs	r3, #0
20001fe4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
20001fe8:	e00b      	b.n	20002002 <main+0xea>
		//UART_
		HAL_UART_Transmit(&UartHandle, printout, 18, HAL_MAX_DELAY);
20001fea:	4639      	mov	r1, r7
20001fec:	f04f 33ff 	mov.w	r3, #4294967295
20001ff0:	2212      	movs	r2, #18
20001ff2:	481c      	ldr	r0, [pc, #112]	; (20002064 <main+0x14c>)
20001ff4:	f7ff fbaa 	bl	2000174c <HAL_UART_Transmit>
	for(uint8_t i = 0; i < 10; i++) {
20001ff8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20001ffc:	3301      	adds	r3, #1
20001ffe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
20002002:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20002006:	2b09      	cmp	r3, #9
20002008:	d9ef      	bls.n	20001fea <main+0xd2>
	}

	/* Infinite loop */
	while (1)
	{
		HAL_Delay(500);
2000200a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
2000200e:	f7fe fba5 	bl	2000075c <HAL_Delay>
		BSP_LED_On(LED1);
20002012:	2000      	movs	r0, #0
20002014:	f7fe fac4 	bl	200005a0 <BSP_LED_On>
		//BSP_LED_On(LED2);
		BSP_LED_On(LED3);
20002018:	2002      	movs	r0, #2
2000201a:	f7fe fac1 	bl	200005a0 <BSP_LED_On>
		HAL_Delay(500);
2000201e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
20002022:	f7fe fb9b 	bl	2000075c <HAL_Delay>
		for(uint16_t i = 0; i < 0xFFFF; i++)
20002026:	2300      	movs	r3, #0
20002028:	86bb      	strh	r3, [r7, #52]	; 0x34
2000202a:	e003      	b.n	20002034 <main+0x11c>
			asm("nop");
2000202c:	bf00      	nop
		for(uint16_t i = 0; i < 0xFFFF; i++)
2000202e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
20002030:	3301      	adds	r3, #1
20002032:	86bb      	strh	r3, [r7, #52]	; 0x34
20002034:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
20002036:	f64f 72ff 	movw	r2, #65535	; 0xffff
2000203a:	4293      	cmp	r3, r2
2000203c:	d1f6      	bne.n	2000202c <main+0x114>
		BSP_LED_Off(LED1);
2000203e:	2000      	movs	r0, #0
20002040:	f7fe fac8 	bl	200005d4 <BSP_LED_Off>
		//BSP_LED_Off(LED2);
		BSP_LED_Off(LED3);
20002044:	2002      	movs	r0, #2
20002046:	f7fe fac5 	bl	200005d4 <BSP_LED_Off>
		for(uint16_t i = 0; i < 0xFFFF; i++)
2000204a:	2300      	movs	r3, #0
2000204c:	867b      	strh	r3, [r7, #50]	; 0x32
2000204e:	e003      	b.n	20002058 <main+0x140>
			asm("nop");
20002050:	bf00      	nop
		for(uint16_t i = 0; i < 0xFFFF; i++)
20002052:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
20002054:	3301      	adds	r3, #1
20002056:	867b      	strh	r3, [r7, #50]	; 0x32
20002058:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
2000205a:	f64f 72ff 	movw	r2, #65535	; 0xffff
2000205e:	4293      	cmp	r3, r2
20002060:	d1f6      	bne.n	20002050 <main+0x138>
		HAL_Delay(500);
20002062:	e7d2      	b.n	2000200a <main+0xf2>
20002064:	200024a0 	.word	0x200024a0
20002068:	40004800 	.word	0x40004800
2000206c:	08008000 	.word	0x08008000
20002070:	20002498 	.word	0x20002498
20002074:	08060000 	.word	0x08060000
20002078:	0805ffff 	.word	0x0805ffff
2000207c:	2000249c 	.word	0x2000249c
20002080:	200024e8 	.word	0x200024e8
20002084:	200023fc 	.word	0x200023fc

20002088 <GetSector>:
 * @brief  Gets the sector of a given address
 * @param  None
 * @retval The sector of a given address
 */
static uint32_t GetSector(uint32_t Address)
{
20002088:	b480      	push	{r7}
2000208a:	b085      	sub	sp, #20
2000208c:	af00      	add	r7, sp, #0
2000208e:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
20002090:	2300      	movs	r3, #0
20002092:	60fb      	str	r3, [r7, #12]

	if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
20002094:	687b      	ldr	r3, [r7, #4]
20002096:	4a2a      	ldr	r2, [pc, #168]	; (20002140 <GetSector+0xb8>)
20002098:	4293      	cmp	r3, r2
2000209a:	d206      	bcs.n	200020aa <GetSector+0x22>
2000209c:	687b      	ldr	r3, [r7, #4]
2000209e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
200020a2:	d302      	bcc.n	200020aa <GetSector+0x22>
	{
		sector = FLASH_SECTOR_0;
200020a4:	2300      	movs	r3, #0
200020a6:	60fb      	str	r3, [r7, #12]
200020a8:	e043      	b.n	20002132 <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
200020aa:	687b      	ldr	r3, [r7, #4]
200020ac:	4a25      	ldr	r2, [pc, #148]	; (20002144 <GetSector+0xbc>)
200020ae:	4293      	cmp	r3, r2
200020b0:	d206      	bcs.n	200020c0 <GetSector+0x38>
200020b2:	687b      	ldr	r3, [r7, #4]
200020b4:	4a22      	ldr	r2, [pc, #136]	; (20002140 <GetSector+0xb8>)
200020b6:	4293      	cmp	r3, r2
200020b8:	d302      	bcc.n	200020c0 <GetSector+0x38>
	{
		sector = FLASH_SECTOR_1;
200020ba:	2301      	movs	r3, #1
200020bc:	60fb      	str	r3, [r7, #12]
200020be:	e038      	b.n	20002132 <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
200020c0:	687b      	ldr	r3, [r7, #4]
200020c2:	4a21      	ldr	r2, [pc, #132]	; (20002148 <GetSector+0xc0>)
200020c4:	4293      	cmp	r3, r2
200020c6:	d206      	bcs.n	200020d6 <GetSector+0x4e>
200020c8:	687b      	ldr	r3, [r7, #4]
200020ca:	4a1e      	ldr	r2, [pc, #120]	; (20002144 <GetSector+0xbc>)
200020cc:	4293      	cmp	r3, r2
200020ce:	d302      	bcc.n	200020d6 <GetSector+0x4e>
	{
		sector = FLASH_SECTOR_2;
200020d0:	2302      	movs	r3, #2
200020d2:	60fb      	str	r3, [r7, #12]
200020d4:	e02d      	b.n	20002132 <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
200020d6:	687b      	ldr	r3, [r7, #4]
200020d8:	4a1c      	ldr	r2, [pc, #112]	; (2000214c <GetSector+0xc4>)
200020da:	4293      	cmp	r3, r2
200020dc:	d806      	bhi.n	200020ec <GetSector+0x64>
200020de:	687b      	ldr	r3, [r7, #4]
200020e0:	4a19      	ldr	r2, [pc, #100]	; (20002148 <GetSector+0xc0>)
200020e2:	4293      	cmp	r3, r2
200020e4:	d302      	bcc.n	200020ec <GetSector+0x64>
	{
		sector = FLASH_SECTOR_3;
200020e6:	2303      	movs	r3, #3
200020e8:	60fb      	str	r3, [r7, #12]
200020ea:	e022      	b.n	20002132 <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
200020ec:	687b      	ldr	r3, [r7, #4]
200020ee:	4a18      	ldr	r2, [pc, #96]	; (20002150 <GetSector+0xc8>)
200020f0:	4293      	cmp	r3, r2
200020f2:	d806      	bhi.n	20002102 <GetSector+0x7a>
200020f4:	687b      	ldr	r3, [r7, #4]
200020f6:	4a15      	ldr	r2, [pc, #84]	; (2000214c <GetSector+0xc4>)
200020f8:	4293      	cmp	r3, r2
200020fa:	d902      	bls.n	20002102 <GetSector+0x7a>
	{
		sector = FLASH_SECTOR_4;
200020fc:	2304      	movs	r3, #4
200020fe:	60fb      	str	r3, [r7, #12]
20002100:	e017      	b.n	20002132 <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
20002102:	687b      	ldr	r3, [r7, #4]
20002104:	4a13      	ldr	r2, [pc, #76]	; (20002154 <GetSector+0xcc>)
20002106:	4293      	cmp	r3, r2
20002108:	d806      	bhi.n	20002118 <GetSector+0x90>
2000210a:	687b      	ldr	r3, [r7, #4]
2000210c:	4a10      	ldr	r2, [pc, #64]	; (20002150 <GetSector+0xc8>)
2000210e:	4293      	cmp	r3, r2
20002110:	d902      	bls.n	20002118 <GetSector+0x90>
	{
		sector = FLASH_SECTOR_5;
20002112:	2305      	movs	r3, #5
20002114:	60fb      	str	r3, [r7, #12]
20002116:	e00c      	b.n	20002132 <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
20002118:	687b      	ldr	r3, [r7, #4]
2000211a:	4a0f      	ldr	r2, [pc, #60]	; (20002158 <GetSector+0xd0>)
2000211c:	4293      	cmp	r3, r2
2000211e:	d806      	bhi.n	2000212e <GetSector+0xa6>
20002120:	687b      	ldr	r3, [r7, #4]
20002122:	4a0c      	ldr	r2, [pc, #48]	; (20002154 <GetSector+0xcc>)
20002124:	4293      	cmp	r3, r2
20002126:	d902      	bls.n	2000212e <GetSector+0xa6>
	{
		sector = FLASH_SECTOR_6;
20002128:	2306      	movs	r3, #6
2000212a:	60fb      	str	r3, [r7, #12]
2000212c:	e001      	b.n	20002132 <GetSector+0xaa>
	}
	else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7) */
	{
		sector = FLASH_SECTOR_7;
2000212e:	2307      	movs	r3, #7
20002130:	60fb      	str	r3, [r7, #12]
	}
	return sector;
20002132:	68fb      	ldr	r3, [r7, #12]
}
20002134:	4618      	mov	r0, r3
20002136:	3714      	adds	r7, #20
20002138:	46bd      	mov	sp, r7
2000213a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000213e:	4770      	bx	lr
20002140:	08004000 	.word	0x08004000
20002144:	08008000 	.word	0x08008000
20002148:	0800c000 	.word	0x0800c000
2000214c:	0800ffff 	.word	0x0800ffff
20002150:	0801ffff 	.word	0x0801ffff
20002154:	0803ffff 	.word	0x0803ffff
20002158:	0805ffff 	.word	0x0805ffff

2000215c <GetSectorSize>:
 * @brief  Gets sector Size
 * @param  None
 * @retval The size of a given sector
 */
static uint32_t GetSectorSize(uint32_t Sector)
{
2000215c:	b480      	push	{r7}
2000215e:	b085      	sub	sp, #20
20002160:	af00      	add	r7, sp, #0
20002162:	6078      	str	r0, [r7, #4]
	uint32_t sectorsize = 0x00;
20002164:	2300      	movs	r3, #0
20002166:	60fb      	str	r3, [r7, #12]
	if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) || (Sector == FLASH_SECTOR_3))
20002168:	687b      	ldr	r3, [r7, #4]
2000216a:	2b00      	cmp	r3, #0
2000216c:	d008      	beq.n	20002180 <GetSectorSize+0x24>
2000216e:	687b      	ldr	r3, [r7, #4]
20002170:	2b01      	cmp	r3, #1
20002172:	d005      	beq.n	20002180 <GetSectorSize+0x24>
20002174:	687b      	ldr	r3, [r7, #4]
20002176:	2b02      	cmp	r3, #2
20002178:	d002      	beq.n	20002180 <GetSectorSize+0x24>
2000217a:	687b      	ldr	r3, [r7, #4]
2000217c:	2b03      	cmp	r3, #3
2000217e:	d103      	bne.n	20002188 <GetSectorSize+0x2c>
	{
		sectorsize = 16 * 1024;
20002180:	f44f 4380 	mov.w	r3, #16384	; 0x4000
20002184:	60fb      	str	r3, [r7, #12]
20002186:	e009      	b.n	2000219c <GetSectorSize+0x40>
	}
	else if(Sector == FLASH_SECTOR_4)
20002188:	687b      	ldr	r3, [r7, #4]
2000218a:	2b04      	cmp	r3, #4
2000218c:	d103      	bne.n	20002196 <GetSectorSize+0x3a>
	{
		sectorsize = 64 * 1024;
2000218e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20002192:	60fb      	str	r3, [r7, #12]
20002194:	e002      	b.n	2000219c <GetSectorSize+0x40>
	}
	else
	{
		sectorsize = 128 * 1024;
20002196:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2000219a:	60fb      	str	r3, [r7, #12]
	}
	return sectorsize;
2000219c:	68fb      	ldr	r3, [r7, #12]
}
2000219e:	4618      	mov	r0, r3
200021a0:	3714      	adds	r7, #20
200021a2:	46bd      	mov	sp, r7
200021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200021a8:	4770      	bx	lr
	...

200021ac <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
200021ac:	b580      	push	{r7, lr}
200021ae:	b096      	sub	sp, #88	; 0x58
200021b0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
200021b2:	2300      	movs	r3, #0
200021b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
200021b8:	2300      	movs	r3, #0
200021ba:	60bb      	str	r3, [r7, #8]
200021bc:	4b31      	ldr	r3, [pc, #196]	; (20002284 <SystemClock_Config+0xd8>)
200021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200021c0:	4a30      	ldr	r2, [pc, #192]	; (20002284 <SystemClock_Config+0xd8>)
200021c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200021c6:	6413      	str	r3, [r2, #64]	; 0x40
200021c8:	4b2e      	ldr	r3, [pc, #184]	; (20002284 <SystemClock_Config+0xd8>)
200021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200021d0:	60bb      	str	r3, [r7, #8]
200021d2:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
200021d4:	2300      	movs	r3, #0
200021d6:	607b      	str	r3, [r7, #4]
200021d8:	4b2b      	ldr	r3, [pc, #172]	; (20002288 <SystemClock_Config+0xdc>)
200021da:	681b      	ldr	r3, [r3, #0]
200021dc:	4a2a      	ldr	r2, [pc, #168]	; (20002288 <SystemClock_Config+0xdc>)
200021de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
200021e2:	6013      	str	r3, [r2, #0]
200021e4:	4b28      	ldr	r3, [pc, #160]	; (20002288 <SystemClock_Config+0xdc>)
200021e6:	681b      	ldr	r3, [r3, #0]
200021e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
200021ec:	607b      	str	r3, [r7, #4]
200021ee:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
200021f0:	2301      	movs	r3, #1
200021f2:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
200021f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
200021f8:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
200021fa:	2302      	movs	r3, #2
200021fc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
200021fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20002202:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
20002204:	2308      	movs	r3, #8
20002206:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
20002208:	f44f 73b4 	mov.w	r3, #360	; 0x168
2000220c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
2000220e:	2302      	movs	r3, #2
20002210:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
20002212:	2307      	movs	r3, #7
20002214:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLR = 2;
20002216:	2302      	movs	r3, #2
20002218:	63fb      	str	r3, [r7, #60]	; 0x3c

	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
2000221a:	f107 030c 	add.w	r3, r7, #12
2000221e:	4618      	mov	r0, r3
20002220:	f7fe fda4 	bl	20000d6c <HAL_RCC_OscConfig>
20002224:	4603      	mov	r3, r0
20002226:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if(ret != HAL_OK)
2000222a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
2000222e:	2b00      	cmp	r3, #0
20002230:	d000      	beq.n	20002234 <SystemClock_Config+0x88>
	{
		while(1) { ; }
20002232:	e7fe      	b.n	20002232 <SystemClock_Config+0x86>
	}

	/* Activate the OverDrive to reach the 180 MHz Frequency */
	ret = HAL_PWREx_EnableOverDrive();
20002234:	f7fe fd4a 	bl	20000ccc <HAL_PWREx_EnableOverDrive>
20002238:	4603      	mov	r3, r0
2000223a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if(ret != HAL_OK)
2000223e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
20002242:	2b00      	cmp	r3, #0
20002244:	d000      	beq.n	20002248 <SystemClock_Config+0x9c>
	{
		while(1) { ; }
20002246:	e7fe      	b.n	20002246 <SystemClock_Config+0x9a>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
20002248:	230f      	movs	r3, #15
2000224a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2000224c:	2302      	movs	r3, #2
2000224e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20002250:	2300      	movs	r3, #0
20002252:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
20002254:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
20002258:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
2000225a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2000225e:	653b      	str	r3, [r7, #80]	; 0x50

	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
20002260:	f107 0340 	add.w	r3, r7, #64	; 0x40
20002264:	2105      	movs	r1, #5
20002266:	4618      	mov	r0, r3
20002268:	f7ff f800 	bl	2000126c <HAL_RCC_ClockConfig>
2000226c:	4603      	mov	r3, r0
2000226e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if(ret != HAL_OK)
20002272:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
20002276:	2b00      	cmp	r3, #0
20002278:	d000      	beq.n	2000227c <SystemClock_Config+0xd0>
	{
		while(1) { ; }
2000227a:	e7fe      	b.n	2000227a <SystemClock_Config+0xce>
	}
}
2000227c:	bf00      	nop
2000227e:	3758      	adds	r7, #88	; 0x58
20002280:	46bd      	mov	sp, r7
20002282:	bd80      	pop	{r7, pc}
20002284:	40023800 	.word	0x40023800
20002288:	40007000 	.word	0x40007000

2000228c <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
2000228c:	b580      	push	{r7, lr}
2000228e:	b08a      	sub	sp, #40	; 0x28
20002290:	af00      	add	r7, sp, #0
20002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
20002294:	2300      	movs	r3, #0
20002296:	613b      	str	r3, [r7, #16]
20002298:	4b23      	ldr	r3, [pc, #140]	; (20002328 <HAL_UART_MspInit+0x9c>)
2000229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000229c:	4a22      	ldr	r2, [pc, #136]	; (20002328 <HAL_UART_MspInit+0x9c>)
2000229e:	f043 0308 	orr.w	r3, r3, #8
200022a2:	6313      	str	r3, [r2, #48]	; 0x30
200022a4:	4b20      	ldr	r3, [pc, #128]	; (20002328 <HAL_UART_MspInit+0x9c>)
200022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200022a8:	f003 0308 	and.w	r3, r3, #8
200022ac:	613b      	str	r3, [r7, #16]
200022ae:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
200022b0:	2300      	movs	r3, #0
200022b2:	60fb      	str	r3, [r7, #12]
200022b4:	4b1c      	ldr	r3, [pc, #112]	; (20002328 <HAL_UART_MspInit+0x9c>)
200022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200022b8:	4a1b      	ldr	r2, [pc, #108]	; (20002328 <HAL_UART_MspInit+0x9c>)
200022ba:	f043 0308 	orr.w	r3, r3, #8
200022be:	6313      	str	r3, [r2, #48]	; 0x30
200022c0:	4b19      	ldr	r3, [pc, #100]	; (20002328 <HAL_UART_MspInit+0x9c>)
200022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200022c4:	f003 0308 	and.w	r3, r3, #8
200022c8:	60fb      	str	r3, [r7, #12]
200022ca:	68fb      	ldr	r3, [r7, #12]

  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
200022cc:	2300      	movs	r3, #0
200022ce:	60bb      	str	r3, [r7, #8]
200022d0:	4b15      	ldr	r3, [pc, #84]	; (20002328 <HAL_UART_MspInit+0x9c>)
200022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200022d4:	4a14      	ldr	r2, [pc, #80]	; (20002328 <HAL_UART_MspInit+0x9c>)
200022d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
200022da:	6413      	str	r3, [r2, #64]	; 0x40
200022dc:	4b12      	ldr	r3, [pc, #72]	; (20002328 <HAL_UART_MspInit+0x9c>)
200022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200022e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
200022e4:	60bb      	str	r3, [r7, #8]
200022e6:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
200022e8:	f44f 7380 	mov.w	r3, #256	; 0x100
200022ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
200022ee:	2302      	movs	r3, #2
200022f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
200022f2:	2301      	movs	r3, #1
200022f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
200022f6:	2303      	movs	r3, #3
200022f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
200022fa:	2307      	movs	r3, #7
200022fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
200022fe:	f107 0314 	add.w	r3, r7, #20
20002302:	4619      	mov	r1, r3
20002304:	4809      	ldr	r0, [pc, #36]	; (2000232c <HAL_UART_MspInit+0xa0>)
20002306:	f7fe fb33 	bl	20000970 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
2000230a:	f44f 7300 	mov.w	r3, #512	; 0x200
2000230e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
20002310:	2307      	movs	r3, #7
20002312:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
20002314:	f107 0314 	add.w	r3, r7, #20
20002318:	4619      	mov	r1, r3
2000231a:	4804      	ldr	r0, [pc, #16]	; (2000232c <HAL_UART_MspInit+0xa0>)
2000231c:	f7fe fb28 	bl	20000970 <HAL_GPIO_Init>
}
20002320:	bf00      	nop
20002322:	3728      	adds	r7, #40	; 0x28
20002324:	46bd      	mov	sp, r7
20002326:	bd80      	pop	{r7, pc}
20002328:	40023800 	.word	0x40023800
2000232c:	40020c00 	.word	0x40020c00

20002330 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
20002330:	b480      	push	{r7}
20002332:	af00      	add	r7, sp, #0
}
20002334:	bf00      	nop
20002336:	46bd      	mov	sp, r7
20002338:	f85d 7b04 	ldr.w	r7, [sp], #4
2000233c:	4770      	bx	lr

2000233e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
2000233e:	b480      	push	{r7}
20002340:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
20002342:	e7fe      	b.n	20002342 <HardFault_Handler+0x4>

20002344 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
20002344:	b480      	push	{r7}
20002346:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
20002348:	e7fe      	b.n	20002348 <MemManage_Handler+0x4>

2000234a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
2000234a:	b480      	push	{r7}
2000234c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
2000234e:	e7fe      	b.n	2000234e <BusFault_Handler+0x4>

20002350 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
20002350:	b480      	push	{r7}
20002352:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
20002354:	e7fe      	b.n	20002354 <UsageFault_Handler+0x4>

20002356 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
20002356:	b480      	push	{r7}
20002358:	af00      	add	r7, sp, #0
}
2000235a:	bf00      	nop
2000235c:	46bd      	mov	sp, r7
2000235e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002362:	4770      	bx	lr

20002364 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
20002364:	b480      	push	{r7}
20002366:	af00      	add	r7, sp, #0
}
20002368:	bf00      	nop
2000236a:	46bd      	mov	sp, r7
2000236c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002370:	4770      	bx	lr

20002372 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
20002372:	b480      	push	{r7}
20002374:	af00      	add	r7, sp, #0
}
20002376:	bf00      	nop
20002378:	46bd      	mov	sp, r7
2000237a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000237e:	4770      	bx	lr

20002380 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
20002380:	b580      	push	{r7, lr}
20002382:	af00      	add	r7, sp, #0
  HAL_IncTick();
20002384:	f7fe f9ca 	bl	2000071c <HAL_IncTick>
}
20002388:	bf00      	nop
2000238a:	bd80      	pop	{r7, pc}

2000238c <memset>:
2000238c:	4402      	add	r2, r0
2000238e:	4603      	mov	r3, r0
20002390:	4293      	cmp	r3, r2
20002392:	d100      	bne.n	20002396 <memset+0xa>
20002394:	4770      	bx	lr
20002396:	f803 1b01 	strb.w	r1, [r3], #1
2000239a:	e7f9      	b.n	20002390 <memset+0x4>

2000239c <__libc_init_array>:
2000239c:	b570      	push	{r4, r5, r6, lr}
2000239e:	4d0d      	ldr	r5, [pc, #52]	; (200023d4 <__libc_init_array+0x38>)
200023a0:	4c0d      	ldr	r4, [pc, #52]	; (200023d8 <__libc_init_array+0x3c>)
200023a2:	1b64      	subs	r4, r4, r5
200023a4:	10a4      	asrs	r4, r4, #2
200023a6:	2600      	movs	r6, #0
200023a8:	42a6      	cmp	r6, r4
200023aa:	d109      	bne.n	200023c0 <__libc_init_array+0x24>
200023ac:	4d0b      	ldr	r5, [pc, #44]	; (200023dc <__libc_init_array+0x40>)
200023ae:	4c0c      	ldr	r4, [pc, #48]	; (200023e0 <__libc_init_array+0x44>)
200023b0:	f000 f818 	bl	200023e4 <_init>
200023b4:	1b64      	subs	r4, r4, r5
200023b6:	10a4      	asrs	r4, r4, #2
200023b8:	2600      	movs	r6, #0
200023ba:	42a6      	cmp	r6, r4
200023bc:	d105      	bne.n	200023ca <__libc_init_array+0x2e>
200023be:	bd70      	pop	{r4, r5, r6, pc}
200023c0:	f855 3b04 	ldr.w	r3, [r5], #4
200023c4:	4798      	blx	r3
200023c6:	3601      	adds	r6, #1
200023c8:	e7ee      	b.n	200023a8 <__libc_init_array+0xc>
200023ca:	f855 3b04 	ldr.w	r3, [r5], #4
200023ce:	4798      	blx	r3
200023d0:	3601      	adds	r6, #1
200023d2:	e7f2      	b.n	200023ba <__libc_init_array+0x1e>
200023d4:	20002458 	.word	0x20002458
200023d8:	20002458 	.word	0x20002458
200023dc:	20002458 	.word	0x20002458
200023e0:	2000245c 	.word	0x2000245c

200023e4 <_init>:
200023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200023e6:	bf00      	nop
200023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
200023ea:	bc08      	pop	{r3}
200023ec:	469e      	mov	lr, r3
200023ee:	4770      	bx	lr

200023f0 <_fini>:
200023f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200023f2:	bf00      	nop
200023f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
200023f6:	bc08      	pop	{r3}
200023f8:	469e      	mov	lr, r3
200023fa:	4770      	bx	lr
