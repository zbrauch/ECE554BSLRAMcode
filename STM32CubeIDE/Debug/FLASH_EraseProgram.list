
FLASH_EraseProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  20001000  20001000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000146c  200011c4  200011c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  20002630  20002630  00002630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20002650  20002650  00002688  2**0
                  CONTENTS
  4 .ARM          00000008  20002650  20002650  00002650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20002658  20002688  00002688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20002658  20002658  00002658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  2000265c  2000265c  0000265c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20002660  20002660  00002660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030c0  20002688  20002688  00002688  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005748  20005748  00002688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002688  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fbc  00000000  00000000  000026fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023fd  00000000  00000000  000136b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000701a  00000000  00000000  00015ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009f0  00000000  00000000  0001cad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009f2  00000000  00000000  0001d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002209b  00000000  00000000  0001deb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001253b  00000000  00000000  0003ff4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3412  00000000  00000000  00052488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001e30  00000000  00000000  0012589c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  001276cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200011c4 <__do_global_dtors_aux>:
200011c4:	b510      	push	{r4, lr}
200011c6:	4c05      	ldr	r4, [pc, #20]	; (200011dc <__do_global_dtors_aux+0x18>)
200011c8:	7823      	ldrb	r3, [r4, #0]
200011ca:	b933      	cbnz	r3, 200011da <__do_global_dtors_aux+0x16>
200011cc:	4b04      	ldr	r3, [pc, #16]	; (200011e0 <__do_global_dtors_aux+0x1c>)
200011ce:	b113      	cbz	r3, 200011d6 <__do_global_dtors_aux+0x12>
200011d0:	4804      	ldr	r0, [pc, #16]	; (200011e4 <__do_global_dtors_aux+0x20>)
200011d2:	f3af 8000 	nop.w
200011d6:	2301      	movs	r3, #1
200011d8:	7023      	strb	r3, [r4, #0]
200011da:	bd10      	pop	{r4, pc}
200011dc:	20002688 	.word	0x20002688
200011e0:	00000000 	.word	0x00000000
200011e4:	20002618 	.word	0x20002618

200011e8 <frame_dummy>:
200011e8:	b508      	push	{r3, lr}
200011ea:	4b03      	ldr	r3, [pc, #12]	; (200011f8 <frame_dummy+0x10>)
200011ec:	b11b      	cbz	r3, 200011f6 <frame_dummy+0xe>
200011ee:	4903      	ldr	r1, [pc, #12]	; (200011fc <frame_dummy+0x14>)
200011f0:	4803      	ldr	r0, [pc, #12]	; (20001200 <frame_dummy+0x18>)
200011f2:	f3af 8000 	nop.w
200011f6:	bd08      	pop	{r3, pc}
200011f8:	00000000 	.word	0x00000000
200011fc:	2000268c 	.word	0x2000268c
20001200:	20002618 	.word	0x20002618

20001204 <__aeabi_uldivmod>:
20001204:	b953      	cbnz	r3, 2000121c <__aeabi_uldivmod+0x18>
20001206:	b94a      	cbnz	r2, 2000121c <__aeabi_uldivmod+0x18>
20001208:	2900      	cmp	r1, #0
2000120a:	bf08      	it	eq
2000120c:	2800      	cmpeq	r0, #0
2000120e:	bf1c      	itt	ne
20001210:	f04f 31ff 	movne.w	r1, #4294967295
20001214:	f04f 30ff 	movne.w	r0, #4294967295
20001218:	f000 b970 	b.w	200014fc <__aeabi_idiv0>
2000121c:	f1ad 0c08 	sub.w	ip, sp, #8
20001220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20001224:	f000 f806 	bl	20001234 <__udivmoddi4>
20001228:	f8dd e004 	ldr.w	lr, [sp, #4]
2000122c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20001230:	b004      	add	sp, #16
20001232:	4770      	bx	lr

20001234 <__udivmoddi4>:
20001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20001238:	9e08      	ldr	r6, [sp, #32]
2000123a:	460d      	mov	r5, r1
2000123c:	4604      	mov	r4, r0
2000123e:	460f      	mov	r7, r1
20001240:	2b00      	cmp	r3, #0
20001242:	d14a      	bne.n	200012da <__udivmoddi4+0xa6>
20001244:	428a      	cmp	r2, r1
20001246:	4694      	mov	ip, r2
20001248:	d965      	bls.n	20001316 <__udivmoddi4+0xe2>
2000124a:	fab2 f382 	clz	r3, r2
2000124e:	b143      	cbz	r3, 20001262 <__udivmoddi4+0x2e>
20001250:	fa02 fc03 	lsl.w	ip, r2, r3
20001254:	f1c3 0220 	rsb	r2, r3, #32
20001258:	409f      	lsls	r7, r3
2000125a:	fa20 f202 	lsr.w	r2, r0, r2
2000125e:	4317      	orrs	r7, r2
20001260:	409c      	lsls	r4, r3
20001262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
20001266:	fa1f f58c 	uxth.w	r5, ip
2000126a:	fbb7 f1fe 	udiv	r1, r7, lr
2000126e:	0c22      	lsrs	r2, r4, #16
20001270:	fb0e 7711 	mls	r7, lr, r1, r7
20001274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
20001278:	fb01 f005 	mul.w	r0, r1, r5
2000127c:	4290      	cmp	r0, r2
2000127e:	d90a      	bls.n	20001296 <__udivmoddi4+0x62>
20001280:	eb1c 0202 	adds.w	r2, ip, r2
20001284:	f101 37ff 	add.w	r7, r1, #4294967295
20001288:	f080 811c 	bcs.w	200014c4 <__udivmoddi4+0x290>
2000128c:	4290      	cmp	r0, r2
2000128e:	f240 8119 	bls.w	200014c4 <__udivmoddi4+0x290>
20001292:	3902      	subs	r1, #2
20001294:	4462      	add	r2, ip
20001296:	1a12      	subs	r2, r2, r0
20001298:	b2a4      	uxth	r4, r4
2000129a:	fbb2 f0fe 	udiv	r0, r2, lr
2000129e:	fb0e 2210 	mls	r2, lr, r0, r2
200012a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
200012a6:	fb00 f505 	mul.w	r5, r0, r5
200012aa:	42a5      	cmp	r5, r4
200012ac:	d90a      	bls.n	200012c4 <__udivmoddi4+0x90>
200012ae:	eb1c 0404 	adds.w	r4, ip, r4
200012b2:	f100 32ff 	add.w	r2, r0, #4294967295
200012b6:	f080 8107 	bcs.w	200014c8 <__udivmoddi4+0x294>
200012ba:	42a5      	cmp	r5, r4
200012bc:	f240 8104 	bls.w	200014c8 <__udivmoddi4+0x294>
200012c0:	4464      	add	r4, ip
200012c2:	3802      	subs	r0, #2
200012c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
200012c8:	1b64      	subs	r4, r4, r5
200012ca:	2100      	movs	r1, #0
200012cc:	b11e      	cbz	r6, 200012d6 <__udivmoddi4+0xa2>
200012ce:	40dc      	lsrs	r4, r3
200012d0:	2300      	movs	r3, #0
200012d2:	e9c6 4300 	strd	r4, r3, [r6]
200012d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200012da:	428b      	cmp	r3, r1
200012dc:	d908      	bls.n	200012f0 <__udivmoddi4+0xbc>
200012de:	2e00      	cmp	r6, #0
200012e0:	f000 80ed 	beq.w	200014be <__udivmoddi4+0x28a>
200012e4:	2100      	movs	r1, #0
200012e6:	e9c6 0500 	strd	r0, r5, [r6]
200012ea:	4608      	mov	r0, r1
200012ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200012f0:	fab3 f183 	clz	r1, r3
200012f4:	2900      	cmp	r1, #0
200012f6:	d149      	bne.n	2000138c <__udivmoddi4+0x158>
200012f8:	42ab      	cmp	r3, r5
200012fa:	d302      	bcc.n	20001302 <__udivmoddi4+0xce>
200012fc:	4282      	cmp	r2, r0
200012fe:	f200 80f8 	bhi.w	200014f2 <__udivmoddi4+0x2be>
20001302:	1a84      	subs	r4, r0, r2
20001304:	eb65 0203 	sbc.w	r2, r5, r3
20001308:	2001      	movs	r0, #1
2000130a:	4617      	mov	r7, r2
2000130c:	2e00      	cmp	r6, #0
2000130e:	d0e2      	beq.n	200012d6 <__udivmoddi4+0xa2>
20001310:	e9c6 4700 	strd	r4, r7, [r6]
20001314:	e7df      	b.n	200012d6 <__udivmoddi4+0xa2>
20001316:	b902      	cbnz	r2, 2000131a <__udivmoddi4+0xe6>
20001318:	deff      	udf	#255	; 0xff
2000131a:	fab2 f382 	clz	r3, r2
2000131e:	2b00      	cmp	r3, #0
20001320:	f040 8090 	bne.w	20001444 <__udivmoddi4+0x210>
20001324:	1a8a      	subs	r2, r1, r2
20001326:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000132a:	fa1f fe8c 	uxth.w	lr, ip
2000132e:	2101      	movs	r1, #1
20001330:	fbb2 f5f7 	udiv	r5, r2, r7
20001334:	fb07 2015 	mls	r0, r7, r5, r2
20001338:	0c22      	lsrs	r2, r4, #16
2000133a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
2000133e:	fb0e f005 	mul.w	r0, lr, r5
20001342:	4290      	cmp	r0, r2
20001344:	d908      	bls.n	20001358 <__udivmoddi4+0x124>
20001346:	eb1c 0202 	adds.w	r2, ip, r2
2000134a:	f105 38ff 	add.w	r8, r5, #4294967295
2000134e:	d202      	bcs.n	20001356 <__udivmoddi4+0x122>
20001350:	4290      	cmp	r0, r2
20001352:	f200 80cb 	bhi.w	200014ec <__udivmoddi4+0x2b8>
20001356:	4645      	mov	r5, r8
20001358:	1a12      	subs	r2, r2, r0
2000135a:	b2a4      	uxth	r4, r4
2000135c:	fbb2 f0f7 	udiv	r0, r2, r7
20001360:	fb07 2210 	mls	r2, r7, r0, r2
20001364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
20001368:	fb0e fe00 	mul.w	lr, lr, r0
2000136c:	45a6      	cmp	lr, r4
2000136e:	d908      	bls.n	20001382 <__udivmoddi4+0x14e>
20001370:	eb1c 0404 	adds.w	r4, ip, r4
20001374:	f100 32ff 	add.w	r2, r0, #4294967295
20001378:	d202      	bcs.n	20001380 <__udivmoddi4+0x14c>
2000137a:	45a6      	cmp	lr, r4
2000137c:	f200 80bb 	bhi.w	200014f6 <__udivmoddi4+0x2c2>
20001380:	4610      	mov	r0, r2
20001382:	eba4 040e 	sub.w	r4, r4, lr
20001386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
2000138a:	e79f      	b.n	200012cc <__udivmoddi4+0x98>
2000138c:	f1c1 0720 	rsb	r7, r1, #32
20001390:	408b      	lsls	r3, r1
20001392:	fa22 fc07 	lsr.w	ip, r2, r7
20001396:	ea4c 0c03 	orr.w	ip, ip, r3
2000139a:	fa05 f401 	lsl.w	r4, r5, r1
2000139e:	fa20 f307 	lsr.w	r3, r0, r7
200013a2:	40fd      	lsrs	r5, r7
200013a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
200013a8:	4323      	orrs	r3, r4
200013aa:	fbb5 f8f9 	udiv	r8, r5, r9
200013ae:	fa1f fe8c 	uxth.w	lr, ip
200013b2:	fb09 5518 	mls	r5, r9, r8, r5
200013b6:	0c1c      	lsrs	r4, r3, #16
200013b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
200013bc:	fb08 f50e 	mul.w	r5, r8, lr
200013c0:	42a5      	cmp	r5, r4
200013c2:	fa02 f201 	lsl.w	r2, r2, r1
200013c6:	fa00 f001 	lsl.w	r0, r0, r1
200013ca:	d90b      	bls.n	200013e4 <__udivmoddi4+0x1b0>
200013cc:	eb1c 0404 	adds.w	r4, ip, r4
200013d0:	f108 3aff 	add.w	sl, r8, #4294967295
200013d4:	f080 8088 	bcs.w	200014e8 <__udivmoddi4+0x2b4>
200013d8:	42a5      	cmp	r5, r4
200013da:	f240 8085 	bls.w	200014e8 <__udivmoddi4+0x2b4>
200013de:	f1a8 0802 	sub.w	r8, r8, #2
200013e2:	4464      	add	r4, ip
200013e4:	1b64      	subs	r4, r4, r5
200013e6:	b29d      	uxth	r5, r3
200013e8:	fbb4 f3f9 	udiv	r3, r4, r9
200013ec:	fb09 4413 	mls	r4, r9, r3, r4
200013f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
200013f4:	fb03 fe0e 	mul.w	lr, r3, lr
200013f8:	45a6      	cmp	lr, r4
200013fa:	d908      	bls.n	2000140e <__udivmoddi4+0x1da>
200013fc:	eb1c 0404 	adds.w	r4, ip, r4
20001400:	f103 35ff 	add.w	r5, r3, #4294967295
20001404:	d26c      	bcs.n	200014e0 <__udivmoddi4+0x2ac>
20001406:	45a6      	cmp	lr, r4
20001408:	d96a      	bls.n	200014e0 <__udivmoddi4+0x2ac>
2000140a:	3b02      	subs	r3, #2
2000140c:	4464      	add	r4, ip
2000140e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
20001412:	fba3 9502 	umull	r9, r5, r3, r2
20001416:	eba4 040e 	sub.w	r4, r4, lr
2000141a:	42ac      	cmp	r4, r5
2000141c:	46c8      	mov	r8, r9
2000141e:	46ae      	mov	lr, r5
20001420:	d356      	bcc.n	200014d0 <__udivmoddi4+0x29c>
20001422:	d053      	beq.n	200014cc <__udivmoddi4+0x298>
20001424:	b156      	cbz	r6, 2000143c <__udivmoddi4+0x208>
20001426:	ebb0 0208 	subs.w	r2, r0, r8
2000142a:	eb64 040e 	sbc.w	r4, r4, lr
2000142e:	fa04 f707 	lsl.w	r7, r4, r7
20001432:	40ca      	lsrs	r2, r1
20001434:	40cc      	lsrs	r4, r1
20001436:	4317      	orrs	r7, r2
20001438:	e9c6 7400 	strd	r7, r4, [r6]
2000143c:	4618      	mov	r0, r3
2000143e:	2100      	movs	r1, #0
20001440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20001444:	f1c3 0120 	rsb	r1, r3, #32
20001448:	fa02 fc03 	lsl.w	ip, r2, r3
2000144c:	fa20 f201 	lsr.w	r2, r0, r1
20001450:	fa25 f101 	lsr.w	r1, r5, r1
20001454:	409d      	lsls	r5, r3
20001456:	432a      	orrs	r2, r5
20001458:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000145c:	fa1f fe8c 	uxth.w	lr, ip
20001460:	fbb1 f0f7 	udiv	r0, r1, r7
20001464:	fb07 1510 	mls	r5, r7, r0, r1
20001468:	0c11      	lsrs	r1, r2, #16
2000146a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
2000146e:	fb00 f50e 	mul.w	r5, r0, lr
20001472:	428d      	cmp	r5, r1
20001474:	fa04 f403 	lsl.w	r4, r4, r3
20001478:	d908      	bls.n	2000148c <__udivmoddi4+0x258>
2000147a:	eb1c 0101 	adds.w	r1, ip, r1
2000147e:	f100 38ff 	add.w	r8, r0, #4294967295
20001482:	d22f      	bcs.n	200014e4 <__udivmoddi4+0x2b0>
20001484:	428d      	cmp	r5, r1
20001486:	d92d      	bls.n	200014e4 <__udivmoddi4+0x2b0>
20001488:	3802      	subs	r0, #2
2000148a:	4461      	add	r1, ip
2000148c:	1b49      	subs	r1, r1, r5
2000148e:	b292      	uxth	r2, r2
20001490:	fbb1 f5f7 	udiv	r5, r1, r7
20001494:	fb07 1115 	mls	r1, r7, r5, r1
20001498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
2000149c:	fb05 f10e 	mul.w	r1, r5, lr
200014a0:	4291      	cmp	r1, r2
200014a2:	d908      	bls.n	200014b6 <__udivmoddi4+0x282>
200014a4:	eb1c 0202 	adds.w	r2, ip, r2
200014a8:	f105 38ff 	add.w	r8, r5, #4294967295
200014ac:	d216      	bcs.n	200014dc <__udivmoddi4+0x2a8>
200014ae:	4291      	cmp	r1, r2
200014b0:	d914      	bls.n	200014dc <__udivmoddi4+0x2a8>
200014b2:	3d02      	subs	r5, #2
200014b4:	4462      	add	r2, ip
200014b6:	1a52      	subs	r2, r2, r1
200014b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
200014bc:	e738      	b.n	20001330 <__udivmoddi4+0xfc>
200014be:	4631      	mov	r1, r6
200014c0:	4630      	mov	r0, r6
200014c2:	e708      	b.n	200012d6 <__udivmoddi4+0xa2>
200014c4:	4639      	mov	r1, r7
200014c6:	e6e6      	b.n	20001296 <__udivmoddi4+0x62>
200014c8:	4610      	mov	r0, r2
200014ca:	e6fb      	b.n	200012c4 <__udivmoddi4+0x90>
200014cc:	4548      	cmp	r0, r9
200014ce:	d2a9      	bcs.n	20001424 <__udivmoddi4+0x1f0>
200014d0:	ebb9 0802 	subs.w	r8, r9, r2
200014d4:	eb65 0e0c 	sbc.w	lr, r5, ip
200014d8:	3b01      	subs	r3, #1
200014da:	e7a3      	b.n	20001424 <__udivmoddi4+0x1f0>
200014dc:	4645      	mov	r5, r8
200014de:	e7ea      	b.n	200014b6 <__udivmoddi4+0x282>
200014e0:	462b      	mov	r3, r5
200014e2:	e794      	b.n	2000140e <__udivmoddi4+0x1da>
200014e4:	4640      	mov	r0, r8
200014e6:	e7d1      	b.n	2000148c <__udivmoddi4+0x258>
200014e8:	46d0      	mov	r8, sl
200014ea:	e77b      	b.n	200013e4 <__udivmoddi4+0x1b0>
200014ec:	3d02      	subs	r5, #2
200014ee:	4462      	add	r2, ip
200014f0:	e732      	b.n	20001358 <__udivmoddi4+0x124>
200014f2:	4608      	mov	r0, r1
200014f4:	e70a      	b.n	2000130c <__udivmoddi4+0xd8>
200014f6:	4464      	add	r4, ip
200014f8:	3802      	subs	r0, #2
200014fa:	e742      	b.n	20001382 <__udivmoddi4+0x14e>

200014fc <__aeabi_idiv0>:
200014fc:	4770      	bx	lr
200014fe:	bf00      	nop

20001500 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
20001500:	b5f0      	push	{r4, r5, r6, r7, lr}
20001502:	4b19      	ldr	r3, [pc, #100]	; (20001568 <BSP_LED_Init+0x68>)
20001504:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
20001506:	4604      	mov	r4, r0
20001508:	bb08      	cbnz	r0, 2000154e <BSP_LED_Init+0x4e>
2000150a:	9001      	str	r0, [sp, #4]
2000150c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000150e:	f042 0202 	orr.w	r2, r2, #2
20001512:	631a      	str	r2, [r3, #48]	; 0x30
20001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001516:	f003 0302 	and.w	r3, r3, #2
2000151a:	9301      	str	r3, [sp, #4]
2000151c:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
2000151e:	4b13      	ldr	r3, [pc, #76]	; (2000156c <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20001520:	4d13      	ldr	r5, [pc, #76]	; (20001570 <BSP_LED_Init+0x70>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
20001522:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20001526:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
2000152a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000152c:	2700      	movs	r7, #0
2000152e:	2301      	movs	r3, #1
20001530:	e9cd 3704 	strd	r3, r7, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20001534:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
20001536:	2302      	movs	r3, #2
20001538:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
2000153a:	f000 f911 	bl	20001760 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
2000153e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
20001542:	463a      	mov	r2, r7
20001544:	4631      	mov	r1, r6
20001546:	f000 f9df 	bl	20001908 <HAL_GPIO_WritePin>
}
2000154a:	b009      	add	sp, #36	; 0x24
2000154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
2000154e:	2200      	movs	r2, #0
20001550:	9202      	str	r2, [sp, #8]
20001552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001554:	f042 0202 	orr.w	r2, r2, #2
20001558:	631a      	str	r2, [r3, #48]	; 0x30
2000155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000155c:	f003 0302 	and.w	r3, r3, #2
20001560:	9302      	str	r3, [sp, #8]
20001562:	9b02      	ldr	r3, [sp, #8]
20001564:	e7db      	b.n	2000151e <BSP_LED_Init+0x1e>
20001566:	bf00      	nop
20001568:	40023800 	.word	0x40023800
2000156c:	20002630 	.word	0x20002630
20001570:	20002660 	.word	0x20002660

20001574 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
20001574:	4b04      	ldr	r3, [pc, #16]	; (20001588 <BSP_LED_On+0x14>)
20001576:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
2000157a:	4b04      	ldr	r3, [pc, #16]	; (2000158c <BSP_LED_On+0x18>)
2000157c:	2201      	movs	r2, #1
2000157e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
20001582:	f000 b9c1 	b.w	20001908 <HAL_GPIO_WritePin>
20001586:	bf00      	nop
20001588:	20002630 	.word	0x20002630
2000158c:	20002660 	.word	0x20002660

20001590 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
20001590:	4b04      	ldr	r3, [pc, #16]	; (200015a4 <BSP_LED_Off+0x14>)
20001592:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
20001596:	4b04      	ldr	r3, [pc, #16]	; (200015a8 <BSP_LED_Off+0x18>)
20001598:	2200      	movs	r2, #0
2000159a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
2000159e:	f000 b9b3 	b.w	20001908 <HAL_GPIO_WritePin>
200015a2:	bf00      	nop
200015a4:	20002630 	.word	0x20002630
200015a8:	20002660 	.word	0x20002660

200015ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
200015ac:	490e      	ldr	r1, [pc, #56]	; (200015e8 <SystemInit+0x3c>)
200015ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
200015b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
200015b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200015ba:	4b0c      	ldr	r3, [pc, #48]	; (200015ec <SystemInit+0x40>)
200015bc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200015be:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
200015c0:	f042 0201 	orr.w	r2, r2, #1
200015c4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
200015c6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
200015c8:	681a      	ldr	r2, [r3, #0]
200015ca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
200015ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
200015d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200015d4:	4a06      	ldr	r2, [pc, #24]	; (200015f0 <SystemInit+0x44>)
200015d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200015d8:	681a      	ldr	r2, [r3, #0]
200015da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
200015de:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200015e0:	60d8      	str	r0, [r3, #12]


  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
200015e2:	4b04      	ldr	r3, [pc, #16]	; (200015f4 <SystemInit+0x48>)
200015e4:	608b      	str	r3, [r1, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
200015e6:	4770      	bx	lr
200015e8:	e000ed00 	.word	0xe000ed00
200015ec:	40023800 	.word	0x40023800
200015f0:	24003010 	.word	0x24003010
200015f4:	20001000 	.word	0x20001000

200015f8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
200015f8:	4770      	bx	lr
	...

200015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
200015fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
200015fe:	4b0e      	ldr	r3, [pc, #56]	; (20001638 <HAL_InitTick+0x3c>)
20001600:	781a      	ldrb	r2, [r3, #0]
20001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
20001606:	fbb3 f3f2 	udiv	r3, r3, r2
2000160a:	4a0c      	ldr	r2, [pc, #48]	; (2000163c <HAL_InitTick+0x40>)
{
2000160c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
2000160e:	6810      	ldr	r0, [r2, #0]
20001610:	fbb0 f0f3 	udiv	r0, r0, r3
20001614:	f000 f890 	bl	20001738 <HAL_SYSTICK_Config>
20001618:	4604      	mov	r4, r0
2000161a:	b958      	cbnz	r0, 20001634 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2000161c:	2d0f      	cmp	r5, #15
2000161e:	d809      	bhi.n	20001634 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20001620:	4602      	mov	r2, r0
20001622:	4629      	mov	r1, r5
20001624:	f04f 30ff 	mov.w	r0, #4294967295
20001628:	f000 f846 	bl	200016b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
2000162c:	4b04      	ldr	r3, [pc, #16]	; (20001640 <HAL_InitTick+0x44>)
2000162e:	4620      	mov	r0, r4
20001630:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
20001632:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
20001634:	2001      	movs	r0, #1
20001636:	e7fc      	b.n	20001632 <HAL_InitTick+0x36>
20001638:	20002670 	.word	0x20002670
2000163c:	2000266c 	.word	0x2000266c
20001640:	20002674 	.word	0x20002674

20001644 <HAL_Init>:
{
20001644:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20001646:	4b09      	ldr	r3, [pc, #36]	; (2000166c <HAL_Init+0x28>)
20001648:	681a      	ldr	r2, [r3, #0]
2000164a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2000164e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20001650:	681a      	ldr	r2, [r3, #0]
20001652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20001656:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20001658:	2003      	movs	r0, #3
2000165a:	f000 f81b 	bl	20001694 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
2000165e:	200f      	movs	r0, #15
20001660:	f7ff ffcc 	bl	200015fc <HAL_InitTick>
  HAL_MspInit();
20001664:	f7ff ffc8 	bl	200015f8 <HAL_MspInit>
}
20001668:	2000      	movs	r0, #0
2000166a:	bd08      	pop	{r3, pc}
2000166c:	40023c00 	.word	0x40023c00

20001670 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
20001670:	4a03      	ldr	r2, [pc, #12]	; (20001680 <HAL_IncTick+0x10>)
20001672:	4b04      	ldr	r3, [pc, #16]	; (20001684 <HAL_IncTick+0x14>)
20001674:	6811      	ldr	r1, [r2, #0]
20001676:	781b      	ldrb	r3, [r3, #0]
20001678:	440b      	add	r3, r1
2000167a:	6013      	str	r3, [r2, #0]
}
2000167c:	4770      	bx	lr
2000167e:	bf00      	nop
20001680:	200026a4 	.word	0x200026a4
20001684:	20002670 	.word	0x20002670

20001688 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
20001688:	4b01      	ldr	r3, [pc, #4]	; (20001690 <HAL_GetTick+0x8>)
2000168a:	6818      	ldr	r0, [r3, #0]
}
2000168c:	4770      	bx	lr
2000168e:	bf00      	nop
20001690:	200026a4 	.word	0x200026a4

20001694 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20001694:	4907      	ldr	r1, [pc, #28]	; (200016b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
20001696:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20001698:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
2000169c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000169e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
200016a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200016a4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
200016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
200016a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
200016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
200016b0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
200016b2:	4770      	bx	lr
200016b4:	e000ed00 	.word	0xe000ed00

200016b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200016b8:	4b16      	ldr	r3, [pc, #88]	; (20001714 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
200016ba:	b530      	push	{r4, r5, lr}
200016bc:	68dc      	ldr	r4, [r3, #12]
200016be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200016c2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200016c6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200016c8:	2b04      	cmp	r3, #4
200016ca:	bf28      	it	cs
200016cc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200016ce:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200016d0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200016d4:	bf8c      	ite	hi
200016d6:	3c03      	subhi	r4, #3
200016d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200016da:	fa05 f303 	lsl.w	r3, r5, r3
200016de:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
200016e2:	40a5      	lsls	r5, r4
200016e4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200016e8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
200016ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200016ec:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200016f0:	bfac      	ite	ge
200016f2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200016f6:	4a08      	ldrlt	r2, [pc, #32]	; (20001718 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200016f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200016fc:	bfb8      	it	lt
200016fe:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001702:	b2db      	uxtb	r3, r3
20001704:	bfaa      	itet	ge
20001706:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000170a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000170c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
20001710:	bd30      	pop	{r4, r5, pc}
20001712:	bf00      	nop
20001714:	e000ed00 	.word	0xe000ed00
20001718:	e000ed14 	.word	0xe000ed14

2000171c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
2000171c:	2800      	cmp	r0, #0
2000171e:	db07      	blt.n	20001730 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20001720:	4a04      	ldr	r2, [pc, #16]	; (20001734 <HAL_NVIC_EnableIRQ+0x18>)
20001722:	0941      	lsrs	r1, r0, #5
20001724:	2301      	movs	r3, #1
20001726:	f000 001f 	and.w	r0, r0, #31
2000172a:	4083      	lsls	r3, r0
2000172c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
20001730:	4770      	bx	lr
20001732:	bf00      	nop
20001734:	e000e100 	.word	0xe000e100

20001738 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20001738:	3801      	subs	r0, #1
2000173a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
2000173e:	d20b      	bcs.n	20001758 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20001740:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001744:	4a05      	ldr	r2, [pc, #20]	; (2000175c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20001746:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001748:	21f0      	movs	r1, #240	; 0xf0
2000174a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000174e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20001750:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20001752:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20001754:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20001756:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
20001758:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
2000175a:	4770      	bx	lr
2000175c:	e000ed00 	.word	0xe000ed00

20001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20001760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20001764:	f8df 919c 	ldr.w	r9, [pc, #412]	; 20001904 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20001768:	4a64      	ldr	r2, [pc, #400]	; (200018fc <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
2000176a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
2000176c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
2000176e:	2401      	movs	r4, #1
20001770:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
20001772:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
20001776:	43ac      	bics	r4, r5
20001778:	f040 80ad 	bne.w	200018d6 <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
2000177c:	684d      	ldr	r5, [r1, #4]
2000177e:	f005 0403 	and.w	r4, r5, #3
20001782:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20001786:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001788:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
2000178a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
2000178e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20001790:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001794:	d834      	bhi.n	20001800 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
20001796:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20001798:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
2000179c:	68cf      	ldr	r7, [r1, #12]
2000179e:	fa07 f708 	lsl.w	r7, r7, r8
200017a2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
200017a6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
200017a8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
200017aa:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
200017ae:	f3c5 1700 	ubfx	r7, r5, #4, #1
200017b2:	409f      	lsls	r7, r3
200017b4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
200017b8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
200017ba:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
200017bc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
200017c0:	688f      	ldr	r7, [r1, #8]
200017c2:	fa07 f708 	lsl.w	r7, r7, r8
200017c6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
200017ca:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
200017cc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
200017ce:	d119      	bne.n	20001804 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
200017d0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
200017d4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
200017d8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
200017dc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
200017e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
200017e4:	f04f 0e0f 	mov.w	lr, #15
200017e8:	fa0e fe0b 	lsl.w	lr, lr, fp
200017ec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
200017f0:	690f      	ldr	r7, [r1, #16]
200017f2:	fa07 f70b 	lsl.w	r7, r7, fp
200017f6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
200017fa:	f8ca 7020 	str.w	r7, [sl, #32]
200017fe:	e001      	b.n	20001804 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20001800:	2c03      	cmp	r4, #3
20001802:	d1da      	bne.n	200017ba <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
20001804:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
20001806:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
2000180a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2000180c:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
2000180e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
20001812:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
20001814:	d05f      	beq.n	200018d6 <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20001816:	f04f 0a00 	mov.w	sl, #0
2000181a:	f8cd a004 	str.w	sl, [sp, #4]
2000181e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20001822:	4c37      	ldr	r4, [pc, #220]	; (20001900 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20001824:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
20001828:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
2000182c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
20001830:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
20001834:	9601      	str	r6, [sp, #4]
20001836:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
20001838:	f023 0603 	bic.w	r6, r3, #3
2000183c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
20001840:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20001844:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
20001848:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
2000184c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
20001850:	270f      	movs	r7, #15
20001852:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20001856:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20001858:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
2000185c:	d042      	beq.n	200018e4 <HAL_GPIO_Init+0x184>
2000185e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001862:	42a0      	cmp	r0, r4
20001864:	d040      	beq.n	200018e8 <HAL_GPIO_Init+0x188>
20001866:	f504 6480 	add.w	r4, r4, #1024	; 0x400
2000186a:	42a0      	cmp	r0, r4
2000186c:	d03e      	beq.n	200018ec <HAL_GPIO_Init+0x18c>
2000186e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001872:	42a0      	cmp	r0, r4
20001874:	d03c      	beq.n	200018f0 <HAL_GPIO_Init+0x190>
20001876:	f504 6480 	add.w	r4, r4, #1024	; 0x400
2000187a:	42a0      	cmp	r0, r4
2000187c:	d03a      	beq.n	200018f4 <HAL_GPIO_Init+0x194>
2000187e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001882:	42a0      	cmp	r0, r4
20001884:	d038      	beq.n	200018f8 <HAL_GPIO_Init+0x198>
20001886:	f504 6480 	add.w	r4, r4, #1024	; 0x400
2000188a:	42a0      	cmp	r0, r4
2000188c:	bf0c      	ite	eq
2000188e:	2406      	moveq	r4, #6
20001890:	2407      	movne	r4, #7
20001892:	fa04 f40e 	lsl.w	r4, r4, lr
20001896:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
20001898:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
2000189a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
2000189c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
200018a0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
200018a2:	bf54      	ite	pl
200018a4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
200018a6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
200018aa:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
200018ac:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
200018ae:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
200018b0:	bf54      	ite	pl
200018b2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
200018b4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
200018b8:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
200018ba:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
200018bc:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
200018be:	bf54      	ite	pl
200018c0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
200018c2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
200018c6:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
200018c8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
200018ca:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
200018cc:	bf54      	ite	pl
200018ce:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
200018d0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
200018d4:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
200018d6:	3301      	adds	r3, #1
200018d8:	2b10      	cmp	r3, #16
200018da:	f47f af47 	bne.w	2000176c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
200018de:	b003      	add	sp, #12
200018e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
200018e4:	4654      	mov	r4, sl
200018e6:	e7d4      	b.n	20001892 <HAL_GPIO_Init+0x132>
200018e8:	2401      	movs	r4, #1
200018ea:	e7d2      	b.n	20001892 <HAL_GPIO_Init+0x132>
200018ec:	2402      	movs	r4, #2
200018ee:	e7d0      	b.n	20001892 <HAL_GPIO_Init+0x132>
200018f0:	2403      	movs	r4, #3
200018f2:	e7ce      	b.n	20001892 <HAL_GPIO_Init+0x132>
200018f4:	2404      	movs	r4, #4
200018f6:	e7cc      	b.n	20001892 <HAL_GPIO_Init+0x132>
200018f8:	2405      	movs	r4, #5
200018fa:	e7ca      	b.n	20001892 <HAL_GPIO_Init+0x132>
200018fc:	40013c00 	.word	0x40013c00
20001900:	40020000 	.word	0x40020000
20001904:	40023800 	.word	0x40023800

20001908 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20001908:	b10a      	cbz	r2, 2000190e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
2000190a:	6181      	str	r1, [r0, #24]
  }
}
2000190c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
2000190e:	0409      	lsls	r1, r1, #16
20001910:	e7fb      	b.n	2000190a <HAL_GPIO_WritePin+0x2>
	...

20001914 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
20001914:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
20001916:	2300      	movs	r3, #0
20001918:	9301      	str	r3, [sp, #4]
2000191a:	4b18      	ldr	r3, [pc, #96]	; (2000197c <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
2000191c:	4d18      	ldr	r5, [pc, #96]	; (20001980 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
2000191e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20001920:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
20001924:	641a      	str	r2, [r3, #64]	; 0x40
20001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000192c:	9301      	str	r3, [sp, #4]
2000192e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
20001930:	4b14      	ldr	r3, [pc, #80]	; (20001984 <HAL_PWREx_EnableOverDrive+0x70>)
20001932:	2201      	movs	r2, #1
20001934:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
20001936:	f7ff fea7 	bl	20001688 <HAL_GetTick>
2000193a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
2000193c:	686b      	ldr	r3, [r5, #4]
2000193e:	03da      	lsls	r2, r3, #15
20001940:	d50b      	bpl.n	2000195a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20001942:	4b10      	ldr	r3, [pc, #64]	; (20001984 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20001944:	4d0e      	ldr	r5, [pc, #56]	; (20001980 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20001946:	2201      	movs	r2, #1
20001948:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
2000194a:	f7ff fe9d 	bl	20001688 <HAL_GetTick>
2000194e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20001950:	686b      	ldr	r3, [r5, #4]
20001952:	039b      	lsls	r3, r3, #14
20001954:	d50a      	bpl.n	2000196c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
20001956:	2000      	movs	r0, #0
20001958:	e006      	b.n	20001968 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
2000195a:	f7ff fe95 	bl	20001688 <HAL_GetTick>
2000195e:	1b00      	subs	r0, r0, r4
20001960:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
20001964:	d9ea      	bls.n	2000193c <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
20001966:	2003      	movs	r0, #3
}
20001968:	b003      	add	sp, #12
2000196a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
2000196c:	f7ff fe8c 	bl	20001688 <HAL_GetTick>
20001970:	1b00      	subs	r0, r0, r4
20001972:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
20001976:	d9eb      	bls.n	20001950 <HAL_PWREx_EnableOverDrive+0x3c>
20001978:	e7f5      	b.n	20001966 <HAL_PWREx_EnableOverDrive+0x52>
2000197a:	bf00      	nop
2000197c:	40023800 	.word	0x40023800
20001980:	40007000 	.word	0x40007000
20001984:	420e0000 	.word	0x420e0000

20001988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20001988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
2000198c:	4604      	mov	r4, r0
2000198e:	b340      	cbz	r0, 200019e2 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20001990:	6803      	ldr	r3, [r0, #0]
20001992:	07dd      	lsls	r5, r3, #31
20001994:	d410      	bmi.n	200019b8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20001996:	6823      	ldr	r3, [r4, #0]
20001998:	0798      	lsls	r0, r3, #30
2000199a:	d45b      	bmi.n	20001a54 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2000199c:	6823      	ldr	r3, [r4, #0]
2000199e:	071a      	lsls	r2, r3, #28
200019a0:	f100 809d 	bmi.w	20001ade <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
200019a4:	6823      	ldr	r3, [r4, #0]
200019a6:	075b      	lsls	r3, r3, #29
200019a8:	f100 80bd 	bmi.w	20001b26 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
200019ac:	69a0      	ldr	r0, [r4, #24]
200019ae:	2800      	cmp	r0, #0
200019b0:	f040 8124 	bne.w	20001bfc <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
200019b4:	2000      	movs	r0, #0
200019b6:	e02c      	b.n	20001a12 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
200019b8:	4b8d      	ldr	r3, [pc, #564]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
200019ba:	689a      	ldr	r2, [r3, #8]
200019bc:	f002 020c 	and.w	r2, r2, #12
200019c0:	2a04      	cmp	r2, #4
200019c2:	d007      	beq.n	200019d4 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200019c4:	689a      	ldr	r2, [r3, #8]
200019c6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
200019ca:	2a08      	cmp	r2, #8
200019cc:	d10b      	bne.n	200019e6 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200019ce:	685b      	ldr	r3, [r3, #4]
200019d0:	0259      	lsls	r1, r3, #9
200019d2:	d508      	bpl.n	200019e6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200019d4:	4b86      	ldr	r3, [pc, #536]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
200019d6:	681b      	ldr	r3, [r3, #0]
200019d8:	039a      	lsls	r2, r3, #14
200019da:	d5dc      	bpl.n	20001996 <HAL_RCC_OscConfig+0xe>
200019dc:	6863      	ldr	r3, [r4, #4]
200019de:	2b00      	cmp	r3, #0
200019e0:	d1d9      	bne.n	20001996 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
200019e2:	2001      	movs	r0, #1
200019e4:	e015      	b.n	20001a12 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
200019e6:	6863      	ldr	r3, [r4, #4]
200019e8:	4d81      	ldr	r5, [pc, #516]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
200019ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200019ee:	d113      	bne.n	20001a18 <HAL_RCC_OscConfig+0x90>
200019f0:	682b      	ldr	r3, [r5, #0]
200019f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200019f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
200019f8:	f7ff fe46 	bl	20001688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
200019fc:	4e7c      	ldr	r6, [pc, #496]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
200019fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20001a00:	6833      	ldr	r3, [r6, #0]
20001a02:	039b      	lsls	r3, r3, #14
20001a04:	d4c7      	bmi.n	20001996 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20001a06:	f7ff fe3f 	bl	20001688 <HAL_GetTick>
20001a0a:	1b40      	subs	r0, r0, r5
20001a0c:	2864      	cmp	r0, #100	; 0x64
20001a0e:	d9f7      	bls.n	20001a00 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
20001a10:	2003      	movs	r0, #3
}
20001a12:	b002      	add	sp, #8
20001a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20001a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20001a1c:	d104      	bne.n	20001a28 <HAL_RCC_OscConfig+0xa0>
20001a1e:	682b      	ldr	r3, [r5, #0]
20001a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20001a24:	602b      	str	r3, [r5, #0]
20001a26:	e7e3      	b.n	200019f0 <HAL_RCC_OscConfig+0x68>
20001a28:	682a      	ldr	r2, [r5, #0]
20001a2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
20001a2e:	602a      	str	r2, [r5, #0]
20001a30:	682a      	ldr	r2, [r5, #0]
20001a32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
20001a36:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
20001a38:	2b00      	cmp	r3, #0
20001a3a:	d1dd      	bne.n	200019f8 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
20001a3c:	f7ff fe24 	bl	20001688 <HAL_GetTick>
20001a40:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20001a42:	682b      	ldr	r3, [r5, #0]
20001a44:	039f      	lsls	r7, r3, #14
20001a46:	d5a6      	bpl.n	20001996 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20001a48:	f7ff fe1e 	bl	20001688 <HAL_GetTick>
20001a4c:	1b80      	subs	r0, r0, r6
20001a4e:	2864      	cmp	r0, #100	; 0x64
20001a50:	d9f7      	bls.n	20001a42 <HAL_RCC_OscConfig+0xba>
20001a52:	e7dd      	b.n	20001a10 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20001a54:	4b66      	ldr	r3, [pc, #408]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
20001a56:	689a      	ldr	r2, [r3, #8]
20001a58:	f012 0f0c 	tst.w	r2, #12
20001a5c:	d007      	beq.n	20001a6e <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20001a5e:	689a      	ldr	r2, [r3, #8]
20001a60:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20001a64:	2a08      	cmp	r2, #8
20001a66:	d111      	bne.n	20001a8c <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20001a68:	685b      	ldr	r3, [r3, #4]
20001a6a:	025e      	lsls	r6, r3, #9
20001a6c:	d40e      	bmi.n	20001a8c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20001a6e:	4a60      	ldr	r2, [pc, #384]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
20001a70:	6813      	ldr	r3, [r2, #0]
20001a72:	079d      	lsls	r5, r3, #30
20001a74:	d502      	bpl.n	20001a7c <HAL_RCC_OscConfig+0xf4>
20001a76:	68e3      	ldr	r3, [r4, #12]
20001a78:	2b01      	cmp	r3, #1
20001a7a:	d1b2      	bne.n	200019e2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20001a7c:	6813      	ldr	r3, [r2, #0]
20001a7e:	6921      	ldr	r1, [r4, #16]
20001a80:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
20001a84:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
20001a88:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20001a8a:	e787      	b.n	2000199c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
20001a8c:	68e2      	ldr	r2, [r4, #12]
20001a8e:	4b59      	ldr	r3, [pc, #356]	; (20001bf4 <HAL_RCC_OscConfig+0x26c>)
20001a90:	b1b2      	cbz	r2, 20001ac0 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
20001a92:	2201      	movs	r2, #1
20001a94:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
20001a96:	f7ff fdf7 	bl	20001688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20001a9a:	4d55      	ldr	r5, [pc, #340]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
20001a9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20001a9e:	682b      	ldr	r3, [r5, #0]
20001aa0:	0798      	lsls	r0, r3, #30
20001aa2:	d507      	bpl.n	20001ab4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20001aa4:	682b      	ldr	r3, [r5, #0]
20001aa6:	6922      	ldr	r2, [r4, #16]
20001aa8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
20001aac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
20001ab0:	602b      	str	r3, [r5, #0]
20001ab2:	e773      	b.n	2000199c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20001ab4:	f7ff fde8 	bl	20001688 <HAL_GetTick>
20001ab8:	1b80      	subs	r0, r0, r6
20001aba:	2802      	cmp	r0, #2
20001abc:	d9ef      	bls.n	20001a9e <HAL_RCC_OscConfig+0x116>
20001abe:	e7a7      	b.n	20001a10 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
20001ac0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
20001ac2:	f7ff fde1 	bl	20001688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20001ac6:	4e4a      	ldr	r6, [pc, #296]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
20001ac8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20001aca:	6833      	ldr	r3, [r6, #0]
20001acc:	0799      	lsls	r1, r3, #30
20001ace:	f57f af65 	bpl.w	2000199c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20001ad2:	f7ff fdd9 	bl	20001688 <HAL_GetTick>
20001ad6:	1b40      	subs	r0, r0, r5
20001ad8:	2802      	cmp	r0, #2
20001ada:	d9f6      	bls.n	20001aca <HAL_RCC_OscConfig+0x142>
20001adc:	e798      	b.n	20001a10 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
20001ade:	6962      	ldr	r2, [r4, #20]
20001ae0:	4b44      	ldr	r3, [pc, #272]	; (20001bf4 <HAL_RCC_OscConfig+0x26c>)
20001ae2:	b182      	cbz	r2, 20001b06 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
20001ae4:	2201      	movs	r2, #1
20001ae6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
20001aea:	f7ff fdcd 	bl	20001688 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20001aee:	4e40      	ldr	r6, [pc, #256]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
20001af0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20001af2:	6f73      	ldr	r3, [r6, #116]	; 0x74
20001af4:	079f      	lsls	r7, r3, #30
20001af6:	f53f af55 	bmi.w	200019a4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20001afa:	f7ff fdc5 	bl	20001688 <HAL_GetTick>
20001afe:	1b40      	subs	r0, r0, r5
20001b00:	2802      	cmp	r0, #2
20001b02:	d9f6      	bls.n	20001af2 <HAL_RCC_OscConfig+0x16a>
20001b04:	e784      	b.n	20001a10 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
20001b06:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
20001b0a:	f7ff fdbd 	bl	20001688 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20001b0e:	4e38      	ldr	r6, [pc, #224]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
20001b10:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20001b12:	6f73      	ldr	r3, [r6, #116]	; 0x74
20001b14:	0798      	lsls	r0, r3, #30
20001b16:	f57f af45 	bpl.w	200019a4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20001b1a:	f7ff fdb5 	bl	20001688 <HAL_GetTick>
20001b1e:	1b40      	subs	r0, r0, r5
20001b20:	2802      	cmp	r0, #2
20001b22:	d9f6      	bls.n	20001b12 <HAL_RCC_OscConfig+0x18a>
20001b24:	e774      	b.n	20001a10 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
20001b26:	4b32      	ldr	r3, [pc, #200]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
20001b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20001b2a:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
20001b2e:	d128      	bne.n	20001b82 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
20001b30:	9201      	str	r2, [sp, #4]
20001b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20001b34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
20001b38:	641a      	str	r2, [r3, #64]	; 0x40
20001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20001b40:	9301      	str	r3, [sp, #4]
20001b42:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
20001b44:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20001b46:	4d2c      	ldr	r5, [pc, #176]	; (20001bf8 <HAL_RCC_OscConfig+0x270>)
20001b48:	682b      	ldr	r3, [r5, #0]
20001b4a:	05d9      	lsls	r1, r3, #23
20001b4c:	d51b      	bpl.n	20001b86 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20001b4e:	68a3      	ldr	r3, [r4, #8]
20001b50:	4d27      	ldr	r5, [pc, #156]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
20001b52:	2b01      	cmp	r3, #1
20001b54:	d127      	bne.n	20001ba6 <HAL_RCC_OscConfig+0x21e>
20001b56:	6f2b      	ldr	r3, [r5, #112]	; 0x70
20001b58:	f043 0301 	orr.w	r3, r3, #1
20001b5c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
20001b5e:	f7ff fd93 	bl	20001688 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20001b62:	4e23      	ldr	r6, [pc, #140]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
20001b64:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001b66:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20001b6a:	6f33      	ldr	r3, [r6, #112]	; 0x70
20001b6c:	079b      	lsls	r3, r3, #30
20001b6e:	d539      	bpl.n	20001be4 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
20001b70:	2f00      	cmp	r7, #0
20001b72:	f43f af1b 	beq.w	200019ac <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
20001b76:	4a1e      	ldr	r2, [pc, #120]	; (20001bf0 <HAL_RCC_OscConfig+0x268>)
20001b78:	6c13      	ldr	r3, [r2, #64]	; 0x40
20001b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20001b7e:	6413      	str	r3, [r2, #64]	; 0x40
20001b80:	e714      	b.n	200019ac <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
20001b82:	2700      	movs	r7, #0
20001b84:	e7df      	b.n	20001b46 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
20001b86:	682b      	ldr	r3, [r5, #0]
20001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001b8c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
20001b8e:	f7ff fd7b 	bl	20001688 <HAL_GetTick>
20001b92:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20001b94:	682b      	ldr	r3, [r5, #0]
20001b96:	05da      	lsls	r2, r3, #23
20001b98:	d4d9      	bmi.n	20001b4e <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20001b9a:	f7ff fd75 	bl	20001688 <HAL_GetTick>
20001b9e:	1b80      	subs	r0, r0, r6
20001ba0:	2802      	cmp	r0, #2
20001ba2:	d9f7      	bls.n	20001b94 <HAL_RCC_OscConfig+0x20c>
20001ba4:	e734      	b.n	20001a10 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20001ba6:	2b05      	cmp	r3, #5
20001ba8:	d104      	bne.n	20001bb4 <HAL_RCC_OscConfig+0x22c>
20001baa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
20001bac:	f043 0304 	orr.w	r3, r3, #4
20001bb0:	672b      	str	r3, [r5, #112]	; 0x70
20001bb2:	e7d0      	b.n	20001b56 <HAL_RCC_OscConfig+0x1ce>
20001bb4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
20001bb6:	f022 0201 	bic.w	r2, r2, #1
20001bba:	672a      	str	r2, [r5, #112]	; 0x70
20001bbc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
20001bbe:	f022 0204 	bic.w	r2, r2, #4
20001bc2:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20001bc4:	2b00      	cmp	r3, #0
20001bc6:	d1ca      	bne.n	20001b5e <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
20001bc8:	f7ff fd5e 	bl	20001688 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001bcc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
20001bd0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20001bd2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
20001bd4:	0798      	lsls	r0, r3, #30
20001bd6:	d5cb      	bpl.n	20001b70 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001bd8:	f7ff fd56 	bl	20001688 <HAL_GetTick>
20001bdc:	1b80      	subs	r0, r0, r6
20001bde:	4540      	cmp	r0, r8
20001be0:	d9f7      	bls.n	20001bd2 <HAL_RCC_OscConfig+0x24a>
20001be2:	e715      	b.n	20001a10 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001be4:	f7ff fd50 	bl	20001688 <HAL_GetTick>
20001be8:	1b40      	subs	r0, r0, r5
20001bea:	4540      	cmp	r0, r8
20001bec:	d9bd      	bls.n	20001b6a <HAL_RCC_OscConfig+0x1e2>
20001bee:	e70f      	b.n	20001a10 <HAL_RCC_OscConfig+0x88>
20001bf0:	40023800 	.word	0x40023800
20001bf4:	42470000 	.word	0x42470000
20001bf8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20001bfc:	4d39      	ldr	r5, [pc, #228]	; (20001ce4 <HAL_RCC_OscConfig+0x35c>)
20001bfe:	68ab      	ldr	r3, [r5, #8]
20001c00:	f003 030c 	and.w	r3, r3, #12
20001c04:	2b08      	cmp	r3, #8
20001c06:	d03d      	beq.n	20001c84 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20001c08:	4b37      	ldr	r3, [pc, #220]	; (20001ce8 <HAL_RCC_OscConfig+0x360>)
20001c0a:	2200      	movs	r2, #0
20001c0c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
20001c0e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20001c10:	d12b      	bne.n	20001c6a <HAL_RCC_OscConfig+0x2e2>
        tickstart = HAL_GetTick();
20001c12:	f7ff fd39 	bl	20001688 <HAL_GetTick>
20001c16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20001c18:	682b      	ldr	r3, [r5, #0]
20001c1a:	0199      	lsls	r1, r3, #6
20001c1c:	d41f      	bmi.n	20001c5e <HAL_RCC_OscConfig+0x2d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
20001c1e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
20001c22:	4313      	orrs	r3, r2
20001c24:	6a62      	ldr	r2, [r4, #36]	; 0x24
20001c26:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
20001c2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
20001c2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
20001c30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
20001c32:	0852      	lsrs	r2, r2, #1
20001c34:	3a01      	subs	r2, #1
20001c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
20001c3a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
20001c3c:	4b2a      	ldr	r3, [pc, #168]	; (20001ce8 <HAL_RCC_OscConfig+0x360>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20001c3e:	4d29      	ldr	r5, [pc, #164]	; (20001ce4 <HAL_RCC_OscConfig+0x35c>)
        __HAL_RCC_PLL_ENABLE();
20001c40:	2201      	movs	r2, #1
20001c42:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
20001c44:	f7ff fd20 	bl	20001688 <HAL_GetTick>
20001c48:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20001c4a:	682b      	ldr	r3, [r5, #0]
20001c4c:	019a      	lsls	r2, r3, #6
20001c4e:	f53f aeb1 	bmi.w	200019b4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20001c52:	f7ff fd19 	bl	20001688 <HAL_GetTick>
20001c56:	1b00      	subs	r0, r0, r4
20001c58:	2802      	cmp	r0, #2
20001c5a:	d9f6      	bls.n	20001c4a <HAL_RCC_OscConfig+0x2c2>
20001c5c:	e6d8      	b.n	20001a10 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20001c5e:	f7ff fd13 	bl	20001688 <HAL_GetTick>
20001c62:	1b80      	subs	r0, r0, r6
20001c64:	2802      	cmp	r0, #2
20001c66:	d9d7      	bls.n	20001c18 <HAL_RCC_OscConfig+0x290>
20001c68:	e6d2      	b.n	20001a10 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
20001c6a:	f7ff fd0d 	bl	20001688 <HAL_GetTick>
20001c6e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20001c70:	682b      	ldr	r3, [r5, #0]
20001c72:	019b      	lsls	r3, r3, #6
20001c74:	f57f ae9e 	bpl.w	200019b4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20001c78:	f7ff fd06 	bl	20001688 <HAL_GetTick>
20001c7c:	1b00      	subs	r0, r0, r4
20001c7e:	2802      	cmp	r0, #2
20001c80:	d9f6      	bls.n	20001c70 <HAL_RCC_OscConfig+0x2e8>
20001c82:	e6c5      	b.n	20001a10 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
20001c84:	2801      	cmp	r0, #1
20001c86:	f43f aec4 	beq.w	20001a12 <HAL_RCC_OscConfig+0x8a>
        pll_config = RCC->PLLCFGR;
20001c8a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20001c8c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20001c8e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20001c92:	4291      	cmp	r1, r2
20001c94:	f47f aea5 	bne.w	200019e2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20001c98:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20001c9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20001c9e:	428a      	cmp	r2, r1
20001ca0:	f47f ae9f 	bne.w	200019e2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20001ca4:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20001ca6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
20001caa:	401a      	ands	r2, r3
20001cac:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
20001cb0:	f47f ae97 	bne.w	200019e2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20001cb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
20001cb6:	0852      	lsrs	r2, r2, #1
20001cb8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
20001cbc:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20001cbe:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
20001cc2:	f47f ae8e 	bne.w	200019e2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20001cc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
20001cc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20001ccc:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
20001cd0:	f47f ae87 	bne.w	200019e2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
20001cd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
20001cd6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20001cda:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
20001cde:	f43f ae69 	beq.w	200019b4 <HAL_RCC_OscConfig+0x2c>
20001ce2:	e67e      	b.n	200019e2 <HAL_RCC_OscConfig+0x5a>
20001ce4:	40023800 	.word	0x40023800
20001ce8:	42470000 	.word	0x42470000

20001cec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20001cec:	4913      	ldr	r1, [pc, #76]	; (20001d3c <HAL_RCC_GetSysClockFreq+0x50>)
{
20001cee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
20001cf0:	688b      	ldr	r3, [r1, #8]
20001cf2:	f003 030c 	and.w	r3, r3, #12
20001cf6:	2b04      	cmp	r3, #4
20001cf8:	d01c      	beq.n	20001d34 <HAL_RCC_GetSysClockFreq+0x48>
20001cfa:	2b08      	cmp	r3, #8
20001cfc:	d11c      	bne.n	20001d38 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20001cfe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20001d00:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20001d02:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20001d04:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20001d08:	bf14      	ite	ne
20001d0a:	480d      	ldrne	r0, [pc, #52]	; (20001d40 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20001d0c:	480d      	ldreq	r0, [pc, #52]	; (20001d44 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20001d0e:	f3c1 1188 	ubfx	r1, r1, #6, #9
20001d12:	bf18      	it	ne
20001d14:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20001d16:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20001d1a:	fba1 0100 	umull	r0, r1, r1, r0
20001d1e:	f7ff fa71 	bl	20001204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
20001d22:	4b06      	ldr	r3, [pc, #24]	; (20001d3c <HAL_RCC_GetSysClockFreq+0x50>)
20001d24:	685b      	ldr	r3, [r3, #4]
20001d26:	f3c3 4301 	ubfx	r3, r3, #16, #2
20001d2a:	3301      	adds	r3, #1
20001d2c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
20001d2e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
20001d32:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
20001d34:	4802      	ldr	r0, [pc, #8]	; (20001d40 <HAL_RCC_GetSysClockFreq+0x54>)
20001d36:	e7fc      	b.n	20001d32 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
20001d38:	4802      	ldr	r0, [pc, #8]	; (20001d44 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
20001d3a:	e7fa      	b.n	20001d32 <HAL_RCC_GetSysClockFreq+0x46>
20001d3c:	40023800 	.word	0x40023800
20001d40:	007a1200 	.word	0x007a1200
20001d44:	00f42400 	.word	0x00f42400

20001d48 <HAL_RCC_ClockConfig>:
{
20001d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20001d4c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
20001d4e:	4604      	mov	r4, r0
20001d50:	b910      	cbnz	r0, 20001d58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
20001d52:	2001      	movs	r0, #1
}
20001d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
20001d58:	4b43      	ldr	r3, [pc, #268]	; (20001e68 <HAL_RCC_ClockConfig+0x120>)
20001d5a:	681a      	ldr	r2, [r3, #0]
20001d5c:	f002 020f 	and.w	r2, r2, #15
20001d60:	428a      	cmp	r2, r1
20001d62:	d328      	bcc.n	20001db6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20001d64:	6821      	ldr	r1, [r4, #0]
20001d66:	078f      	lsls	r7, r1, #30
20001d68:	d42d      	bmi.n	20001dc6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20001d6a:	07c8      	lsls	r0, r1, #31
20001d6c:	d440      	bmi.n	20001df0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
20001d6e:	4b3e      	ldr	r3, [pc, #248]	; (20001e68 <HAL_RCC_ClockConfig+0x120>)
20001d70:	681a      	ldr	r2, [r3, #0]
20001d72:	f002 020f 	and.w	r2, r2, #15
20001d76:	42aa      	cmp	r2, r5
20001d78:	d865      	bhi.n	20001e46 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20001d7a:	6822      	ldr	r2, [r4, #0]
20001d7c:	0751      	lsls	r1, r2, #29
20001d7e:	d46b      	bmi.n	20001e58 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20001d80:	0713      	lsls	r3, r2, #28
20001d82:	d507      	bpl.n	20001d94 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
20001d84:	4a39      	ldr	r2, [pc, #228]	; (20001e6c <HAL_RCC_ClockConfig+0x124>)
20001d86:	6921      	ldr	r1, [r4, #16]
20001d88:	6893      	ldr	r3, [r2, #8]
20001d8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
20001d8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
20001d92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
20001d94:	f7ff ffaa 	bl	20001cec <HAL_RCC_GetSysClockFreq>
20001d98:	4b34      	ldr	r3, [pc, #208]	; (20001e6c <HAL_RCC_ClockConfig+0x124>)
20001d9a:	4a35      	ldr	r2, [pc, #212]	; (20001e70 <HAL_RCC_ClockConfig+0x128>)
20001d9c:	689b      	ldr	r3, [r3, #8]
20001d9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
20001da2:	5cd3      	ldrb	r3, [r2, r3]
20001da4:	40d8      	lsrs	r0, r3
20001da6:	4b33      	ldr	r3, [pc, #204]	; (20001e74 <HAL_RCC_ClockConfig+0x12c>)
20001da8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
20001daa:	4b33      	ldr	r3, [pc, #204]	; (20001e78 <HAL_RCC_ClockConfig+0x130>)
20001dac:	6818      	ldr	r0, [r3, #0]
20001dae:	f7ff fc25 	bl	200015fc <HAL_InitTick>
  return HAL_OK;
20001db2:	2000      	movs	r0, #0
20001db4:	e7ce      	b.n	20001d54 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
20001db6:	b2ca      	uxtb	r2, r1
20001db8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20001dba:	681b      	ldr	r3, [r3, #0]
20001dbc:	f003 030f 	and.w	r3, r3, #15
20001dc0:	428b      	cmp	r3, r1
20001dc2:	d1c6      	bne.n	20001d52 <HAL_RCC_ClockConfig+0xa>
20001dc4:	e7ce      	b.n	20001d64 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20001dc6:	4b29      	ldr	r3, [pc, #164]	; (20001e6c <HAL_RCC_ClockConfig+0x124>)
20001dc8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20001dcc:	bf1e      	ittt	ne
20001dce:	689a      	ldrne	r2, [r3, #8]
20001dd0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
20001dd4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20001dd6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20001dd8:	bf42      	ittt	mi
20001dda:	689a      	ldrmi	r2, [r3, #8]
20001ddc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
20001de0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20001de2:	689a      	ldr	r2, [r3, #8]
20001de4:	68a0      	ldr	r0, [r4, #8]
20001de6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
20001dea:	4302      	orrs	r2, r0
20001dec:	609a      	str	r2, [r3, #8]
20001dee:	e7bc      	b.n	20001d6a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20001df0:	6862      	ldr	r2, [r4, #4]
20001df2:	4b1e      	ldr	r3, [pc, #120]	; (20001e6c <HAL_RCC_ClockConfig+0x124>)
20001df4:	2a01      	cmp	r2, #1
20001df6:	d11c      	bne.n	20001e32 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20001df8:	681b      	ldr	r3, [r3, #0]
20001dfa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20001dfe:	d0a8      	beq.n	20001d52 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20001e00:	4e1a      	ldr	r6, [pc, #104]	; (20001e6c <HAL_RCC_ClockConfig+0x124>)
20001e02:	68b3      	ldr	r3, [r6, #8]
20001e04:	f023 0303 	bic.w	r3, r3, #3
20001e08:	4313      	orrs	r3, r2
20001e0a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
20001e0c:	f7ff fc3c 	bl	20001688 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20001e10:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
20001e14:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20001e16:	68b3      	ldr	r3, [r6, #8]
20001e18:	6862      	ldr	r2, [r4, #4]
20001e1a:	f003 030c 	and.w	r3, r3, #12
20001e1e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
20001e22:	d0a4      	beq.n	20001d6e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20001e24:	f7ff fc30 	bl	20001688 <HAL_GetTick>
20001e28:	1bc0      	subs	r0, r0, r7
20001e2a:	4540      	cmp	r0, r8
20001e2c:	d9f3      	bls.n	20001e16 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
20001e2e:	2003      	movs	r0, #3
20001e30:	e790      	b.n	20001d54 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20001e32:	1e91      	subs	r1, r2, #2
20001e34:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20001e36:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20001e38:	d802      	bhi.n	20001e40 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20001e3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
20001e3e:	e7de      	b.n	20001dfe <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20001e40:	f013 0f02 	tst.w	r3, #2
20001e44:	e7db      	b.n	20001dfe <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
20001e46:	b2ea      	uxtb	r2, r5
20001e48:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20001e4a:	681b      	ldr	r3, [r3, #0]
20001e4c:	f003 030f 	and.w	r3, r3, #15
20001e50:	42ab      	cmp	r3, r5
20001e52:	f47f af7e 	bne.w	20001d52 <HAL_RCC_ClockConfig+0xa>
20001e56:	e790      	b.n	20001d7a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20001e58:	4904      	ldr	r1, [pc, #16]	; (20001e6c <HAL_RCC_ClockConfig+0x124>)
20001e5a:	68e0      	ldr	r0, [r4, #12]
20001e5c:	688b      	ldr	r3, [r1, #8]
20001e5e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
20001e62:	4303      	orrs	r3, r0
20001e64:	608b      	str	r3, [r1, #8]
20001e66:	e78b      	b.n	20001d80 <HAL_RCC_ClockConfig+0x38>
20001e68:	40023c00 	.word	0x40023c00
20001e6c:	40023800 	.word	0x40023800
20001e70:	20002636 	.word	0x20002636
20001e74:	2000266c 	.word	0x2000266c
20001e78:	20002674 	.word	0x20002674

20001e7c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
20001e7c:	4b04      	ldr	r3, [pc, #16]	; (20001e90 <HAL_RCC_GetPCLK1Freq+0x14>)
20001e7e:	4a05      	ldr	r2, [pc, #20]	; (20001e94 <HAL_RCC_GetPCLK1Freq+0x18>)
20001e80:	689b      	ldr	r3, [r3, #8]
20001e82:	f3c3 2382 	ubfx	r3, r3, #10, #3
20001e86:	5cd3      	ldrb	r3, [r2, r3]
20001e88:	4a03      	ldr	r2, [pc, #12]	; (20001e98 <HAL_RCC_GetPCLK1Freq+0x1c>)
20001e8a:	6810      	ldr	r0, [r2, #0]
}
20001e8c:	40d8      	lsrs	r0, r3
20001e8e:	4770      	bx	lr
20001e90:	40023800 	.word	0x40023800
20001e94:	20002646 	.word	0x20002646
20001e98:	2000266c 	.word	0x2000266c

20001e9c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
20001e9c:	4b04      	ldr	r3, [pc, #16]	; (20001eb0 <HAL_RCC_GetPCLK2Freq+0x14>)
20001e9e:	4a05      	ldr	r2, [pc, #20]	; (20001eb4 <HAL_RCC_GetPCLK2Freq+0x18>)
20001ea0:	689b      	ldr	r3, [r3, #8]
20001ea2:	f3c3 3342 	ubfx	r3, r3, #13, #3
20001ea6:	5cd3      	ldrb	r3, [r2, r3]
20001ea8:	4a03      	ldr	r2, [pc, #12]	; (20001eb8 <HAL_RCC_GetPCLK2Freq+0x1c>)
20001eaa:	6810      	ldr	r0, [r2, #0]
}
20001eac:	40d8      	lsrs	r0, r3
20001eae:	4770      	bx	lr
20001eb0:	40023800 	.word	0x40023800
20001eb4:	20002646 	.word	0x20002646
20001eb8:	2000266c 	.word	0x2000266c

20001ebc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
20001ebc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
20001ec0:	2b01      	cmp	r3, #1
20001ec2:	d130      	bne.n	20001f26 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
20001ec4:	2302      	movs	r3, #2
20001ec6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
20001eca:	6803      	ldr	r3, [r0, #0]
20001ecc:	68da      	ldr	r2, [r3, #12]
20001ece:	f042 0201 	orr.w	r2, r2, #1
20001ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
20001ed4:	4a15      	ldr	r2, [pc, #84]	; (20001f2c <HAL_TIM_Base_Start_IT+0x70>)
20001ed6:	4293      	cmp	r3, r2
20001ed8:	d01a      	beq.n	20001f10 <HAL_TIM_Base_Start_IT+0x54>
20001eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
20001ede:	d017      	beq.n	20001f10 <HAL_TIM_Base_Start_IT+0x54>
20001ee0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
20001ee4:	4293      	cmp	r3, r2
20001ee6:	d013      	beq.n	20001f10 <HAL_TIM_Base_Start_IT+0x54>
20001ee8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20001eec:	4293      	cmp	r3, r2
20001eee:	d00f      	beq.n	20001f10 <HAL_TIM_Base_Start_IT+0x54>
20001ef0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20001ef4:	4293      	cmp	r3, r2
20001ef6:	d00b      	beq.n	20001f10 <HAL_TIM_Base_Start_IT+0x54>
20001ef8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
20001efc:	4293      	cmp	r3, r2
20001efe:	d007      	beq.n	20001f10 <HAL_TIM_Base_Start_IT+0x54>
20001f00:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
20001f04:	4293      	cmp	r3, r2
20001f06:	d003      	beq.n	20001f10 <HAL_TIM_Base_Start_IT+0x54>
20001f08:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
20001f0c:	4293      	cmp	r3, r2
20001f0e:	d104      	bne.n	20001f1a <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
20001f10:	689a      	ldr	r2, [r3, #8]
20001f12:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
20001f16:	2a06      	cmp	r2, #6
20001f18:	d003      	beq.n	20001f22 <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
20001f1a:	681a      	ldr	r2, [r3, #0]
20001f1c:	f042 0201 	orr.w	r2, r2, #1
20001f20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
20001f22:	2000      	movs	r0, #0
}
20001f24:	4770      	bx	lr
    return HAL_ERROR;
20001f26:	2001      	movs	r0, #1
20001f28:	4770      	bx	lr
20001f2a:	bf00      	nop
20001f2c:	40010000 	.word	0x40010000

20001f30 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
20001f30:	4a33      	ldr	r2, [pc, #204]	; (20002000 <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
20001f32:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
20001f34:	4290      	cmp	r0, r2
20001f36:	d012      	beq.n	20001f5e <TIM_Base_SetConfig+0x2e>
20001f38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
20001f3c:	d00f      	beq.n	20001f5e <TIM_Base_SetConfig+0x2e>
20001f3e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
20001f42:	4290      	cmp	r0, r2
20001f44:	d00b      	beq.n	20001f5e <TIM_Base_SetConfig+0x2e>
20001f46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20001f4a:	4290      	cmp	r0, r2
20001f4c:	d007      	beq.n	20001f5e <TIM_Base_SetConfig+0x2e>
20001f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20001f52:	4290      	cmp	r0, r2
20001f54:	d003      	beq.n	20001f5e <TIM_Base_SetConfig+0x2e>
20001f56:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
20001f5a:	4290      	cmp	r0, r2
20001f5c:	d119      	bne.n	20001f92 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
20001f5e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
20001f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
20001f64:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
20001f66:	4a26      	ldr	r2, [pc, #152]	; (20002000 <TIM_Base_SetConfig+0xd0>)
20001f68:	4290      	cmp	r0, r2
20001f6a:	d029      	beq.n	20001fc0 <TIM_Base_SetConfig+0x90>
20001f6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
20001f70:	d026      	beq.n	20001fc0 <TIM_Base_SetConfig+0x90>
20001f72:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
20001f76:	4290      	cmp	r0, r2
20001f78:	d022      	beq.n	20001fc0 <TIM_Base_SetConfig+0x90>
20001f7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20001f7e:	4290      	cmp	r0, r2
20001f80:	d01e      	beq.n	20001fc0 <TIM_Base_SetConfig+0x90>
20001f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20001f86:	4290      	cmp	r0, r2
20001f88:	d01a      	beq.n	20001fc0 <TIM_Base_SetConfig+0x90>
20001f8a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
20001f8e:	4290      	cmp	r0, r2
20001f90:	d016      	beq.n	20001fc0 <TIM_Base_SetConfig+0x90>
20001f92:	4a1c      	ldr	r2, [pc, #112]	; (20002004 <TIM_Base_SetConfig+0xd4>)
20001f94:	4290      	cmp	r0, r2
20001f96:	d013      	beq.n	20001fc0 <TIM_Base_SetConfig+0x90>
20001f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20001f9c:	4290      	cmp	r0, r2
20001f9e:	d00f      	beq.n	20001fc0 <TIM_Base_SetConfig+0x90>
20001fa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20001fa4:	4290      	cmp	r0, r2
20001fa6:	d00b      	beq.n	20001fc0 <TIM_Base_SetConfig+0x90>
20001fa8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
20001fac:	4290      	cmp	r0, r2
20001fae:	d007      	beq.n	20001fc0 <TIM_Base_SetConfig+0x90>
20001fb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20001fb4:	4290      	cmp	r0, r2
20001fb6:	d003      	beq.n	20001fc0 <TIM_Base_SetConfig+0x90>
20001fb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20001fbc:	4290      	cmp	r0, r2
20001fbe:	d103      	bne.n	20001fc8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
20001fc0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
20001fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
20001fc6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
20001fc8:	694a      	ldr	r2, [r1, #20]
20001fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
20001fce:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
20001fd0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
20001fd2:	688b      	ldr	r3, [r1, #8]
20001fd4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
20001fd6:	680b      	ldr	r3, [r1, #0]
20001fd8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
20001fda:	4b09      	ldr	r3, [pc, #36]	; (20002000 <TIM_Base_SetConfig+0xd0>)
20001fdc:	4298      	cmp	r0, r3
20001fde:	d003      	beq.n	20001fe8 <TIM_Base_SetConfig+0xb8>
20001fe0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
20001fe4:	4298      	cmp	r0, r3
20001fe6:	d101      	bne.n	20001fec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
20001fe8:	690b      	ldr	r3, [r1, #16]
20001fea:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
20001fec:	2301      	movs	r3, #1
20001fee:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
20001ff0:	6903      	ldr	r3, [r0, #16]
20001ff2:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
20001ff4:	bf42      	ittt	mi
20001ff6:	6903      	ldrmi	r3, [r0, #16]
20001ff8:	f023 0301 	bicmi.w	r3, r3, #1
20001ffc:	6103      	strmi	r3, [r0, #16]
  }
}
20001ffe:	4770      	bx	lr
20002000:	40010000 	.word	0x40010000
20002004:	40014000 	.word	0x40014000

20002008 <HAL_TIM_Base_Init>:
{
20002008:	b510      	push	{r4, lr}
  if (htim == NULL)
2000200a:	4604      	mov	r4, r0
2000200c:	b330      	cbz	r0, 2000205c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
2000200e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
20002012:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20002016:	b91b      	cbnz	r3, 20002020 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
20002018:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
2000201c:	f000 faa4 	bl	20002568 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
20002020:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
20002022:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
20002024:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
20002028:	1d21      	adds	r1, r4, #4
2000202a:	f7ff ff81 	bl	20001f30 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
2000202e:	2301      	movs	r3, #1
20002030:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
20002034:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
20002036:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
2000203a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
2000203e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
20002042:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
20002046:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
2000204a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2000204e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
20002052:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
20002056:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
2000205a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
2000205c:	2001      	movs	r0, #1
2000205e:	e7fc      	b.n	2000205a <HAL_TIM_Base_Init+0x52>

20002060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
20002060:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
20002062:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
20002066:	2b01      	cmp	r3, #1
20002068:	f04f 0302 	mov.w	r3, #2
2000206c:	d032      	beq.n	200020d4 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
2000206e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
20002072:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
20002074:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
20002076:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
20002078:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
2000207a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
2000207e:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
20002080:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
20002082:	4c15      	ldr	r4, [pc, #84]	; (200020d8 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
20002084:	42a3      	cmp	r3, r4
20002086:	d01a      	beq.n	200020be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
20002088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2000208c:	d017      	beq.n	200020be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
2000208e:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
20002092:	42a3      	cmp	r3, r4
20002094:	d013      	beq.n	200020be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
20002096:	f504 6480 	add.w	r4, r4, #1024	; 0x400
2000209a:	42a3      	cmp	r3, r4
2000209c:	d00f      	beq.n	200020be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
2000209e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
200020a2:	42a3      	cmp	r3, r4
200020a4:	d00b      	beq.n	200020be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
200020a6:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
200020aa:	42a3      	cmp	r3, r4
200020ac:	d007      	beq.n	200020be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
200020ae:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
200020b2:	42a3      	cmp	r3, r4
200020b4:	d003      	beq.n	200020be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
200020b6:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
200020ba:	42a3      	cmp	r3, r4
200020bc:	d104      	bne.n	200020c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
200020be:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
200020c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
200020c4:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
200020c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
200020c8:	2301      	movs	r3, #1
200020ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
200020ce:	2300      	movs	r3, #0
200020d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
200020d4:	4618      	mov	r0, r3

  return HAL_OK;
}
200020d6:	bd30      	pop	{r4, r5, pc}
200020d8:	40010000 	.word	0x40010000

200020dc <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
200020dc:	6802      	ldr	r2, [r0, #0]
200020de:	68c1      	ldr	r1, [r0, #12]
200020e0:	6913      	ldr	r3, [r2, #16]
200020e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
200020e6:	430b      	orrs	r3, r1
{
200020e8:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
200020ea:	6113      	str	r3, [r2, #16]
{
200020ec:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
200020ee:	6883      	ldr	r3, [r0, #8]
200020f0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
200020f2:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
200020f4:	4303      	orrs	r3, r0
200020f6:	6968      	ldr	r0, [r5, #20]
200020f8:	4303      	orrs	r3, r0
200020fa:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
200020fc:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
20002100:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
20002104:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
20002106:	430b      	orrs	r3, r1
20002108:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
2000210a:	6953      	ldr	r3, [r2, #20]
2000210c:	69a9      	ldr	r1, [r5, #24]
2000210e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20002112:	430b      	orrs	r3, r1
20002114:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
20002116:	4b1f      	ldr	r3, [pc, #124]	; (20002194 <UART_SetConfig+0xb8>)
20002118:	429a      	cmp	r2, r3
2000211a:	d003      	beq.n	20002124 <UART_SetConfig+0x48>
2000211c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
20002120:	429a      	cmp	r2, r3
20002122:	d123      	bne.n	2000216c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
20002124:	f7ff feba 	bl	20001e9c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
20002128:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
2000212a:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
2000212c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
20002130:	e9d5 4600 	ldrd	r4, r6, [r5]
20002134:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
20002138:	d11b      	bne.n	20002172 <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
2000213a:	19b2      	adds	r2, r6, r6
2000213c:	f04f 0300 	mov.w	r3, #0
20002140:	415b      	adcs	r3, r3
20002142:	f7ff f85f 	bl	20001204 <__aeabi_uldivmod>
20002146:	2264      	movs	r2, #100	; 0x64
20002148:	fbb0 f1f2 	udiv	r1, r0, r2
2000214c:	fb02 0311 	mls	r3, r2, r1, r0
20002150:	00db      	lsls	r3, r3, #3
20002152:	3332      	adds	r3, #50	; 0x32
20002154:	fbb3 f3f2 	udiv	r3, r3, r2
20002158:	f003 0207 	and.w	r2, r3, #7
2000215c:	005b      	lsls	r3, r3, #1
2000215e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
20002162:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
20002166:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
20002168:	60a3      	str	r3, [r4, #8]
  }
}
2000216a:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
2000216c:	f7ff fe86 	bl	20001e7c <HAL_RCC_GetPCLK1Freq>
20002170:	e7da      	b.n	20002128 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
20002172:	00b2      	lsls	r2, r6, #2
20002174:	0fb3      	lsrs	r3, r6, #30
20002176:	f7ff f845 	bl	20001204 <__aeabi_uldivmod>
2000217a:	2264      	movs	r2, #100	; 0x64
2000217c:	fbb0 f1f2 	udiv	r1, r0, r2
20002180:	fb02 0311 	mls	r3, r2, r1, r0
20002184:	011b      	lsls	r3, r3, #4
20002186:	3332      	adds	r3, #50	; 0x32
20002188:	fbb3 f3f2 	udiv	r3, r3, r2
2000218c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
20002190:	e7ea      	b.n	20002168 <UART_SetConfig+0x8c>
20002192:	bf00      	nop
20002194:	40011000 	.word	0x40011000

20002198 <HAL_UART_Init>:
{
20002198:	b510      	push	{r4, lr}
  if (huart == NULL)
2000219a:	4604      	mov	r4, r0
2000219c:	b348      	cbz	r0, 200021f2 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
2000219e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
200021a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
200021a6:	b91b      	cbnz	r3, 200021b0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
200021a8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
200021ac:	f000 f99c 	bl	200024e8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
200021b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
200021b2:	2324      	movs	r3, #36	; 0x24
200021b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
200021b8:	68d3      	ldr	r3, [r2, #12]
200021ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
200021be:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
200021c0:	4620      	mov	r0, r4
200021c2:	f7ff ff8b 	bl	200020dc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
200021c6:	6823      	ldr	r3, [r4, #0]
200021c8:	691a      	ldr	r2, [r3, #16]
200021ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
200021ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
200021d0:	695a      	ldr	r2, [r3, #20]
200021d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
200021d6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
200021d8:	68da      	ldr	r2, [r3, #12]
200021da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
200021de:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
200021e0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
200021e2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
200021e4:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
200021e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
200021ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
200021ee:	6360      	str	r0, [r4, #52]	; 0x34
}
200021f0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
200021f2:	2001      	movs	r0, #1
200021f4:	e7fc      	b.n	200021f0 <HAL_UART_Init+0x58>
	...

200021f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
200021f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 20002230 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
200021fc:	480d      	ldr	r0, [pc, #52]	; (20002234 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
200021fe:	490e      	ldr	r1, [pc, #56]	; (20002238 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
20002200:	4a0e      	ldr	r2, [pc, #56]	; (2000223c <LoopFillZerobss+0x1e>)
  movs r3, #0
20002202:	2300      	movs	r3, #0
  b LoopCopyDataInit
20002204:	e002      	b.n	2000220c <LoopCopyDataInit>

20002206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20002206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20002208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
2000220a:	3304      	adds	r3, #4

2000220c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
2000220c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
2000220e:	428c      	cmp	r4, r1
  bcc CopyDataInit
20002210:	d3f9      	bcc.n	20002206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20002212:	4a0b      	ldr	r2, [pc, #44]	; (20002240 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
20002214:	4c0b      	ldr	r4, [pc, #44]	; (20002244 <LoopFillZerobss+0x26>)
  movs r3, #0
20002216:	2300      	movs	r3, #0
  b LoopFillZerobss
20002218:	e001      	b.n	2000221e <LoopFillZerobss>

2000221a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
2000221a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
2000221c:	3204      	adds	r2, #4

2000221e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
2000221e:	42a2      	cmp	r2, r4
  bcc FillZerobss
20002220:	d3fb      	bcc.n	2000221a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
20002222:	f7ff f9c3 	bl	200015ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20002226:	f000 f9d3 	bl	200025d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2000222a:	f000 f907 	bl	2000243c <main>
  bx  lr    
2000222e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20002230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
20002234:	20002660 	.word	0x20002660
  ldr r1, =_edata
20002238:	20002688 	.word	0x20002688
  ldr r2, =_sidata
2000223c:	20002660 	.word	0x20002660
  ldr r2, =_sbss
20002240:	20002688 	.word	0x20002688
  ldr r4, =_ebss
20002244:	20005748 	.word	0x20005748

20002248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20002248:	e7fe      	b.n	20002248 <ADC_IRQHandler>

2000224a <TestTask0>:
	{
		while(1) { ; }
	}
}

void TestTask0() {
2000224a:	b508      	push	{r3, lr}
	for(;;) {
		BSP_LED_On(LED1);
2000224c:	2000      	movs	r0, #0
2000224e:	f7ff f991 	bl	20001574 <BSP_LED_On>
		BSP_LED_Off(LED2);
20002252:	2001      	movs	r0, #1
20002254:	f7ff f99c 	bl	20001590 <BSP_LED_Off>
		BSP_LED_Off(LED3);
20002258:	2002      	movs	r0, #2
2000225a:	f7ff f999 	bl	20001590 <BSP_LED_Off>
	for(;;) {
2000225e:	e7f5      	b.n	2000224c <TestTask0+0x2>

20002260 <TestTask1>:
	}
}
void TestTask1() {
20002260:	b508      	push	{r3, lr}
	for(;;) {
		BSP_LED_Off(LED1);
20002262:	2000      	movs	r0, #0
20002264:	f7ff f994 	bl	20001590 <BSP_LED_Off>
		BSP_LED_On(LED2);
20002268:	2001      	movs	r0, #1
2000226a:	f7ff f983 	bl	20001574 <BSP_LED_On>
		BSP_LED_Off(LED3);
2000226e:	2002      	movs	r0, #2
20002270:	f7ff f98e 	bl	20001590 <BSP_LED_Off>
	for(;;) {
20002274:	e7f5      	b.n	20002262 <TestTask1+0x2>

20002276 <TestTask2>:
	}
}
void TestTask2() {
20002276:	b508      	push	{r3, lr}
	for(;;) {
		BSP_LED_Off(LED1);
20002278:	2000      	movs	r0, #0
2000227a:	f7ff f989 	bl	20001590 <BSP_LED_Off>
		BSP_LED_Off(LED2);
2000227e:	2001      	movs	r0, #1
20002280:	f7ff f986 	bl	20001590 <BSP_LED_Off>
		BSP_LED_On(LED3);
20002284:	2002      	movs	r0, #2
20002286:	f7ff f975 	bl	20001574 <BSP_LED_On>
	for(;;) {
2000228a:	e7f5      	b.n	20002278 <TestTask2+0x2>

2000228c <TinyBLInit>:
void TinyBLInit(void) {
2000228c:	b510      	push	{r4, lr}
2000228e:	b094      	sub	sp, #80	; 0x50
	HAL_Init();
20002290:	f7ff f9d8 	bl	20001644 <HAL_Init>
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20002294:	2214      	movs	r2, #20
20002296:	2100      	movs	r1, #0
20002298:	a808      	add	r0, sp, #32
2000229a:	f000 f991 	bl	200025c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2000229e:	2214      	movs	r2, #20
200022a0:	2100      	movs	r1, #0
200022a2:	a802      	add	r0, sp, #8
200022a4:	f000 f98c 	bl	200025c0 <memset>
	__HAL_RCC_PWR_CLK_ENABLE();
200022a8:	2300      	movs	r3, #0
200022aa:	4a2a      	ldr	r2, [pc, #168]	; (20002354 <TinyBLInit+0xc8>)
200022ac:	9300      	str	r3, [sp, #0]
200022ae:	6c11      	ldr	r1, [r2, #64]	; 0x40
200022b0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
200022b4:	6411      	str	r1, [r2, #64]	; 0x40
200022b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
200022b8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
200022bc:	9200      	str	r2, [sp, #0]
200022be:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
200022c0:	4a25      	ldr	r2, [pc, #148]	; (20002358 <TinyBLInit+0xcc>)
200022c2:	9301      	str	r3, [sp, #4]
200022c4:	6811      	ldr	r1, [r2, #0]
200022c6:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
200022ca:	6011      	str	r1, [r2, #0]
200022cc:	6812      	ldr	r2, [r2, #0]
200022ce:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
200022d2:	2402      	movs	r4, #2
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
200022d4:	9201      	str	r2, [sp, #4]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
200022d6:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
200022da:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
200022dc:	9407      	str	r4, [sp, #28]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
200022de:	f04f 0c01 	mov.w	ip, #1
200022e2:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLN = 180;
200022e4:	f04f 0e08 	mov.w	lr, #8
200022e8:	23b4      	movs	r3, #180	; 0xb4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
200022ea:	a807      	add	r0, sp, #28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
200022ec:	e9cd c20a 	strd	ip, r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 180;
200022f0:	e9cd e30f 	strd	lr, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 2;
200022f4:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
200022f8:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
200022fa:	f7ff fb45 	bl	20001988 <HAL_RCC_OscConfig>
200022fe:	b100      	cbz	r0, 20002302 <TinyBLInit+0x76>
		for(;;);
20002300:	e7fe      	b.n	20002300 <TinyBLInit+0x74>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
20002302:	f7ff fb07 	bl	20001914 <HAL_PWREx_EnableOverDrive>
20002306:	b100      	cbz	r0, 2000230a <TinyBLInit+0x7e>
		for(;;);
20002308:	e7fe      	b.n	20002308 <TinyBLInit+0x7c>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2000230a:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2000230c:	e9cd 3402 	strd	r3, r4, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20002310:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
20002312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20002316:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
2000231a:	e9cd 0305 	strd	r0, r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
2000231e:	2105      	movs	r1, #5
20002320:	a802      	add	r0, sp, #8
20002322:	f7ff fd11 	bl	20001d48 <HAL_RCC_ClockConfig>
20002326:	b100      	cbz	r0, 2000232a <TinyBLInit+0x9e>
		for(;;);
20002328:	e7fe      	b.n	20002328 <TinyBLInit+0x9c>
	UartHandle.Instance        = USART3;
2000232a:	4b0c      	ldr	r3, [pc, #48]	; (2000235c <TinyBLInit+0xd0>)
	UartHandle.Init.BaudRate   = 57600;
2000232c:	490c      	ldr	r1, [pc, #48]	; (20002360 <TinyBLInit+0xd4>)
	UartHandle.Init.Parity     = UART_PARITY_NONE;
2000232e:	6118      	str	r0, [r3, #16]
	UartHandle.Init.BaudRate   = 57600;
20002330:	f44f 4261 	mov.w	r2, #57600	; 0xe100
20002334:	e9c3 1200 	strd	r1, r2, [r3]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
20002338:	e9c3 0002 	strd	r0, r0, [r3, #8]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
2000233c:	6198      	str	r0, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
2000233e:	220c      	movs	r2, #12
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
20002340:	61d8      	str	r0, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
20002342:	4618      	mov	r0, r3
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
20002344:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
20002346:	f7ff ff27 	bl	20002198 <HAL_UART_Init>
2000234a:	b100      	cbz	r0, 2000234e <TinyBLInit+0xc2>
		for(;;);
2000234c:	e7fe      	b.n	2000234c <TinyBLInit+0xc0>
}
2000234e:	b014      	add	sp, #80	; 0x50
20002350:	bd10      	pop	{r4, pc}
20002352:	bf00      	nop
20002354:	40023800 	.word	0x40023800
20002358:	40007000 	.word	0x40007000
2000235c:	200056b4 	.word	0x200056b4
20002360:	40004800 	.word	0x40004800

20002364 <TIM7_IRQHandler>:
uint8_t T1Stack[0x1000];
uint8_t T2Stack[0x1000];
uint32_t TaskSPs[3];
uint8_t firstGo = 1;
void TIM7_IRQHandler(void) {
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
20002364:	4b11      	ldr	r3, [pc, #68]	; (200023ac <TIM7_IRQHandler+0x48>)
20002366:	4912      	ldr	r1, [pc, #72]	; (200023b0 <TIM7_IRQHandler+0x4c>)
20002368:	681b      	ldr	r3, [r3, #0]
2000236a:	4812      	ldr	r0, [pc, #72]	; (200023b4 <TIM7_IRQHandler+0x50>)
2000236c:	f06f 0201 	mvn.w	r2, #1
20002370:	611a      	str	r2, [r3, #16]
	if(firstGo) { //set stack pointer for task 1
20002372:	4b11      	ldr	r3, [pc, #68]	; (200023b8 <TIM7_IRQHandler+0x54>)
20002374:	781a      	ldrb	r2, [r3, #0]
20002376:	b122      	cbz	r2, 20002382 <TIM7_IRQHandler+0x1e>
		asm volatile("ldr sp, %0" : : "m" (*(TaskSPs+currentTask)));
20002378:	780a      	ldrb	r2, [r1, #0]
2000237a:	f850 d022 	ldr.w	sp, [r0, r2, lsl #2]
		firstGo = 0;
2000237e:	2200      	movs	r2, #0
20002380:	701a      	strb	r2, [r3, #0]
	}
	asm volatile("PUSH	{R4-R11}");
20002382:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	asm volatile("str sp, %0" : "=m" (*(TaskSPs+currentTask)));
20002386:	780b      	ldrb	r3, [r1, #0]
20002388:	f840 d023 	str.w	sp, [r0, r3, lsl #2]
	currentTask = (currentTask+1)%3;
2000238c:	780b      	ldrb	r3, [r1, #0]
2000238e:	2203      	movs	r2, #3
20002390:	3301      	adds	r3, #1
20002392:	fbb3 f2f2 	udiv	r2, r3, r2
20002396:	eb02 0242 	add.w	r2, r2, r2, lsl #1
2000239a:	1a9b      	subs	r3, r3, r2
2000239c:	b2db      	uxtb	r3, r3
2000239e:	700b      	strb	r3, [r1, #0]
	asm volatile("ldr sp, %0" : : "m" (*(TaskSPs+currentTask)));
200023a0:	780b      	ldrb	r3, [r1, #0]
200023a2:	f850 d023 	ldr.w	sp, [r0, r3, lsl #2]
	asm volatile("POP	{R4-R11}");
200023a6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
}
200023aa:	4770      	bx	lr
200023ac:	20005700 	.word	0x20005700
200023b0:	200056fc 	.word	0x200056fc
200023b4:	200056a8 	.word	0x200056a8
200023b8:	20002684 	.word	0x20002684

200023bc <RTOSInit>:

void RTOSInit() {
	TaskSPs[0] = (uint32_t*)(T0Stack+(0x1000-32));
	*(uint32_t*)(T0Stack+0xFFC) = 0x1000000; //program status
	*(uint32_t*)(T0Stack+0xFF8) = TaskEntryAddrs[0]; //program counter
200023bc:	491a      	ldr	r1, [pc, #104]	; (20002428 <RTOSInit+0x6c>)
	TaskSPs[0] = (uint32_t*)(T0Stack+(0x1000-32));
200023be:	4a1b      	ldr	r2, [pc, #108]	; (2000242c <RTOSInit+0x70>)
	*(uint32_t*)(T0Stack+0xFF8) = TaskEntryAddrs[0]; //program counter
200023c0:	680b      	ldr	r3, [r1, #0]
void RTOSInit() {
200023c2:	b530      	push	{r4, r5, lr}
	TaskSPs[0] = (uint32_t*)(T0Stack+(0x1000-32));
200023c4:	4c1a      	ldr	r4, [pc, #104]	; (20002430 <RTOSInit+0x74>)
	*(uint32_t*)(T0Stack+0xFF8) = TaskEntryAddrs[0]; //program counter
200023c6:	6193      	str	r3, [r2, #24]
	*(uint32_t*)(T0Stack+0xFF4) = TaskEntryAddrs[0]; //link register
200023c8:	6153      	str	r3, [r2, #20]
	*(uint32_t*)(T0Stack+0xFFC) = 0x1000000; //program status
200023ca:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
	*(uint32_t*)(T0Stack+0xFF0) = 0; //R12
200023ce:	2300      	movs	r3, #0
	*(uint32_t*)(T0Stack+0xFFC) = 0x1000000; //program status
200023d0:	61d0      	str	r0, [r2, #28]
	*(uint32_t*)(T0Stack+0xFF0) = 0; //R12
200023d2:	6113      	str	r3, [r2, #16]
	*(uint32_t*)(T0Stack+0xFEC) = 0; //R3
200023d4:	60d3      	str	r3, [r2, #12]
	*(uint32_t*)(T0Stack+0xFE8) = 0; //R2
200023d6:	6093      	str	r3, [r2, #8]
	*(uint32_t*)(T0Stack+0xFE4) = 0; //R1
200023d8:	6053      	str	r3, [r2, #4]
	TaskSPs[0] = (uint32_t*)(T0Stack+(0x1000-32));
200023da:	6022      	str	r2, [r4, #0]


	TaskSPs[1] = (uint32_t*)(T1Stack+(0x1000-64));
200023dc:	4a15      	ldr	r2, [pc, #84]	; (20002434 <RTOSInit+0x78>)
	*(uint32_t*)(T1Stack+0xFFC) = 0x1000000; //program status
	*(uint32_t*)(T1Stack+0xFF8) = TaskEntryAddrs[1]; //program counter
200023de:	684d      	ldr	r5, [r1, #4]
	*(uint32_t*)(T1Stack+0xFFC) = 0x1000000; //program status
200023e0:	63d0      	str	r0, [r2, #60]	; 0x3c
	*(uint32_t*)(T1Stack+0xFF8) = TaskEntryAddrs[1]; //program counter
200023e2:	6395      	str	r5, [r2, #56]	; 0x38
	*(uint32_t*)(T1Stack+0xFF4) = TaskEntryAddrs[1]; //link register
200023e4:	6355      	str	r5, [r2, #52]	; 0x34
	TaskSPs[1] = (uint32_t*)(T1Stack+(0x1000-64));
200023e6:	6062      	str	r2, [r4, #4]
	*(uint32_t*)(T1Stack+0xFF0) = 0; //R12
200023e8:	6313      	str	r3, [r2, #48]	; 0x30
	*(uint32_t*)(T1Stack+0xFEC) = 0; //R3
200023ea:	62d3      	str	r3, [r2, #44]	; 0x2c
	*(uint32_t*)(T1Stack+0xFE8) = 0; //R2
200023ec:	6293      	str	r3, [r2, #40]	; 0x28
	*(uint32_t*)(T1Stack+0xFE4) = 0; //R1
200023ee:	6253      	str	r3, [r2, #36]	; 0x24
	*(uint32_t*)(T1Stack+0xFE0) = 0; //R4
200023f0:	6213      	str	r3, [r2, #32]
	*(uint32_t*)(T1Stack+0xFDC) = 0; //R5
200023f2:	61d3      	str	r3, [r2, #28]
	*(uint32_t*)(T1Stack+0xFD8) = 0; //R6
200023f4:	6193      	str	r3, [r2, #24]
	*(uint32_t*)(T1Stack+0xFD4) = 0; //R7
200023f6:	6153      	str	r3, [r2, #20]
	*(uint32_t*)(T1Stack+0xFD0) = 0; //R8
200023f8:	6113      	str	r3, [r2, #16]
	*(uint32_t*)(T1Stack+0xFCC) = 0; //R9
200023fa:	60d3      	str	r3, [r2, #12]
	*(uint32_t*)(T1Stack+0xFC8) = 0; //R10
200023fc:	6093      	str	r3, [r2, #8]
	*(uint32_t*)(T1Stack+0xFC4) = 0; //R11
200023fe:	6053      	str	r3, [r2, #4]

	TaskSPs[2] = (uint32_t*)(T2Stack+(0x1000-64));
20002400:	4a0d      	ldr	r2, [pc, #52]	; (20002438 <RTOSInit+0x7c>)
	*(uint32_t*)(T2Stack+0xFFC) = 0x1000000; //program status
	*(uint32_t*)(T2Stack+0xFF8) = TaskEntryAddrs[2]; //program counter
20002402:	6889      	ldr	r1, [r1, #8]
	TaskSPs[2] = (uint32_t*)(T2Stack+(0x1000-64));
20002404:	60a2      	str	r2, [r4, #8]
	*(uint32_t*)(T2Stack+0xFFC) = 0x1000000; //program status
20002406:	63d0      	str	r0, [r2, #60]	; 0x3c
	*(uint32_t*)(T2Stack+0xFF8) = TaskEntryAddrs[2]; //program counter
20002408:	6391      	str	r1, [r2, #56]	; 0x38
	*(uint32_t*)(T2Stack+0xFF4) = TaskEntryAddrs[2]; //link register
2000240a:	6351      	str	r1, [r2, #52]	; 0x34
	*(uint32_t*)(T2Stack+0xFF0) = 0; //R12
2000240c:	6313      	str	r3, [r2, #48]	; 0x30
	*(uint32_t*)(T2Stack+0xFEC) = 0; //R3
2000240e:	62d3      	str	r3, [r2, #44]	; 0x2c
	*(uint32_t*)(T2Stack+0xFE8) = 0; //R2
20002410:	6293      	str	r3, [r2, #40]	; 0x28
	*(uint32_t*)(T2Stack+0xFE4) = 0; //R1
20002412:	6253      	str	r3, [r2, #36]	; 0x24
	*(uint32_t*)(T2Stack+0xFE0) = 0; //R4
20002414:	6213      	str	r3, [r2, #32]
	*(uint32_t*)(T2Stack+0xFDC) = 0; //R5
20002416:	61d3      	str	r3, [r2, #28]
	*(uint32_t*)(T2Stack+0xFD8) = 0; //R6
20002418:	6193      	str	r3, [r2, #24]
	*(uint32_t*)(T2Stack+0xFD4) = 0; //R7
2000241a:	6153      	str	r3, [r2, #20]
	*(uint32_t*)(T2Stack+0xFD0) = 0; //R8
2000241c:	6113      	str	r3, [r2, #16]
	*(uint32_t*)(T2Stack+0xFCC) = 0; //R9
2000241e:	60d3      	str	r3, [r2, #12]
	*(uint32_t*)(T2Stack+0xFC8) = 0; //R10
20002420:	6093      	str	r3, [r2, #8]
	*(uint32_t*)(T2Stack+0xFC4) = 0; //R11
20002422:	6053      	str	r3, [r2, #4]
}
20002424:	bd30      	pop	{r4, r5, pc}
20002426:	bf00      	nop
20002428:	20002678 	.word	0x20002678
2000242c:	20003688 	.word	0x20003688
20002430:	200056a8 	.word	0x200056a8
20002434:	20004668 	.word	0x20004668
20002438:	20005668 	.word	0x20005668

2000243c <main>:
{  
2000243c:	b580      	push	{r7, lr}
2000243e:	b088      	sub	sp, #32
	TinyBLInit();
20002440:	f7ff ff24 	bl	2000228c <TinyBLInit>
	__HAL_RCC_GPIOB_CLK_ENABLE();
20002444:	2500      	movs	r5, #0
20002446:	4b24      	ldr	r3, [pc, #144]	; (200024d8 <main+0x9c>)
20002448:	9500      	str	r5, [sp, #0]
2000244a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2000244c:	4823      	ldr	r0, [pc, #140]	; (200024dc <main+0xa0>)
	htim7.Instance = TIM7;
2000244e:	4c24      	ldr	r4, [pc, #144]	; (200024e0 <main+0xa4>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
20002450:	f042 0202 	orr.w	r2, r2, #2
20002454:	631a      	str	r2, [r3, #48]	; 0x30
20002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
20002458:	9505      	str	r5, [sp, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
2000245a:	f003 0302 	and.w	r3, r3, #2
2000245e:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_0;
20002460:	2601      	movs	r6, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20002462:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
20002464:	2702      	movs	r7, #2
	__HAL_RCC_GPIOB_CLK_ENABLE();
20002466:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
20002468:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000246a:	e9cd 6603 	strd	r6, r6, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2000246e:	f7ff f977 	bl	20001760 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
20002472:	481a      	ldr	r0, [pc, #104]	; (200024dc <main+0xa0>)
20002474:	462a      	mov	r2, r5
20002476:	4631      	mov	r1, r6
20002478:	f7ff fa46 	bl	20001908 <HAL_GPIO_WritePin>
	RTOSInit();
2000247c:	f7ff ff9e 	bl	200023bc <RTOSInit>
	htim7.Init.Prescaler = 17999;//was 17999
20002480:	4a18      	ldr	r2, [pc, #96]	; (200024e4 <main+0xa8>)
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
20002482:	60a5      	str	r5, [r4, #8]
	htim7.Init.Prescaler = 17999;//was 17999
20002484:	f244 634f 	movw	r3, #17999	; 0x464f
20002488:	e9c4 2300 	strd	r2, r3, [r4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
2000248c:	4620      	mov	r0, r4
	htim7.Init.Period = 4999;
2000248e:	f241 3387 	movw	r3, #4999	; 0x1387
	TIM_MasterConfigTypeDef sMasterConfig = {0};
20002492:	e9cd 5501 	strd	r5, r5, [sp, #4]
	htim7.Init.Period = 4999;
20002496:	60e3      	str	r3, [r4, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
20002498:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
2000249a:	f7ff fdb5 	bl	20002008 <HAL_TIM_Base_Init>
2000249e:	b100      	cbz	r0, 200024a2 <main+0x66>
		for(;;);
200024a0:	e7fe      	b.n	200024a0 <main+0x64>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
200024a2:	e9cd 0001 	strd	r0, r0, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
200024a6:	a901      	add	r1, sp, #4
200024a8:	4620      	mov	r0, r4
200024aa:	f7ff fdd9 	bl	20002060 <HAL_TIMEx_MasterConfigSynchronization>
200024ae:	4605      	mov	r5, r0
200024b0:	b100      	cbz	r0, 200024b4 <main+0x78>
		for(;;);
200024b2:	e7fe      	b.n	200024b2 <main+0x76>
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_SR_UIF);
200024b4:	6823      	ldr	r3, [r4, #0]
200024b6:	f06f 0201 	mvn.w	r2, #1
200024ba:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim7);
200024bc:	4620      	mov	r0, r4
200024be:	f7ff fcfd 	bl	20001ebc <HAL_TIM_Base_Start_IT>
	BSP_LED_Init(LED1);
200024c2:	4628      	mov	r0, r5
200024c4:	f7ff f81c 	bl	20001500 <BSP_LED_Init>
	BSP_LED_Init(LED2);
200024c8:	4630      	mov	r0, r6
200024ca:	f7ff f819 	bl	20001500 <BSP_LED_Init>
	BSP_LED_Init(LED3);
200024ce:	4638      	mov	r0, r7
200024d0:	f7ff f816 	bl	20001500 <BSP_LED_Init>
	for(;;);
200024d4:	e7fe      	b.n	200024d4 <main+0x98>
200024d6:	bf00      	nop
200024d8:	40023800 	.word	0x40023800
200024dc:	40020400 	.word	0x40020400
200024e0:	20005700 	.word	0x20005700
200024e4:	40001400 	.word	0x40001400

200024e8 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
200024e8:	b510      	push	{r4, lr}
200024ea:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
200024ec:	4b1c      	ldr	r3, [pc, #112]	; (20002560 <HAL_UART_MspInit+0x78>)
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
200024ee:	481d      	ldr	r0, [pc, #116]	; (20002564 <HAL_UART_MspInit+0x7c>)
  USARTx_TX_GPIO_CLK_ENABLE();
200024f0:	2200      	movs	r2, #0
200024f2:	9200      	str	r2, [sp, #0]
200024f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
200024f6:	f041 0108 	orr.w	r1, r1, #8
200024fa:	6319      	str	r1, [r3, #48]	; 0x30
200024fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
200024fe:	f001 0108 	and.w	r1, r1, #8
20002502:	9100      	str	r1, [sp, #0]
20002504:	9900      	ldr	r1, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
20002506:	9201      	str	r2, [sp, #4]
20002508:	6b19      	ldr	r1, [r3, #48]	; 0x30
2000250a:	f041 0108 	orr.w	r1, r1, #8
2000250e:	6319      	str	r1, [r3, #48]	; 0x30
20002510:	6b19      	ldr	r1, [r3, #48]	; 0x30
20002512:	f001 0108 	and.w	r1, r1, #8
20002516:	9101      	str	r1, [sp, #4]
20002518:	9901      	ldr	r1, [sp, #4]
  USARTx_CLK_ENABLE();
2000251a:	9202      	str	r2, [sp, #8]
2000251c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2000251e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
20002522:	641a      	str	r2, [r3, #64]	; 0x40
20002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2000252a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
2000252c:	f44f 7280 	mov.w	r2, #256	; 0x100
  USARTx_CLK_ENABLE();
20002530:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
20002532:	2302      	movs	r3, #2
20002534:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
20002538:	2101      	movs	r1, #1
2000253a:	2303      	movs	r3, #3
2000253c:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
20002540:	2407      	movs	r4, #7
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
20002542:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
20002544:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
20002546:	f7ff f90b 	bl	20001760 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
2000254a:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
2000254e:	4805      	ldr	r0, [pc, #20]	; (20002564 <HAL_UART_MspInit+0x7c>)
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
20002550:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
20002552:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
20002554:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
20002556:	f7ff f903 	bl	20001760 <HAL_GPIO_Init>
}
2000255a:	b008      	add	sp, #32
2000255c:	bd10      	pop	{r4, pc}
2000255e:	bf00      	nop
20002560:	40023800 	.word	0x40023800
20002564:	40020c00 	.word	0x40020c00

20002568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
20002568:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM7)
2000256a:	4b0f      	ldr	r3, [pc, #60]	; (200025a8 <HAL_TIM_Base_MspInit+0x40>)
2000256c:	6802      	ldr	r2, [r0, #0]
2000256e:	429a      	cmp	r2, r3
20002570:	d116      	bne.n	200025a0 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
20002572:	2200      	movs	r2, #0
20002574:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
20002578:	9201      	str	r2, [sp, #4]
2000257a:	6c19      	ldr	r1, [r3, #64]	; 0x40
2000257c:	f041 0120 	orr.w	r1, r1, #32
20002580:	6419      	str	r1, [r3, #64]	; 0x40
20002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002584:	f003 0320 	and.w	r3, r3, #32
20002588:	9301      	str	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
2000258a:	4611      	mov	r1, r2
2000258c:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
2000258e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
20002590:	f7ff f892 	bl	200016b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
20002594:	2037      	movs	r0, #55	; 0x37
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
20002596:	b003      	add	sp, #12
20002598:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
2000259c:	f7ff b8be 	b.w	2000171c <HAL_NVIC_EnableIRQ>
}
200025a0:	b003      	add	sp, #12
200025a2:	f85d fb04 	ldr.w	pc, [sp], #4
200025a6:	bf00      	nop
200025a8:	40001400 	.word	0x40001400

200025ac <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
200025ac:	4770      	bx	lr

200025ae <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
200025ae:	e7fe      	b.n	200025ae <HardFault_Handler>

200025b0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
200025b0:	e7fe      	b.n	200025b0 <MemManage_Handler>

200025b2 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
200025b2:	e7fe      	b.n	200025b2 <BusFault_Handler>

200025b4 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
200025b4:	e7fe      	b.n	200025b4 <UsageFault_Handler>

200025b6 <SVC_Handler>:
200025b6:	4770      	bx	lr

200025b8 <DebugMon_Handler>:
200025b8:	4770      	bx	lr

200025ba <PendSV_Handler>:
200025ba:	4770      	bx	lr

200025bc <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
200025bc:	f7ff b858 	b.w	20001670 <HAL_IncTick>

200025c0 <memset>:
200025c0:	4402      	add	r2, r0
200025c2:	4603      	mov	r3, r0
200025c4:	4293      	cmp	r3, r2
200025c6:	d100      	bne.n	200025ca <memset+0xa>
200025c8:	4770      	bx	lr
200025ca:	f803 1b01 	strb.w	r1, [r3], #1
200025ce:	e7f9      	b.n	200025c4 <memset+0x4>

200025d0 <__libc_init_array>:
200025d0:	b570      	push	{r4, r5, r6, lr}
200025d2:	4d0d      	ldr	r5, [pc, #52]	; (20002608 <__libc_init_array+0x38>)
200025d4:	4c0d      	ldr	r4, [pc, #52]	; (2000260c <__libc_init_array+0x3c>)
200025d6:	1b64      	subs	r4, r4, r5
200025d8:	10a4      	asrs	r4, r4, #2
200025da:	2600      	movs	r6, #0
200025dc:	42a6      	cmp	r6, r4
200025de:	d109      	bne.n	200025f4 <__libc_init_array+0x24>
200025e0:	4d0b      	ldr	r5, [pc, #44]	; (20002610 <__libc_init_array+0x40>)
200025e2:	4c0c      	ldr	r4, [pc, #48]	; (20002614 <__libc_init_array+0x44>)
200025e4:	f000 f818 	bl	20002618 <_init>
200025e8:	1b64      	subs	r4, r4, r5
200025ea:	10a4      	asrs	r4, r4, #2
200025ec:	2600      	movs	r6, #0
200025ee:	42a6      	cmp	r6, r4
200025f0:	d105      	bne.n	200025fe <__libc_init_array+0x2e>
200025f2:	bd70      	pop	{r4, r5, r6, pc}
200025f4:	f855 3b04 	ldr.w	r3, [r5], #4
200025f8:	4798      	blx	r3
200025fa:	3601      	adds	r6, #1
200025fc:	e7ee      	b.n	200025dc <__libc_init_array+0xc>
200025fe:	f855 3b04 	ldr.w	r3, [r5], #4
20002602:	4798      	blx	r3
20002604:	3601      	adds	r6, #1
20002606:	e7f2      	b.n	200025ee <__libc_init_array+0x1e>
20002608:	20002658 	.word	0x20002658
2000260c:	20002658 	.word	0x20002658
20002610:	20002658 	.word	0x20002658
20002614:	2000265c 	.word	0x2000265c

20002618 <_init>:
20002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000261a:	bf00      	nop
2000261c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000261e:	bc08      	pop	{r3}
20002620:	469e      	mov	lr, r3
20002622:	4770      	bx	lr

20002624 <_fini>:
20002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002626:	bf00      	nop
20002628:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000262a:	bc08      	pop	{r3}
2000262c:	469e      	mov	lr, r3
2000262e:	4770      	bx	lr
