
FLASH_EraseProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  20001000  20001000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b50  200011c4  200011c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  20002d14  20002d14  00002d14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20002d34  20002d34  00002d6c  2**0
                  CONTENTS
  4 .ARM          00000008  20002d34  20002d34  00002d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20002d3c  20002d6c  00002d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20002d3c  20002d3c  00002d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  20002d40  20002d40  00002d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20002d44  20002d44  00002d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000077dc  20002d6c  20002d6c  00002d6c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a548  2000a548  00002d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002d6c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00002d9c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012268  00000000  00000000  00002ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a5c  00000000  00000000  00015047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000075dc  00000000  00000000  00017aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ae8  00000000  00000000  0001f080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b43  00000000  00000000  0001fb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022503  00000000  00000000  000206ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001420f  00000000  00000000  00042bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3a37  00000000  00000000  00056dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002094  00000000  00000000  0012a7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0012c888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200011c4 <__do_global_dtors_aux>:
200011c4:	b510      	push	{r4, lr}
200011c6:	4c05      	ldr	r4, [pc, #20]	; (200011dc <__do_global_dtors_aux+0x18>)
200011c8:	7823      	ldrb	r3, [r4, #0]
200011ca:	b933      	cbnz	r3, 200011da <__do_global_dtors_aux+0x16>
200011cc:	4b04      	ldr	r3, [pc, #16]	; (200011e0 <__do_global_dtors_aux+0x1c>)
200011ce:	b113      	cbz	r3, 200011d6 <__do_global_dtors_aux+0x12>
200011d0:	4804      	ldr	r0, [pc, #16]	; (200011e4 <__do_global_dtors_aux+0x20>)
200011d2:	f3af 8000 	nop.w
200011d6:	2301      	movs	r3, #1
200011d8:	7023      	strb	r3, [r4, #0]
200011da:	bd10      	pop	{r4, pc}
200011dc:	20002d6c 	.word	0x20002d6c
200011e0:	00000000 	.word	0x00000000
200011e4:	20002cfc 	.word	0x20002cfc

200011e8 <frame_dummy>:
200011e8:	b508      	push	{r3, lr}
200011ea:	4b03      	ldr	r3, [pc, #12]	; (200011f8 <frame_dummy+0x10>)
200011ec:	b11b      	cbz	r3, 200011f6 <frame_dummy+0xe>
200011ee:	4903      	ldr	r1, [pc, #12]	; (200011fc <frame_dummy+0x14>)
200011f0:	4803      	ldr	r0, [pc, #12]	; (20001200 <frame_dummy+0x18>)
200011f2:	f3af 8000 	nop.w
200011f6:	bd08      	pop	{r3, pc}
200011f8:	00000000 	.word	0x00000000
200011fc:	20002d70 	.word	0x20002d70
20001200:	20002cfc 	.word	0x20002cfc

20001204 <__aeabi_uldivmod>:
20001204:	b953      	cbnz	r3, 2000121c <__aeabi_uldivmod+0x18>
20001206:	b94a      	cbnz	r2, 2000121c <__aeabi_uldivmod+0x18>
20001208:	2900      	cmp	r1, #0
2000120a:	bf08      	it	eq
2000120c:	2800      	cmpeq	r0, #0
2000120e:	bf1c      	itt	ne
20001210:	f04f 31ff 	movne.w	r1, #4294967295
20001214:	f04f 30ff 	movne.w	r0, #4294967295
20001218:	f000 b970 	b.w	200014fc <__aeabi_idiv0>
2000121c:	f1ad 0c08 	sub.w	ip, sp, #8
20001220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20001224:	f000 f806 	bl	20001234 <__udivmoddi4>
20001228:	f8dd e004 	ldr.w	lr, [sp, #4]
2000122c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20001230:	b004      	add	sp, #16
20001232:	4770      	bx	lr

20001234 <__udivmoddi4>:
20001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20001238:	9e08      	ldr	r6, [sp, #32]
2000123a:	460d      	mov	r5, r1
2000123c:	4604      	mov	r4, r0
2000123e:	460f      	mov	r7, r1
20001240:	2b00      	cmp	r3, #0
20001242:	d14a      	bne.n	200012da <__udivmoddi4+0xa6>
20001244:	428a      	cmp	r2, r1
20001246:	4694      	mov	ip, r2
20001248:	d965      	bls.n	20001316 <__udivmoddi4+0xe2>
2000124a:	fab2 f382 	clz	r3, r2
2000124e:	b143      	cbz	r3, 20001262 <__udivmoddi4+0x2e>
20001250:	fa02 fc03 	lsl.w	ip, r2, r3
20001254:	f1c3 0220 	rsb	r2, r3, #32
20001258:	409f      	lsls	r7, r3
2000125a:	fa20 f202 	lsr.w	r2, r0, r2
2000125e:	4317      	orrs	r7, r2
20001260:	409c      	lsls	r4, r3
20001262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
20001266:	fa1f f58c 	uxth.w	r5, ip
2000126a:	fbb7 f1fe 	udiv	r1, r7, lr
2000126e:	0c22      	lsrs	r2, r4, #16
20001270:	fb0e 7711 	mls	r7, lr, r1, r7
20001274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
20001278:	fb01 f005 	mul.w	r0, r1, r5
2000127c:	4290      	cmp	r0, r2
2000127e:	d90a      	bls.n	20001296 <__udivmoddi4+0x62>
20001280:	eb1c 0202 	adds.w	r2, ip, r2
20001284:	f101 37ff 	add.w	r7, r1, #4294967295
20001288:	f080 811c 	bcs.w	200014c4 <__udivmoddi4+0x290>
2000128c:	4290      	cmp	r0, r2
2000128e:	f240 8119 	bls.w	200014c4 <__udivmoddi4+0x290>
20001292:	3902      	subs	r1, #2
20001294:	4462      	add	r2, ip
20001296:	1a12      	subs	r2, r2, r0
20001298:	b2a4      	uxth	r4, r4
2000129a:	fbb2 f0fe 	udiv	r0, r2, lr
2000129e:	fb0e 2210 	mls	r2, lr, r0, r2
200012a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
200012a6:	fb00 f505 	mul.w	r5, r0, r5
200012aa:	42a5      	cmp	r5, r4
200012ac:	d90a      	bls.n	200012c4 <__udivmoddi4+0x90>
200012ae:	eb1c 0404 	adds.w	r4, ip, r4
200012b2:	f100 32ff 	add.w	r2, r0, #4294967295
200012b6:	f080 8107 	bcs.w	200014c8 <__udivmoddi4+0x294>
200012ba:	42a5      	cmp	r5, r4
200012bc:	f240 8104 	bls.w	200014c8 <__udivmoddi4+0x294>
200012c0:	4464      	add	r4, ip
200012c2:	3802      	subs	r0, #2
200012c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
200012c8:	1b64      	subs	r4, r4, r5
200012ca:	2100      	movs	r1, #0
200012cc:	b11e      	cbz	r6, 200012d6 <__udivmoddi4+0xa2>
200012ce:	40dc      	lsrs	r4, r3
200012d0:	2300      	movs	r3, #0
200012d2:	e9c6 4300 	strd	r4, r3, [r6]
200012d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200012da:	428b      	cmp	r3, r1
200012dc:	d908      	bls.n	200012f0 <__udivmoddi4+0xbc>
200012de:	2e00      	cmp	r6, #0
200012e0:	f000 80ed 	beq.w	200014be <__udivmoddi4+0x28a>
200012e4:	2100      	movs	r1, #0
200012e6:	e9c6 0500 	strd	r0, r5, [r6]
200012ea:	4608      	mov	r0, r1
200012ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200012f0:	fab3 f183 	clz	r1, r3
200012f4:	2900      	cmp	r1, #0
200012f6:	d149      	bne.n	2000138c <__udivmoddi4+0x158>
200012f8:	42ab      	cmp	r3, r5
200012fa:	d302      	bcc.n	20001302 <__udivmoddi4+0xce>
200012fc:	4282      	cmp	r2, r0
200012fe:	f200 80f8 	bhi.w	200014f2 <__udivmoddi4+0x2be>
20001302:	1a84      	subs	r4, r0, r2
20001304:	eb65 0203 	sbc.w	r2, r5, r3
20001308:	2001      	movs	r0, #1
2000130a:	4617      	mov	r7, r2
2000130c:	2e00      	cmp	r6, #0
2000130e:	d0e2      	beq.n	200012d6 <__udivmoddi4+0xa2>
20001310:	e9c6 4700 	strd	r4, r7, [r6]
20001314:	e7df      	b.n	200012d6 <__udivmoddi4+0xa2>
20001316:	b902      	cbnz	r2, 2000131a <__udivmoddi4+0xe6>
20001318:	deff      	udf	#255	; 0xff
2000131a:	fab2 f382 	clz	r3, r2
2000131e:	2b00      	cmp	r3, #0
20001320:	f040 8090 	bne.w	20001444 <__udivmoddi4+0x210>
20001324:	1a8a      	subs	r2, r1, r2
20001326:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000132a:	fa1f fe8c 	uxth.w	lr, ip
2000132e:	2101      	movs	r1, #1
20001330:	fbb2 f5f7 	udiv	r5, r2, r7
20001334:	fb07 2015 	mls	r0, r7, r5, r2
20001338:	0c22      	lsrs	r2, r4, #16
2000133a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
2000133e:	fb0e f005 	mul.w	r0, lr, r5
20001342:	4290      	cmp	r0, r2
20001344:	d908      	bls.n	20001358 <__udivmoddi4+0x124>
20001346:	eb1c 0202 	adds.w	r2, ip, r2
2000134a:	f105 38ff 	add.w	r8, r5, #4294967295
2000134e:	d202      	bcs.n	20001356 <__udivmoddi4+0x122>
20001350:	4290      	cmp	r0, r2
20001352:	f200 80cb 	bhi.w	200014ec <__udivmoddi4+0x2b8>
20001356:	4645      	mov	r5, r8
20001358:	1a12      	subs	r2, r2, r0
2000135a:	b2a4      	uxth	r4, r4
2000135c:	fbb2 f0f7 	udiv	r0, r2, r7
20001360:	fb07 2210 	mls	r2, r7, r0, r2
20001364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
20001368:	fb0e fe00 	mul.w	lr, lr, r0
2000136c:	45a6      	cmp	lr, r4
2000136e:	d908      	bls.n	20001382 <__udivmoddi4+0x14e>
20001370:	eb1c 0404 	adds.w	r4, ip, r4
20001374:	f100 32ff 	add.w	r2, r0, #4294967295
20001378:	d202      	bcs.n	20001380 <__udivmoddi4+0x14c>
2000137a:	45a6      	cmp	lr, r4
2000137c:	f200 80bb 	bhi.w	200014f6 <__udivmoddi4+0x2c2>
20001380:	4610      	mov	r0, r2
20001382:	eba4 040e 	sub.w	r4, r4, lr
20001386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
2000138a:	e79f      	b.n	200012cc <__udivmoddi4+0x98>
2000138c:	f1c1 0720 	rsb	r7, r1, #32
20001390:	408b      	lsls	r3, r1
20001392:	fa22 fc07 	lsr.w	ip, r2, r7
20001396:	ea4c 0c03 	orr.w	ip, ip, r3
2000139a:	fa05 f401 	lsl.w	r4, r5, r1
2000139e:	fa20 f307 	lsr.w	r3, r0, r7
200013a2:	40fd      	lsrs	r5, r7
200013a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
200013a8:	4323      	orrs	r3, r4
200013aa:	fbb5 f8f9 	udiv	r8, r5, r9
200013ae:	fa1f fe8c 	uxth.w	lr, ip
200013b2:	fb09 5518 	mls	r5, r9, r8, r5
200013b6:	0c1c      	lsrs	r4, r3, #16
200013b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
200013bc:	fb08 f50e 	mul.w	r5, r8, lr
200013c0:	42a5      	cmp	r5, r4
200013c2:	fa02 f201 	lsl.w	r2, r2, r1
200013c6:	fa00 f001 	lsl.w	r0, r0, r1
200013ca:	d90b      	bls.n	200013e4 <__udivmoddi4+0x1b0>
200013cc:	eb1c 0404 	adds.w	r4, ip, r4
200013d0:	f108 3aff 	add.w	sl, r8, #4294967295
200013d4:	f080 8088 	bcs.w	200014e8 <__udivmoddi4+0x2b4>
200013d8:	42a5      	cmp	r5, r4
200013da:	f240 8085 	bls.w	200014e8 <__udivmoddi4+0x2b4>
200013de:	f1a8 0802 	sub.w	r8, r8, #2
200013e2:	4464      	add	r4, ip
200013e4:	1b64      	subs	r4, r4, r5
200013e6:	b29d      	uxth	r5, r3
200013e8:	fbb4 f3f9 	udiv	r3, r4, r9
200013ec:	fb09 4413 	mls	r4, r9, r3, r4
200013f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
200013f4:	fb03 fe0e 	mul.w	lr, r3, lr
200013f8:	45a6      	cmp	lr, r4
200013fa:	d908      	bls.n	2000140e <__udivmoddi4+0x1da>
200013fc:	eb1c 0404 	adds.w	r4, ip, r4
20001400:	f103 35ff 	add.w	r5, r3, #4294967295
20001404:	d26c      	bcs.n	200014e0 <__udivmoddi4+0x2ac>
20001406:	45a6      	cmp	lr, r4
20001408:	d96a      	bls.n	200014e0 <__udivmoddi4+0x2ac>
2000140a:	3b02      	subs	r3, #2
2000140c:	4464      	add	r4, ip
2000140e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
20001412:	fba3 9502 	umull	r9, r5, r3, r2
20001416:	eba4 040e 	sub.w	r4, r4, lr
2000141a:	42ac      	cmp	r4, r5
2000141c:	46c8      	mov	r8, r9
2000141e:	46ae      	mov	lr, r5
20001420:	d356      	bcc.n	200014d0 <__udivmoddi4+0x29c>
20001422:	d053      	beq.n	200014cc <__udivmoddi4+0x298>
20001424:	b156      	cbz	r6, 2000143c <__udivmoddi4+0x208>
20001426:	ebb0 0208 	subs.w	r2, r0, r8
2000142a:	eb64 040e 	sbc.w	r4, r4, lr
2000142e:	fa04 f707 	lsl.w	r7, r4, r7
20001432:	40ca      	lsrs	r2, r1
20001434:	40cc      	lsrs	r4, r1
20001436:	4317      	orrs	r7, r2
20001438:	e9c6 7400 	strd	r7, r4, [r6]
2000143c:	4618      	mov	r0, r3
2000143e:	2100      	movs	r1, #0
20001440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20001444:	f1c3 0120 	rsb	r1, r3, #32
20001448:	fa02 fc03 	lsl.w	ip, r2, r3
2000144c:	fa20 f201 	lsr.w	r2, r0, r1
20001450:	fa25 f101 	lsr.w	r1, r5, r1
20001454:	409d      	lsls	r5, r3
20001456:	432a      	orrs	r2, r5
20001458:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000145c:	fa1f fe8c 	uxth.w	lr, ip
20001460:	fbb1 f0f7 	udiv	r0, r1, r7
20001464:	fb07 1510 	mls	r5, r7, r0, r1
20001468:	0c11      	lsrs	r1, r2, #16
2000146a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
2000146e:	fb00 f50e 	mul.w	r5, r0, lr
20001472:	428d      	cmp	r5, r1
20001474:	fa04 f403 	lsl.w	r4, r4, r3
20001478:	d908      	bls.n	2000148c <__udivmoddi4+0x258>
2000147a:	eb1c 0101 	adds.w	r1, ip, r1
2000147e:	f100 38ff 	add.w	r8, r0, #4294967295
20001482:	d22f      	bcs.n	200014e4 <__udivmoddi4+0x2b0>
20001484:	428d      	cmp	r5, r1
20001486:	d92d      	bls.n	200014e4 <__udivmoddi4+0x2b0>
20001488:	3802      	subs	r0, #2
2000148a:	4461      	add	r1, ip
2000148c:	1b49      	subs	r1, r1, r5
2000148e:	b292      	uxth	r2, r2
20001490:	fbb1 f5f7 	udiv	r5, r1, r7
20001494:	fb07 1115 	mls	r1, r7, r5, r1
20001498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
2000149c:	fb05 f10e 	mul.w	r1, r5, lr
200014a0:	4291      	cmp	r1, r2
200014a2:	d908      	bls.n	200014b6 <__udivmoddi4+0x282>
200014a4:	eb1c 0202 	adds.w	r2, ip, r2
200014a8:	f105 38ff 	add.w	r8, r5, #4294967295
200014ac:	d216      	bcs.n	200014dc <__udivmoddi4+0x2a8>
200014ae:	4291      	cmp	r1, r2
200014b0:	d914      	bls.n	200014dc <__udivmoddi4+0x2a8>
200014b2:	3d02      	subs	r5, #2
200014b4:	4462      	add	r2, ip
200014b6:	1a52      	subs	r2, r2, r1
200014b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
200014bc:	e738      	b.n	20001330 <__udivmoddi4+0xfc>
200014be:	4631      	mov	r1, r6
200014c0:	4630      	mov	r0, r6
200014c2:	e708      	b.n	200012d6 <__udivmoddi4+0xa2>
200014c4:	4639      	mov	r1, r7
200014c6:	e6e6      	b.n	20001296 <__udivmoddi4+0x62>
200014c8:	4610      	mov	r0, r2
200014ca:	e6fb      	b.n	200012c4 <__udivmoddi4+0x90>
200014cc:	4548      	cmp	r0, r9
200014ce:	d2a9      	bcs.n	20001424 <__udivmoddi4+0x1f0>
200014d0:	ebb9 0802 	subs.w	r8, r9, r2
200014d4:	eb65 0e0c 	sbc.w	lr, r5, ip
200014d8:	3b01      	subs	r3, #1
200014da:	e7a3      	b.n	20001424 <__udivmoddi4+0x1f0>
200014dc:	4645      	mov	r5, r8
200014de:	e7ea      	b.n	200014b6 <__udivmoddi4+0x282>
200014e0:	462b      	mov	r3, r5
200014e2:	e794      	b.n	2000140e <__udivmoddi4+0x1da>
200014e4:	4640      	mov	r0, r8
200014e6:	e7d1      	b.n	2000148c <__udivmoddi4+0x258>
200014e8:	46d0      	mov	r8, sl
200014ea:	e77b      	b.n	200013e4 <__udivmoddi4+0x1b0>
200014ec:	3d02      	subs	r5, #2
200014ee:	4462      	add	r2, ip
200014f0:	e732      	b.n	20001358 <__udivmoddi4+0x124>
200014f2:	4608      	mov	r0, r1
200014f4:	e70a      	b.n	2000130c <__udivmoddi4+0xd8>
200014f6:	4464      	add	r4, ip
200014f8:	3802      	subs	r0, #2
200014fa:	e742      	b.n	20001382 <__udivmoddi4+0x14e>

200014fc <__aeabi_idiv0>:
200014fc:	4770      	bx	lr
200014fe:	bf00      	nop

20001500 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
20001500:	b5f0      	push	{r4, r5, r6, r7, lr}
20001502:	4b19      	ldr	r3, [pc, #100]	; (20001568 <BSP_LED_Init+0x68>)
20001504:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
20001506:	4604      	mov	r4, r0
20001508:	bb08      	cbnz	r0, 2000154e <BSP_LED_Init+0x4e>
2000150a:	9001      	str	r0, [sp, #4]
2000150c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000150e:	f042 0202 	orr.w	r2, r2, #2
20001512:	631a      	str	r2, [r3, #48]	; 0x30
20001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001516:	f003 0302 	and.w	r3, r3, #2
2000151a:	9301      	str	r3, [sp, #4]
2000151c:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
2000151e:	4b13      	ldr	r3, [pc, #76]	; (2000156c <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20001520:	4d13      	ldr	r5, [pc, #76]	; (20001570 <BSP_LED_Init+0x70>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
20001522:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20001526:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
2000152a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000152c:	2700      	movs	r7, #0
2000152e:	2301      	movs	r3, #1
20001530:	e9cd 3704 	strd	r3, r7, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20001534:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
20001536:	2302      	movs	r3, #2
20001538:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
2000153a:	f000 fad1 	bl	20001ae0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
2000153e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
20001542:	463a      	mov	r2, r7
20001544:	4631      	mov	r1, r6
20001546:	f000 fb9f 	bl	20001c88 <HAL_GPIO_WritePin>
}
2000154a:	b009      	add	sp, #36	; 0x24
2000154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
2000154e:	2200      	movs	r2, #0
20001550:	9202      	str	r2, [sp, #8]
20001552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001554:	f042 0202 	orr.w	r2, r2, #2
20001558:	631a      	str	r2, [r3, #48]	; 0x30
2000155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000155c:	f003 0302 	and.w	r3, r3, #2
20001560:	9302      	str	r3, [sp, #8]
20001562:	9b02      	ldr	r3, [sp, #8]
20001564:	e7db      	b.n	2000151e <BSP_LED_Init+0x1e>
20001566:	bf00      	nop
20001568:	40023800 	.word	0x40023800
2000156c:	20002d14 	.word	0x20002d14
20001570:	20002d44 	.word	0x20002d44

20001574 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
20001574:	4b04      	ldr	r3, [pc, #16]	; (20001588 <BSP_LED_On+0x14>)
20001576:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
2000157a:	4b04      	ldr	r3, [pc, #16]	; (2000158c <BSP_LED_On+0x18>)
2000157c:	2201      	movs	r2, #1
2000157e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
20001582:	f000 bb81 	b.w	20001c88 <HAL_GPIO_WritePin>
20001586:	bf00      	nop
20001588:	20002d14 	.word	0x20002d14
2000158c:	20002d44 	.word	0x20002d44

20001590 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
20001590:	4b04      	ldr	r3, [pc, #16]	; (200015a4 <BSP_LED_Off+0x14>)
20001592:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
20001596:	4b04      	ldr	r3, [pc, #16]	; (200015a8 <BSP_LED_Off+0x18>)
20001598:	2200      	movs	r2, #0
2000159a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
2000159e:	f000 bb73 	b.w	20001c88 <HAL_GPIO_WritePin>
200015a2:	bf00      	nop
200015a4:	20002d14 	.word	0x20002d14
200015a8:	20002d44 	.word	0x20002d44

200015ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
200015ac:	490e      	ldr	r1, [pc, #56]	; (200015e8 <SystemInit+0x3c>)
200015ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
200015b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
200015b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200015ba:	4b0c      	ldr	r3, [pc, #48]	; (200015ec <SystemInit+0x40>)
200015bc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200015be:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
200015c0:	f042 0201 	orr.w	r2, r2, #1
200015c4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
200015c6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
200015c8:	681a      	ldr	r2, [r3, #0]
200015ca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
200015ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
200015d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200015d4:	4a06      	ldr	r2, [pc, #24]	; (200015f0 <SystemInit+0x44>)
200015d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200015d8:	681a      	ldr	r2, [r3, #0]
200015da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
200015de:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200015e0:	60d8      	str	r0, [r3, #12]


  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
200015e2:	4b04      	ldr	r3, [pc, #16]	; (200015f4 <SystemInit+0x48>)
200015e4:	608b      	str	r3, [r1, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
200015e6:	4770      	bx	lr
200015e8:	e000ed00 	.word	0xe000ed00
200015ec:	40023800 	.word	0x40023800
200015f0:	24003010 	.word	0x24003010
200015f4:	20001000 	.word	0x20001000

200015f8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
200015f8:	4770      	bx	lr
	...

200015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
200015fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
200015fe:	4b0e      	ldr	r3, [pc, #56]	; (20001638 <HAL_InitTick+0x3c>)
20001600:	781a      	ldrb	r2, [r3, #0]
20001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
20001606:	fbb3 f3f2 	udiv	r3, r3, r2
2000160a:	4a0c      	ldr	r2, [pc, #48]	; (2000163c <HAL_InitTick+0x40>)
{
2000160c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
2000160e:	6810      	ldr	r0, [r2, #0]
20001610:	fbb0 f0f3 	udiv	r0, r0, r3
20001614:	f000 f8a4 	bl	20001760 <HAL_SYSTICK_Config>
20001618:	4604      	mov	r4, r0
2000161a:	b958      	cbnz	r0, 20001634 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2000161c:	2d0f      	cmp	r5, #15
2000161e:	d809      	bhi.n	20001634 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20001620:	4602      	mov	r2, r0
20001622:	4629      	mov	r1, r5
20001624:	f04f 30ff 	mov.w	r0, #4294967295
20001628:	f000 f85a 	bl	200016e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
2000162c:	4b04      	ldr	r3, [pc, #16]	; (20001640 <HAL_InitTick+0x44>)
2000162e:	4620      	mov	r0, r4
20001630:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
20001632:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
20001634:	2001      	movs	r0, #1
20001636:	e7fc      	b.n	20001632 <HAL_InitTick+0x36>
20001638:	20002d54 	.word	0x20002d54
2000163c:	20002d50 	.word	0x20002d50
20001640:	20002d58 	.word	0x20002d58

20001644 <HAL_Init>:
{
20001644:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20001646:	4b09      	ldr	r3, [pc, #36]	; (2000166c <HAL_Init+0x28>)
20001648:	681a      	ldr	r2, [r3, #0]
2000164a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2000164e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20001650:	681a      	ldr	r2, [r3, #0]
20001652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20001656:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20001658:	2003      	movs	r0, #3
2000165a:	f000 f82f 	bl	200016bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
2000165e:	200f      	movs	r0, #15
20001660:	f7ff ffcc 	bl	200015fc <HAL_InitTick>
  HAL_MspInit();
20001664:	f7ff ffc8 	bl	200015f8 <HAL_MspInit>
}
20001668:	2000      	movs	r0, #0
2000166a:	bd08      	pop	{r3, pc}
2000166c:	40023c00 	.word	0x40023c00

20001670 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
20001670:	4a03      	ldr	r2, [pc, #12]	; (20001680 <HAL_IncTick+0x10>)
20001672:	4b04      	ldr	r3, [pc, #16]	; (20001684 <HAL_IncTick+0x14>)
20001674:	6811      	ldr	r1, [r2, #0]
20001676:	781b      	ldrb	r3, [r3, #0]
20001678:	440b      	add	r3, r1
2000167a:	6013      	str	r3, [r2, #0]
}
2000167c:	4770      	bx	lr
2000167e:	bf00      	nop
20001680:	20002d88 	.word	0x20002d88
20001684:	20002d54 	.word	0x20002d54

20001688 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
20001688:	4b01      	ldr	r3, [pc, #4]	; (20001690 <HAL_GetTick+0x8>)
2000168a:	6818      	ldr	r0, [r3, #0]
}
2000168c:	4770      	bx	lr
2000168e:	bf00      	nop
20001690:	20002d88 	.word	0x20002d88

20001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20001694:	b538      	push	{r3, r4, r5, lr}
20001696:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
20001698:	f7ff fff6 	bl	20001688 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
2000169c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
2000169e:	bf1c      	itt	ne
200016a0:	4b05      	ldrne	r3, [pc, #20]	; (200016b8 <HAL_Delay+0x24>)
200016a2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
200016a4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
200016a6:	bf18      	it	ne
200016a8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
200016aa:	f7ff ffed 	bl	20001688 <HAL_GetTick>
200016ae:	1b43      	subs	r3, r0, r5
200016b0:	42a3      	cmp	r3, r4
200016b2:	d3fa      	bcc.n	200016aa <HAL_Delay+0x16>
  {
  }
}
200016b4:	bd38      	pop	{r3, r4, r5, pc}
200016b6:	bf00      	nop
200016b8:	20002d54 	.word	0x20002d54

200016bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
200016bc:	4907      	ldr	r1, [pc, #28]	; (200016dc <HAL_NVIC_SetPriorityGrouping+0x20>)
200016be:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200016c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
200016c4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200016c6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
200016c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200016cc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
200016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
200016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
200016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
200016d8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
200016da:	4770      	bx	lr
200016dc:	e000ed00 	.word	0xe000ed00

200016e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200016e0:	4b16      	ldr	r3, [pc, #88]	; (2000173c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
200016e2:	b530      	push	{r4, r5, lr}
200016e4:	68dc      	ldr	r4, [r3, #12]
200016e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200016ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200016ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200016f0:	2b04      	cmp	r3, #4
200016f2:	bf28      	it	cs
200016f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200016f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200016f8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200016fc:	bf8c      	ite	hi
200016fe:	3c03      	subhi	r4, #3
20001700:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001702:	fa05 f303 	lsl.w	r3, r5, r3
20001706:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2000170a:	40a5      	lsls	r5, r4
2000170c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001710:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
20001712:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001714:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001718:	bfac      	ite	ge
2000171a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000171e:	4a08      	ldrlt	r2, [pc, #32]	; (20001740 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001720:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001724:	bfb8      	it	lt
20001726:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000172a:	b2db      	uxtb	r3, r3
2000172c:	bfaa      	itet	ge
2000172e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001732:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001734:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
20001738:	bd30      	pop	{r4, r5, pc}
2000173a:	bf00      	nop
2000173c:	e000ed00 	.word	0xe000ed00
20001740:	e000ed14 	.word	0xe000ed14

20001744 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
20001744:	2800      	cmp	r0, #0
20001746:	db07      	blt.n	20001758 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20001748:	4a04      	ldr	r2, [pc, #16]	; (2000175c <HAL_NVIC_EnableIRQ+0x18>)
2000174a:	0941      	lsrs	r1, r0, #5
2000174c:	2301      	movs	r3, #1
2000174e:	f000 001f 	and.w	r0, r0, #31
20001752:	4083      	lsls	r3, r0
20001754:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
20001758:	4770      	bx	lr
2000175a:	bf00      	nop
2000175c:	e000e100 	.word	0xe000e100

20001760 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20001760:	3801      	subs	r0, #1
20001762:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
20001766:	d20b      	bcs.n	20001780 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20001768:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000176c:	4a05      	ldr	r2, [pc, #20]	; (20001784 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000176e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001770:	21f0      	movs	r1, #240	; 0xf0
20001772:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20001776:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20001778:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000177a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2000177c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
2000177e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
20001780:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
20001782:	4770      	bx	lr
20001784:	e000ed00 	.word	0xe000ed00

20001788 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001788:	4909      	ldr	r1, [pc, #36]	; (200017b0 <FLASH_Program_DoubleWord+0x28>)
{
2000178a:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
2000178c:	690c      	ldr	r4, [r1, #16]
2000178e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
20001792:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
20001794:	690c      	ldr	r4, [r1, #16]
20001796:	f444 7440 	orr.w	r4, r4, #768	; 0x300
2000179a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
2000179c:	690c      	ldr	r4, [r1, #16]
2000179e:	f044 0401 	orr.w	r4, r4, #1
200017a2:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
200017a4:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
200017a6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
200017aa:	6043      	str	r3, [r0, #4]
}
200017ac:	bd10      	pop	{r4, pc}
200017ae:	bf00      	nop
200017b0:	40023c00 	.word	0x40023c00

200017b4 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
200017b4:	4b07      	ldr	r3, [pc, #28]	; (200017d4 <FLASH_Program_Word+0x20>)
200017b6:	691a      	ldr	r2, [r3, #16]
200017b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
200017bc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
200017be:	691a      	ldr	r2, [r3, #16]
200017c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
200017c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
200017c6:	691a      	ldr	r2, [r3, #16]
200017c8:	f042 0201 	orr.w	r2, r2, #1
200017cc:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
200017ce:	6001      	str	r1, [r0, #0]
}
200017d0:	4770      	bx	lr
200017d2:	bf00      	nop
200017d4:	40023c00 	.word	0x40023c00

200017d8 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
200017d8:	4b07      	ldr	r3, [pc, #28]	; (200017f8 <FLASH_Program_HalfWord+0x20>)
200017da:	691a      	ldr	r2, [r3, #16]
200017dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
200017e0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
200017e2:	691a      	ldr	r2, [r3, #16]
200017e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
200017e8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
200017ea:	691a      	ldr	r2, [r3, #16]
200017ec:	f042 0201 	orr.w	r2, r2, #1
200017f0:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
200017f2:	8001      	strh	r1, [r0, #0]
}
200017f4:	4770      	bx	lr
200017f6:	bf00      	nop
200017f8:	40023c00 	.word	0x40023c00

200017fc <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
200017fc:	4b20      	ldr	r3, [pc, #128]	; (20001880 <FLASH_SetErrorCode+0x84>)
200017fe:	68da      	ldr	r2, [r3, #12]
20001800:	06d0      	lsls	r0, r2, #27
20001802:	d506      	bpl.n	20001812 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
20001804:	491f      	ldr	r1, [pc, #124]	; (20001884 <FLASH_SetErrorCode+0x88>)
20001806:	69ca      	ldr	r2, [r1, #28]
20001808:	f042 0210 	orr.w	r2, r2, #16
2000180c:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
2000180e:	2210      	movs	r2, #16
20001810:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
20001812:	68da      	ldr	r2, [r3, #12]
20001814:	0691      	lsls	r1, r2, #26
20001816:	d506      	bpl.n	20001826 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
20001818:	491a      	ldr	r1, [pc, #104]	; (20001884 <FLASH_SetErrorCode+0x88>)
2000181a:	69ca      	ldr	r2, [r1, #28]
2000181c:	f042 0208 	orr.w	r2, r2, #8
20001820:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
20001822:	2220      	movs	r2, #32
20001824:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
20001826:	4b16      	ldr	r3, [pc, #88]	; (20001880 <FLASH_SetErrorCode+0x84>)
20001828:	68da      	ldr	r2, [r3, #12]
2000182a:	0652      	lsls	r2, r2, #25
2000182c:	d506      	bpl.n	2000183c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
2000182e:	4915      	ldr	r1, [pc, #84]	; (20001884 <FLASH_SetErrorCode+0x88>)
20001830:	69ca      	ldr	r2, [r1, #28]
20001832:	f042 0204 	orr.w	r2, r2, #4
20001836:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
20001838:	2240      	movs	r2, #64	; 0x40
2000183a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
2000183c:	68da      	ldr	r2, [r3, #12]
2000183e:	0610      	lsls	r0, r2, #24
20001840:	d506      	bpl.n	20001850 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
20001842:	4910      	ldr	r1, [pc, #64]	; (20001884 <FLASH_SetErrorCode+0x88>)
20001844:	69ca      	ldr	r2, [r1, #28]
20001846:	f042 0202 	orr.w	r2, r2, #2
2000184a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
2000184c:	2280      	movs	r2, #128	; 0x80
2000184e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
20001850:	4b0b      	ldr	r3, [pc, #44]	; (20001880 <FLASH_SetErrorCode+0x84>)
20001852:	68da      	ldr	r2, [r3, #12]
20001854:	05d1      	lsls	r1, r2, #23
20001856:	d507      	bpl.n	20001868 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
20001858:	490a      	ldr	r1, [pc, #40]	; (20001884 <FLASH_SetErrorCode+0x88>)
2000185a:	69ca      	ldr	r2, [r1, #28]
2000185c:	f042 0201 	orr.w	r2, r2, #1
20001860:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
20001862:	f44f 7280 	mov.w	r2, #256	; 0x100
20001866:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
20001868:	68da      	ldr	r2, [r3, #12]
2000186a:	0792      	lsls	r2, r2, #30
2000186c:	d506      	bpl.n	2000187c <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
2000186e:	4905      	ldr	r1, [pc, #20]	; (20001884 <FLASH_SetErrorCode+0x88>)
20001870:	69ca      	ldr	r2, [r1, #28]
20001872:	f042 0220 	orr.w	r2, r2, #32
20001876:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
20001878:	2202      	movs	r2, #2
2000187a:	60da      	str	r2, [r3, #12]
  }
}
2000187c:	4770      	bx	lr
2000187e:	bf00      	nop
20001880:	40023c00 	.word	0x40023c00
20001884:	20002d8c 	.word	0x20002d8c

20001888 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20001888:	4b06      	ldr	r3, [pc, #24]	; (200018a4 <HAL_FLASH_Unlock+0x1c>)
2000188a:	691a      	ldr	r2, [r3, #16]
2000188c:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
2000188e:	bfbf      	itttt	lt
20001890:	4a05      	ldrlt	r2, [pc, #20]	; (200018a8 <HAL_FLASH_Unlock+0x20>)
20001892:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
20001894:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
20001898:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
2000189a:	bfba      	itte	lt
2000189c:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
2000189e:	0fc0      	lsrlt	r0, r0, #31
200018a0:	2000      	movge	r0, #0
}
200018a2:	4770      	bx	lr
200018a4:	40023c00 	.word	0x40023c00
200018a8:	45670123 	.word	0x45670123

200018ac <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
200018ac:	4b11      	ldr	r3, [pc, #68]	; (200018f4 <FLASH_WaitForLastOperation+0x48>)
{ 
200018ae:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
200018b0:	2200      	movs	r2, #0
{ 
200018b2:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
200018b4:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
200018b6:	f7ff fee7 	bl	20001688 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
200018ba:	4d0f      	ldr	r5, [pc, #60]	; (200018f8 <FLASH_WaitForLastOperation+0x4c>)
  tickstart = HAL_GetTick();
200018bc:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
200018be:	68eb      	ldr	r3, [r5, #12]
200018c0:	03da      	lsls	r2, r3, #15
200018c2:	d40c      	bmi.n	200018de <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
200018c4:	68eb      	ldr	r3, [r5, #12]
200018c6:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
200018c8:	bf44      	itt	mi
200018ca:	2301      	movmi	r3, #1
200018cc:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
200018ce:	68e8      	ldr	r0, [r5, #12]
200018d0:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
200018d4:	d007      	beq.n	200018e6 <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
200018d6:	f7ff ff91 	bl	200017fc <FLASH_SetErrorCode>
    return HAL_ERROR;
200018da:	2001      	movs	r0, #1
200018dc:	e003      	b.n	200018e6 <FLASH_WaitForLastOperation+0x3a>
    if(Timeout != HAL_MAX_DELAY)
200018de:	1c61      	adds	r1, r4, #1
200018e0:	d0ed      	beq.n	200018be <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
200018e2:	b90c      	cbnz	r4, 200018e8 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
200018e4:	2003      	movs	r0, #3
}  
200018e6:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
200018e8:	f7ff fece 	bl	20001688 <HAL_GetTick>
200018ec:	1b80      	subs	r0, r0, r6
200018ee:	42a0      	cmp	r0, r4
200018f0:	d9e5      	bls.n	200018be <FLASH_WaitForLastOperation+0x12>
200018f2:	e7f7      	b.n	200018e4 <FLASH_WaitForLastOperation+0x38>
200018f4:	20002d8c 	.word	0x20002d8c
200018f8:	40023c00 	.word	0x40023c00

200018fc <HAL_FLASH_Program>:
{
200018fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
200018fe:	4e20      	ldr	r6, [pc, #128]	; (20001980 <HAL_FLASH_Program+0x84>)
{
20001900:	9301      	str	r3, [sp, #4]
20001902:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
20001904:	7e32      	ldrb	r2, [r6, #24]
20001906:	2a01      	cmp	r2, #1
{
20001908:	4607      	mov	r7, r0
2000190a:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
2000190c:	d035      	beq.n	2000197a <HAL_FLASH_Program+0x7e>
2000190e:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001910:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
20001914:	7632      	strb	r2, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001916:	f7ff ffc9 	bl	200018ac <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
2000191a:	b9b8      	cbnz	r0, 2000194c <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
2000191c:	9b01      	ldr	r3, [sp, #4]
2000191e:	b9cf      	cbnz	r7, 20001954 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001920:	4b18      	ldr	r3, [pc, #96]	; (20001984 <HAL_FLASH_Program+0x88>)
20001922:	691a      	ldr	r2, [r3, #16]
20001924:	f422 7240 	bic.w	r2, r2, #768	; 0x300
20001928:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
2000192a:	691a      	ldr	r2, [r3, #16]
2000192c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
2000192e:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
20001930:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
20001932:	f042 0201 	orr.w	r2, r2, #1
20001936:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
20001938:	702c      	strb	r4, [r5, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000193a:	f24c 3050 	movw	r0, #50000	; 0xc350
2000193e:	f7ff ffb5 	bl	200018ac <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
20001942:	4a10      	ldr	r2, [pc, #64]	; (20001984 <HAL_FLASH_Program+0x88>)
20001944:	6913      	ldr	r3, [r2, #16]
20001946:	f023 0301 	bic.w	r3, r3, #1
2000194a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
2000194c:	2300      	movs	r3, #0
2000194e:	7633      	strb	r3, [r6, #24]
}
20001950:	b003      	add	sp, #12
20001952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
20001954:	2f01      	cmp	r7, #1
20001956:	d104      	bne.n	20001962 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
20001958:	b2a1      	uxth	r1, r4
2000195a:	4628      	mov	r0, r5
2000195c:	f7ff ff3c 	bl	200017d8 <FLASH_Program_HalfWord>
20001960:	e7eb      	b.n	2000193a <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
20001962:	2f02      	cmp	r7, #2
20001964:	d104      	bne.n	20001970 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
20001966:	4621      	mov	r1, r4
20001968:	4628      	mov	r0, r5
2000196a:	f7ff ff23 	bl	200017b4 <FLASH_Program_Word>
2000196e:	e7e4      	b.n	2000193a <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
20001970:	4622      	mov	r2, r4
20001972:	4628      	mov	r0, r5
20001974:	f7ff ff08 	bl	20001788 <FLASH_Program_DoubleWord>
20001978:	e7df      	b.n	2000193a <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
2000197a:	2002      	movs	r0, #2
2000197c:	e7e8      	b.n	20001950 <HAL_FLASH_Program+0x54>
2000197e:	bf00      	nop
20001980:	20002d8c 	.word	0x20002d8c
20001984:	40023c00 	.word	0x40023c00

20001988 <FLASH_MassErase.constprop.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001988:	4b07      	ldr	r3, [pc, #28]	; (200019a8 <FLASH_MassErase.constprop.0+0x20>)
2000198a:	691a      	ldr	r2, [r3, #16]
2000198c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
20001990:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
20001992:	691a      	ldr	r2, [r3, #16]
20001994:	f042 0204 	orr.w	r2, r2, #4
20001998:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
2000199a:	691a      	ldr	r2, [r3, #16]
2000199c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
200019a0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
200019a4:	6118      	str	r0, [r3, #16]
}
200019a6:	4770      	bx	lr
200019a8:	40023c00 	.word	0x40023c00

200019ac <FLASH_Erase_Sector>:
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
200019ac:	4b0d      	ldr	r3, [pc, #52]	; (200019e4 <FLASH_Erase_Sector+0x38>)
200019ae:	691a      	ldr	r2, [r3, #16]
200019b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
200019b4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
200019b6:	691a      	ldr	r2, [r3, #16]
200019b8:	2902      	cmp	r1, #2
200019ba:	bf94      	ite	ls
200019bc:	0209      	lslls	r1, r1, #8
{
200019be:	f44f 7140 	movhi.w	r1, #768	; 0x300
  FLASH->CR |= tmp_psize;
200019c2:	430a      	orrs	r2, r1
200019c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
200019c6:	691a      	ldr	r2, [r3, #16]
200019c8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
200019cc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
200019ce:	691a      	ldr	r2, [r3, #16]
200019d0:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
200019d4:	f040 0002 	orr.w	r0, r0, #2
200019d8:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
200019da:	691a      	ldr	r2, [r3, #16]
200019dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
200019e0:	611a      	str	r2, [r3, #16]
}
200019e2:	4770      	bx	lr
200019e4:	40023c00 	.word	0x40023c00

200019e8 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
200019e8:	4b14      	ldr	r3, [pc, #80]	; (20001a3c <FLASH_FlushCaches+0x54>)
200019ea:	681a      	ldr	r2, [r3, #0]
200019ec:	0591      	lsls	r1, r2, #22
200019ee:	d50f      	bpl.n	20001a10 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
200019f0:	681a      	ldr	r2, [r3, #0]
200019f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
200019f6:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
200019f8:	681a      	ldr	r2, [r3, #0]
200019fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
200019fe:	601a      	str	r2, [r3, #0]
20001a00:	681a      	ldr	r2, [r3, #0]
20001a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20001a06:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20001a08:	681a      	ldr	r2, [r3, #0]
20001a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20001a0e:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
20001a10:	4b0a      	ldr	r3, [pc, #40]	; (20001a3c <FLASH_FlushCaches+0x54>)
20001a12:	681a      	ldr	r2, [r3, #0]
20001a14:	0552      	lsls	r2, r2, #21
20001a16:	d50f      	bpl.n	20001a38 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
20001a18:	681a      	ldr	r2, [r3, #0]
20001a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
20001a1e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
20001a20:	681a      	ldr	r2, [r3, #0]
20001a22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
20001a26:	601a      	str	r2, [r3, #0]
20001a28:	681a      	ldr	r2, [r3, #0]
20001a2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
20001a2e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
20001a30:	681a      	ldr	r2, [r3, #0]
20001a32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20001a36:	601a      	str	r2, [r3, #0]
  }
}
20001a38:	4770      	bx	lr
20001a3a:	bf00      	nop
20001a3c:	40023c00 	.word	0x40023c00

20001a40 <HAL_FLASHEx_Erase>:
{
20001a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
20001a44:	f8df 8094 	ldr.w	r8, [pc, #148]	; 20001adc <HAL_FLASHEx_Erase+0x9c>
20001a48:	f898 3018 	ldrb.w	r3, [r8, #24]
20001a4c:	2b01      	cmp	r3, #1
{
20001a4e:	4605      	mov	r5, r0
20001a50:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
20001a52:	d03f      	beq.n	20001ad4 <HAL_FLASHEx_Erase+0x94>
20001a54:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001a56:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
20001a5a:	f888 3018 	strb.w	r3, [r8, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001a5e:	f7ff ff25 	bl	200018ac <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
20001a62:	4604      	mov	r4, r0
20001a64:	b9a0      	cbnz	r0, 20001a90 <HAL_FLASHEx_Erase+0x50>
    *SectorError = 0xFFFFFFFFU;
20001a66:	f04f 33ff 	mov.w	r3, #4294967295
20001a6a:	603b      	str	r3, [r7, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
20001a6c:	682b      	ldr	r3, [r5, #0]
20001a6e:	2b01      	cmp	r3, #1
20001a70:	d114      	bne.n	20001a9c <HAL_FLASHEx_Erase+0x5c>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
20001a72:	7c28      	ldrb	r0, [r5, #16]
20001a74:	f7ff ff88 	bl	20001988 <FLASH_MassErase.constprop.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001a78:	f24c 3050 	movw	r0, #50000	; 0xc350
20001a7c:	f7ff ff16 	bl	200018ac <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
20001a80:	4a15      	ldr	r2, [pc, #84]	; (20001ad8 <HAL_FLASHEx_Erase+0x98>)
20001a82:	6913      	ldr	r3, [r2, #16]
20001a84:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001a88:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
20001a8a:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();
20001a8c:	f7ff ffac 	bl	200019e8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
20001a90:	2300      	movs	r3, #0
20001a92:	f888 3018 	strb.w	r3, [r8, #24]
}
20001a96:	4620      	mov	r0, r4
20001a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20001a9c:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
20001a9e:	f8df 9038 	ldr.w	r9, [pc, #56]	; 20001ad8 <HAL_FLASHEx_Erase+0x98>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20001aa2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
20001aa6:	4413      	add	r3, r2
20001aa8:	42b3      	cmp	r3, r6
20001aaa:	d9ef      	bls.n	20001a8c <HAL_FLASHEx_Erase+0x4c>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
20001aac:	7c29      	ldrb	r1, [r5, #16]
20001aae:	4630      	mov	r0, r6
20001ab0:	f7ff ff7c 	bl	200019ac <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001ab4:	f24c 3050 	movw	r0, #50000	; 0xc350
20001ab8:	f7ff fef8 	bl	200018ac <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
20001abc:	f8d9 3010 	ldr.w	r3, [r9, #16]
20001ac0:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
20001ac4:	f8c9 3010 	str.w	r3, [r9, #16]
        if (status != HAL_OK)
20001ac8:	b110      	cbz	r0, 20001ad0 <HAL_FLASHEx_Erase+0x90>
          *SectorError = index;
20001aca:	603e      	str	r6, [r7, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001acc:	4604      	mov	r4, r0
          break;
20001ace:	e7dd      	b.n	20001a8c <HAL_FLASHEx_Erase+0x4c>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20001ad0:	3601      	adds	r6, #1
20001ad2:	e7e6      	b.n	20001aa2 <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
20001ad4:	2402      	movs	r4, #2
20001ad6:	e7de      	b.n	20001a96 <HAL_FLASHEx_Erase+0x56>
20001ad8:	40023c00 	.word	0x40023c00
20001adc:	20002d8c 	.word	0x20002d8c

20001ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20001ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20001ae4:	f8df 919c 	ldr.w	r9, [pc, #412]	; 20001c84 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20001ae8:	4a64      	ldr	r2, [pc, #400]	; (20001c7c <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
20001aea:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
20001aec:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
20001aee:	2401      	movs	r4, #1
20001af0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
20001af2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
20001af6:	43ac      	bics	r4, r5
20001af8:	f040 80ad 	bne.w	20001c56 <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001afc:	684d      	ldr	r5, [r1, #4]
20001afe:	f005 0403 	and.w	r4, r5, #3
20001b02:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20001b06:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001b08:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20001b0a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001b0e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20001b10:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001b14:	d834      	bhi.n	20001b80 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
20001b16:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20001b18:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
20001b1c:	68cf      	ldr	r7, [r1, #12]
20001b1e:	fa07 f708 	lsl.w	r7, r7, r8
20001b22:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
20001b26:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
20001b28:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
20001b2a:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
20001b2e:	f3c5 1700 	ubfx	r7, r5, #4, #1
20001b32:	409f      	lsls	r7, r3
20001b34:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
20001b38:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
20001b3a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
20001b3c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
20001b40:	688f      	ldr	r7, [r1, #8]
20001b42:	fa07 f708 	lsl.w	r7, r7, r8
20001b46:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20001b4a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
20001b4c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20001b4e:	d119      	bne.n	20001b84 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
20001b50:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
20001b54:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20001b58:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
20001b5c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20001b60:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
20001b64:	f04f 0e0f 	mov.w	lr, #15
20001b68:	fa0e fe0b 	lsl.w	lr, lr, fp
20001b6c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
20001b70:	690f      	ldr	r7, [r1, #16]
20001b72:	fa07 f70b 	lsl.w	r7, r7, fp
20001b76:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
20001b7a:	f8ca 7020 	str.w	r7, [sl, #32]
20001b7e:	e001      	b.n	20001b84 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20001b80:	2c03      	cmp	r4, #3
20001b82:	d1da      	bne.n	20001b3a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
20001b84:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
20001b86:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
20001b8a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
20001b8c:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
20001b8e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
20001b92:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
20001b94:	d05f      	beq.n	20001c56 <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20001b96:	f04f 0a00 	mov.w	sl, #0
20001b9a:	f8cd a004 	str.w	sl, [sp, #4]
20001b9e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20001ba2:	4c37      	ldr	r4, [pc, #220]	; (20001c80 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20001ba4:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
20001ba8:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
20001bac:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
20001bb0:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
20001bb4:	9601      	str	r6, [sp, #4]
20001bb6:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
20001bb8:	f023 0603 	bic.w	r6, r3, #3
20001bbc:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
20001bc0:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20001bc4:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
20001bc8:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20001bcc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
20001bd0:	270f      	movs	r7, #15
20001bd2:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20001bd6:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20001bd8:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20001bdc:	d042      	beq.n	20001c64 <HAL_GPIO_Init+0x184>
20001bde:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001be2:	42a0      	cmp	r0, r4
20001be4:	d040      	beq.n	20001c68 <HAL_GPIO_Init+0x188>
20001be6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001bea:	42a0      	cmp	r0, r4
20001bec:	d03e      	beq.n	20001c6c <HAL_GPIO_Init+0x18c>
20001bee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001bf2:	42a0      	cmp	r0, r4
20001bf4:	d03c      	beq.n	20001c70 <HAL_GPIO_Init+0x190>
20001bf6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001bfa:	42a0      	cmp	r0, r4
20001bfc:	d03a      	beq.n	20001c74 <HAL_GPIO_Init+0x194>
20001bfe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001c02:	42a0      	cmp	r0, r4
20001c04:	d038      	beq.n	20001c78 <HAL_GPIO_Init+0x198>
20001c06:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20001c0a:	42a0      	cmp	r0, r4
20001c0c:	bf0c      	ite	eq
20001c0e:	2406      	moveq	r4, #6
20001c10:	2407      	movne	r4, #7
20001c12:	fa04 f40e 	lsl.w	r4, r4, lr
20001c16:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
20001c18:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
20001c1a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
20001c1c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
20001c20:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
20001c22:	bf54      	ite	pl
20001c24:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
20001c26:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
20001c2a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
20001c2c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
20001c2e:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
20001c30:	bf54      	ite	pl
20001c32:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
20001c34:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
20001c38:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
20001c3a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
20001c3c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
20001c3e:	bf54      	ite	pl
20001c40:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
20001c42:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
20001c46:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20001c48:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
20001c4a:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
20001c4c:	bf54      	ite	pl
20001c4e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
20001c50:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
20001c54:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
20001c56:	3301      	adds	r3, #1
20001c58:	2b10      	cmp	r3, #16
20001c5a:	f47f af47 	bne.w	20001aec <HAL_GPIO_Init+0xc>
      }
    }
  }
}
20001c5e:	b003      	add	sp, #12
20001c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20001c64:	4654      	mov	r4, sl
20001c66:	e7d4      	b.n	20001c12 <HAL_GPIO_Init+0x132>
20001c68:	2401      	movs	r4, #1
20001c6a:	e7d2      	b.n	20001c12 <HAL_GPIO_Init+0x132>
20001c6c:	2402      	movs	r4, #2
20001c6e:	e7d0      	b.n	20001c12 <HAL_GPIO_Init+0x132>
20001c70:	2403      	movs	r4, #3
20001c72:	e7ce      	b.n	20001c12 <HAL_GPIO_Init+0x132>
20001c74:	2404      	movs	r4, #4
20001c76:	e7cc      	b.n	20001c12 <HAL_GPIO_Init+0x132>
20001c78:	2405      	movs	r4, #5
20001c7a:	e7ca      	b.n	20001c12 <HAL_GPIO_Init+0x132>
20001c7c:	40013c00 	.word	0x40013c00
20001c80:	40020000 	.word	0x40020000
20001c84:	40023800 	.word	0x40023800

20001c88 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20001c88:	b10a      	cbz	r2, 20001c8e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
20001c8a:	6181      	str	r1, [r0, #24]
  }
}
20001c8c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
20001c8e:	0409      	lsls	r1, r1, #16
20001c90:	e7fb      	b.n	20001c8a <HAL_GPIO_WritePin+0x2>
	...

20001c94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
20001c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
20001c96:	2300      	movs	r3, #0
20001c98:	9301      	str	r3, [sp, #4]
20001c9a:	4b18      	ldr	r3, [pc, #96]	; (20001cfc <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20001c9c:	4d18      	ldr	r5, [pc, #96]	; (20001d00 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
20001c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20001ca0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
20001ca4:	641a      	str	r2, [r3, #64]	; 0x40
20001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20001cac:	9301      	str	r3, [sp, #4]
20001cae:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
20001cb0:	4b14      	ldr	r3, [pc, #80]	; (20001d04 <HAL_PWREx_EnableOverDrive+0x70>)
20001cb2:	2201      	movs	r2, #1
20001cb4:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
20001cb6:	f7ff fce7 	bl	20001688 <HAL_GetTick>
20001cba:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20001cbc:	686b      	ldr	r3, [r5, #4]
20001cbe:	03da      	lsls	r2, r3, #15
20001cc0:	d50b      	bpl.n	20001cda <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20001cc2:	4b10      	ldr	r3, [pc, #64]	; (20001d04 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20001cc4:	4d0e      	ldr	r5, [pc, #56]	; (20001d00 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
20001cc6:	2201      	movs	r2, #1
20001cc8:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
20001cca:	f7ff fcdd 	bl	20001688 <HAL_GetTick>
20001cce:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20001cd0:	686b      	ldr	r3, [r5, #4]
20001cd2:	039b      	lsls	r3, r3, #14
20001cd4:	d50a      	bpl.n	20001cec <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
20001cd6:	2000      	movs	r0, #0
20001cd8:	e006      	b.n	20001ce8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20001cda:	f7ff fcd5 	bl	20001688 <HAL_GetTick>
20001cde:	1b00      	subs	r0, r0, r4
20001ce0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
20001ce4:	d9ea      	bls.n	20001cbc <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
20001ce6:	2003      	movs	r0, #3
}
20001ce8:	b003      	add	sp, #12
20001cea:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20001cec:	f7ff fccc 	bl	20001688 <HAL_GetTick>
20001cf0:	1b00      	subs	r0, r0, r4
20001cf2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
20001cf6:	d9eb      	bls.n	20001cd0 <HAL_PWREx_EnableOverDrive+0x3c>
20001cf8:	e7f5      	b.n	20001ce6 <HAL_PWREx_EnableOverDrive+0x52>
20001cfa:	bf00      	nop
20001cfc:	40023800 	.word	0x40023800
20001d00:	40007000 	.word	0x40007000
20001d04:	420e0000 	.word	0x420e0000

20001d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20001d08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
20001d0c:	4604      	mov	r4, r0
20001d0e:	b340      	cbz	r0, 20001d62 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20001d10:	6803      	ldr	r3, [r0, #0]
20001d12:	07dd      	lsls	r5, r3, #31
20001d14:	d410      	bmi.n	20001d38 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20001d16:	6823      	ldr	r3, [r4, #0]
20001d18:	0798      	lsls	r0, r3, #30
20001d1a:	d45b      	bmi.n	20001dd4 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20001d1c:	6823      	ldr	r3, [r4, #0]
20001d1e:	071a      	lsls	r2, r3, #28
20001d20:	f100 809d 	bmi.w	20001e5e <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20001d24:	6823      	ldr	r3, [r4, #0]
20001d26:	075b      	lsls	r3, r3, #29
20001d28:	f100 80bd 	bmi.w	20001ea6 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20001d2c:	69a0      	ldr	r0, [r4, #24]
20001d2e:	2800      	cmp	r0, #0
20001d30:	f040 8124 	bne.w	20001f7c <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
20001d34:	2000      	movs	r0, #0
20001d36:	e02c      	b.n	20001d92 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20001d38:	4b8d      	ldr	r3, [pc, #564]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
20001d3a:	689a      	ldr	r2, [r3, #8]
20001d3c:	f002 020c 	and.w	r2, r2, #12
20001d40:	2a04      	cmp	r2, #4
20001d42:	d007      	beq.n	20001d54 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20001d44:	689a      	ldr	r2, [r3, #8]
20001d46:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20001d4a:	2a08      	cmp	r2, #8
20001d4c:	d10b      	bne.n	20001d66 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20001d4e:	685b      	ldr	r3, [r3, #4]
20001d50:	0259      	lsls	r1, r3, #9
20001d52:	d508      	bpl.n	20001d66 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20001d54:	4b86      	ldr	r3, [pc, #536]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
20001d56:	681b      	ldr	r3, [r3, #0]
20001d58:	039a      	lsls	r2, r3, #14
20001d5a:	d5dc      	bpl.n	20001d16 <HAL_RCC_OscConfig+0xe>
20001d5c:	6863      	ldr	r3, [r4, #4]
20001d5e:	2b00      	cmp	r3, #0
20001d60:	d1d9      	bne.n	20001d16 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
20001d62:	2001      	movs	r0, #1
20001d64:	e015      	b.n	20001d92 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20001d66:	6863      	ldr	r3, [r4, #4]
20001d68:	4d81      	ldr	r5, [pc, #516]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
20001d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20001d6e:	d113      	bne.n	20001d98 <HAL_RCC_OscConfig+0x90>
20001d70:	682b      	ldr	r3, [r5, #0]
20001d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20001d76:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
20001d78:	f7ff fc86 	bl	20001688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20001d7c:	4e7c      	ldr	r6, [pc, #496]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
20001d7e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20001d80:	6833      	ldr	r3, [r6, #0]
20001d82:	039b      	lsls	r3, r3, #14
20001d84:	d4c7      	bmi.n	20001d16 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20001d86:	f7ff fc7f 	bl	20001688 <HAL_GetTick>
20001d8a:	1b40      	subs	r0, r0, r5
20001d8c:	2864      	cmp	r0, #100	; 0x64
20001d8e:	d9f7      	bls.n	20001d80 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
20001d90:	2003      	movs	r0, #3
}
20001d92:	b002      	add	sp, #8
20001d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20001d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20001d9c:	d104      	bne.n	20001da8 <HAL_RCC_OscConfig+0xa0>
20001d9e:	682b      	ldr	r3, [r5, #0]
20001da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20001da4:	602b      	str	r3, [r5, #0]
20001da6:	e7e3      	b.n	20001d70 <HAL_RCC_OscConfig+0x68>
20001da8:	682a      	ldr	r2, [r5, #0]
20001daa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
20001dae:	602a      	str	r2, [r5, #0]
20001db0:	682a      	ldr	r2, [r5, #0]
20001db2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
20001db6:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
20001db8:	2b00      	cmp	r3, #0
20001dba:	d1dd      	bne.n	20001d78 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
20001dbc:	f7ff fc64 	bl	20001688 <HAL_GetTick>
20001dc0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20001dc2:	682b      	ldr	r3, [r5, #0]
20001dc4:	039f      	lsls	r7, r3, #14
20001dc6:	d5a6      	bpl.n	20001d16 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20001dc8:	f7ff fc5e 	bl	20001688 <HAL_GetTick>
20001dcc:	1b80      	subs	r0, r0, r6
20001dce:	2864      	cmp	r0, #100	; 0x64
20001dd0:	d9f7      	bls.n	20001dc2 <HAL_RCC_OscConfig+0xba>
20001dd2:	e7dd      	b.n	20001d90 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20001dd4:	4b66      	ldr	r3, [pc, #408]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
20001dd6:	689a      	ldr	r2, [r3, #8]
20001dd8:	f012 0f0c 	tst.w	r2, #12
20001ddc:	d007      	beq.n	20001dee <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20001dde:	689a      	ldr	r2, [r3, #8]
20001de0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20001de4:	2a08      	cmp	r2, #8
20001de6:	d111      	bne.n	20001e0c <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20001de8:	685b      	ldr	r3, [r3, #4]
20001dea:	025e      	lsls	r6, r3, #9
20001dec:	d40e      	bmi.n	20001e0c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20001dee:	4a60      	ldr	r2, [pc, #384]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
20001df0:	6813      	ldr	r3, [r2, #0]
20001df2:	079d      	lsls	r5, r3, #30
20001df4:	d502      	bpl.n	20001dfc <HAL_RCC_OscConfig+0xf4>
20001df6:	68e3      	ldr	r3, [r4, #12]
20001df8:	2b01      	cmp	r3, #1
20001dfa:	d1b2      	bne.n	20001d62 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20001dfc:	6813      	ldr	r3, [r2, #0]
20001dfe:	6921      	ldr	r1, [r4, #16]
20001e00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
20001e04:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
20001e08:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20001e0a:	e787      	b.n	20001d1c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
20001e0c:	68e2      	ldr	r2, [r4, #12]
20001e0e:	4b59      	ldr	r3, [pc, #356]	; (20001f74 <HAL_RCC_OscConfig+0x26c>)
20001e10:	b1b2      	cbz	r2, 20001e40 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
20001e12:	2201      	movs	r2, #1
20001e14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
20001e16:	f7ff fc37 	bl	20001688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20001e1a:	4d55      	ldr	r5, [pc, #340]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
20001e1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20001e1e:	682b      	ldr	r3, [r5, #0]
20001e20:	0798      	lsls	r0, r3, #30
20001e22:	d507      	bpl.n	20001e34 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20001e24:	682b      	ldr	r3, [r5, #0]
20001e26:	6922      	ldr	r2, [r4, #16]
20001e28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
20001e2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
20001e30:	602b      	str	r3, [r5, #0]
20001e32:	e773      	b.n	20001d1c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20001e34:	f7ff fc28 	bl	20001688 <HAL_GetTick>
20001e38:	1b80      	subs	r0, r0, r6
20001e3a:	2802      	cmp	r0, #2
20001e3c:	d9ef      	bls.n	20001e1e <HAL_RCC_OscConfig+0x116>
20001e3e:	e7a7      	b.n	20001d90 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
20001e40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
20001e42:	f7ff fc21 	bl	20001688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20001e46:	4e4a      	ldr	r6, [pc, #296]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
20001e48:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20001e4a:	6833      	ldr	r3, [r6, #0]
20001e4c:	0799      	lsls	r1, r3, #30
20001e4e:	f57f af65 	bpl.w	20001d1c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20001e52:	f7ff fc19 	bl	20001688 <HAL_GetTick>
20001e56:	1b40      	subs	r0, r0, r5
20001e58:	2802      	cmp	r0, #2
20001e5a:	d9f6      	bls.n	20001e4a <HAL_RCC_OscConfig+0x142>
20001e5c:	e798      	b.n	20001d90 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
20001e5e:	6962      	ldr	r2, [r4, #20]
20001e60:	4b44      	ldr	r3, [pc, #272]	; (20001f74 <HAL_RCC_OscConfig+0x26c>)
20001e62:	b182      	cbz	r2, 20001e86 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
20001e64:	2201      	movs	r2, #1
20001e66:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
20001e6a:	f7ff fc0d 	bl	20001688 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20001e6e:	4e40      	ldr	r6, [pc, #256]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
20001e70:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20001e72:	6f73      	ldr	r3, [r6, #116]	; 0x74
20001e74:	079f      	lsls	r7, r3, #30
20001e76:	f53f af55 	bmi.w	20001d24 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20001e7a:	f7ff fc05 	bl	20001688 <HAL_GetTick>
20001e7e:	1b40      	subs	r0, r0, r5
20001e80:	2802      	cmp	r0, #2
20001e82:	d9f6      	bls.n	20001e72 <HAL_RCC_OscConfig+0x16a>
20001e84:	e784      	b.n	20001d90 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
20001e86:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
20001e8a:	f7ff fbfd 	bl	20001688 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20001e8e:	4e38      	ldr	r6, [pc, #224]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
20001e90:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20001e92:	6f73      	ldr	r3, [r6, #116]	; 0x74
20001e94:	0798      	lsls	r0, r3, #30
20001e96:	f57f af45 	bpl.w	20001d24 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20001e9a:	f7ff fbf5 	bl	20001688 <HAL_GetTick>
20001e9e:	1b40      	subs	r0, r0, r5
20001ea0:	2802      	cmp	r0, #2
20001ea2:	d9f6      	bls.n	20001e92 <HAL_RCC_OscConfig+0x18a>
20001ea4:	e774      	b.n	20001d90 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
20001ea6:	4b32      	ldr	r3, [pc, #200]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
20001ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20001eaa:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
20001eae:	d128      	bne.n	20001f02 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
20001eb0:	9201      	str	r2, [sp, #4]
20001eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20001eb4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
20001eb8:	641a      	str	r2, [r3, #64]	; 0x40
20001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20001ec0:	9301      	str	r3, [sp, #4]
20001ec2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
20001ec4:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20001ec6:	4d2c      	ldr	r5, [pc, #176]	; (20001f78 <HAL_RCC_OscConfig+0x270>)
20001ec8:	682b      	ldr	r3, [r5, #0]
20001eca:	05d9      	lsls	r1, r3, #23
20001ecc:	d51b      	bpl.n	20001f06 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20001ece:	68a3      	ldr	r3, [r4, #8]
20001ed0:	4d27      	ldr	r5, [pc, #156]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
20001ed2:	2b01      	cmp	r3, #1
20001ed4:	d127      	bne.n	20001f26 <HAL_RCC_OscConfig+0x21e>
20001ed6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
20001ed8:	f043 0301 	orr.w	r3, r3, #1
20001edc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
20001ede:	f7ff fbd3 	bl	20001688 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20001ee2:	4e23      	ldr	r6, [pc, #140]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
20001ee4:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001ee6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20001eea:	6f33      	ldr	r3, [r6, #112]	; 0x70
20001eec:	079b      	lsls	r3, r3, #30
20001eee:	d539      	bpl.n	20001f64 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
20001ef0:	2f00      	cmp	r7, #0
20001ef2:	f43f af1b 	beq.w	20001d2c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
20001ef6:	4a1e      	ldr	r2, [pc, #120]	; (20001f70 <HAL_RCC_OscConfig+0x268>)
20001ef8:	6c13      	ldr	r3, [r2, #64]	; 0x40
20001efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20001efe:	6413      	str	r3, [r2, #64]	; 0x40
20001f00:	e714      	b.n	20001d2c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
20001f02:	2700      	movs	r7, #0
20001f04:	e7df      	b.n	20001ec6 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
20001f06:	682b      	ldr	r3, [r5, #0]
20001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001f0c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
20001f0e:	f7ff fbbb 	bl	20001688 <HAL_GetTick>
20001f12:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20001f14:	682b      	ldr	r3, [r5, #0]
20001f16:	05da      	lsls	r2, r3, #23
20001f18:	d4d9      	bmi.n	20001ece <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20001f1a:	f7ff fbb5 	bl	20001688 <HAL_GetTick>
20001f1e:	1b80      	subs	r0, r0, r6
20001f20:	2802      	cmp	r0, #2
20001f22:	d9f7      	bls.n	20001f14 <HAL_RCC_OscConfig+0x20c>
20001f24:	e734      	b.n	20001d90 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20001f26:	2b05      	cmp	r3, #5
20001f28:	d104      	bne.n	20001f34 <HAL_RCC_OscConfig+0x22c>
20001f2a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
20001f2c:	f043 0304 	orr.w	r3, r3, #4
20001f30:	672b      	str	r3, [r5, #112]	; 0x70
20001f32:	e7d0      	b.n	20001ed6 <HAL_RCC_OscConfig+0x1ce>
20001f34:	6f2a      	ldr	r2, [r5, #112]	; 0x70
20001f36:	f022 0201 	bic.w	r2, r2, #1
20001f3a:	672a      	str	r2, [r5, #112]	; 0x70
20001f3c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
20001f3e:	f022 0204 	bic.w	r2, r2, #4
20001f42:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20001f44:	2b00      	cmp	r3, #0
20001f46:	d1ca      	bne.n	20001ede <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
20001f48:	f7ff fb9e 	bl	20001688 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001f4c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
20001f50:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20001f52:	6f2b      	ldr	r3, [r5, #112]	; 0x70
20001f54:	0798      	lsls	r0, r3, #30
20001f56:	d5cb      	bpl.n	20001ef0 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001f58:	f7ff fb96 	bl	20001688 <HAL_GetTick>
20001f5c:	1b80      	subs	r0, r0, r6
20001f5e:	4540      	cmp	r0, r8
20001f60:	d9f7      	bls.n	20001f52 <HAL_RCC_OscConfig+0x24a>
20001f62:	e715      	b.n	20001d90 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20001f64:	f7ff fb90 	bl	20001688 <HAL_GetTick>
20001f68:	1b40      	subs	r0, r0, r5
20001f6a:	4540      	cmp	r0, r8
20001f6c:	d9bd      	bls.n	20001eea <HAL_RCC_OscConfig+0x1e2>
20001f6e:	e70f      	b.n	20001d90 <HAL_RCC_OscConfig+0x88>
20001f70:	40023800 	.word	0x40023800
20001f74:	42470000 	.word	0x42470000
20001f78:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20001f7c:	4d39      	ldr	r5, [pc, #228]	; (20002064 <HAL_RCC_OscConfig+0x35c>)
20001f7e:	68ab      	ldr	r3, [r5, #8]
20001f80:	f003 030c 	and.w	r3, r3, #12
20001f84:	2b08      	cmp	r3, #8
20001f86:	d03d      	beq.n	20002004 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20001f88:	4b37      	ldr	r3, [pc, #220]	; (20002068 <HAL_RCC_OscConfig+0x360>)
20001f8a:	2200      	movs	r2, #0
20001f8c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
20001f8e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20001f90:	d12b      	bne.n	20001fea <HAL_RCC_OscConfig+0x2e2>
        tickstart = HAL_GetTick();
20001f92:	f7ff fb79 	bl	20001688 <HAL_GetTick>
20001f96:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20001f98:	682b      	ldr	r3, [r5, #0]
20001f9a:	0199      	lsls	r1, r3, #6
20001f9c:	d41f      	bmi.n	20001fde <HAL_RCC_OscConfig+0x2d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
20001f9e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
20001fa2:	4313      	orrs	r3, r2
20001fa4:	6a62      	ldr	r2, [r4, #36]	; 0x24
20001fa6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
20001faa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
20001fac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
20001fb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
20001fb2:	0852      	lsrs	r2, r2, #1
20001fb4:	3a01      	subs	r2, #1
20001fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
20001fba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
20001fbc:	4b2a      	ldr	r3, [pc, #168]	; (20002068 <HAL_RCC_OscConfig+0x360>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20001fbe:	4d29      	ldr	r5, [pc, #164]	; (20002064 <HAL_RCC_OscConfig+0x35c>)
        __HAL_RCC_PLL_ENABLE();
20001fc0:	2201      	movs	r2, #1
20001fc2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
20001fc4:	f7ff fb60 	bl	20001688 <HAL_GetTick>
20001fc8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20001fca:	682b      	ldr	r3, [r5, #0]
20001fcc:	019a      	lsls	r2, r3, #6
20001fce:	f53f aeb1 	bmi.w	20001d34 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20001fd2:	f7ff fb59 	bl	20001688 <HAL_GetTick>
20001fd6:	1b00      	subs	r0, r0, r4
20001fd8:	2802      	cmp	r0, #2
20001fda:	d9f6      	bls.n	20001fca <HAL_RCC_OscConfig+0x2c2>
20001fdc:	e6d8      	b.n	20001d90 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20001fde:	f7ff fb53 	bl	20001688 <HAL_GetTick>
20001fe2:	1b80      	subs	r0, r0, r6
20001fe4:	2802      	cmp	r0, #2
20001fe6:	d9d7      	bls.n	20001f98 <HAL_RCC_OscConfig+0x290>
20001fe8:	e6d2      	b.n	20001d90 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
20001fea:	f7ff fb4d 	bl	20001688 <HAL_GetTick>
20001fee:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20001ff0:	682b      	ldr	r3, [r5, #0]
20001ff2:	019b      	lsls	r3, r3, #6
20001ff4:	f57f ae9e 	bpl.w	20001d34 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20001ff8:	f7ff fb46 	bl	20001688 <HAL_GetTick>
20001ffc:	1b00      	subs	r0, r0, r4
20001ffe:	2802      	cmp	r0, #2
20002000:	d9f6      	bls.n	20001ff0 <HAL_RCC_OscConfig+0x2e8>
20002002:	e6c5      	b.n	20001d90 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
20002004:	2801      	cmp	r0, #1
20002006:	f43f aec4 	beq.w	20001d92 <HAL_RCC_OscConfig+0x8a>
        pll_config = RCC->PLLCFGR;
2000200a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2000200c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000200e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20002012:	4291      	cmp	r1, r2
20002014:	f47f aea5 	bne.w	20001d62 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20002018:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
2000201a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000201e:	428a      	cmp	r2, r1
20002020:	f47f ae9f 	bne.w	20001d62 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20002024:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20002026:	f647 72c0 	movw	r2, #32704	; 0x7fc0
2000202a:	401a      	ands	r2, r3
2000202c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
20002030:	f47f ae97 	bne.w	20001d62 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20002034:	6aa2      	ldr	r2, [r4, #40]	; 0x28
20002036:	0852      	lsrs	r2, r2, #1
20002038:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
2000203c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
2000203e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
20002042:	f47f ae8e 	bne.w	20001d62 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20002046:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
20002048:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
2000204c:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
20002050:	f47f ae87 	bne.w	20001d62 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
20002054:	6b22      	ldr	r2, [r4, #48]	; 0x30
20002056:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
2000205a:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
2000205e:	f43f ae69 	beq.w	20001d34 <HAL_RCC_OscConfig+0x2c>
20002062:	e67e      	b.n	20001d62 <HAL_RCC_OscConfig+0x5a>
20002064:	40023800 	.word	0x40023800
20002068:	42470000 	.word	0x42470000

2000206c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
2000206c:	4913      	ldr	r1, [pc, #76]	; (200020bc <HAL_RCC_GetSysClockFreq+0x50>)
{
2000206e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
20002070:	688b      	ldr	r3, [r1, #8]
20002072:	f003 030c 	and.w	r3, r3, #12
20002076:	2b04      	cmp	r3, #4
20002078:	d01c      	beq.n	200020b4 <HAL_RCC_GetSysClockFreq+0x48>
2000207a:	2b08      	cmp	r3, #8
2000207c:	d11c      	bne.n	200020b8 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000207e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20002080:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20002082:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20002084:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20002088:	bf14      	ite	ne
2000208a:	480d      	ldrne	r0, [pc, #52]	; (200020c0 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000208c:	480d      	ldreq	r0, [pc, #52]	; (200020c4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000208e:	f3c1 1188 	ubfx	r1, r1, #6, #9
20002092:	bf18      	it	ne
20002094:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20002096:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000209a:	fba1 0100 	umull	r0, r1, r1, r0
2000209e:	f7ff f8b1 	bl	20001204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
200020a2:	4b06      	ldr	r3, [pc, #24]	; (200020bc <HAL_RCC_GetSysClockFreq+0x50>)
200020a4:	685b      	ldr	r3, [r3, #4]
200020a6:	f3c3 4301 	ubfx	r3, r3, #16, #2
200020aa:	3301      	adds	r3, #1
200020ac:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
200020ae:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
200020b2:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
200020b4:	4802      	ldr	r0, [pc, #8]	; (200020c0 <HAL_RCC_GetSysClockFreq+0x54>)
200020b6:	e7fc      	b.n	200020b2 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
200020b8:	4802      	ldr	r0, [pc, #8]	; (200020c4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
200020ba:	e7fa      	b.n	200020b2 <HAL_RCC_GetSysClockFreq+0x46>
200020bc:	40023800 	.word	0x40023800
200020c0:	007a1200 	.word	0x007a1200
200020c4:	00f42400 	.word	0x00f42400

200020c8 <HAL_RCC_ClockConfig>:
{
200020c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
200020cc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
200020ce:	4604      	mov	r4, r0
200020d0:	b910      	cbnz	r0, 200020d8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
200020d2:	2001      	movs	r0, #1
}
200020d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
200020d8:	4b43      	ldr	r3, [pc, #268]	; (200021e8 <HAL_RCC_ClockConfig+0x120>)
200020da:	681a      	ldr	r2, [r3, #0]
200020dc:	f002 020f 	and.w	r2, r2, #15
200020e0:	428a      	cmp	r2, r1
200020e2:	d328      	bcc.n	20002136 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
200020e4:	6821      	ldr	r1, [r4, #0]
200020e6:	078f      	lsls	r7, r1, #30
200020e8:	d42d      	bmi.n	20002146 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
200020ea:	07c8      	lsls	r0, r1, #31
200020ec:	d440      	bmi.n	20002170 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
200020ee:	4b3e      	ldr	r3, [pc, #248]	; (200021e8 <HAL_RCC_ClockConfig+0x120>)
200020f0:	681a      	ldr	r2, [r3, #0]
200020f2:	f002 020f 	and.w	r2, r2, #15
200020f6:	42aa      	cmp	r2, r5
200020f8:	d865      	bhi.n	200021c6 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
200020fa:	6822      	ldr	r2, [r4, #0]
200020fc:	0751      	lsls	r1, r2, #29
200020fe:	d46b      	bmi.n	200021d8 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20002100:	0713      	lsls	r3, r2, #28
20002102:	d507      	bpl.n	20002114 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
20002104:	4a39      	ldr	r2, [pc, #228]	; (200021ec <HAL_RCC_ClockConfig+0x124>)
20002106:	6921      	ldr	r1, [r4, #16]
20002108:	6893      	ldr	r3, [r2, #8]
2000210a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
2000210e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
20002112:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
20002114:	f7ff ffaa 	bl	2000206c <HAL_RCC_GetSysClockFreq>
20002118:	4b34      	ldr	r3, [pc, #208]	; (200021ec <HAL_RCC_ClockConfig+0x124>)
2000211a:	4a35      	ldr	r2, [pc, #212]	; (200021f0 <HAL_RCC_ClockConfig+0x128>)
2000211c:	689b      	ldr	r3, [r3, #8]
2000211e:	f3c3 1303 	ubfx	r3, r3, #4, #4
20002122:	5cd3      	ldrb	r3, [r2, r3]
20002124:	40d8      	lsrs	r0, r3
20002126:	4b33      	ldr	r3, [pc, #204]	; (200021f4 <HAL_RCC_ClockConfig+0x12c>)
20002128:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
2000212a:	4b33      	ldr	r3, [pc, #204]	; (200021f8 <HAL_RCC_ClockConfig+0x130>)
2000212c:	6818      	ldr	r0, [r3, #0]
2000212e:	f7ff fa65 	bl	200015fc <HAL_InitTick>
  return HAL_OK;
20002132:	2000      	movs	r0, #0
20002134:	e7ce      	b.n	200020d4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
20002136:	b2ca      	uxtb	r2, r1
20002138:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000213a:	681b      	ldr	r3, [r3, #0]
2000213c:	f003 030f 	and.w	r3, r3, #15
20002140:	428b      	cmp	r3, r1
20002142:	d1c6      	bne.n	200020d2 <HAL_RCC_ClockConfig+0xa>
20002144:	e7ce      	b.n	200020e4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20002146:	4b29      	ldr	r3, [pc, #164]	; (200021ec <HAL_RCC_ClockConfig+0x124>)
20002148:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
2000214c:	bf1e      	ittt	ne
2000214e:	689a      	ldrne	r2, [r3, #8]
20002150:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
20002154:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20002156:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20002158:	bf42      	ittt	mi
2000215a:	689a      	ldrmi	r2, [r3, #8]
2000215c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
20002160:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20002162:	689a      	ldr	r2, [r3, #8]
20002164:	68a0      	ldr	r0, [r4, #8]
20002166:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
2000216a:	4302      	orrs	r2, r0
2000216c:	609a      	str	r2, [r3, #8]
2000216e:	e7bc      	b.n	200020ea <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20002170:	6862      	ldr	r2, [r4, #4]
20002172:	4b1e      	ldr	r3, [pc, #120]	; (200021ec <HAL_RCC_ClockConfig+0x124>)
20002174:	2a01      	cmp	r2, #1
20002176:	d11c      	bne.n	200021b2 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20002178:	681b      	ldr	r3, [r3, #0]
2000217a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000217e:	d0a8      	beq.n	200020d2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20002180:	4e1a      	ldr	r6, [pc, #104]	; (200021ec <HAL_RCC_ClockConfig+0x124>)
20002182:	68b3      	ldr	r3, [r6, #8]
20002184:	f023 0303 	bic.w	r3, r3, #3
20002188:	4313      	orrs	r3, r2
2000218a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
2000218c:	f7ff fa7c 	bl	20001688 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20002190:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
20002194:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20002196:	68b3      	ldr	r3, [r6, #8]
20002198:	6862      	ldr	r2, [r4, #4]
2000219a:	f003 030c 	and.w	r3, r3, #12
2000219e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
200021a2:	d0a4      	beq.n	200020ee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
200021a4:	f7ff fa70 	bl	20001688 <HAL_GetTick>
200021a8:	1bc0      	subs	r0, r0, r7
200021aa:	4540      	cmp	r0, r8
200021ac:	d9f3      	bls.n	20002196 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
200021ae:	2003      	movs	r0, #3
200021b0:	e790      	b.n	200020d4 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
200021b2:	1e91      	subs	r1, r2, #2
200021b4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200021b6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
200021b8:	d802      	bhi.n	200021c0 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200021ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
200021be:	e7de      	b.n	2000217e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200021c0:	f013 0f02 	tst.w	r3, #2
200021c4:	e7db      	b.n	2000217e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
200021c6:	b2ea      	uxtb	r2, r5
200021c8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
200021ca:	681b      	ldr	r3, [r3, #0]
200021cc:	f003 030f 	and.w	r3, r3, #15
200021d0:	42ab      	cmp	r3, r5
200021d2:	f47f af7e 	bne.w	200020d2 <HAL_RCC_ClockConfig+0xa>
200021d6:	e790      	b.n	200020fa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
200021d8:	4904      	ldr	r1, [pc, #16]	; (200021ec <HAL_RCC_ClockConfig+0x124>)
200021da:	68e0      	ldr	r0, [r4, #12]
200021dc:	688b      	ldr	r3, [r1, #8]
200021de:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
200021e2:	4303      	orrs	r3, r0
200021e4:	608b      	str	r3, [r1, #8]
200021e6:	e78b      	b.n	20002100 <HAL_RCC_ClockConfig+0x38>
200021e8:	40023c00 	.word	0x40023c00
200021ec:	40023800 	.word	0x40023800
200021f0:	20002d1a 	.word	0x20002d1a
200021f4:	20002d50 	.word	0x20002d50
200021f8:	20002d58 	.word	0x20002d58

200021fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
200021fc:	4b04      	ldr	r3, [pc, #16]	; (20002210 <HAL_RCC_GetPCLK1Freq+0x14>)
200021fe:	4a05      	ldr	r2, [pc, #20]	; (20002214 <HAL_RCC_GetPCLK1Freq+0x18>)
20002200:	689b      	ldr	r3, [r3, #8]
20002202:	f3c3 2382 	ubfx	r3, r3, #10, #3
20002206:	5cd3      	ldrb	r3, [r2, r3]
20002208:	4a03      	ldr	r2, [pc, #12]	; (20002218 <HAL_RCC_GetPCLK1Freq+0x1c>)
2000220a:	6810      	ldr	r0, [r2, #0]
}
2000220c:	40d8      	lsrs	r0, r3
2000220e:	4770      	bx	lr
20002210:	40023800 	.word	0x40023800
20002214:	20002d2a 	.word	0x20002d2a
20002218:	20002d50 	.word	0x20002d50

2000221c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
2000221c:	4b04      	ldr	r3, [pc, #16]	; (20002230 <HAL_RCC_GetPCLK2Freq+0x14>)
2000221e:	4a05      	ldr	r2, [pc, #20]	; (20002234 <HAL_RCC_GetPCLK2Freq+0x18>)
20002220:	689b      	ldr	r3, [r3, #8]
20002222:	f3c3 3342 	ubfx	r3, r3, #13, #3
20002226:	5cd3      	ldrb	r3, [r2, r3]
20002228:	4a03      	ldr	r2, [pc, #12]	; (20002238 <HAL_RCC_GetPCLK2Freq+0x1c>)
2000222a:	6810      	ldr	r0, [r2, #0]
}
2000222c:	40d8      	lsrs	r0, r3
2000222e:	4770      	bx	lr
20002230:	40023800 	.word	0x40023800
20002234:	20002d2a 	.word	0x20002d2a
20002238:	20002d50 	.word	0x20002d50

2000223c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
2000223c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
20002240:	2b01      	cmp	r3, #1
20002242:	d130      	bne.n	200022a6 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
20002244:	2302      	movs	r3, #2
20002246:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
2000224a:	6803      	ldr	r3, [r0, #0]
2000224c:	68da      	ldr	r2, [r3, #12]
2000224e:	f042 0201 	orr.w	r2, r2, #1
20002252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
20002254:	4a15      	ldr	r2, [pc, #84]	; (200022ac <HAL_TIM_Base_Start_IT+0x70>)
20002256:	4293      	cmp	r3, r2
20002258:	d01a      	beq.n	20002290 <HAL_TIM_Base_Start_IT+0x54>
2000225a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2000225e:	d017      	beq.n	20002290 <HAL_TIM_Base_Start_IT+0x54>
20002260:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
20002264:	4293      	cmp	r3, r2
20002266:	d013      	beq.n	20002290 <HAL_TIM_Base_Start_IT+0x54>
20002268:	f502 6280 	add.w	r2, r2, #1024	; 0x400
2000226c:	4293      	cmp	r3, r2
2000226e:	d00f      	beq.n	20002290 <HAL_TIM_Base_Start_IT+0x54>
20002270:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20002274:	4293      	cmp	r3, r2
20002276:	d00b      	beq.n	20002290 <HAL_TIM_Base_Start_IT+0x54>
20002278:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
2000227c:	4293      	cmp	r3, r2
2000227e:	d007      	beq.n	20002290 <HAL_TIM_Base_Start_IT+0x54>
20002280:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
20002284:	4293      	cmp	r3, r2
20002286:	d003      	beq.n	20002290 <HAL_TIM_Base_Start_IT+0x54>
20002288:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
2000228c:	4293      	cmp	r3, r2
2000228e:	d104      	bne.n	2000229a <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
20002290:	689a      	ldr	r2, [r3, #8]
20002292:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
20002296:	2a06      	cmp	r2, #6
20002298:	d003      	beq.n	200022a2 <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
2000229a:	681a      	ldr	r2, [r3, #0]
2000229c:	f042 0201 	orr.w	r2, r2, #1
200022a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
200022a2:	2000      	movs	r0, #0
}
200022a4:	4770      	bx	lr
    return HAL_ERROR;
200022a6:	2001      	movs	r0, #1
200022a8:	4770      	bx	lr
200022aa:	bf00      	nop
200022ac:	40010000 	.word	0x40010000

200022b0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
200022b0:	4a33      	ldr	r2, [pc, #204]	; (20002380 <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
200022b2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
200022b4:	4290      	cmp	r0, r2
200022b6:	d012      	beq.n	200022de <TIM_Base_SetConfig+0x2e>
200022b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
200022bc:	d00f      	beq.n	200022de <TIM_Base_SetConfig+0x2e>
200022be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
200022c2:	4290      	cmp	r0, r2
200022c4:	d00b      	beq.n	200022de <TIM_Base_SetConfig+0x2e>
200022c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
200022ca:	4290      	cmp	r0, r2
200022cc:	d007      	beq.n	200022de <TIM_Base_SetConfig+0x2e>
200022ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
200022d2:	4290      	cmp	r0, r2
200022d4:	d003      	beq.n	200022de <TIM_Base_SetConfig+0x2e>
200022d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
200022da:	4290      	cmp	r0, r2
200022dc:	d119      	bne.n	20002312 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
200022de:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
200022e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
200022e4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
200022e6:	4a26      	ldr	r2, [pc, #152]	; (20002380 <TIM_Base_SetConfig+0xd0>)
200022e8:	4290      	cmp	r0, r2
200022ea:	d029      	beq.n	20002340 <TIM_Base_SetConfig+0x90>
200022ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
200022f0:	d026      	beq.n	20002340 <TIM_Base_SetConfig+0x90>
200022f2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
200022f6:	4290      	cmp	r0, r2
200022f8:	d022      	beq.n	20002340 <TIM_Base_SetConfig+0x90>
200022fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
200022fe:	4290      	cmp	r0, r2
20002300:	d01e      	beq.n	20002340 <TIM_Base_SetConfig+0x90>
20002302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20002306:	4290      	cmp	r0, r2
20002308:	d01a      	beq.n	20002340 <TIM_Base_SetConfig+0x90>
2000230a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
2000230e:	4290      	cmp	r0, r2
20002310:	d016      	beq.n	20002340 <TIM_Base_SetConfig+0x90>
20002312:	4a1c      	ldr	r2, [pc, #112]	; (20002384 <TIM_Base_SetConfig+0xd4>)
20002314:	4290      	cmp	r0, r2
20002316:	d013      	beq.n	20002340 <TIM_Base_SetConfig+0x90>
20002318:	f502 6280 	add.w	r2, r2, #1024	; 0x400
2000231c:	4290      	cmp	r0, r2
2000231e:	d00f      	beq.n	20002340 <TIM_Base_SetConfig+0x90>
20002320:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20002324:	4290      	cmp	r0, r2
20002326:	d00b      	beq.n	20002340 <TIM_Base_SetConfig+0x90>
20002328:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
2000232c:	4290      	cmp	r0, r2
2000232e:	d007      	beq.n	20002340 <TIM_Base_SetConfig+0x90>
20002330:	f502 6280 	add.w	r2, r2, #1024	; 0x400
20002334:	4290      	cmp	r0, r2
20002336:	d003      	beq.n	20002340 <TIM_Base_SetConfig+0x90>
20002338:	f502 6280 	add.w	r2, r2, #1024	; 0x400
2000233c:	4290      	cmp	r0, r2
2000233e:	d103      	bne.n	20002348 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
20002340:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
20002342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
20002346:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
20002348:	694a      	ldr	r2, [r1, #20]
2000234a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2000234e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
20002350:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
20002352:	688b      	ldr	r3, [r1, #8]
20002354:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
20002356:	680b      	ldr	r3, [r1, #0]
20002358:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
2000235a:	4b09      	ldr	r3, [pc, #36]	; (20002380 <TIM_Base_SetConfig+0xd0>)
2000235c:	4298      	cmp	r0, r3
2000235e:	d003      	beq.n	20002368 <TIM_Base_SetConfig+0xb8>
20002360:	f503 6380 	add.w	r3, r3, #1024	; 0x400
20002364:	4298      	cmp	r0, r3
20002366:	d101      	bne.n	2000236c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
20002368:	690b      	ldr	r3, [r1, #16]
2000236a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
2000236c:	2301      	movs	r3, #1
2000236e:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
20002370:	6903      	ldr	r3, [r0, #16]
20002372:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
20002374:	bf42      	ittt	mi
20002376:	6903      	ldrmi	r3, [r0, #16]
20002378:	f023 0301 	bicmi.w	r3, r3, #1
2000237c:	6103      	strmi	r3, [r0, #16]
  }
}
2000237e:	4770      	bx	lr
20002380:	40010000 	.word	0x40010000
20002384:	40014000 	.word	0x40014000

20002388 <HAL_TIM_Base_Init>:
{
20002388:	b510      	push	{r4, lr}
  if (htim == NULL)
2000238a:	4604      	mov	r4, r0
2000238c:	b330      	cbz	r0, 200023dc <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
2000238e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
20002392:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20002396:	b91b      	cbnz	r3, 200023a0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
20002398:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
2000239c:	f000 fc48 	bl	20002c30 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
200023a0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
200023a2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
200023a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
200023a8:	1d21      	adds	r1, r4, #4
200023aa:	f7ff ff81 	bl	200022b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
200023ae:	2301      	movs	r3, #1
200023b0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
200023b4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
200023b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
200023ba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
200023be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
200023c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
200023c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
200023ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
200023ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
200023d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
200023d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
200023da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
200023dc:	2001      	movs	r0, #1
200023de:	e7fc      	b.n	200023da <HAL_TIM_Base_Init+0x52>

200023e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
200023e0:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
200023e2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
200023e6:	2b01      	cmp	r3, #1
200023e8:	f04f 0302 	mov.w	r3, #2
200023ec:	d032      	beq.n	20002454 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
200023ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
200023f2:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
200023f4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
200023f6:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
200023f8:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
200023fa:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
200023fe:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
20002400:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
20002402:	4c15      	ldr	r4, [pc, #84]	; (20002458 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
20002404:	42a3      	cmp	r3, r4
20002406:	d01a      	beq.n	2000243e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
20002408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2000240c:	d017      	beq.n	2000243e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
2000240e:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
20002412:	42a3      	cmp	r3, r4
20002414:	d013      	beq.n	2000243e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
20002416:	f504 6480 	add.w	r4, r4, #1024	; 0x400
2000241a:	42a3      	cmp	r3, r4
2000241c:	d00f      	beq.n	2000243e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
2000241e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
20002422:	42a3      	cmp	r3, r4
20002424:	d00b      	beq.n	2000243e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
20002426:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
2000242a:	42a3      	cmp	r3, r4
2000242c:	d007      	beq.n	2000243e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
2000242e:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
20002432:	42a3      	cmp	r3, r4
20002434:	d003      	beq.n	2000243e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
20002436:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
2000243a:	42a3      	cmp	r3, r4
2000243c:	d104      	bne.n	20002448 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
2000243e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
20002440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
20002444:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
20002446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
20002448:	2301      	movs	r3, #1
2000244a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
2000244e:	2300      	movs	r3, #0
20002450:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
20002454:	4618      	mov	r0, r3

  return HAL_OK;
}
20002456:	bd30      	pop	{r4, r5, pc}
20002458:	40010000 	.word	0x40010000

2000245c <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
2000245c:	6802      	ldr	r2, [r0, #0]
2000245e:	68c1      	ldr	r1, [r0, #12]
20002460:	6913      	ldr	r3, [r2, #16]
20002462:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
20002466:	430b      	orrs	r3, r1
{
20002468:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
2000246a:	6113      	str	r3, [r2, #16]
{
2000246c:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
2000246e:	6883      	ldr	r3, [r0, #8]
20002470:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
20002472:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
20002474:	4303      	orrs	r3, r0
20002476:	6968      	ldr	r0, [r5, #20]
20002478:	4303      	orrs	r3, r0
2000247a:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
2000247c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
20002480:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
20002484:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
20002486:	430b      	orrs	r3, r1
20002488:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
2000248a:	6953      	ldr	r3, [r2, #20]
2000248c:	69a9      	ldr	r1, [r5, #24]
2000248e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20002492:	430b      	orrs	r3, r1
20002494:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
20002496:	4b1f      	ldr	r3, [pc, #124]	; (20002514 <UART_SetConfig+0xb8>)
20002498:	429a      	cmp	r2, r3
2000249a:	d003      	beq.n	200024a4 <UART_SetConfig+0x48>
2000249c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
200024a0:	429a      	cmp	r2, r3
200024a2:	d123      	bne.n	200024ec <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
200024a4:	f7ff feba 	bl	2000221c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
200024a8:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
200024aa:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
200024ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
200024b0:	e9d5 4600 	ldrd	r4, r6, [r5]
200024b4:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
200024b8:	d11b      	bne.n	200024f2 <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
200024ba:	19b2      	adds	r2, r6, r6
200024bc:	f04f 0300 	mov.w	r3, #0
200024c0:	415b      	adcs	r3, r3
200024c2:	f7fe fe9f 	bl	20001204 <__aeabi_uldivmod>
200024c6:	2264      	movs	r2, #100	; 0x64
200024c8:	fbb0 f1f2 	udiv	r1, r0, r2
200024cc:	fb02 0311 	mls	r3, r2, r1, r0
200024d0:	00db      	lsls	r3, r3, #3
200024d2:	3332      	adds	r3, #50	; 0x32
200024d4:	fbb3 f3f2 	udiv	r3, r3, r2
200024d8:	f003 0207 	and.w	r2, r3, #7
200024dc:	005b      	lsls	r3, r3, #1
200024de:	eb02 1201 	add.w	r2, r2, r1, lsl #4
200024e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
200024e6:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
200024e8:	60a3      	str	r3, [r4, #8]
  }
}
200024ea:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
200024ec:	f7ff fe86 	bl	200021fc <HAL_RCC_GetPCLK1Freq>
200024f0:	e7da      	b.n	200024a8 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
200024f2:	00b2      	lsls	r2, r6, #2
200024f4:	0fb3      	lsrs	r3, r6, #30
200024f6:	f7fe fe85 	bl	20001204 <__aeabi_uldivmod>
200024fa:	2264      	movs	r2, #100	; 0x64
200024fc:	fbb0 f1f2 	udiv	r1, r0, r2
20002500:	fb02 0311 	mls	r3, r2, r1, r0
20002504:	011b      	lsls	r3, r3, #4
20002506:	3332      	adds	r3, #50	; 0x32
20002508:	fbb3 f3f2 	udiv	r3, r3, r2
2000250c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
20002510:	e7ea      	b.n	200024e8 <UART_SetConfig+0x8c>
20002512:	bf00      	nop
20002514:	40011000 	.word	0x40011000

20002518 <HAL_UART_Init>:
{
20002518:	b510      	push	{r4, lr}
  if (huart == NULL)
2000251a:	4604      	mov	r4, r0
2000251c:	b348      	cbz	r0, 20002572 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
2000251e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
20002522:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20002526:	b91b      	cbnz	r3, 20002530 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
20002528:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
2000252c:	f000 fb40 	bl	20002bb0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
20002530:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
20002532:	2324      	movs	r3, #36	; 0x24
20002534:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
20002538:	68d3      	ldr	r3, [r2, #12]
2000253a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
2000253e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
20002540:	4620      	mov	r0, r4
20002542:	f7ff ff8b 	bl	2000245c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
20002546:	6823      	ldr	r3, [r4, #0]
20002548:	691a      	ldr	r2, [r3, #16]
2000254a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
2000254e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
20002550:	695a      	ldr	r2, [r3, #20]
20002552:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
20002556:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
20002558:	68da      	ldr	r2, [r3, #12]
2000255a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
2000255e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
20002560:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
20002562:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
20002564:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
20002566:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
2000256a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
2000256e:	6360      	str	r0, [r4, #52]	; 0x34
}
20002570:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
20002572:	2001      	movs	r0, #1
20002574:	e7fc      	b.n	20002570 <HAL_UART_Init+0x58>
	...

20002578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
20002578:	f8df d034 	ldr.w	sp, [pc, #52]	; 200025b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
2000257c:	480d      	ldr	r0, [pc, #52]	; (200025b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
2000257e:	490e      	ldr	r1, [pc, #56]	; (200025b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
20002580:	4a0e      	ldr	r2, [pc, #56]	; (200025bc <LoopFillZerobss+0x1e>)
  movs r3, #0
20002582:	2300      	movs	r3, #0
  b LoopCopyDataInit
20002584:	e002      	b.n	2000258c <LoopCopyDataInit>

20002586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20002586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20002588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
2000258a:	3304      	adds	r3, #4

2000258c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
2000258c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
2000258e:	428c      	cmp	r4, r1
  bcc CopyDataInit
20002590:	d3f9      	bcc.n	20002586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20002592:	4a0b      	ldr	r2, [pc, #44]	; (200025c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
20002594:	4c0b      	ldr	r4, [pc, #44]	; (200025c4 <LoopFillZerobss+0x26>)
  movs r3, #0
20002596:	2300      	movs	r3, #0
  b LoopFillZerobss
20002598:	e001      	b.n	2000259e <LoopFillZerobss>

2000259a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
2000259a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
2000259c:	3204      	adds	r2, #4

2000259e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
2000259e:	42a2      	cmp	r2, r4
  bcc FillZerobss
200025a0:	d3fb      	bcc.n	2000259a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
200025a2:	f7ff f803 	bl	200015ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
200025a6:	f000 fb77 	bl	20002c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
200025aa:	f000 faaf 	bl	20002b0c <main>
  bx  lr    
200025ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
200025b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
200025b4:	20002d44 	.word	0x20002d44
  ldr r1, =_edata
200025b8:	20002d6c 	.word	0x20002d6c
  ldr r2, =_sidata
200025bc:	20002d44 	.word	0x20002d44
  ldr r2, =_sbss
200025c0:	20002d6c 	.word	0x20002d6c
  ldr r4, =_ebss
200025c4:	2000a548 	.word	0x2000a548

200025c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
200025c8:	e7fe      	b.n	200025c8 <ADC_IRQHandler>

200025ca <HEXQueueFixBounds>:
	q->next = 0;
	q->len = 0;
}

void HEXQueueFixBounds(HEXQueue *q) {
	if(q->start >= HEX_QUEUE_LEN)
200025ca:	7803      	ldrb	r3, [r0, #0]
200025cc:	2bc7      	cmp	r3, #199	; 0xc7
		q->start -= HEX_QUEUE_LEN;
200025ce:	bf84      	itt	hi
200025d0:	3338      	addhi	r3, #56	; 0x38
200025d2:	7003      	strbhi	r3, [r0, #0]
	if(q->next >= HEX_QUEUE_LEN)
200025d4:	7843      	ldrb	r3, [r0, #1]
200025d6:	2bc7      	cmp	r3, #199	; 0xc7
		q->next -= HEX_QUEUE_LEN;
200025d8:	bf84      	itt	hi
200025da:	3338      	addhi	r3, #56	; 0x38
200025dc:	7043      	strbhi	r3, [r0, #1]
	if(q->len > HEX_QUEUE_LEN)
200025de:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
200025e2:	2bc8      	cmp	r3, #200	; 0xc8
		q->len = HEX_QUEUE_LEN;
200025e4:	bf84      	itt	hi
200025e6:	23c8      	movhi	r3, #200	; 0xc8
200025e8:	f880 30ca 	strbhi.w	r3, [r0, #202]	; 0xca
}
200025ec:	4770      	bx	lr

200025ee <HEXQueueAdd>:

void HEXQueueAdd(HEXQueue *q, uint8_t element) {
	q->buf[q->next] = element;
200025ee:	7843      	ldrb	r3, [r0, #1]
200025f0:	18c2      	adds	r2, r0, r3
	q->next++;
200025f2:	3301      	adds	r3, #1
	q->buf[q->next] = element;
200025f4:	7091      	strb	r1, [r2, #2]
	q->next++;
200025f6:	7043      	strb	r3, [r0, #1]
	q->len++;
200025f8:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
200025fc:	3301      	adds	r3, #1
200025fe:	b2db      	uxtb	r3, r3

	if(q->len == HEX_QUEUE_LEN)
20002600:	2bc8      	cmp	r3, #200	; 0xc8
	q->len++;
20002602:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca
		q->start++;
20002606:	bf02      	ittt	eq
20002608:	7803      	ldrbeq	r3, [r0, #0]
2000260a:	3301      	addeq	r3, #1
2000260c:	7003      	strbeq	r3, [r0, #0]

	HEXQueueFixBounds(q);
2000260e:	f7ff bfdc 	b.w	200025ca <HEXQueueFixBounds>
	...

20002614 <UARTInTask>:
}

//Task 0. Reads hex records from UART.
//Places received data into inQueue
HEXQueue inQueue;
void UARTInTask() {
20002614:	b508      	push	{r3, lr}
	for(;;) {
		if((UartHandle.Instance->SR & UART_FLAG_RXNE) == UART_FLAG_RXNE) {
20002616:	4c05      	ldr	r4, [pc, #20]	; (2000262c <UARTInTask+0x18>)
			HEXQueueAdd(&inQueue, (uint8_t)UartHandle.Instance->DR);
20002618:	4805      	ldr	r0, [pc, #20]	; (20002630 <UARTInTask+0x1c>)
		if((UartHandle.Instance->SR & UART_FLAG_RXNE) == UART_FLAG_RXNE) {
2000261a:	6823      	ldr	r3, [r4, #0]
2000261c:	681a      	ldr	r2, [r3, #0]
2000261e:	0692      	lsls	r2, r2, #26
20002620:	d5fc      	bpl.n	2000261c <UARTInTask+0x8>
			HEXQueueAdd(&inQueue, (uint8_t)UartHandle.Instance->DR);
20002622:	6859      	ldr	r1, [r3, #4]
20002624:	b2c9      	uxtb	r1, r1
20002626:	f7ff ffe2 	bl	200025ee <HEXQueueAdd>
2000262a:	e7f6      	b.n	2000261a <UARTInTask+0x6>
2000262c:	20008dd0 	.word	0x20008dd0
20002630:	2000a478 	.word	0x2000a478

20002634 <HEXQueueExtractHex>:
}


//pulls an Intel hex command out of the buffer if one exists
	//returns 1 if command extracted, 0 if none found
uint8_t HEXQueueExtractHex(HEXQueue *q, uint8_t *outBuf) {
20002634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(uint8_t i = 0; i < q->len - 5; i++) { //scan where queue is full enough for minimum len hex command
20002638:	f890 c0ca 	ldrb.w	ip, [r0, #202]	; 0xca
2000263c:	2200      	movs	r2, #0
2000263e:	f1ac 0e05 	sub.w	lr, ip, #5
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
20002642:	23c8      	movs	r3, #200	; 0xc8
	for(uint8_t i = 0; i < q->len - 5; i++) { //scan where queue is full enough for minimum len hex command
20002644:	4572      	cmp	r2, lr
20002646:	db01      	blt.n	2000264c <HEXQueueExtractHex+0x18>
				q->next = (q->start+q->len) % HEX_QUEUE_LEN;
				return 1;
			}
		}
	}
	return 0;
20002648:	2000      	movs	r0, #0
2000264a:	e06d      	b.n	20002728 <HEXQueueExtractHex+0xf4>
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
2000264c:	f890 9000 	ldrb.w	r9, [r0]
20002650:	eb02 0409 	add.w	r4, r2, r9
20002654:	fbb4 f5f3 	udiv	r5, r4, r3
20002658:	fb03 4415 	mls	r4, r3, r5, r4
	return q->buf[retIdx];
2000265c:	4404      	add	r4, r0
			uint8_t dataLen = HEXQueueGetIdx(q, i+1);
2000265e:	1c57      	adds	r7, r2, #1
		if(HEXQueueGetIdx(q, i) == ':') {
20002660:	78a4      	ldrb	r4, [r4, #2]
20002662:	2c3a      	cmp	r4, #58	; 0x3a
			uint8_t dataLen = HEXQueueGetIdx(q, i+1);
20002664:	b2ff      	uxtb	r7, r7
		if(HEXQueueGetIdx(q, i) == ':') {
20002666:	d161      	bne.n	2000272c <HEXQueueExtractHex+0xf8>
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
20002668:	eb07 0409 	add.w	r4, r7, r9
2000266c:	fbb4 f5f3 	udiv	r5, r4, r3
20002670:	fb03 4415 	mls	r4, r3, r5, r4
	return q->buf[retIdx];
20002674:	4404      	add	r4, r0
20002676:	78a5      	ldrb	r5, [r4, #2]
			if((q->len - i) >= 5 + dataLen) { //if hex fully received
20002678:	ebac 0402 	sub.w	r4, ip, r2
2000267c:	f105 0a04 	add.w	sl, r5, #4
20002680:	45a2      	cmp	sl, r4
20002682:	da53      	bge.n	2000272c <HEXQueueExtractHex+0xf8>
				for(uint8_t j = 1; j < dataLen + 5; j++) {
20002684:	2601      	movs	r6, #1
				uint8_t checksum = 0;
20002686:	f04f 0800 	mov.w	r8, #0
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
2000268a:	1994      	adds	r4, r2, r6
2000268c:	fa59 f484 	uxtab	r4, r9, r4
20002690:	fbb4 fbf3 	udiv	fp, r4, r3
20002694:	fb03 441b 	mls	r4, r3, fp, r4
	return q->buf[retIdx];
20002698:	4404      	add	r4, r0
				for(uint8_t j = 1; j < dataLen + 5; j++) {
2000269a:	3601      	adds	r6, #1
					checksum += HEXQueueGetIdx(q, i+j);
2000269c:	78a4      	ldrb	r4, [r4, #2]
				for(uint8_t j = 1; j < dataLen + 5; j++) {
2000269e:	b2f6      	uxtb	r6, r6
					checksum += HEXQueueGetIdx(q, i+j);
200026a0:	4444      	add	r4, r8
				for(uint8_t j = 1; j < dataLen + 5; j++) {
200026a2:	45b2      	cmp	sl, r6
					checksum += HEXQueueGetIdx(q, i+j);
200026a4:	fa5f f884 	uxtb.w	r8, r4
				for(uint8_t j = 1; j < dataLen + 5; j++) {
200026a8:	daef      	bge.n	2000268a <HEXQueueExtractHex+0x56>
				if(checksum != HEXQueueGetIdx(q, i+dataLen+5)) {
200026aa:	1956      	adds	r6, r2, r5
200026ac:	b2f6      	uxtb	r6, r6
200026ae:	1d74      	adds	r4, r6, #5
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
200026b0:	fa59 f484 	uxtab	r4, r9, r4
200026b4:	fbb4 f9f3 	udiv	r9, r4, r3
200026b8:	fb03 4419 	mls	r4, r3, r9, r4
	return q->buf[retIdx];
200026bc:	4404      	add	r4, r0
				checksum = (~checksum)+1; //2's compliment
200026be:	f1c8 0800 	rsb	r8, r8, #0
				if(checksum != HEXQueueGetIdx(q, i+dataLen+5)) {
200026c2:	78a4      	ldrb	r4, [r4, #2]
200026c4:	fa5f f888 	uxtb.w	r8, r8
200026c8:	4544      	cmp	r4, r8
200026ca:	d12f      	bne.n	2000272c <HEXQueueExtractHex+0xf8>
				for(uint8_t j = 1; j < dataLen + 6; j++)
200026cc:	2701      	movs	r7, #1
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
200026ce:	24c8      	movs	r4, #200	; 0xc8
				for(uint8_t j = 1; j < dataLen + 6; j++)
200026d0:	f105 0c05 	add.w	ip, r5, #5
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
200026d4:	f890 e000 	ldrb.w	lr, [r0]
200026d8:	19d3      	adds	r3, r2, r7
200026da:	fa5e f383 	uxtab	r3, lr, r3
200026de:	fbb3 fef4 	udiv	lr, r3, r4
200026e2:	fb04 331e 	mls	r3, r4, lr, r3
	return q->buf[retIdx];
200026e6:	4403      	add	r3, r0
200026e8:	f893 e002 	ldrb.w	lr, [r3, #2]
					outBuf[j-1] = HEXQueueGetIdx(q, i+j);
200026ec:	19cb      	adds	r3, r1, r7
				for(uint8_t j = 1; j < dataLen + 6; j++)
200026ee:	3701      	adds	r7, #1
200026f0:	b2ff      	uxtb	r7, r7
200026f2:	45bc      	cmp	ip, r7
					outBuf[j-1] = HEXQueueGetIdx(q, i+j);
200026f4:	f803 ec01 	strb.w	lr, [r3, #-1]
				for(uint8_t j = 1; j < dataLen + 6; j++)
200026f8:	daec      	bge.n	200026d4 <HEXQueueExtractHex+0xa0>
				q->start = (q->start+i+dataLen+5) % HEX_QUEUE_LEN;
200026fa:	7801      	ldrb	r1, [r0, #0]
				q->len -= i+5+dataLen;
200026fc:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
				q->start = (q->start+i+dataLen+5) % HEX_QUEUE_LEN;
20002700:	440a      	add	r2, r1
				q->len -= i+5+dataLen;
20002702:	3b05      	subs	r3, #5
				q->start = (q->start+i+dataLen+5) % HEX_QUEUE_LEN;
20002704:	442a      	add	r2, r5
20002706:	3205      	adds	r2, #5
				q->len -= i+5+dataLen;
20002708:	1b9b      	subs	r3, r3, r6
2000270a:	b2db      	uxtb	r3, r3
				q->start = (q->start+i+dataLen+5) % HEX_QUEUE_LEN;
2000270c:	fbb2 f1f4 	udiv	r1, r2, r4
20002710:	fb04 2211 	mls	r2, r4, r1, r2
				q->len -= i+5+dataLen;
20002714:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca
				q->next = (q->start+q->len) % HEX_QUEUE_LEN;
20002718:	4413      	add	r3, r2
				q->start = (q->start+i+dataLen+5) % HEX_QUEUE_LEN;
2000271a:	7002      	strb	r2, [r0, #0]
				q->next = (q->start+q->len) % HEX_QUEUE_LEN;
2000271c:	fbb3 f2f4 	udiv	r2, r3, r4
20002720:	fb04 3312 	mls	r3, r4, r2, r3
20002724:	7043      	strb	r3, [r0, #1]
				return 1;
20002726:	2001      	movs	r0, #1
}
20002728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000272c:	463a      	mov	r2, r7
2000272e:	e789      	b.n	20002644 <HEXQueueExtractHex+0x10>

20002730 <HexProcessTask>:
uint32_t flashReadyAddrs[FLASH_BUF_COUNT];
uint8_t flashReadyCount[FLASH_BUF_COUNT];
uint32_t recMsgCount = 0; //number of hex messages received. For debug.
uint8_t hexProcBuf[0xff]; //temp buffer for processing hex commands
uint32_t addrOffset = 0; //hex command address offset
void HexProcessTask() {
20002730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(;;) {
		if(HEXQueueExtractHex(&inQueue, hexProcBuf)) {
20002734:	4d26      	ldr	r5, [pc, #152]	; (200027d0 <HexProcessTask+0xa0>)
			uint8_t cmdType = hexProcBuf[3];
			if(cmdType == 0) { //data. Add to buffer
				//find unused buffer idx
				uint16_t cidx;
				for(cidx = 0; cidx < FLASH_BUF_COUNT; cidx++) {
					if(flashReadyAddrs[cidx] == 0 && flashReadyCount[cidx] == 0)
20002736:	4e27      	ldr	r6, [pc, #156]	; (200027d4 <HexProcessTask+0xa4>)
		if(HEXQueueExtractHex(&inQueue, hexProcBuf)) {
20002738:	4c27      	ldr	r4, [pc, #156]	; (200027d8 <HexProcessTask+0xa8>)
2000273a:	4925      	ldr	r1, [pc, #148]	; (200027d0 <HexProcessTask+0xa0>)
2000273c:	4620      	mov	r0, r4
2000273e:	f7ff ff79 	bl	20002634 <HEXQueueExtractHex>
20002742:	2800      	cmp	r0, #0
20002744:	d0f9      	beq.n	2000273a <HexProcessTask+0xa>
			recMsgCount++;
20002746:	4a25      	ldr	r2, [pc, #148]	; (200027dc <HexProcessTask+0xac>)
			uint8_t cmdType = hexProcBuf[3];
20002748:	78ec      	ldrb	r4, [r5, #3]
			recMsgCount++;
2000274a:	6813      	ldr	r3, [r2, #0]
			uint8_t dataLen = hexProcBuf[0];
2000274c:	782f      	ldrb	r7, [r5, #0]
			recMsgCount++;
2000274e:	3301      	adds	r3, #1
20002750:	6013      	str	r3, [r2, #0]
			if(cmdType == 0) { //data. Add to buffer
20002752:	b9e4      	cbnz	r4, 2000278e <HexProcessTask+0x5e>
20002754:	4b22      	ldr	r3, [pc, #136]	; (200027e0 <HexProcessTask+0xb0>)
20002756:	4698      	mov	r8, r3
					if(flashReadyAddrs[cidx] == 0 && flashReadyCount[cidx] == 0)
20002758:	f853 2b04 	ldr.w	r2, [r3], #4
2000275c:	b99a      	cbnz	r2, 20002786 <HexProcessTask+0x56>
2000275e:	5da2      	ldrb	r2, [r4, r6]
20002760:	b98a      	cbnz	r2, 20002786 <HexProcessTask+0x56>
				if(cidx == FLASH_BUF_COUNT)
					continue; //critical error. Buffer full.

				//fill in data to cache
				for(uint8_t i = 0; i < dataLen; i++)
					flashReadyBuf[cidx][i] = hexProcBuf[i+4];
20002762:	4820      	ldr	r0, [pc, #128]	; (200027e4 <HexProcessTask+0xb4>)
20002764:	4920      	ldr	r1, [pc, #128]	; (200027e8 <HexProcessTask+0xb8>)
20002766:	463a      	mov	r2, r7
20002768:	eb00 1004 	add.w	r0, r0, r4, lsl #4
2000276c:	f000 fab8 	bl	20002ce0 <memcpy>
				flashReadyCount[cidx] = dataLen;
				flashReadyAddrs[cidx] = addrOffset + (((uint32_t)hexProcBuf[1])<<8) + (uint32_t)hexProcBuf[2];
20002770:	4a1e      	ldr	r2, [pc, #120]	; (200027ec <HexProcessTask+0xbc>)
20002772:	78ab      	ldrb	r3, [r5, #2]
20002774:	6812      	ldr	r2, [r2, #0]
				flashReadyCount[cidx] = dataLen;
20002776:	5537      	strb	r7, [r6, r4]
				flashReadyAddrs[cidx] = addrOffset + (((uint32_t)hexProcBuf[1])<<8) + (uint32_t)hexProcBuf[2];
20002778:	4413      	add	r3, r2
2000277a:	786a      	ldrb	r2, [r5, #1]
2000277c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
20002780:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
20002784:	e7d8      	b.n	20002738 <HexProcessTask+0x8>
				for(cidx = 0; cidx < FLASH_BUF_COUNT; cidx++) {
20002786:	3401      	adds	r4, #1
20002788:	2cff      	cmp	r4, #255	; 0xff
2000278a:	d1e5      	bne.n	20002758 <HexProcessTask+0x28>
2000278c:	e7d4      	b.n	20002738 <HexProcessTask+0x8>
			}
			else if(cmdType == 1) { //EOF
2000278e:	2c01      	cmp	r4, #1
20002790:	d009      	beq.n	200027a6 <HexProcessTask+0x76>
20002792:	2c04      	cmp	r4, #4
20002794:	d1d0      	bne.n	20002738 <HexProcessTask+0x8>
			else if (cmdType == 3) { //start segment address
				//we shouldn't need to care about entry address
			}
			else if (cmdType == 4) { //extended linear address
				//printf("Address Command: %s\r\n", hexCmdBuf);
				addrOffset = (((uint32_t)hexProcBuf[4]) << 24) + (((uint32_t)hexProcBuf[5]) << 16);
20002796:	796b      	ldrb	r3, [r5, #5]
20002798:	792a      	ldrb	r2, [r5, #4]
2000279a:	041b      	lsls	r3, r3, #16
2000279c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
200027a0:	4a12      	ldr	r2, [pc, #72]	; (200027ec <HexProcessTask+0xbc>)
200027a2:	6013      	str	r3, [r2, #0]
200027a4:	e7c8      	b.n	20002738 <HexProcessTask+0x8>
			}
		}
	}
	while (1)
	{
		HAL_Delay(500);
200027a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
200027aa:	f7fe ff73 	bl	20001694 <HAL_Delay>
		BSP_LED_On(LED1);
200027ae:	2000      	movs	r0, #0
200027b0:	f7fe fee0 	bl	20001574 <BSP_LED_On>
		//BSP_LED_On(LED2);
		BSP_LED_On(LED3);
200027b4:	2002      	movs	r0, #2
200027b6:	f7fe fedd 	bl	20001574 <BSP_LED_On>
		HAL_Delay(500);
200027ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
200027be:	f7fe ff69 	bl	20001694 <HAL_Delay>
		BSP_LED_Off(LED1);
200027c2:	2000      	movs	r0, #0
200027c4:	f7fe fee4 	bl	20001590 <BSP_LED_Off>
		//BSP_LED_Off(LED2);
		BSP_LED_Off(LED3);
200027c8:	2002      	movs	r0, #2
200027ca:	f7fe fee1 	bl	20001590 <BSP_LED_Off>
	while (1)
200027ce:	e7ea      	b.n	200027a6 <HexProcessTask+0x76>
200027d0:	2000a32f 	.word	0x2000a32f
200027d4:	2000a230 	.word	0x2000a230
200027d8:	2000a478 	.word	0x2000a478
200027dc:	2000a544 	.word	0x2000a544
200027e0:	20008e44 	.word	0x20008e44
200027e4:	20009240 	.word	0x20009240
200027e8:	2000a333 	.word	0x2000a333
200027ec:	20008e18 	.word	0x20008e18

200027f0 <TinyBLInit>:
void TinyBLInit(void) {
200027f0:	b510      	push	{r4, lr}
200027f2:	b094      	sub	sp, #80	; 0x50
	HAL_Init();
200027f4:	f7fe ff26 	bl	20001644 <HAL_Init>
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
200027f8:	2214      	movs	r2, #20
200027fa:	2100      	movs	r1, #0
200027fc:	a808      	add	r0, sp, #32
200027fe:	f000 fa43 	bl	20002c88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20002802:	2214      	movs	r2, #20
20002804:	2100      	movs	r1, #0
20002806:	a802      	add	r0, sp, #8
20002808:	f000 fa3e 	bl	20002c88 <memset>
	__HAL_RCC_PWR_CLK_ENABLE();
2000280c:	2300      	movs	r3, #0
2000280e:	4a2a      	ldr	r2, [pc, #168]	; (200028b8 <TinyBLInit+0xc8>)
20002810:	9300      	str	r3, [sp, #0]
20002812:	6c11      	ldr	r1, [r2, #64]	; 0x40
20002814:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
20002818:	6411      	str	r1, [r2, #64]	; 0x40
2000281a:	6c12      	ldr	r2, [r2, #64]	; 0x40
2000281c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
20002820:	9200      	str	r2, [sp, #0]
20002822:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20002824:	4a25      	ldr	r2, [pc, #148]	; (200028bc <TinyBLInit+0xcc>)
20002826:	9301      	str	r3, [sp, #4]
20002828:	6811      	ldr	r1, [r2, #0]
2000282a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
2000282e:	6011      	str	r1, [r2, #0]
20002830:	6812      	ldr	r2, [r2, #0]
20002832:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
20002836:	2402      	movs	r4, #2
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20002838:	9201      	str	r2, [sp, #4]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
2000283a:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2000283e:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
20002840:	9407      	str	r4, [sp, #28]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
20002842:	f04f 0c01 	mov.w	ip, #1
20002846:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLN = 180;
20002848:	f04f 0e08 	mov.w	lr, #8
2000284c:	23b4      	movs	r3, #180	; 0xb4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000284e:	a807      	add	r0, sp, #28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
20002850:	e9cd c20a 	strd	ip, r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 180;
20002854:	e9cd e30f 	strd	lr, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 2;
20002858:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
2000285c:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000285e:	f7ff fa53 	bl	20001d08 <HAL_RCC_OscConfig>
20002862:	b100      	cbz	r0, 20002866 <TinyBLInit+0x76>
		for(;;);
20002864:	e7fe      	b.n	20002864 <TinyBLInit+0x74>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
20002866:	f7ff fa15 	bl	20001c94 <HAL_PWREx_EnableOverDrive>
2000286a:	b100      	cbz	r0, 2000286e <TinyBLInit+0x7e>
		for(;;);
2000286c:	e7fe      	b.n	2000286c <TinyBLInit+0x7c>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2000286e:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20002870:	e9cd 3402 	strd	r3, r4, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20002874:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
20002876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2000287a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
2000287e:	e9cd 0305 	strd	r0, r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
20002882:	2105      	movs	r1, #5
20002884:	a802      	add	r0, sp, #8
20002886:	f7ff fc1f 	bl	200020c8 <HAL_RCC_ClockConfig>
2000288a:	b100      	cbz	r0, 2000288e <TinyBLInit+0x9e>
		for(;;);
2000288c:	e7fe      	b.n	2000288c <TinyBLInit+0x9c>
	UartHandle.Instance        = USART3;
2000288e:	4b0c      	ldr	r3, [pc, #48]	; (200028c0 <TinyBLInit+0xd0>)
	UartHandle.Init.BaudRate   = 57600;
20002890:	490c      	ldr	r1, [pc, #48]	; (200028c4 <TinyBLInit+0xd4>)
	UartHandle.Init.Parity     = UART_PARITY_NONE;
20002892:	6118      	str	r0, [r3, #16]
	UartHandle.Init.BaudRate   = 57600;
20002894:	f44f 4261 	mov.w	r2, #57600	; 0xe100
20002898:	e9c3 1200 	strd	r1, r2, [r3]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
2000289c:	e9c3 0002 	strd	r0, r0, [r3, #8]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
200028a0:	6198      	str	r0, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
200028a2:	220c      	movs	r2, #12
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
200028a4:	61d8      	str	r0, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
200028a6:	4618      	mov	r0, r3
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
200028a8:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
200028aa:	f7ff fe35 	bl	20002518 <HAL_UART_Init>
200028ae:	b100      	cbz	r0, 200028b2 <TinyBLInit+0xc2>
		for(;;);
200028b0:	e7fe      	b.n	200028b0 <TinyBLInit+0xc0>
}
200028b2:	b014      	add	sp, #80	; 0x50
200028b4:	bd10      	pop	{r4, pc}
200028b6:	bf00      	nop
200028b8:	40023800 	.word	0x40023800
200028bc:	40007000 	.word	0x40007000
200028c0:	20008dd0 	.word	0x20008dd0
200028c4:	40004800 	.word	0x40004800

200028c8 <FlashEraseSectorIfNeeded>:
	if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
200028c8:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
200028cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
void FlashEraseSectorIfNeeded(uint32_t addr) {
200028d0:	b570      	push	{r4, r5, r6, lr}
	if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
200028d2:	d339      	bcc.n	20002948 <FlashEraseSectorIfNeeded+0x80>
	else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
200028d4:	f5a3 4280 	sub.w	r2, r3, #16384	; 0x4000
200028d8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
200028dc:	d336      	bcc.n	2000294c <FlashEraseSectorIfNeeded+0x84>
	else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
200028de:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
200028e2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
200028e6:	d333      	bcc.n	20002950 <FlashEraseSectorIfNeeded+0x88>
	else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
200028e8:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
200028ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
200028f0:	d330      	bcc.n	20002954 <FlashEraseSectorIfNeeded+0x8c>
	else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
200028f2:	f100 4077 	add.w	r0, r0, #4143972352	; 0xf7000000
200028f6:	f500 037f 	add.w	r3, r0, #16711680	; 0xff0000
200028fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200028fe:	d32b      	bcc.n	20002958 <FlashEraseSectorIfNeeded+0x90>
	else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
20002900:	f500 037e 	add.w	r3, r0, #16646144	; 0xfe0000
20002904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
20002908:	d328      	bcc.n	2000295c <FlashEraseSectorIfNeeded+0x94>
	else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
2000290a:	f500 007c 	add.w	r0, r0, #16515072	; 0xfc0000
		sector = FLASH_SECTOR_7;
2000290e:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
20002912:	bf34      	ite	cc
20002914:	2406      	movcc	r4, #6
20002916:	2407      	movcs	r4, #7
	for(uint8_t i = 0; i < erasedSectorsLen; i++) {
20002918:	4d18      	ldr	r5, [pc, #96]	; (2000297c <FlashEraseSectorIfNeeded+0xb4>)
2000291a:	4a19      	ldr	r2, [pc, #100]	; (20002980 <FlashEraseSectorIfNeeded+0xb8>)
2000291c:	7828      	ldrb	r0, [r5, #0]
2000291e:	2300      	movs	r3, #0
20002920:	4616      	mov	r6, r2
20002922:	b2d9      	uxtb	r1, r3
20002924:	4288      	cmp	r0, r1
20002926:	d81b      	bhi.n	20002960 <FlashEraseSectorIfNeeded+0x98>
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
20002928:	4816      	ldr	r0, [pc, #88]	; (20002984 <FlashEraseSectorIfNeeded+0xbc>)
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
2000292a:	4917      	ldr	r1, [pc, #92]	; (20002988 <FlashEraseSectorIfNeeded+0xc0>)
	EraseInitStruct.Sector        = sector;
2000292c:	6084      	str	r4, [r0, #8]
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
2000292e:	2300      	movs	r3, #0
20002930:	6003      	str	r3, [r0, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
20002932:	2302      	movs	r3, #2
20002934:	6103      	str	r3, [r0, #16]
	EraseInitStruct.NbSectors     = 1;
20002936:	2301      	movs	r3, #1
20002938:	60c3      	str	r3, [r0, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
2000293a:	f7ff f881 	bl	20001a40 <HAL_FLASHEx_Erase>
2000293e:	b1b0      	cbz	r0, 2000296e <FlashEraseSectorIfNeeded+0xa6>
			BSP_LED_On(LED3);
20002940:	2002      	movs	r0, #2
20002942:	f7fe fe17 	bl	20001574 <BSP_LED_On>
		while (1) {
20002946:	e7fb      	b.n	20002940 <FlashEraseSectorIfNeeded+0x78>
		sector = FLASH_SECTOR_0;
20002948:	2400      	movs	r4, #0
2000294a:	e7e5      	b.n	20002918 <FlashEraseSectorIfNeeded+0x50>
		sector = FLASH_SECTOR_1;
2000294c:	2401      	movs	r4, #1
2000294e:	e7e3      	b.n	20002918 <FlashEraseSectorIfNeeded+0x50>
		sector = FLASH_SECTOR_2;
20002950:	2402      	movs	r4, #2
20002952:	e7e1      	b.n	20002918 <FlashEraseSectorIfNeeded+0x50>
		sector = FLASH_SECTOR_3;
20002954:	2403      	movs	r4, #3
20002956:	e7df      	b.n	20002918 <FlashEraseSectorIfNeeded+0x50>
		sector = FLASH_SECTOR_4;
20002958:	2404      	movs	r4, #4
2000295a:	e7dd      	b.n	20002918 <FlashEraseSectorIfNeeded+0x50>
		sector = FLASH_SECTOR_5;
2000295c:	2405      	movs	r4, #5
2000295e:	e7db      	b.n	20002918 <FlashEraseSectorIfNeeded+0x50>
		if(sector == erasedSectors[i])
20002960:	f852 1b04 	ldr.w	r1, [r2], #4
20002964:	42a1      	cmp	r1, r4
20002966:	f103 0301 	add.w	r3, r3, #1
2000296a:	d1da      	bne.n	20002922 <FlashEraseSectorIfNeeded+0x5a>
}
2000296c:	bd70      	pop	{r4, r5, r6, pc}
	erasedSectors[erasedSectorsLen] = sector;
2000296e:	782b      	ldrb	r3, [r5, #0]
20002970:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	erasedSectorsLen++;
20002974:	3301      	adds	r3, #1
20002976:	702b      	strb	r3, [r5, #0]
	return;
20002978:	e7f8      	b.n	2000296c <FlashEraseSectorIfNeeded+0xa4>
2000297a:	bf00      	nop
2000297c:	20008e40 	.word	0x20008e40
20002980:	20008e20 	.word	0x20008e20
20002984:	20002dac 	.word	0x20002dac
20002988:	20002dc0 	.word	0x20002dc0

2000298c <FlashTask>:
	}
}

//Task 2. Flashing task.
//Flashes data from flashReadyBuf
void FlashTask() {
2000298c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_FLASH_Unlock();
20002990:	f7fe ff7a 	bl	20001888 <HAL_FLASH_Unlock>
		for(uint16_t cidx = 0; cidx < FLASH_BUF_COUNT; cidx++) {
			if(flashReadyAddrs[cidx] != 0 && flashReadyCount[cidx] != 0) {
				FlashEraseSectorIfNeeded(flashReadyAddrs[cidx]);

				for(uint8_t i = 0; i < flashReadyCount[cidx]; i++) {
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashReadyAddrs[cidx]+i, flashReadyBuf[cidx][i]) != HAL_OK) {
20002994:	f8df 9064 	ldr.w	r9, [pc, #100]	; 200029fc <FlashTask+0x70>
						{
							BSP_LED_On(LED3);
						}
					}
				}
				flashReadyCount[cidx] = 0;
20002998:	f04f 0800 	mov.w	r8, #0
		for(uint16_t cidx = 0; cidx < FLASH_BUF_COUNT; cidx++) {
2000299c:	4e15      	ldr	r6, [pc, #84]	; (200029f4 <FlashTask+0x68>)
2000299e:	4c16      	ldr	r4, [pc, #88]	; (200029f8 <FlashTask+0x6c>)
void FlashTask() {
200029a0:	2500      	movs	r5, #0
			if(flashReadyAddrs[cidx] != 0 && flashReadyCount[cidx] != 0) {
200029a2:	f856 0b04 	ldr.w	r0, [r6], #4
200029a6:	b170      	cbz	r0, 200029c6 <FlashTask+0x3a>
200029a8:	7823      	ldrb	r3, [r4, #0]
200029aa:	b163      	cbz	r3, 200029c6 <FlashTask+0x3a>
				FlashEraseSectorIfNeeded(flashReadyAddrs[cidx]);
200029ac:	f7ff ff8c 	bl	200028c8 <FlashEraseSectorIfNeeded>
				for(uint8_t i = 0; i < flashReadyCount[cidx]; i++) {
200029b0:	2700      	movs	r7, #0
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashReadyAddrs[cidx]+i, flashReadyBuf[cidx][i]) != HAL_OK) {
200029b2:	eb09 1a05 	add.w	sl, r9, r5, lsl #4
				for(uint8_t i = 0; i < flashReadyCount[cidx]; i++) {
200029b6:	7823      	ldrb	r3, [r4, #0]
200029b8:	b2f9      	uxtb	r1, r7
200029ba:	428b      	cmp	r3, r1
200029bc:	d809      	bhi.n	200029d2 <FlashTask+0x46>
				flashReadyCount[cidx] = 0;
200029be:	f884 8000 	strb.w	r8, [r4]
				flashReadyAddrs[cidx] = 0;
200029c2:	f846 8c04 	str.w	r8, [r6, #-4]
		for(uint16_t cidx = 0; cidx < FLASH_BUF_COUNT; cidx++) {
200029c6:	3501      	adds	r5, #1
200029c8:	2dff      	cmp	r5, #255	; 0xff
200029ca:	f104 0401 	add.w	r4, r4, #1
200029ce:	d1e8      	bne.n	200029a2 <FlashTask+0x16>
200029d0:	e7e4      	b.n	2000299c <FlashTask+0x10>
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashReadyAddrs[cidx]+i, flashReadyBuf[cidx][i]) != HAL_OK) {
200029d2:	f856 0c04 	ldr.w	r0, [r6, #-4]
200029d6:	f81a 2001 	ldrb.w	r2, [sl, r1]
200029da:	2300      	movs	r3, #0
200029dc:	4401      	add	r1, r0
200029de:	4618      	mov	r0, r3
200029e0:	f7fe ff8c 	bl	200018fc <HAL_FLASH_Program>
200029e4:	3701      	adds	r7, #1
200029e6:	2800      	cmp	r0, #0
200029e8:	d0e5      	beq.n	200029b6 <FlashTask+0x2a>
							BSP_LED_On(LED3);
200029ea:	2002      	movs	r0, #2
200029ec:	f7fe fdc2 	bl	20001574 <BSP_LED_On>
						while (1)
200029f0:	e7fb      	b.n	200029ea <FlashTask+0x5e>
200029f2:	bf00      	nop
200029f4:	20008e44 	.word	0x20008e44
200029f8:	2000a230 	.word	0x2000a230
200029fc:	20009240 	.word	0x20009240

20002a00 <TIM7_IRQHandler>:
uint8_t T1Stack[0x2000];
uint8_t T2Stack[0x2000];
uint32_t TaskSPs[3];
uint8_t firstGo = 1;
void TIM7_IRQHandler(void) {
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
20002a00:	4b15      	ldr	r3, [pc, #84]	; (20002a58 <TIM7_IRQHandler+0x58>)
20002a02:	4816      	ldr	r0, [pc, #88]	; (20002a5c <TIM7_IRQHandler+0x5c>)
20002a04:	681b      	ldr	r3, [r3, #0]
20002a06:	f06f 0201 	mvn.w	r2, #1
20002a0a:	611a      	str	r2, [r3, #16]
	if(firstGo) { //set stack pointer for task 1
20002a0c:	4b14      	ldr	r3, [pc, #80]	; (20002a60 <TIM7_IRQHandler+0x60>)
20002a0e:	4a15      	ldr	r2, [pc, #84]	; (20002a64 <TIM7_IRQHandler+0x64>)
20002a10:	7819      	ldrb	r1, [r3, #0]
20002a12:	b121      	cbz	r1, 20002a1e <TIM7_IRQHandler+0x1e>
		asm volatile("ldr sp, %0" : : "m" (*(TaskSPs+currentTask)));
20002a14:	7811      	ldrb	r1, [r2, #0]
20002a16:	f850 d021 	ldr.w	sp, [r0, r1, lsl #2]
		firstGo = 0;
20002a1a:	2100      	movs	r1, #0
20002a1c:	7019      	strb	r1, [r3, #0]
	}
	asm volatile("PUSH	{R4-R11}");
20002a1e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	asm volatile("str sp, %0" : "=m" (*(TaskSPs+currentTask)));
20002a22:	7813      	ldrb	r3, [r2, #0]
20002a24:	f840 d023 	str.w	sp, [r0, r3, lsl #2]
	//scheduling algorithm
	if((UartHandle.Instance->SR & UART_FLAG_RXNE) == UART_FLAG_RXNE)
20002a28:	4b0f      	ldr	r3, [pc, #60]	; (20002a68 <TIM7_IRQHandler+0x68>)
20002a2a:	681b      	ldr	r3, [r3, #0]
20002a2c:	681b      	ldr	r3, [r3, #0]
20002a2e:	069b      	lsls	r3, r3, #26
		currentTask = 0;
	else
		currentTask = (currentTask+1)%3;
20002a30:	bf5f      	itttt	pl
20002a32:	7813      	ldrbpl	r3, [r2, #0]
20002a34:	2103      	movpl	r1, #3
20002a36:	3301      	addpl	r3, #1
20002a38:	fbb3 f1f1 	udivpl	r1, r3, r1
20002a3c:	bf5b      	ittet	pl
20002a3e:	eb01 0141 	addpl.w	r1, r1, r1, lsl #1
20002a42:	1a5b      	subpl	r3, r3, r1
		currentTask = 0;
20002a44:	2300      	movmi	r3, #0
		currentTask = (currentTask+1)%3;
20002a46:	b2db      	uxtbpl	r3, r3
20002a48:	7013      	strb	r3, [r2, #0]
	asm volatile("ldr sp, %0" : : "m" (*(TaskSPs+currentTask)));
20002a4a:	7813      	ldrb	r3, [r2, #0]
20002a4c:	f850 d023 	ldr.w	sp, [r0, r3, lsl #2]
	asm volatile("POP	{R4-R11}");
20002a50:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
}
20002a54:	4770      	bx	lr
20002a56:	bf00      	nop
20002a58:	2000a430 	.word	0x2000a430
20002a5c:	20008dc4 	.word	0x20008dc4
20002a60:	20002d68 	.word	0x20002d68
20002a64:	20008e1c 	.word	0x20008e1c
20002a68:	20008dd0 	.word	0x20008dd0

20002a6c <RTOSInit>:

void RTOSInit() {
	TaskSPs[0] = (uint32_t*)(T0Stack+(0x1000-32));
	*(uint32_t*)(T0Stack+0xFFC) = 0x1000000; //program status
	*(uint32_t*)(T0Stack+0xFF8) = TaskEntryAddrs[0]; //program counter
20002a6c:	4a20      	ldr	r2, [pc, #128]	; (20002af0 <RTOSInit+0x84>)
	TaskSPs[0] = (uint32_t*)(T0Stack+(0x1000-32));
20002a6e:	4821      	ldr	r0, [pc, #132]	; (20002af4 <RTOSInit+0x88>)
void RTOSInit() {
20002a70:	b538      	push	{r3, r4, r5, lr}
	TaskSPs[0] = (uint32_t*)(T0Stack+(0x1000-32));
20002a72:	4b21      	ldr	r3, [pc, #132]	; (20002af8 <RTOSInit+0x8c>)
	*(uint32_t*)(T0Stack+0xFF8) = TaskEntryAddrs[0]; //program counter
20002a74:	6814      	ldr	r4, [r2, #0]
20002a76:	619c      	str	r4, [r3, #24]
	*(uint32_t*)(T0Stack+0xFFC) = 0x1000000; //program status
20002a78:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	*(uint32_t*)(T0Stack+0xFF4) = TaskEntryAddrs[0]; //link register
20002a7c:	615c      	str	r4, [r3, #20]
	*(uint32_t*)(T0Stack+0xFF0) = 0; //R12
20002a7e:	2400      	movs	r4, #0
	*(uint32_t*)(T0Stack+0xFFC) = 0x1000000; //program status
20002a80:	61d9      	str	r1, [r3, #28]
	*(uint32_t*)(T0Stack+0xFF0) = 0; //R12
20002a82:	611c      	str	r4, [r3, #16]
	*(uint32_t*)(T0Stack+0xFEC) = 0; //R3
20002a84:	60dc      	str	r4, [r3, #12]
	*(uint32_t*)(T0Stack+0xFE8) = 0; //R2
20002a86:	609c      	str	r4, [r3, #8]
	*(uint32_t*)(T0Stack+0xFE4) = 0; //R1
20002a88:	605c      	str	r4, [r3, #4]
	TaskSPs[0] = (uint32_t*)(T0Stack+(0x1000-32));
20002a8a:	6003      	str	r3, [r0, #0]


	TaskSPs[1] = (uint32_t*)(T1Stack+(0x1000-64));
20002a8c:	4b1b      	ldr	r3, [pc, #108]	; (20002afc <RTOSInit+0x90>)
	*(uint32_t*)(T1Stack+0xFFC) = 0x1000000; //program status
	*(uint32_t*)(T1Stack+0xFF8) = TaskEntryAddrs[1]; //program counter
20002a8e:	6855      	ldr	r5, [r2, #4]
	*(uint32_t*)(T1Stack+0xFFC) = 0x1000000; //program status
20002a90:	63d9      	str	r1, [r3, #60]	; 0x3c
	*(uint32_t*)(T1Stack+0xFF8) = TaskEntryAddrs[1]; //program counter
20002a92:	639d      	str	r5, [r3, #56]	; 0x38
	*(uint32_t*)(T1Stack+0xFF4) = TaskEntryAddrs[1]; //link register
20002a94:	635d      	str	r5, [r3, #52]	; 0x34
	TaskSPs[1] = (uint32_t*)(T1Stack+(0x1000-64));
20002a96:	6043      	str	r3, [r0, #4]
	*(uint32_t*)(T1Stack+0xFF0) = 0; //R12
20002a98:	631c      	str	r4, [r3, #48]	; 0x30
	*(uint32_t*)(T1Stack+0xFEC) = 0; //R3
20002a9a:	62dc      	str	r4, [r3, #44]	; 0x2c
	*(uint32_t*)(T1Stack+0xFE8) = 0; //R2
20002a9c:	629c      	str	r4, [r3, #40]	; 0x28
	*(uint32_t*)(T1Stack+0xFE4) = 0; //R1
20002a9e:	625c      	str	r4, [r3, #36]	; 0x24
	*(uint32_t*)(T1Stack+0xFE0) = 0; //R4
20002aa0:	621c      	str	r4, [r3, #32]
	*(uint32_t*)(T1Stack+0xFDC) = 0; //R5
20002aa2:	61dc      	str	r4, [r3, #28]
	*(uint32_t*)(T1Stack+0xFD8) = 0; //R6
20002aa4:	619c      	str	r4, [r3, #24]
	*(uint32_t*)(T1Stack+0xFD4) = 0; //R7
20002aa6:	615c      	str	r4, [r3, #20]
	*(uint32_t*)(T1Stack+0xFD0) = 0; //R8
20002aa8:	611c      	str	r4, [r3, #16]
	*(uint32_t*)(T1Stack+0xFCC) = 0; //R9
20002aaa:	60dc      	str	r4, [r3, #12]
	*(uint32_t*)(T1Stack+0xFC8) = 0; //R10
20002aac:	609c      	str	r4, [r3, #8]
	*(uint32_t*)(T1Stack+0xFC4) = 0; //R11
20002aae:	605c      	str	r4, [r3, #4]

	TaskSPs[2] = (uint32_t*)(T2Stack+(0x1000-64));
20002ab0:	4b13      	ldr	r3, [pc, #76]	; (20002b00 <RTOSInit+0x94>)
	*(uint32_t*)(T2Stack+0xFFC) = 0x1000000; //program status
	*(uint32_t*)(T2Stack+0xFF8) = TaskEntryAddrs[2]; //program counter
20002ab2:	6892      	ldr	r2, [r2, #8]
	TaskSPs[2] = (uint32_t*)(T2Stack+(0x1000-64));
20002ab4:	6083      	str	r3, [r0, #8]
	*(uint32_t*)(T2Stack+0xFFC) = 0x1000000; //program status
20002ab6:	63d9      	str	r1, [r3, #60]	; 0x3c
	*(uint32_t*)(T2Stack+0xFF8) = TaskEntryAddrs[2]; //program counter
20002ab8:	639a      	str	r2, [r3, #56]	; 0x38
	*(uint32_t*)(T2Stack+0xFF4) = TaskEntryAddrs[2]; //link register
20002aba:	635a      	str	r2, [r3, #52]	; 0x34
	*(uint32_t*)(T2Stack+0xFC8) = 0; //R10
	*(uint32_t*)(T2Stack+0xFC4) = 0; //R11

	//zero out flash buffer
	for(uint16_t i = 0; i < FLASH_BUF_COUNT; i++) {
		flashReadyAddrs[i] = 0;
20002abc:	4621      	mov	r1, r4
	*(uint32_t*)(T2Stack+0xFF0) = 0; //R12
20002abe:	631c      	str	r4, [r3, #48]	; 0x30
		flashReadyAddrs[i] = 0;
20002ac0:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
	*(uint32_t*)(T2Stack+0xFEC) = 0; //R3
20002ac4:	62dc      	str	r4, [r3, #44]	; 0x2c
	*(uint32_t*)(T2Stack+0xFE8) = 0; //R2
20002ac6:	629c      	str	r4, [r3, #40]	; 0x28
	*(uint32_t*)(T2Stack+0xFE4) = 0; //R1
20002ac8:	625c      	str	r4, [r3, #36]	; 0x24
	*(uint32_t*)(T2Stack+0xFE0) = 0; //R4
20002aca:	621c      	str	r4, [r3, #32]
	*(uint32_t*)(T2Stack+0xFDC) = 0; //R5
20002acc:	61dc      	str	r4, [r3, #28]
	*(uint32_t*)(T2Stack+0xFD8) = 0; //R6
20002ace:	619c      	str	r4, [r3, #24]
	*(uint32_t*)(T2Stack+0xFD4) = 0; //R7
20002ad0:	615c      	str	r4, [r3, #20]
	*(uint32_t*)(T2Stack+0xFD0) = 0; //R8
20002ad2:	611c      	str	r4, [r3, #16]
	*(uint32_t*)(T2Stack+0xFCC) = 0; //R9
20002ad4:	60dc      	str	r4, [r3, #12]
	*(uint32_t*)(T2Stack+0xFC8) = 0; //R10
20002ad6:	609c      	str	r4, [r3, #8]
	*(uint32_t*)(T2Stack+0xFC4) = 0; //R11
20002ad8:	605c      	str	r4, [r3, #4]
		flashReadyAddrs[i] = 0;
20002ada:	480a      	ldr	r0, [pc, #40]	; (20002b04 <RTOSInit+0x98>)
20002adc:	f000 f8d4 	bl	20002c88 <memset>
		flashReadyCount[i] = 0;
20002ae0:	4621      	mov	r1, r4
20002ae2:	4809      	ldr	r0, [pc, #36]	; (20002b08 <RTOSInit+0x9c>)
	}
}
20002ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		flashReadyCount[i] = 0;
20002ae8:	22ff      	movs	r2, #255	; 0xff
20002aea:	f000 b8cd 	b.w	20002c88 <memset>
20002aee:	bf00      	nop
20002af0:	20002d5c 	.word	0x20002d5c
20002af4:	20008dc4 	.word	0x20008dc4
20002af8:	20003da4 	.word	0x20003da4
20002afc:	20005d84 	.word	0x20005d84
20002b00:	20007d84 	.word	0x20007d84
20002b04:	20008e44 	.word	0x20008e44
20002b08:	2000a230 	.word	0x2000a230

20002b0c <main>:
{  
20002b0c:	b500      	push	{lr}
20002b0e:	b089      	sub	sp, #36	; 0x24
	TinyBLInit();
20002b10:	f7ff fe6e 	bl	200027f0 <TinyBLInit>
	__HAL_RCC_GPIOB_CLK_ENABLE();
20002b14:	2500      	movs	r5, #0
20002b16:	4b22      	ldr	r3, [pc, #136]	; (20002ba0 <main+0x94>)
20002b18:	9500      	str	r5, [sp, #0]
20002b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20002b1c:	4821      	ldr	r0, [pc, #132]	; (20002ba4 <main+0x98>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
20002b1e:	f042 0202 	orr.w	r2, r2, #2
20002b22:	631a      	str	r2, [r3, #48]	; 0x30
20002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
20002b26:	9505      	str	r5, [sp, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
20002b28:	f003 0302 	and.w	r3, r3, #2
	GPIO_InitStruct.Pin = GPIO_PIN_0;
20002b2c:	2401      	movs	r4, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
20002b2e:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
20002b30:	2602      	movs	r6, #2
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20002b32:	a903      	add	r1, sp, #12
	__HAL_RCC_GPIOB_CLK_ENABLE();
20002b34:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
20002b36:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20002b38:	e9cd 4403 	strd	r4, r4, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20002b3c:	f7fe ffd0 	bl	20001ae0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
20002b40:	462a      	mov	r2, r5
20002b42:	4621      	mov	r1, r4
20002b44:	4817      	ldr	r0, [pc, #92]	; (20002ba4 <main+0x98>)
20002b46:	f7ff f89f 	bl	20001c88 <HAL_GPIO_WritePin>
	BSP_LED_Init(LED1);
20002b4a:	4628      	mov	r0, r5
20002b4c:	f7fe fcd8 	bl	20001500 <BSP_LED_Init>
	BSP_LED_Init(LED2);
20002b50:	4620      	mov	r0, r4
20002b52:	f7fe fcd5 	bl	20001500 <BSP_LED_Init>
	BSP_LED_Init(LED3);
20002b56:	4630      	mov	r0, r6
	htim7.Instance = TIM7;
20002b58:	4c13      	ldr	r4, [pc, #76]	; (20002ba8 <main+0x9c>)
	BSP_LED_Init(LED3);
20002b5a:	f7fe fcd1 	bl	20001500 <BSP_LED_Init>
	RTOSInit();
20002b5e:	f7ff ff85 	bl	20002a6c <RTOSInit>
	htim7.Init.Prescaler = 179;//was 17999 for 1s
20002b62:	4a12      	ldr	r2, [pc, #72]	; (20002bac <main+0xa0>)
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
20002b64:	60a5      	str	r5, [r4, #8]
	htim7.Init.Prescaler = 179;//was 17999 for 1s
20002b66:	23b3      	movs	r3, #179	; 0xb3
20002b68:	e9c4 2300 	strd	r2, r3, [r4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
20002b6c:	4620      	mov	r0, r4
	htim7.Init.Period = 49; //was 4999 for 1s
20002b6e:	2331      	movs	r3, #49	; 0x31
	TIM_MasterConfigTypeDef sMasterConfig = {0};
20002b70:	e9cd 5501 	strd	r5, r5, [sp, #4]
	htim7.Init.Period = 49; //was 4999 for 1s
20002b74:	60e3      	str	r3, [r4, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
20002b76:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
20002b78:	f7ff fc06 	bl	20002388 <HAL_TIM_Base_Init>
20002b7c:	b100      	cbz	r0, 20002b80 <main+0x74>
		for(;;);
20002b7e:	e7fe      	b.n	20002b7e <main+0x72>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
20002b80:	e9cd 0001 	strd	r0, r0, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
20002b84:	a901      	add	r1, sp, #4
20002b86:	4620      	mov	r0, r4
20002b88:	f7ff fc2a 	bl	200023e0 <HAL_TIMEx_MasterConfigSynchronization>
20002b8c:	b100      	cbz	r0, 20002b90 <main+0x84>
		for(;;);
20002b8e:	e7fe      	b.n	20002b8e <main+0x82>
	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_SR_UIF);
20002b90:	6823      	ldr	r3, [r4, #0]
20002b92:	f06f 0201 	mvn.w	r2, #1
20002b96:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim7);
20002b98:	4620      	mov	r0, r4
20002b9a:	f7ff fb4f 	bl	2000223c <HAL_TIM_Base_Start_IT>
	for(;;); //infinite loop
20002b9e:	e7fe      	b.n	20002b9e <main+0x92>
20002ba0:	40023800 	.word	0x40023800
20002ba4:	40020400 	.word	0x40020400
20002ba8:	2000a430 	.word	0x2000a430
20002bac:	40001400 	.word	0x40001400

20002bb0 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
20002bb0:	b510      	push	{r4, lr}
20002bb2:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
20002bb4:	4b1c      	ldr	r3, [pc, #112]	; (20002c28 <HAL_UART_MspInit+0x78>)
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
20002bb6:	481d      	ldr	r0, [pc, #116]	; (20002c2c <HAL_UART_MspInit+0x7c>)
  USARTx_TX_GPIO_CLK_ENABLE();
20002bb8:	2200      	movs	r2, #0
20002bba:	9200      	str	r2, [sp, #0]
20002bbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
20002bbe:	f041 0108 	orr.w	r1, r1, #8
20002bc2:	6319      	str	r1, [r3, #48]	; 0x30
20002bc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
20002bc6:	f001 0108 	and.w	r1, r1, #8
20002bca:	9100      	str	r1, [sp, #0]
20002bcc:	9900      	ldr	r1, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
20002bce:	9201      	str	r2, [sp, #4]
20002bd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
20002bd2:	f041 0108 	orr.w	r1, r1, #8
20002bd6:	6319      	str	r1, [r3, #48]	; 0x30
20002bd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
20002bda:	f001 0108 	and.w	r1, r1, #8
20002bde:	9101      	str	r1, [sp, #4]
20002be0:	9901      	ldr	r1, [sp, #4]
  USARTx_CLK_ENABLE();
20002be2:	9202      	str	r2, [sp, #8]
20002be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20002be6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
20002bea:	641a      	str	r2, [r3, #64]	; 0x40
20002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20002bf2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
20002bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
  USARTx_CLK_ENABLE();
20002bf8:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
20002bfa:	2302      	movs	r3, #2
20002bfc:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
20002c00:	2101      	movs	r1, #1
20002c02:	2303      	movs	r3, #3
20002c04:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
20002c08:	2407      	movs	r4, #7
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
20002c0a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
20002c0c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
20002c0e:	f7fe ff67 	bl	20001ae0 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
20002c12:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
20002c16:	4805      	ldr	r0, [pc, #20]	; (20002c2c <HAL_UART_MspInit+0x7c>)
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
20002c18:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
20002c1a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
20002c1c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
20002c1e:	f7fe ff5f 	bl	20001ae0 <HAL_GPIO_Init>
}
20002c22:	b008      	add	sp, #32
20002c24:	bd10      	pop	{r4, pc}
20002c26:	bf00      	nop
20002c28:	40023800 	.word	0x40023800
20002c2c:	40020c00 	.word	0x40020c00

20002c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
20002c30:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM7)
20002c32:	4b0f      	ldr	r3, [pc, #60]	; (20002c70 <HAL_TIM_Base_MspInit+0x40>)
20002c34:	6802      	ldr	r2, [r0, #0]
20002c36:	429a      	cmp	r2, r3
20002c38:	d116      	bne.n	20002c68 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
20002c3a:	2200      	movs	r2, #0
20002c3c:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
20002c40:	9201      	str	r2, [sp, #4]
20002c42:	6c19      	ldr	r1, [r3, #64]	; 0x40
20002c44:	f041 0120 	orr.w	r1, r1, #32
20002c48:	6419      	str	r1, [r3, #64]	; 0x40
20002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002c4c:	f003 0320 	and.w	r3, r3, #32
20002c50:	9301      	str	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
20002c52:	4611      	mov	r1, r2
20002c54:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
20002c56:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
20002c58:	f7fe fd42 	bl	200016e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
20002c5c:	2037      	movs	r0, #55	; 0x37
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
20002c5e:	b003      	add	sp, #12
20002c60:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
20002c64:	f7fe bd6e 	b.w	20001744 <HAL_NVIC_EnableIRQ>
}
20002c68:	b003      	add	sp, #12
20002c6a:	f85d fb04 	ldr.w	pc, [sp], #4
20002c6e:	bf00      	nop
20002c70:	40001400 	.word	0x40001400

20002c74 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
20002c74:	4770      	bx	lr

20002c76 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
20002c76:	e7fe      	b.n	20002c76 <HardFault_Handler>

20002c78 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
20002c78:	e7fe      	b.n	20002c78 <MemManage_Handler>

20002c7a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
20002c7a:	e7fe      	b.n	20002c7a <BusFault_Handler>

20002c7c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
20002c7c:	e7fe      	b.n	20002c7c <UsageFault_Handler>

20002c7e <SVC_Handler>:
20002c7e:	4770      	bx	lr

20002c80 <DebugMon_Handler>:
20002c80:	4770      	bx	lr

20002c82 <PendSV_Handler>:
20002c82:	4770      	bx	lr

20002c84 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
20002c84:	f7fe bcf4 	b.w	20001670 <HAL_IncTick>

20002c88 <memset>:
20002c88:	4402      	add	r2, r0
20002c8a:	4603      	mov	r3, r0
20002c8c:	4293      	cmp	r3, r2
20002c8e:	d100      	bne.n	20002c92 <memset+0xa>
20002c90:	4770      	bx	lr
20002c92:	f803 1b01 	strb.w	r1, [r3], #1
20002c96:	e7f9      	b.n	20002c8c <memset+0x4>

20002c98 <__libc_init_array>:
20002c98:	b570      	push	{r4, r5, r6, lr}
20002c9a:	4d0d      	ldr	r5, [pc, #52]	; (20002cd0 <__libc_init_array+0x38>)
20002c9c:	4c0d      	ldr	r4, [pc, #52]	; (20002cd4 <__libc_init_array+0x3c>)
20002c9e:	1b64      	subs	r4, r4, r5
20002ca0:	10a4      	asrs	r4, r4, #2
20002ca2:	2600      	movs	r6, #0
20002ca4:	42a6      	cmp	r6, r4
20002ca6:	d109      	bne.n	20002cbc <__libc_init_array+0x24>
20002ca8:	4d0b      	ldr	r5, [pc, #44]	; (20002cd8 <__libc_init_array+0x40>)
20002caa:	4c0c      	ldr	r4, [pc, #48]	; (20002cdc <__libc_init_array+0x44>)
20002cac:	f000 f826 	bl	20002cfc <_init>
20002cb0:	1b64      	subs	r4, r4, r5
20002cb2:	10a4      	asrs	r4, r4, #2
20002cb4:	2600      	movs	r6, #0
20002cb6:	42a6      	cmp	r6, r4
20002cb8:	d105      	bne.n	20002cc6 <__libc_init_array+0x2e>
20002cba:	bd70      	pop	{r4, r5, r6, pc}
20002cbc:	f855 3b04 	ldr.w	r3, [r5], #4
20002cc0:	4798      	blx	r3
20002cc2:	3601      	adds	r6, #1
20002cc4:	e7ee      	b.n	20002ca4 <__libc_init_array+0xc>
20002cc6:	f855 3b04 	ldr.w	r3, [r5], #4
20002cca:	4798      	blx	r3
20002ccc:	3601      	adds	r6, #1
20002cce:	e7f2      	b.n	20002cb6 <__libc_init_array+0x1e>
20002cd0:	20002d3c 	.word	0x20002d3c
20002cd4:	20002d3c 	.word	0x20002d3c
20002cd8:	20002d3c 	.word	0x20002d3c
20002cdc:	20002d40 	.word	0x20002d40

20002ce0 <memcpy>:
20002ce0:	440a      	add	r2, r1
20002ce2:	4291      	cmp	r1, r2
20002ce4:	f100 33ff 	add.w	r3, r0, #4294967295
20002ce8:	d100      	bne.n	20002cec <memcpy+0xc>
20002cea:	4770      	bx	lr
20002cec:	b510      	push	{r4, lr}
20002cee:	f811 4b01 	ldrb.w	r4, [r1], #1
20002cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
20002cf6:	4291      	cmp	r1, r2
20002cf8:	d1f9      	bne.n	20002cee <memcpy+0xe>
20002cfa:	bd10      	pop	{r4, pc}

20002cfc <_init>:
20002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002cfe:	bf00      	nop
20002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002d02:	bc08      	pop	{r3}
20002d04:	469e      	mov	lr, r3
20002d06:	4770      	bx	lr

20002d08 <_fini>:
20002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002d0a:	bf00      	nop
20002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002d0e:	bc08      	pop	{r3}
20002d10:	469e      	mov	lr, r3
20002d12:	4770      	bx	lr
