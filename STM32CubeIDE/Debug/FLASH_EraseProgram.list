
FLASH_EraseProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  20001000  20001000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028f8  200011c4  200011c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  20003abc  20003abc  00003abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20003b10  20003b10  00003b38  2**0
                  CONTENTS
  4 .ARM          00000008  20003b10  20003b10  00003b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20003b18  20003b38  00003b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20003b18  20003b18  00003b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  20003b1c  20003b1c  00003b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20003b20  20003b20  00003b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20003b38  20003b38  00003b38  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c70  20003c70  00003b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003b38  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00003b68  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093a6  00000000  00000000  00003bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c36  00000000  00000000  0000cf51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0000eb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000694  00000000  00000000  0000f400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021656  00000000  00000000  0000fa94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b0be  00000000  00000000  000310ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb191  00000000  00000000  0003c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000216c  00000000  00000000  0010733c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001094a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200011c4 <__do_global_dtors_aux>:
200011c4:	b510      	push	{r4, lr}
200011c6:	4c05      	ldr	r4, [pc, #20]	; (200011dc <__do_global_dtors_aux+0x18>)
200011c8:	7823      	ldrb	r3, [r4, #0]
200011ca:	b933      	cbnz	r3, 200011da <__do_global_dtors_aux+0x16>
200011cc:	4b04      	ldr	r3, [pc, #16]	; (200011e0 <__do_global_dtors_aux+0x1c>)
200011ce:	b113      	cbz	r3, 200011d6 <__do_global_dtors_aux+0x12>
200011d0:	4804      	ldr	r0, [pc, #16]	; (200011e4 <__do_global_dtors_aux+0x20>)
200011d2:	f3af 8000 	nop.w
200011d6:	2301      	movs	r3, #1
200011d8:	7023      	strb	r3, [r4, #0]
200011da:	bd10      	pop	{r4, pc}
200011dc:	20003b38 	.word	0x20003b38
200011e0:	00000000 	.word	0x00000000
200011e4:	20003aa4 	.word	0x20003aa4

200011e8 <frame_dummy>:
200011e8:	b508      	push	{r3, lr}
200011ea:	4b03      	ldr	r3, [pc, #12]	; (200011f8 <frame_dummy+0x10>)
200011ec:	b11b      	cbz	r3, 200011f6 <frame_dummy+0xe>
200011ee:	4903      	ldr	r1, [pc, #12]	; (200011fc <frame_dummy+0x14>)
200011f0:	4803      	ldr	r0, [pc, #12]	; (20001200 <frame_dummy+0x18>)
200011f2:	f3af 8000 	nop.w
200011f6:	bd08      	pop	{r3, pc}
200011f8:	00000000 	.word	0x00000000
200011fc:	20003b3c 	.word	0x20003b3c
20001200:	20003aa4 	.word	0x20003aa4

20001204 <__aeabi_uldivmod>:
20001204:	b953      	cbnz	r3, 2000121c <__aeabi_uldivmod+0x18>
20001206:	b94a      	cbnz	r2, 2000121c <__aeabi_uldivmod+0x18>
20001208:	2900      	cmp	r1, #0
2000120a:	bf08      	it	eq
2000120c:	2800      	cmpeq	r0, #0
2000120e:	bf1c      	itt	ne
20001210:	f04f 31ff 	movne.w	r1, #4294967295
20001214:	f04f 30ff 	movne.w	r0, #4294967295
20001218:	f000 b970 	b.w	200014fc <__aeabi_idiv0>
2000121c:	f1ad 0c08 	sub.w	ip, sp, #8
20001220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20001224:	f000 f806 	bl	20001234 <__udivmoddi4>
20001228:	f8dd e004 	ldr.w	lr, [sp, #4]
2000122c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20001230:	b004      	add	sp, #16
20001232:	4770      	bx	lr

20001234 <__udivmoddi4>:
20001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20001238:	9e08      	ldr	r6, [sp, #32]
2000123a:	460d      	mov	r5, r1
2000123c:	4604      	mov	r4, r0
2000123e:	460f      	mov	r7, r1
20001240:	2b00      	cmp	r3, #0
20001242:	d14a      	bne.n	200012da <__udivmoddi4+0xa6>
20001244:	428a      	cmp	r2, r1
20001246:	4694      	mov	ip, r2
20001248:	d965      	bls.n	20001316 <__udivmoddi4+0xe2>
2000124a:	fab2 f382 	clz	r3, r2
2000124e:	b143      	cbz	r3, 20001262 <__udivmoddi4+0x2e>
20001250:	fa02 fc03 	lsl.w	ip, r2, r3
20001254:	f1c3 0220 	rsb	r2, r3, #32
20001258:	409f      	lsls	r7, r3
2000125a:	fa20 f202 	lsr.w	r2, r0, r2
2000125e:	4317      	orrs	r7, r2
20001260:	409c      	lsls	r4, r3
20001262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
20001266:	fa1f f58c 	uxth.w	r5, ip
2000126a:	fbb7 f1fe 	udiv	r1, r7, lr
2000126e:	0c22      	lsrs	r2, r4, #16
20001270:	fb0e 7711 	mls	r7, lr, r1, r7
20001274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
20001278:	fb01 f005 	mul.w	r0, r1, r5
2000127c:	4290      	cmp	r0, r2
2000127e:	d90a      	bls.n	20001296 <__udivmoddi4+0x62>
20001280:	eb1c 0202 	adds.w	r2, ip, r2
20001284:	f101 37ff 	add.w	r7, r1, #4294967295
20001288:	f080 811c 	bcs.w	200014c4 <__udivmoddi4+0x290>
2000128c:	4290      	cmp	r0, r2
2000128e:	f240 8119 	bls.w	200014c4 <__udivmoddi4+0x290>
20001292:	3902      	subs	r1, #2
20001294:	4462      	add	r2, ip
20001296:	1a12      	subs	r2, r2, r0
20001298:	b2a4      	uxth	r4, r4
2000129a:	fbb2 f0fe 	udiv	r0, r2, lr
2000129e:	fb0e 2210 	mls	r2, lr, r0, r2
200012a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
200012a6:	fb00 f505 	mul.w	r5, r0, r5
200012aa:	42a5      	cmp	r5, r4
200012ac:	d90a      	bls.n	200012c4 <__udivmoddi4+0x90>
200012ae:	eb1c 0404 	adds.w	r4, ip, r4
200012b2:	f100 32ff 	add.w	r2, r0, #4294967295
200012b6:	f080 8107 	bcs.w	200014c8 <__udivmoddi4+0x294>
200012ba:	42a5      	cmp	r5, r4
200012bc:	f240 8104 	bls.w	200014c8 <__udivmoddi4+0x294>
200012c0:	4464      	add	r4, ip
200012c2:	3802      	subs	r0, #2
200012c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
200012c8:	1b64      	subs	r4, r4, r5
200012ca:	2100      	movs	r1, #0
200012cc:	b11e      	cbz	r6, 200012d6 <__udivmoddi4+0xa2>
200012ce:	40dc      	lsrs	r4, r3
200012d0:	2300      	movs	r3, #0
200012d2:	e9c6 4300 	strd	r4, r3, [r6]
200012d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200012da:	428b      	cmp	r3, r1
200012dc:	d908      	bls.n	200012f0 <__udivmoddi4+0xbc>
200012de:	2e00      	cmp	r6, #0
200012e0:	f000 80ed 	beq.w	200014be <__udivmoddi4+0x28a>
200012e4:	2100      	movs	r1, #0
200012e6:	e9c6 0500 	strd	r0, r5, [r6]
200012ea:	4608      	mov	r0, r1
200012ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200012f0:	fab3 f183 	clz	r1, r3
200012f4:	2900      	cmp	r1, #0
200012f6:	d149      	bne.n	2000138c <__udivmoddi4+0x158>
200012f8:	42ab      	cmp	r3, r5
200012fa:	d302      	bcc.n	20001302 <__udivmoddi4+0xce>
200012fc:	4282      	cmp	r2, r0
200012fe:	f200 80f8 	bhi.w	200014f2 <__udivmoddi4+0x2be>
20001302:	1a84      	subs	r4, r0, r2
20001304:	eb65 0203 	sbc.w	r2, r5, r3
20001308:	2001      	movs	r0, #1
2000130a:	4617      	mov	r7, r2
2000130c:	2e00      	cmp	r6, #0
2000130e:	d0e2      	beq.n	200012d6 <__udivmoddi4+0xa2>
20001310:	e9c6 4700 	strd	r4, r7, [r6]
20001314:	e7df      	b.n	200012d6 <__udivmoddi4+0xa2>
20001316:	b902      	cbnz	r2, 2000131a <__udivmoddi4+0xe6>
20001318:	deff      	udf	#255	; 0xff
2000131a:	fab2 f382 	clz	r3, r2
2000131e:	2b00      	cmp	r3, #0
20001320:	f040 8090 	bne.w	20001444 <__udivmoddi4+0x210>
20001324:	1a8a      	subs	r2, r1, r2
20001326:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000132a:	fa1f fe8c 	uxth.w	lr, ip
2000132e:	2101      	movs	r1, #1
20001330:	fbb2 f5f7 	udiv	r5, r2, r7
20001334:	fb07 2015 	mls	r0, r7, r5, r2
20001338:	0c22      	lsrs	r2, r4, #16
2000133a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
2000133e:	fb0e f005 	mul.w	r0, lr, r5
20001342:	4290      	cmp	r0, r2
20001344:	d908      	bls.n	20001358 <__udivmoddi4+0x124>
20001346:	eb1c 0202 	adds.w	r2, ip, r2
2000134a:	f105 38ff 	add.w	r8, r5, #4294967295
2000134e:	d202      	bcs.n	20001356 <__udivmoddi4+0x122>
20001350:	4290      	cmp	r0, r2
20001352:	f200 80cb 	bhi.w	200014ec <__udivmoddi4+0x2b8>
20001356:	4645      	mov	r5, r8
20001358:	1a12      	subs	r2, r2, r0
2000135a:	b2a4      	uxth	r4, r4
2000135c:	fbb2 f0f7 	udiv	r0, r2, r7
20001360:	fb07 2210 	mls	r2, r7, r0, r2
20001364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
20001368:	fb0e fe00 	mul.w	lr, lr, r0
2000136c:	45a6      	cmp	lr, r4
2000136e:	d908      	bls.n	20001382 <__udivmoddi4+0x14e>
20001370:	eb1c 0404 	adds.w	r4, ip, r4
20001374:	f100 32ff 	add.w	r2, r0, #4294967295
20001378:	d202      	bcs.n	20001380 <__udivmoddi4+0x14c>
2000137a:	45a6      	cmp	lr, r4
2000137c:	f200 80bb 	bhi.w	200014f6 <__udivmoddi4+0x2c2>
20001380:	4610      	mov	r0, r2
20001382:	eba4 040e 	sub.w	r4, r4, lr
20001386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
2000138a:	e79f      	b.n	200012cc <__udivmoddi4+0x98>
2000138c:	f1c1 0720 	rsb	r7, r1, #32
20001390:	408b      	lsls	r3, r1
20001392:	fa22 fc07 	lsr.w	ip, r2, r7
20001396:	ea4c 0c03 	orr.w	ip, ip, r3
2000139a:	fa05 f401 	lsl.w	r4, r5, r1
2000139e:	fa20 f307 	lsr.w	r3, r0, r7
200013a2:	40fd      	lsrs	r5, r7
200013a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
200013a8:	4323      	orrs	r3, r4
200013aa:	fbb5 f8f9 	udiv	r8, r5, r9
200013ae:	fa1f fe8c 	uxth.w	lr, ip
200013b2:	fb09 5518 	mls	r5, r9, r8, r5
200013b6:	0c1c      	lsrs	r4, r3, #16
200013b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
200013bc:	fb08 f50e 	mul.w	r5, r8, lr
200013c0:	42a5      	cmp	r5, r4
200013c2:	fa02 f201 	lsl.w	r2, r2, r1
200013c6:	fa00 f001 	lsl.w	r0, r0, r1
200013ca:	d90b      	bls.n	200013e4 <__udivmoddi4+0x1b0>
200013cc:	eb1c 0404 	adds.w	r4, ip, r4
200013d0:	f108 3aff 	add.w	sl, r8, #4294967295
200013d4:	f080 8088 	bcs.w	200014e8 <__udivmoddi4+0x2b4>
200013d8:	42a5      	cmp	r5, r4
200013da:	f240 8085 	bls.w	200014e8 <__udivmoddi4+0x2b4>
200013de:	f1a8 0802 	sub.w	r8, r8, #2
200013e2:	4464      	add	r4, ip
200013e4:	1b64      	subs	r4, r4, r5
200013e6:	b29d      	uxth	r5, r3
200013e8:	fbb4 f3f9 	udiv	r3, r4, r9
200013ec:	fb09 4413 	mls	r4, r9, r3, r4
200013f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
200013f4:	fb03 fe0e 	mul.w	lr, r3, lr
200013f8:	45a6      	cmp	lr, r4
200013fa:	d908      	bls.n	2000140e <__udivmoddi4+0x1da>
200013fc:	eb1c 0404 	adds.w	r4, ip, r4
20001400:	f103 35ff 	add.w	r5, r3, #4294967295
20001404:	d26c      	bcs.n	200014e0 <__udivmoddi4+0x2ac>
20001406:	45a6      	cmp	lr, r4
20001408:	d96a      	bls.n	200014e0 <__udivmoddi4+0x2ac>
2000140a:	3b02      	subs	r3, #2
2000140c:	4464      	add	r4, ip
2000140e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
20001412:	fba3 9502 	umull	r9, r5, r3, r2
20001416:	eba4 040e 	sub.w	r4, r4, lr
2000141a:	42ac      	cmp	r4, r5
2000141c:	46c8      	mov	r8, r9
2000141e:	46ae      	mov	lr, r5
20001420:	d356      	bcc.n	200014d0 <__udivmoddi4+0x29c>
20001422:	d053      	beq.n	200014cc <__udivmoddi4+0x298>
20001424:	b156      	cbz	r6, 2000143c <__udivmoddi4+0x208>
20001426:	ebb0 0208 	subs.w	r2, r0, r8
2000142a:	eb64 040e 	sbc.w	r4, r4, lr
2000142e:	fa04 f707 	lsl.w	r7, r4, r7
20001432:	40ca      	lsrs	r2, r1
20001434:	40cc      	lsrs	r4, r1
20001436:	4317      	orrs	r7, r2
20001438:	e9c6 7400 	strd	r7, r4, [r6]
2000143c:	4618      	mov	r0, r3
2000143e:	2100      	movs	r1, #0
20001440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20001444:	f1c3 0120 	rsb	r1, r3, #32
20001448:	fa02 fc03 	lsl.w	ip, r2, r3
2000144c:	fa20 f201 	lsr.w	r2, r0, r1
20001450:	fa25 f101 	lsr.w	r1, r5, r1
20001454:	409d      	lsls	r5, r3
20001456:	432a      	orrs	r2, r5
20001458:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000145c:	fa1f fe8c 	uxth.w	lr, ip
20001460:	fbb1 f0f7 	udiv	r0, r1, r7
20001464:	fb07 1510 	mls	r5, r7, r0, r1
20001468:	0c11      	lsrs	r1, r2, #16
2000146a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
2000146e:	fb00 f50e 	mul.w	r5, r0, lr
20001472:	428d      	cmp	r5, r1
20001474:	fa04 f403 	lsl.w	r4, r4, r3
20001478:	d908      	bls.n	2000148c <__udivmoddi4+0x258>
2000147a:	eb1c 0101 	adds.w	r1, ip, r1
2000147e:	f100 38ff 	add.w	r8, r0, #4294967295
20001482:	d22f      	bcs.n	200014e4 <__udivmoddi4+0x2b0>
20001484:	428d      	cmp	r5, r1
20001486:	d92d      	bls.n	200014e4 <__udivmoddi4+0x2b0>
20001488:	3802      	subs	r0, #2
2000148a:	4461      	add	r1, ip
2000148c:	1b49      	subs	r1, r1, r5
2000148e:	b292      	uxth	r2, r2
20001490:	fbb1 f5f7 	udiv	r5, r1, r7
20001494:	fb07 1115 	mls	r1, r7, r5, r1
20001498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
2000149c:	fb05 f10e 	mul.w	r1, r5, lr
200014a0:	4291      	cmp	r1, r2
200014a2:	d908      	bls.n	200014b6 <__udivmoddi4+0x282>
200014a4:	eb1c 0202 	adds.w	r2, ip, r2
200014a8:	f105 38ff 	add.w	r8, r5, #4294967295
200014ac:	d216      	bcs.n	200014dc <__udivmoddi4+0x2a8>
200014ae:	4291      	cmp	r1, r2
200014b0:	d914      	bls.n	200014dc <__udivmoddi4+0x2a8>
200014b2:	3d02      	subs	r5, #2
200014b4:	4462      	add	r2, ip
200014b6:	1a52      	subs	r2, r2, r1
200014b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
200014bc:	e738      	b.n	20001330 <__udivmoddi4+0xfc>
200014be:	4631      	mov	r1, r6
200014c0:	4630      	mov	r0, r6
200014c2:	e708      	b.n	200012d6 <__udivmoddi4+0xa2>
200014c4:	4639      	mov	r1, r7
200014c6:	e6e6      	b.n	20001296 <__udivmoddi4+0x62>
200014c8:	4610      	mov	r0, r2
200014ca:	e6fb      	b.n	200012c4 <__udivmoddi4+0x90>
200014cc:	4548      	cmp	r0, r9
200014ce:	d2a9      	bcs.n	20001424 <__udivmoddi4+0x1f0>
200014d0:	ebb9 0802 	subs.w	r8, r9, r2
200014d4:	eb65 0e0c 	sbc.w	lr, r5, ip
200014d8:	3b01      	subs	r3, #1
200014da:	e7a3      	b.n	20001424 <__udivmoddi4+0x1f0>
200014dc:	4645      	mov	r5, r8
200014de:	e7ea      	b.n	200014b6 <__udivmoddi4+0x282>
200014e0:	462b      	mov	r3, r5
200014e2:	e794      	b.n	2000140e <__udivmoddi4+0x1da>
200014e4:	4640      	mov	r0, r8
200014e6:	e7d1      	b.n	2000148c <__udivmoddi4+0x258>
200014e8:	46d0      	mov	r8, sl
200014ea:	e77b      	b.n	200013e4 <__udivmoddi4+0x1b0>
200014ec:	3d02      	subs	r5, #2
200014ee:	4462      	add	r2, ip
200014f0:	e732      	b.n	20001358 <__udivmoddi4+0x124>
200014f2:	4608      	mov	r0, r1
200014f4:	e70a      	b.n	2000130c <__udivmoddi4+0xd8>
200014f6:	4464      	add	r4, ip
200014f8:	3802      	subs	r0, #2
200014fa:	e742      	b.n	20001382 <__udivmoddi4+0x14e>

200014fc <__aeabi_idiv0>:
200014fc:	4770      	bx	lr
200014fe:	bf00      	nop

20001500 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
20001500:	b580      	push	{r7, lr}
20001502:	b08a      	sub	sp, #40	; 0x28
20001504:	af00      	add	r7, sp, #0
20001506:	4603      	mov	r3, r0
20001508:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
2000150a:	79fb      	ldrb	r3, [r7, #7]
2000150c:	2b00      	cmp	r3, #0
2000150e:	d10e      	bne.n	2000152e <BSP_LED_Init+0x2e>
20001510:	2300      	movs	r3, #0
20001512:	613b      	str	r3, [r7, #16]
20001514:	4b1f      	ldr	r3, [pc, #124]	; (20001594 <BSP_LED_Init+0x94>)
20001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001518:	4a1e      	ldr	r2, [pc, #120]	; (20001594 <BSP_LED_Init+0x94>)
2000151a:	f043 0302 	orr.w	r3, r3, #2
2000151e:	6313      	str	r3, [r2, #48]	; 0x30
20001520:	4b1c      	ldr	r3, [pc, #112]	; (20001594 <BSP_LED_Init+0x94>)
20001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001524:	f003 0302 	and.w	r3, r3, #2
20001528:	613b      	str	r3, [r7, #16]
2000152a:	693b      	ldr	r3, [r7, #16]
2000152c:	e00d      	b.n	2000154a <BSP_LED_Init+0x4a>
2000152e:	2300      	movs	r3, #0
20001530:	60fb      	str	r3, [r7, #12]
20001532:	4b18      	ldr	r3, [pc, #96]	; (20001594 <BSP_LED_Init+0x94>)
20001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001536:	4a17      	ldr	r2, [pc, #92]	; (20001594 <BSP_LED_Init+0x94>)
20001538:	f043 0302 	orr.w	r3, r3, #2
2000153c:	6313      	str	r3, [r2, #48]	; 0x30
2000153e:	4b15      	ldr	r3, [pc, #84]	; (20001594 <BSP_LED_Init+0x94>)
20001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001542:	f003 0302 	and.w	r3, r3, #2
20001546:	60fb      	str	r3, [r7, #12]
20001548:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
2000154a:	79fb      	ldrb	r3, [r7, #7]
2000154c:	4a12      	ldr	r2, [pc, #72]	; (20001598 <BSP_LED_Init+0x98>)
2000154e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
20001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20001554:	2301      	movs	r3, #1
20001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20001558:	2300      	movs	r3, #0
2000155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
2000155c:	2302      	movs	r3, #2
2000155e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
20001560:	79fb      	ldrb	r3, [r7, #7]
20001562:	4a0e      	ldr	r2, [pc, #56]	; (2000159c <BSP_LED_Init+0x9c>)
20001564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20001568:	f107 0214 	add.w	r2, r7, #20
2000156c:	4611      	mov	r1, r2
2000156e:	4618      	mov	r0, r3
20001570:	f000 fce8 	bl	20001f44 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
20001574:	79fb      	ldrb	r3, [r7, #7]
20001576:	4a09      	ldr	r2, [pc, #36]	; (2000159c <BSP_LED_Init+0x9c>)
20001578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
2000157c:	79fb      	ldrb	r3, [r7, #7]
2000157e:	4a06      	ldr	r2, [pc, #24]	; (20001598 <BSP_LED_Init+0x98>)
20001580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
20001584:	2200      	movs	r2, #0
20001586:	4619      	mov	r1, r3
20001588:	f000 fe70 	bl	2000226c <HAL_GPIO_WritePin>
}
2000158c:	bf00      	nop
2000158e:	3728      	adds	r7, #40	; 0x28
20001590:	46bd      	mov	sp, r7
20001592:	bd80      	pop	{r7, pc}
20001594:	40023800 	.word	0x40023800
20001598:	20003af0 	.word	0x20003af0
2000159c:	20003b20 	.word	0x20003b20

200015a0 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
200015a0:	b580      	push	{r7, lr}
200015a2:	b082      	sub	sp, #8
200015a4:	af00      	add	r7, sp, #0
200015a6:	4603      	mov	r3, r0
200015a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
200015aa:	79fb      	ldrb	r3, [r7, #7]
200015ac:	4a07      	ldr	r2, [pc, #28]	; (200015cc <BSP_LED_On+0x2c>)
200015ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
200015b2:	79fb      	ldrb	r3, [r7, #7]
200015b4:	4a06      	ldr	r2, [pc, #24]	; (200015d0 <BSP_LED_On+0x30>)
200015b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
200015ba:	2201      	movs	r2, #1
200015bc:	4619      	mov	r1, r3
200015be:	f000 fe55 	bl	2000226c <HAL_GPIO_WritePin>
}
200015c2:	bf00      	nop
200015c4:	3708      	adds	r7, #8
200015c6:	46bd      	mov	sp, r7
200015c8:	bd80      	pop	{r7, pc}
200015ca:	bf00      	nop
200015cc:	20003b20 	.word	0x20003b20
200015d0:	20003af0 	.word	0x20003af0

200015d4 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
200015d4:	b580      	push	{r7, lr}
200015d6:	b082      	sub	sp, #8
200015d8:	af00      	add	r7, sp, #0
200015da:	4603      	mov	r3, r0
200015dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
200015de:	79fb      	ldrb	r3, [r7, #7]
200015e0:	4a07      	ldr	r2, [pc, #28]	; (20001600 <BSP_LED_Off+0x2c>)
200015e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
200015e6:	79fb      	ldrb	r3, [r7, #7]
200015e8:	4a06      	ldr	r2, [pc, #24]	; (20001604 <BSP_LED_Off+0x30>)
200015ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
200015ee:	2200      	movs	r2, #0
200015f0:	4619      	mov	r1, r3
200015f2:	f000 fe3b 	bl	2000226c <HAL_GPIO_WritePin>
}
200015f6:	bf00      	nop
200015f8:	3708      	adds	r7, #8
200015fa:	46bd      	mov	sp, r7
200015fc:	bd80      	pop	{r7, pc}
200015fe:	bf00      	nop
20001600:	20003b20 	.word	0x20003b20
20001604:	20003af0 	.word	0x20003af0

20001608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20001608:	b480      	push	{r7}
2000160a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
2000160c:	4b16      	ldr	r3, [pc, #88]	; (20001668 <SystemInit+0x60>)
2000160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20001612:	4a15      	ldr	r2, [pc, #84]	; (20001668 <SystemInit+0x60>)
20001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
2000161c:	4b13      	ldr	r3, [pc, #76]	; (2000166c <SystemInit+0x64>)
2000161e:	681b      	ldr	r3, [r3, #0]
20001620:	4a12      	ldr	r2, [pc, #72]	; (2000166c <SystemInit+0x64>)
20001622:	f043 0301 	orr.w	r3, r3, #1
20001626:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20001628:	4b10      	ldr	r3, [pc, #64]	; (2000166c <SystemInit+0x64>)
2000162a:	2200      	movs	r2, #0
2000162c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
2000162e:	4b0f      	ldr	r3, [pc, #60]	; (2000166c <SystemInit+0x64>)
20001630:	681b      	ldr	r3, [r3, #0]
20001632:	4a0e      	ldr	r2, [pc, #56]	; (2000166c <SystemInit+0x64>)
20001634:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
20001638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000163c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
2000163e:	4b0b      	ldr	r3, [pc, #44]	; (2000166c <SystemInit+0x64>)
20001640:	4a0b      	ldr	r2, [pc, #44]	; (20001670 <SystemInit+0x68>)
20001642:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20001644:	4b09      	ldr	r3, [pc, #36]	; (2000166c <SystemInit+0x64>)
20001646:	681b      	ldr	r3, [r3, #0]
20001648:	4a08      	ldr	r2, [pc, #32]	; (2000166c <SystemInit+0x64>)
2000164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000164e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20001650:	4b06      	ldr	r3, [pc, #24]	; (2000166c <SystemInit+0x64>)
20001652:	2200      	movs	r2, #0
20001654:	60da      	str	r2, [r3, #12]


  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
20001656:	4b04      	ldr	r3, [pc, #16]	; (20001668 <SystemInit+0x60>)
20001658:	4a06      	ldr	r2, [pc, #24]	; (20001674 <SystemInit+0x6c>)
2000165a:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
2000165c:	bf00      	nop
2000165e:	46bd      	mov	sp, r7
20001660:	f85d 7b04 	ldr.w	r7, [sp], #4
20001664:	4770      	bx	lr
20001666:	bf00      	nop
20001668:	e000ed00 	.word	0xe000ed00
2000166c:	40023800 	.word	0x40023800
20001670:	24003010 	.word	0x24003010
20001674:	20001000 	.word	0x20001000

20001678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20001678:	b580      	push	{r7, lr}
2000167a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
2000167c:	4b0b      	ldr	r3, [pc, #44]	; (200016ac <HAL_Init+0x34>)
2000167e:	681b      	ldr	r3, [r3, #0]
20001680:	4a0a      	ldr	r2, [pc, #40]	; (200016ac <HAL_Init+0x34>)
20001682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20001686:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20001688:	4b08      	ldr	r3, [pc, #32]	; (200016ac <HAL_Init+0x34>)
2000168a:	681b      	ldr	r3, [r3, #0]
2000168c:	4a07      	ldr	r2, [pc, #28]	; (200016ac <HAL_Init+0x34>)
2000168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20001694:	2003      	movs	r0, #3
20001696:	f000 f939 	bl	2000190c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
2000169a:	200f      	movs	r0, #15
2000169c:	f000 f810 	bl	200016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
200016a0:	f000 f806 	bl	200016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
200016a4:	2300      	movs	r3, #0
}
200016a6:	4618      	mov	r0, r3
200016a8:	bd80      	pop	{r7, pc}
200016aa:	bf00      	nop
200016ac:	40023c00 	.word	0x40023c00

200016b0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
200016b0:	b480      	push	{r7}
200016b2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
200016b4:	bf00      	nop
200016b6:	46bd      	mov	sp, r7
200016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200016bc:	4770      	bx	lr
	...

200016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
200016c0:	b580      	push	{r7, lr}
200016c2:	b082      	sub	sp, #8
200016c4:	af00      	add	r7, sp, #0
200016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
200016c8:	4b12      	ldr	r3, [pc, #72]	; (20001714 <HAL_InitTick+0x54>)
200016ca:	681a      	ldr	r2, [r3, #0]
200016cc:	4b12      	ldr	r3, [pc, #72]	; (20001718 <HAL_InitTick+0x58>)
200016ce:	781b      	ldrb	r3, [r3, #0]
200016d0:	4619      	mov	r1, r3
200016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
200016d6:	fbb3 f3f1 	udiv	r3, r3, r1
200016da:	fbb2 f3f3 	udiv	r3, r2, r3
200016de:	4618      	mov	r0, r3
200016e0:	f000 f93b 	bl	2000195a <HAL_SYSTICK_Config>
200016e4:	4603      	mov	r3, r0
200016e6:	2b00      	cmp	r3, #0
200016e8:	d001      	beq.n	200016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
200016ea:	2301      	movs	r3, #1
200016ec:	e00e      	b.n	2000170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
200016ee:	687b      	ldr	r3, [r7, #4]
200016f0:	2b0f      	cmp	r3, #15
200016f2:	d80a      	bhi.n	2000170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
200016f4:	2200      	movs	r2, #0
200016f6:	6879      	ldr	r1, [r7, #4]
200016f8:	f04f 30ff 	mov.w	r0, #4294967295
200016fc:	f000 f911 	bl	20001922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20001700:	4a06      	ldr	r2, [pc, #24]	; (2000171c <HAL_InitTick+0x5c>)
20001702:	687b      	ldr	r3, [r7, #4]
20001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
20001706:	2300      	movs	r3, #0
20001708:	e000      	b.n	2000170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
2000170a:	2301      	movs	r3, #1
}
2000170c:	4618      	mov	r0, r3
2000170e:	3708      	adds	r7, #8
20001710:	46bd      	mov	sp, r7
20001712:	bd80      	pop	{r7, pc}
20001714:	20003b2c 	.word	0x20003b2c
20001718:	20003b34 	.word	0x20003b34
2000171c:	20003b30 	.word	0x20003b30

20001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20001720:	b480      	push	{r7}
20001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20001724:	4b06      	ldr	r3, [pc, #24]	; (20001740 <HAL_IncTick+0x20>)
20001726:	781b      	ldrb	r3, [r3, #0]
20001728:	461a      	mov	r2, r3
2000172a:	4b06      	ldr	r3, [pc, #24]	; (20001744 <HAL_IncTick+0x24>)
2000172c:	681b      	ldr	r3, [r3, #0]
2000172e:	4413      	add	r3, r2
20001730:	4a04      	ldr	r2, [pc, #16]	; (20001744 <HAL_IncTick+0x24>)
20001732:	6013      	str	r3, [r2, #0]
}
20001734:	bf00      	nop
20001736:	46bd      	mov	sp, r7
20001738:	f85d 7b04 	ldr.w	r7, [sp], #4
2000173c:	4770      	bx	lr
2000173e:	bf00      	nop
20001740:	20003b34 	.word	0x20003b34
20001744:	20003b54 	.word	0x20003b54

20001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20001748:	b480      	push	{r7}
2000174a:	af00      	add	r7, sp, #0
  return uwTick;
2000174c:	4b03      	ldr	r3, [pc, #12]	; (2000175c <HAL_GetTick+0x14>)
2000174e:	681b      	ldr	r3, [r3, #0]
}
20001750:	4618      	mov	r0, r3
20001752:	46bd      	mov	sp, r7
20001754:	f85d 7b04 	ldr.w	r7, [sp], #4
20001758:	4770      	bx	lr
2000175a:	bf00      	nop
2000175c:	20003b54 	.word	0x20003b54

20001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20001760:	b580      	push	{r7, lr}
20001762:	b084      	sub	sp, #16
20001764:	af00      	add	r7, sp, #0
20001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20001768:	f7ff ffee 	bl	20001748 <HAL_GetTick>
2000176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
2000176e:	687b      	ldr	r3, [r7, #4]
20001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
20001772:	68fb      	ldr	r3, [r7, #12]
20001774:	f1b3 3fff 	cmp.w	r3, #4294967295
20001778:	d005      	beq.n	20001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
2000177a:	4b0a      	ldr	r3, [pc, #40]	; (200017a4 <HAL_Delay+0x44>)
2000177c:	781b      	ldrb	r3, [r3, #0]
2000177e:	461a      	mov	r2, r3
20001780:	68fb      	ldr	r3, [r7, #12]
20001782:	4413      	add	r3, r2
20001784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
20001786:	bf00      	nop
20001788:	f7ff ffde 	bl	20001748 <HAL_GetTick>
2000178c:	4602      	mov	r2, r0
2000178e:	68bb      	ldr	r3, [r7, #8]
20001790:	1ad3      	subs	r3, r2, r3
20001792:	68fa      	ldr	r2, [r7, #12]
20001794:	429a      	cmp	r2, r3
20001796:	d8f7      	bhi.n	20001788 <HAL_Delay+0x28>
  {
  }
}
20001798:	bf00      	nop
2000179a:	bf00      	nop
2000179c:	3710      	adds	r7, #16
2000179e:	46bd      	mov	sp, r7
200017a0:	bd80      	pop	{r7, pc}
200017a2:	bf00      	nop
200017a4:	20003b34 	.word	0x20003b34

200017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200017a8:	b480      	push	{r7}
200017aa:	b085      	sub	sp, #20
200017ac:	af00      	add	r7, sp, #0
200017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
200017b0:	687b      	ldr	r3, [r7, #4]
200017b2:	f003 0307 	and.w	r3, r3, #7
200017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
200017b8:	4b0c      	ldr	r3, [pc, #48]	; (200017ec <__NVIC_SetPriorityGrouping+0x44>)
200017ba:	68db      	ldr	r3, [r3, #12]
200017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200017be:	68ba      	ldr	r2, [r7, #8]
200017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
200017c4:	4013      	ands	r3, r2
200017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
200017c8:	68fb      	ldr	r3, [r7, #12]
200017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
200017cc:	68bb      	ldr	r3, [r7, #8]
200017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
200017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
200017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
200017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
200017da:	4a04      	ldr	r2, [pc, #16]	; (200017ec <__NVIC_SetPriorityGrouping+0x44>)
200017dc:	68bb      	ldr	r3, [r7, #8]
200017de:	60d3      	str	r3, [r2, #12]
}
200017e0:	bf00      	nop
200017e2:	3714      	adds	r7, #20
200017e4:	46bd      	mov	sp, r7
200017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200017ea:	4770      	bx	lr
200017ec:	e000ed00 	.word	0xe000ed00

200017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
200017f0:	b480      	push	{r7}
200017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200017f4:	4b04      	ldr	r3, [pc, #16]	; (20001808 <__NVIC_GetPriorityGrouping+0x18>)
200017f6:	68db      	ldr	r3, [r3, #12]
200017f8:	0a1b      	lsrs	r3, r3, #8
200017fa:	f003 0307 	and.w	r3, r3, #7
}
200017fe:	4618      	mov	r0, r3
20001800:	46bd      	mov	sp, r7
20001802:	f85d 7b04 	ldr.w	r7, [sp], #4
20001806:	4770      	bx	lr
20001808:	e000ed00 	.word	0xe000ed00

2000180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
2000180c:	b480      	push	{r7}
2000180e:	b083      	sub	sp, #12
20001810:	af00      	add	r7, sp, #0
20001812:	4603      	mov	r3, r0
20001814:	6039      	str	r1, [r7, #0]
20001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000181c:	2b00      	cmp	r3, #0
2000181e:	db0a      	blt.n	20001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001820:	683b      	ldr	r3, [r7, #0]
20001822:	b2da      	uxtb	r2, r3
20001824:	490c      	ldr	r1, [pc, #48]	; (20001858 <__NVIC_SetPriority+0x4c>)
20001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000182a:	0112      	lsls	r2, r2, #4
2000182c:	b2d2      	uxtb	r2, r2
2000182e:	440b      	add	r3, r1
20001830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20001834:	e00a      	b.n	2000184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001836:	683b      	ldr	r3, [r7, #0]
20001838:	b2da      	uxtb	r2, r3
2000183a:	4908      	ldr	r1, [pc, #32]	; (2000185c <__NVIC_SetPriority+0x50>)
2000183c:	79fb      	ldrb	r3, [r7, #7]
2000183e:	f003 030f 	and.w	r3, r3, #15
20001842:	3b04      	subs	r3, #4
20001844:	0112      	lsls	r2, r2, #4
20001846:	b2d2      	uxtb	r2, r2
20001848:	440b      	add	r3, r1
2000184a:	761a      	strb	r2, [r3, #24]
}
2000184c:	bf00      	nop
2000184e:	370c      	adds	r7, #12
20001850:	46bd      	mov	sp, r7
20001852:	f85d 7b04 	ldr.w	r7, [sp], #4
20001856:	4770      	bx	lr
20001858:	e000e100 	.word	0xe000e100
2000185c:	e000ed00 	.word	0xe000ed00

20001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20001860:	b480      	push	{r7}
20001862:	b089      	sub	sp, #36	; 0x24
20001864:	af00      	add	r7, sp, #0
20001866:	60f8      	str	r0, [r7, #12]
20001868:	60b9      	str	r1, [r7, #8]
2000186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
2000186c:	68fb      	ldr	r3, [r7, #12]
2000186e:	f003 0307 	and.w	r3, r3, #7
20001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20001874:	69fb      	ldr	r3, [r7, #28]
20001876:	f1c3 0307 	rsb	r3, r3, #7
2000187a:	2b04      	cmp	r3, #4
2000187c:	bf28      	it	cs
2000187e:	2304      	movcs	r3, #4
20001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20001882:	69fb      	ldr	r3, [r7, #28]
20001884:	3304      	adds	r3, #4
20001886:	2b06      	cmp	r3, #6
20001888:	d902      	bls.n	20001890 <NVIC_EncodePriority+0x30>
2000188a:	69fb      	ldr	r3, [r7, #28]
2000188c:	3b03      	subs	r3, #3
2000188e:	e000      	b.n	20001892 <NVIC_EncodePriority+0x32>
20001890:	2300      	movs	r3, #0
20001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001894:	f04f 32ff 	mov.w	r2, #4294967295
20001898:	69bb      	ldr	r3, [r7, #24]
2000189a:	fa02 f303 	lsl.w	r3, r2, r3
2000189e:	43da      	mvns	r2, r3
200018a0:	68bb      	ldr	r3, [r7, #8]
200018a2:	401a      	ands	r2, r3
200018a4:	697b      	ldr	r3, [r7, #20]
200018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
200018a8:	f04f 31ff 	mov.w	r1, #4294967295
200018ac:	697b      	ldr	r3, [r7, #20]
200018ae:	fa01 f303 	lsl.w	r3, r1, r3
200018b2:	43d9      	mvns	r1, r3
200018b4:	687b      	ldr	r3, [r7, #4]
200018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200018b8:	4313      	orrs	r3, r2
         );
}
200018ba:	4618      	mov	r0, r3
200018bc:	3724      	adds	r7, #36	; 0x24
200018be:	46bd      	mov	sp, r7
200018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200018c4:	4770      	bx	lr
	...

200018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
200018c8:	b580      	push	{r7, lr}
200018ca:	b082      	sub	sp, #8
200018cc:	af00      	add	r7, sp, #0
200018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
200018d0:	687b      	ldr	r3, [r7, #4]
200018d2:	3b01      	subs	r3, #1
200018d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
200018d8:	d301      	bcc.n	200018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
200018da:	2301      	movs	r3, #1
200018dc:	e00f      	b.n	200018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
200018de:	4a0a      	ldr	r2, [pc, #40]	; (20001908 <SysTick_Config+0x40>)
200018e0:	687b      	ldr	r3, [r7, #4]
200018e2:	3b01      	subs	r3, #1
200018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
200018e6:	210f      	movs	r1, #15
200018e8:	f04f 30ff 	mov.w	r0, #4294967295
200018ec:	f7ff ff8e 	bl	2000180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
200018f0:	4b05      	ldr	r3, [pc, #20]	; (20001908 <SysTick_Config+0x40>)
200018f2:	2200      	movs	r2, #0
200018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200018f6:	4b04      	ldr	r3, [pc, #16]	; (20001908 <SysTick_Config+0x40>)
200018f8:	2207      	movs	r2, #7
200018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200018fc:	2300      	movs	r3, #0
}
200018fe:	4618      	mov	r0, r3
20001900:	3708      	adds	r7, #8
20001902:	46bd      	mov	sp, r7
20001904:	bd80      	pop	{r7, pc}
20001906:	bf00      	nop
20001908:	e000e010 	.word	0xe000e010

2000190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000190c:	b580      	push	{r7, lr}
2000190e:	b082      	sub	sp, #8
20001910:	af00      	add	r7, sp, #0
20001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20001914:	6878      	ldr	r0, [r7, #4]
20001916:	f7ff ff47 	bl	200017a8 <__NVIC_SetPriorityGrouping>
}
2000191a:	bf00      	nop
2000191c:	3708      	adds	r7, #8
2000191e:	46bd      	mov	sp, r7
20001920:	bd80      	pop	{r7, pc}

20001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
20001922:	b580      	push	{r7, lr}
20001924:	b086      	sub	sp, #24
20001926:	af00      	add	r7, sp, #0
20001928:	4603      	mov	r3, r0
2000192a:	60b9      	str	r1, [r7, #8]
2000192c:	607a      	str	r2, [r7, #4]
2000192e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
20001930:	2300      	movs	r3, #0
20001932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20001934:	f7ff ff5c 	bl	200017f0 <__NVIC_GetPriorityGrouping>
20001938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2000193a:	687a      	ldr	r2, [r7, #4]
2000193c:	68b9      	ldr	r1, [r7, #8]
2000193e:	6978      	ldr	r0, [r7, #20]
20001940:	f7ff ff8e 	bl	20001860 <NVIC_EncodePriority>
20001944:	4602      	mov	r2, r0
20001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000194a:	4611      	mov	r1, r2
2000194c:	4618      	mov	r0, r3
2000194e:	f7ff ff5d 	bl	2000180c <__NVIC_SetPriority>
}
20001952:	bf00      	nop
20001954:	3718      	adds	r7, #24
20001956:	46bd      	mov	sp, r7
20001958:	bd80      	pop	{r7, pc}

2000195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000195a:	b580      	push	{r7, lr}
2000195c:	b082      	sub	sp, #8
2000195e:	af00      	add	r7, sp, #0
20001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
20001962:	6878      	ldr	r0, [r7, #4]
20001964:	f7ff ffb0 	bl	200018c8 <SysTick_Config>
20001968:	4603      	mov	r3, r0
}
2000196a:	4618      	mov	r0, r3
2000196c:	3708      	adds	r7, #8
2000196e:	46bd      	mov	sp, r7
20001970:	bd80      	pop	{r7, pc}
	...

20001974 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
20001974:	b580      	push	{r7, lr}
20001976:	b086      	sub	sp, #24
20001978:	af00      	add	r7, sp, #0
2000197a:	60f8      	str	r0, [r7, #12]
2000197c:	60b9      	str	r1, [r7, #8]
2000197e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
20001982:	2301      	movs	r3, #1
20001984:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20001986:	4b23      	ldr	r3, [pc, #140]	; (20001a14 <HAL_FLASH_Program+0xa0>)
20001988:	7e1b      	ldrb	r3, [r3, #24]
2000198a:	2b01      	cmp	r3, #1
2000198c:	d101      	bne.n	20001992 <HAL_FLASH_Program+0x1e>
2000198e:	2302      	movs	r3, #2
20001990:	e03b      	b.n	20001a0a <HAL_FLASH_Program+0x96>
20001992:	4b20      	ldr	r3, [pc, #128]	; (20001a14 <HAL_FLASH_Program+0xa0>)
20001994:	2201      	movs	r2, #1
20001996:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001998:	f24c 3050 	movw	r0, #50000	; 0xc350
2000199c:	f000 f870 	bl	20001a80 <FLASH_WaitForLastOperation>
200019a0:	4603      	mov	r3, r0
200019a2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
200019a4:	7dfb      	ldrb	r3, [r7, #23]
200019a6:	2b00      	cmp	r3, #0
200019a8:	d12b      	bne.n	20001a02 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
200019aa:	68fb      	ldr	r3, [r7, #12]
200019ac:	2b00      	cmp	r3, #0
200019ae:	d105      	bne.n	200019bc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
200019b0:	783b      	ldrb	r3, [r7, #0]
200019b2:	4619      	mov	r1, r3
200019b4:	68b8      	ldr	r0, [r7, #8]
200019b6:	f000 f91b 	bl	20001bf0 <FLASH_Program_Byte>
200019ba:	e016      	b.n	200019ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
200019bc:	68fb      	ldr	r3, [r7, #12]
200019be:	2b01      	cmp	r3, #1
200019c0:	d105      	bne.n	200019ce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
200019c2:	883b      	ldrh	r3, [r7, #0]
200019c4:	4619      	mov	r1, r3
200019c6:	68b8      	ldr	r0, [r7, #8]
200019c8:	f000 f8ee 	bl	20001ba8 <FLASH_Program_HalfWord>
200019cc:	e00d      	b.n	200019ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
200019ce:	68fb      	ldr	r3, [r7, #12]
200019d0:	2b02      	cmp	r3, #2
200019d2:	d105      	bne.n	200019e0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
200019d4:	683b      	ldr	r3, [r7, #0]
200019d6:	4619      	mov	r1, r3
200019d8:	68b8      	ldr	r0, [r7, #8]
200019da:	f000 f8c3 	bl	20001b64 <FLASH_Program_Word>
200019de:	e004      	b.n	200019ea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
200019e0:	e9d7 2300 	ldrd	r2, r3, [r7]
200019e4:	68b8      	ldr	r0, [r7, #8]
200019e6:	f000 f88b 	bl	20001b00 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200019ea:	f24c 3050 	movw	r0, #50000	; 0xc350
200019ee:	f000 f847 	bl	20001a80 <FLASH_WaitForLastOperation>
200019f2:	4603      	mov	r3, r0
200019f4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
200019f6:	4b08      	ldr	r3, [pc, #32]	; (20001a18 <HAL_FLASH_Program+0xa4>)
200019f8:	691b      	ldr	r3, [r3, #16]
200019fa:	4a07      	ldr	r2, [pc, #28]	; (20001a18 <HAL_FLASH_Program+0xa4>)
200019fc:	f023 0301 	bic.w	r3, r3, #1
20001a00:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20001a02:	4b04      	ldr	r3, [pc, #16]	; (20001a14 <HAL_FLASH_Program+0xa0>)
20001a04:	2200      	movs	r2, #0
20001a06:	761a      	strb	r2, [r3, #24]
  
  return status;
20001a08:	7dfb      	ldrb	r3, [r7, #23]
}
20001a0a:	4618      	mov	r0, r3
20001a0c:	3718      	adds	r7, #24
20001a0e:	46bd      	mov	sp, r7
20001a10:	bd80      	pop	{r7, pc}
20001a12:	bf00      	nop
20001a14:	20003b58 	.word	0x20003b58
20001a18:	40023c00 	.word	0x40023c00

20001a1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
20001a1c:	b480      	push	{r7}
20001a1e:	b083      	sub	sp, #12
20001a20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
20001a22:	2300      	movs	r3, #0
20001a24:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20001a26:	4b0b      	ldr	r3, [pc, #44]	; (20001a54 <HAL_FLASH_Unlock+0x38>)
20001a28:	691b      	ldr	r3, [r3, #16]
20001a2a:	2b00      	cmp	r3, #0
20001a2c:	da0b      	bge.n	20001a46 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
20001a2e:	4b09      	ldr	r3, [pc, #36]	; (20001a54 <HAL_FLASH_Unlock+0x38>)
20001a30:	4a09      	ldr	r2, [pc, #36]	; (20001a58 <HAL_FLASH_Unlock+0x3c>)
20001a32:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
20001a34:	4b07      	ldr	r3, [pc, #28]	; (20001a54 <HAL_FLASH_Unlock+0x38>)
20001a36:	4a09      	ldr	r2, [pc, #36]	; (20001a5c <HAL_FLASH_Unlock+0x40>)
20001a38:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20001a3a:	4b06      	ldr	r3, [pc, #24]	; (20001a54 <HAL_FLASH_Unlock+0x38>)
20001a3c:	691b      	ldr	r3, [r3, #16]
20001a3e:	2b00      	cmp	r3, #0
20001a40:	da01      	bge.n	20001a46 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
20001a42:	2301      	movs	r3, #1
20001a44:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
20001a46:	79fb      	ldrb	r3, [r7, #7]
}
20001a48:	4618      	mov	r0, r3
20001a4a:	370c      	adds	r7, #12
20001a4c:	46bd      	mov	sp, r7
20001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001a52:	4770      	bx	lr
20001a54:	40023c00 	.word	0x40023c00
20001a58:	45670123 	.word	0x45670123
20001a5c:	cdef89ab 	.word	0xcdef89ab

20001a60 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
20001a60:	b480      	push	{r7}
20001a62:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
20001a64:	4b05      	ldr	r3, [pc, #20]	; (20001a7c <HAL_FLASH_Lock+0x1c>)
20001a66:	691b      	ldr	r3, [r3, #16]
20001a68:	4a04      	ldr	r2, [pc, #16]	; (20001a7c <HAL_FLASH_Lock+0x1c>)
20001a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20001a6e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
20001a70:	2300      	movs	r3, #0
}
20001a72:	4618      	mov	r0, r3
20001a74:	46bd      	mov	sp, r7
20001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
20001a7a:	4770      	bx	lr
20001a7c:	40023c00 	.word	0x40023c00

20001a80 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
20001a80:	b580      	push	{r7, lr}
20001a82:	b084      	sub	sp, #16
20001a84:	af00      	add	r7, sp, #0
20001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20001a88:	2300      	movs	r3, #0
20001a8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20001a8c:	4b1a      	ldr	r3, [pc, #104]	; (20001af8 <FLASH_WaitForLastOperation+0x78>)
20001a8e:	2200      	movs	r2, #0
20001a90:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
20001a92:	f7ff fe59 	bl	20001748 <HAL_GetTick>
20001a96:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20001a98:	e010      	b.n	20001abc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
20001a9a:	687b      	ldr	r3, [r7, #4]
20001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
20001aa0:	d00c      	beq.n	20001abc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
20001aa2:	687b      	ldr	r3, [r7, #4]
20001aa4:	2b00      	cmp	r3, #0
20001aa6:	d007      	beq.n	20001ab8 <FLASH_WaitForLastOperation+0x38>
20001aa8:	f7ff fe4e 	bl	20001748 <HAL_GetTick>
20001aac:	4602      	mov	r2, r0
20001aae:	68fb      	ldr	r3, [r7, #12]
20001ab0:	1ad3      	subs	r3, r2, r3
20001ab2:	687a      	ldr	r2, [r7, #4]
20001ab4:	429a      	cmp	r2, r3
20001ab6:	d201      	bcs.n	20001abc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
20001ab8:	2303      	movs	r3, #3
20001aba:	e019      	b.n	20001af0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20001abc:	4b0f      	ldr	r3, [pc, #60]	; (20001afc <FLASH_WaitForLastOperation+0x7c>)
20001abe:	68db      	ldr	r3, [r3, #12]
20001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20001ac4:	2b00      	cmp	r3, #0
20001ac6:	d1e8      	bne.n	20001a9a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20001ac8:	4b0c      	ldr	r3, [pc, #48]	; (20001afc <FLASH_WaitForLastOperation+0x7c>)
20001aca:	68db      	ldr	r3, [r3, #12]
20001acc:	f003 0301 	and.w	r3, r3, #1
20001ad0:	2b00      	cmp	r3, #0
20001ad2:	d002      	beq.n	20001ada <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20001ad4:	4b09      	ldr	r3, [pc, #36]	; (20001afc <FLASH_WaitForLastOperation+0x7c>)
20001ad6:	2201      	movs	r2, #1
20001ad8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
20001ada:	4b08      	ldr	r3, [pc, #32]	; (20001afc <FLASH_WaitForLastOperation+0x7c>)
20001adc:	68db      	ldr	r3, [r3, #12]
20001ade:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
20001ae2:	2b00      	cmp	r3, #0
20001ae4:	d003      	beq.n	20001aee <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
20001ae6:	f000 f8a5 	bl	20001c34 <FLASH_SetErrorCode>
    return HAL_ERROR;
20001aea:	2301      	movs	r3, #1
20001aec:	e000      	b.n	20001af0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
20001aee:	2300      	movs	r3, #0
  
}  
20001af0:	4618      	mov	r0, r3
20001af2:	3710      	adds	r7, #16
20001af4:	46bd      	mov	sp, r7
20001af6:	bd80      	pop	{r7, pc}
20001af8:	20003b58 	.word	0x20003b58
20001afc:	40023c00 	.word	0x40023c00

20001b00 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
20001b00:	b480      	push	{r7}
20001b02:	b085      	sub	sp, #20
20001b04:	af00      	add	r7, sp, #0
20001b06:	60f8      	str	r0, [r7, #12]
20001b08:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001b0c:	4b14      	ldr	r3, [pc, #80]	; (20001b60 <FLASH_Program_DoubleWord+0x60>)
20001b0e:	691b      	ldr	r3, [r3, #16]
20001b10:	4a13      	ldr	r2, [pc, #76]	; (20001b60 <FLASH_Program_DoubleWord+0x60>)
20001b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20001b16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
20001b18:	4b11      	ldr	r3, [pc, #68]	; (20001b60 <FLASH_Program_DoubleWord+0x60>)
20001b1a:	691b      	ldr	r3, [r3, #16]
20001b1c:	4a10      	ldr	r2, [pc, #64]	; (20001b60 <FLASH_Program_DoubleWord+0x60>)
20001b1e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
20001b22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20001b24:	4b0e      	ldr	r3, [pc, #56]	; (20001b60 <FLASH_Program_DoubleWord+0x60>)
20001b26:	691b      	ldr	r3, [r3, #16]
20001b28:	4a0d      	ldr	r2, [pc, #52]	; (20001b60 <FLASH_Program_DoubleWord+0x60>)
20001b2a:	f043 0301 	orr.w	r3, r3, #1
20001b2e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
20001b30:	68fb      	ldr	r3, [r7, #12]
20001b32:	683a      	ldr	r2, [r7, #0]
20001b34:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
20001b36:	f3bf 8f6f 	isb	sy
}
20001b3a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
20001b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
20001b40:	f04f 0200 	mov.w	r2, #0
20001b44:	f04f 0300 	mov.w	r3, #0
20001b48:	000a      	movs	r2, r1
20001b4a:	2300      	movs	r3, #0
20001b4c:	68f9      	ldr	r1, [r7, #12]
20001b4e:	3104      	adds	r1, #4
20001b50:	4613      	mov	r3, r2
20001b52:	600b      	str	r3, [r1, #0]
}
20001b54:	bf00      	nop
20001b56:	3714      	adds	r7, #20
20001b58:	46bd      	mov	sp, r7
20001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b5e:	4770      	bx	lr
20001b60:	40023c00 	.word	0x40023c00

20001b64 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
20001b64:	b480      	push	{r7}
20001b66:	b083      	sub	sp, #12
20001b68:	af00      	add	r7, sp, #0
20001b6a:	6078      	str	r0, [r7, #4]
20001b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001b6e:	4b0d      	ldr	r3, [pc, #52]	; (20001ba4 <FLASH_Program_Word+0x40>)
20001b70:	691b      	ldr	r3, [r3, #16]
20001b72:	4a0c      	ldr	r2, [pc, #48]	; (20001ba4 <FLASH_Program_Word+0x40>)
20001b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20001b78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
20001b7a:	4b0a      	ldr	r3, [pc, #40]	; (20001ba4 <FLASH_Program_Word+0x40>)
20001b7c:	691b      	ldr	r3, [r3, #16]
20001b7e:	4a09      	ldr	r2, [pc, #36]	; (20001ba4 <FLASH_Program_Word+0x40>)
20001b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20001b84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20001b86:	4b07      	ldr	r3, [pc, #28]	; (20001ba4 <FLASH_Program_Word+0x40>)
20001b88:	691b      	ldr	r3, [r3, #16]
20001b8a:	4a06      	ldr	r2, [pc, #24]	; (20001ba4 <FLASH_Program_Word+0x40>)
20001b8c:	f043 0301 	orr.w	r3, r3, #1
20001b90:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
20001b92:	687b      	ldr	r3, [r7, #4]
20001b94:	683a      	ldr	r2, [r7, #0]
20001b96:	601a      	str	r2, [r3, #0]
}
20001b98:	bf00      	nop
20001b9a:	370c      	adds	r7, #12
20001b9c:	46bd      	mov	sp, r7
20001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ba2:	4770      	bx	lr
20001ba4:	40023c00 	.word	0x40023c00

20001ba8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
20001ba8:	b480      	push	{r7}
20001baa:	b083      	sub	sp, #12
20001bac:	af00      	add	r7, sp, #0
20001bae:	6078      	str	r0, [r7, #4]
20001bb0:	460b      	mov	r3, r1
20001bb2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001bb4:	4b0d      	ldr	r3, [pc, #52]	; (20001bec <FLASH_Program_HalfWord+0x44>)
20001bb6:	691b      	ldr	r3, [r3, #16]
20001bb8:	4a0c      	ldr	r2, [pc, #48]	; (20001bec <FLASH_Program_HalfWord+0x44>)
20001bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20001bbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
20001bc0:	4b0a      	ldr	r3, [pc, #40]	; (20001bec <FLASH_Program_HalfWord+0x44>)
20001bc2:	691b      	ldr	r3, [r3, #16]
20001bc4:	4a09      	ldr	r2, [pc, #36]	; (20001bec <FLASH_Program_HalfWord+0x44>)
20001bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001bca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20001bcc:	4b07      	ldr	r3, [pc, #28]	; (20001bec <FLASH_Program_HalfWord+0x44>)
20001bce:	691b      	ldr	r3, [r3, #16]
20001bd0:	4a06      	ldr	r2, [pc, #24]	; (20001bec <FLASH_Program_HalfWord+0x44>)
20001bd2:	f043 0301 	orr.w	r3, r3, #1
20001bd6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
20001bd8:	687b      	ldr	r3, [r7, #4]
20001bda:	887a      	ldrh	r2, [r7, #2]
20001bdc:	801a      	strh	r2, [r3, #0]
}
20001bde:	bf00      	nop
20001be0:	370c      	adds	r7, #12
20001be2:	46bd      	mov	sp, r7
20001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001be8:	4770      	bx	lr
20001bea:	bf00      	nop
20001bec:	40023c00 	.word	0x40023c00

20001bf0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
20001bf0:	b480      	push	{r7}
20001bf2:	b083      	sub	sp, #12
20001bf4:	af00      	add	r7, sp, #0
20001bf6:	6078      	str	r0, [r7, #4]
20001bf8:	460b      	mov	r3, r1
20001bfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001bfc:	4b0c      	ldr	r3, [pc, #48]	; (20001c30 <FLASH_Program_Byte+0x40>)
20001bfe:	691b      	ldr	r3, [r3, #16]
20001c00:	4a0b      	ldr	r2, [pc, #44]	; (20001c30 <FLASH_Program_Byte+0x40>)
20001c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20001c06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
20001c08:	4b09      	ldr	r3, [pc, #36]	; (20001c30 <FLASH_Program_Byte+0x40>)
20001c0a:	4a09      	ldr	r2, [pc, #36]	; (20001c30 <FLASH_Program_Byte+0x40>)
20001c0c:	691b      	ldr	r3, [r3, #16]
20001c0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20001c10:	4b07      	ldr	r3, [pc, #28]	; (20001c30 <FLASH_Program_Byte+0x40>)
20001c12:	691b      	ldr	r3, [r3, #16]
20001c14:	4a06      	ldr	r2, [pc, #24]	; (20001c30 <FLASH_Program_Byte+0x40>)
20001c16:	f043 0301 	orr.w	r3, r3, #1
20001c1a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
20001c1c:	687b      	ldr	r3, [r7, #4]
20001c1e:	78fa      	ldrb	r2, [r7, #3]
20001c20:	701a      	strb	r2, [r3, #0]
}
20001c22:	bf00      	nop
20001c24:	370c      	adds	r7, #12
20001c26:	46bd      	mov	sp, r7
20001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c2c:	4770      	bx	lr
20001c2e:	bf00      	nop
20001c30:	40023c00 	.word	0x40023c00

20001c34 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
20001c34:	b480      	push	{r7}
20001c36:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
20001c38:	4b2f      	ldr	r3, [pc, #188]	; (20001cf8 <FLASH_SetErrorCode+0xc4>)
20001c3a:	68db      	ldr	r3, [r3, #12]
20001c3c:	f003 0310 	and.w	r3, r3, #16
20001c40:	2b00      	cmp	r3, #0
20001c42:	d008      	beq.n	20001c56 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
20001c44:	4b2d      	ldr	r3, [pc, #180]	; (20001cfc <FLASH_SetErrorCode+0xc8>)
20001c46:	69db      	ldr	r3, [r3, #28]
20001c48:	f043 0310 	orr.w	r3, r3, #16
20001c4c:	4a2b      	ldr	r2, [pc, #172]	; (20001cfc <FLASH_SetErrorCode+0xc8>)
20001c4e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
20001c50:	4b29      	ldr	r3, [pc, #164]	; (20001cf8 <FLASH_SetErrorCode+0xc4>)
20001c52:	2210      	movs	r2, #16
20001c54:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
20001c56:	4b28      	ldr	r3, [pc, #160]	; (20001cf8 <FLASH_SetErrorCode+0xc4>)
20001c58:	68db      	ldr	r3, [r3, #12]
20001c5a:	f003 0320 	and.w	r3, r3, #32
20001c5e:	2b00      	cmp	r3, #0
20001c60:	d008      	beq.n	20001c74 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
20001c62:	4b26      	ldr	r3, [pc, #152]	; (20001cfc <FLASH_SetErrorCode+0xc8>)
20001c64:	69db      	ldr	r3, [r3, #28]
20001c66:	f043 0308 	orr.w	r3, r3, #8
20001c6a:	4a24      	ldr	r2, [pc, #144]	; (20001cfc <FLASH_SetErrorCode+0xc8>)
20001c6c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
20001c6e:	4b22      	ldr	r3, [pc, #136]	; (20001cf8 <FLASH_SetErrorCode+0xc4>)
20001c70:	2220      	movs	r2, #32
20001c72:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
20001c74:	4b20      	ldr	r3, [pc, #128]	; (20001cf8 <FLASH_SetErrorCode+0xc4>)
20001c76:	68db      	ldr	r3, [r3, #12]
20001c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001c7c:	2b00      	cmp	r3, #0
20001c7e:	d008      	beq.n	20001c92 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
20001c80:	4b1e      	ldr	r3, [pc, #120]	; (20001cfc <FLASH_SetErrorCode+0xc8>)
20001c82:	69db      	ldr	r3, [r3, #28]
20001c84:	f043 0304 	orr.w	r3, r3, #4
20001c88:	4a1c      	ldr	r2, [pc, #112]	; (20001cfc <FLASH_SetErrorCode+0xc8>)
20001c8a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
20001c8c:	4b1a      	ldr	r3, [pc, #104]	; (20001cf8 <FLASH_SetErrorCode+0xc4>)
20001c8e:	2240      	movs	r2, #64	; 0x40
20001c90:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
20001c92:	4b19      	ldr	r3, [pc, #100]	; (20001cf8 <FLASH_SetErrorCode+0xc4>)
20001c94:	68db      	ldr	r3, [r3, #12]
20001c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
20001c9a:	2b00      	cmp	r3, #0
20001c9c:	d008      	beq.n	20001cb0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
20001c9e:	4b17      	ldr	r3, [pc, #92]	; (20001cfc <FLASH_SetErrorCode+0xc8>)
20001ca0:	69db      	ldr	r3, [r3, #28]
20001ca2:	f043 0302 	orr.w	r3, r3, #2
20001ca6:	4a15      	ldr	r2, [pc, #84]	; (20001cfc <FLASH_SetErrorCode+0xc8>)
20001ca8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
20001caa:	4b13      	ldr	r3, [pc, #76]	; (20001cf8 <FLASH_SetErrorCode+0xc4>)
20001cac:	2280      	movs	r2, #128	; 0x80
20001cae:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
20001cb0:	4b11      	ldr	r3, [pc, #68]	; (20001cf8 <FLASH_SetErrorCode+0xc4>)
20001cb2:	68db      	ldr	r3, [r3, #12]
20001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001cb8:	2b00      	cmp	r3, #0
20001cba:	d009      	beq.n	20001cd0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
20001cbc:	4b0f      	ldr	r3, [pc, #60]	; (20001cfc <FLASH_SetErrorCode+0xc8>)
20001cbe:	69db      	ldr	r3, [r3, #28]
20001cc0:	f043 0301 	orr.w	r3, r3, #1
20001cc4:	4a0d      	ldr	r2, [pc, #52]	; (20001cfc <FLASH_SetErrorCode+0xc8>)
20001cc6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
20001cc8:	4b0b      	ldr	r3, [pc, #44]	; (20001cf8 <FLASH_SetErrorCode+0xc4>)
20001cca:	f44f 7280 	mov.w	r2, #256	; 0x100
20001cce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
20001cd0:	4b09      	ldr	r3, [pc, #36]	; (20001cf8 <FLASH_SetErrorCode+0xc4>)
20001cd2:	68db      	ldr	r3, [r3, #12]
20001cd4:	f003 0302 	and.w	r3, r3, #2
20001cd8:	2b00      	cmp	r3, #0
20001cda:	d008      	beq.n	20001cee <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
20001cdc:	4b07      	ldr	r3, [pc, #28]	; (20001cfc <FLASH_SetErrorCode+0xc8>)
20001cde:	69db      	ldr	r3, [r3, #28]
20001ce0:	f043 0320 	orr.w	r3, r3, #32
20001ce4:	4a05      	ldr	r2, [pc, #20]	; (20001cfc <FLASH_SetErrorCode+0xc8>)
20001ce6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
20001ce8:	4b03      	ldr	r3, [pc, #12]	; (20001cf8 <FLASH_SetErrorCode+0xc4>)
20001cea:	2202      	movs	r2, #2
20001cec:	60da      	str	r2, [r3, #12]
  }
}
20001cee:	bf00      	nop
20001cf0:	46bd      	mov	sp, r7
20001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
20001cf6:	4770      	bx	lr
20001cf8:	40023c00 	.word	0x40023c00
20001cfc:	20003b58 	.word	0x20003b58

20001d00 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
20001d00:	b580      	push	{r7, lr}
20001d02:	b084      	sub	sp, #16
20001d04:	af00      	add	r7, sp, #0
20001d06:	6078      	str	r0, [r7, #4]
20001d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
20001d0a:	2301      	movs	r3, #1
20001d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
20001d0e:	2300      	movs	r3, #0
20001d10:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
20001d12:	4b31      	ldr	r3, [pc, #196]	; (20001dd8 <HAL_FLASHEx_Erase+0xd8>)
20001d14:	7e1b      	ldrb	r3, [r3, #24]
20001d16:	2b01      	cmp	r3, #1
20001d18:	d101      	bne.n	20001d1e <HAL_FLASHEx_Erase+0x1e>
20001d1a:	2302      	movs	r3, #2
20001d1c:	e058      	b.n	20001dd0 <HAL_FLASHEx_Erase+0xd0>
20001d1e:	4b2e      	ldr	r3, [pc, #184]	; (20001dd8 <HAL_FLASHEx_Erase+0xd8>)
20001d20:	2201      	movs	r2, #1
20001d22:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001d24:	f24c 3050 	movw	r0, #50000	; 0xc350
20001d28:	f7ff feaa 	bl	20001a80 <FLASH_WaitForLastOperation>
20001d2c:	4603      	mov	r3, r0
20001d2e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
20001d30:	7bfb      	ldrb	r3, [r7, #15]
20001d32:	2b00      	cmp	r3, #0
20001d34:	d148      	bne.n	20001dc8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
20001d36:	683b      	ldr	r3, [r7, #0]
20001d38:	f04f 32ff 	mov.w	r2, #4294967295
20001d3c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
20001d3e:	687b      	ldr	r3, [r7, #4]
20001d40:	681b      	ldr	r3, [r3, #0]
20001d42:	2b01      	cmp	r3, #1
20001d44:	d115      	bne.n	20001d72 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
20001d46:	687b      	ldr	r3, [r7, #4]
20001d48:	691b      	ldr	r3, [r3, #16]
20001d4a:	b2da      	uxtb	r2, r3
20001d4c:	687b      	ldr	r3, [r7, #4]
20001d4e:	685b      	ldr	r3, [r3, #4]
20001d50:	4619      	mov	r1, r3
20001d52:	4610      	mov	r0, r2
20001d54:	f000 f844 	bl	20001de0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001d58:	f24c 3050 	movw	r0, #50000	; 0xc350
20001d5c:	f7ff fe90 	bl	20001a80 <FLASH_WaitForLastOperation>
20001d60:	4603      	mov	r3, r0
20001d62:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
20001d64:	4b1d      	ldr	r3, [pc, #116]	; (20001ddc <HAL_FLASHEx_Erase+0xdc>)
20001d66:	691b      	ldr	r3, [r3, #16]
20001d68:	4a1c      	ldr	r2, [pc, #112]	; (20001ddc <HAL_FLASHEx_Erase+0xdc>)
20001d6a:	f023 0304 	bic.w	r3, r3, #4
20001d6e:	6113      	str	r3, [r2, #16]
20001d70:	e028      	b.n	20001dc4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20001d72:	687b      	ldr	r3, [r7, #4]
20001d74:	689b      	ldr	r3, [r3, #8]
20001d76:	60bb      	str	r3, [r7, #8]
20001d78:	e01c      	b.n	20001db4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
20001d7a:	687b      	ldr	r3, [r7, #4]
20001d7c:	691b      	ldr	r3, [r3, #16]
20001d7e:	b2db      	uxtb	r3, r3
20001d80:	4619      	mov	r1, r3
20001d82:	68b8      	ldr	r0, [r7, #8]
20001d84:	f000 f850 	bl	20001e28 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20001d88:	f24c 3050 	movw	r0, #50000	; 0xc350
20001d8c:	f7ff fe78 	bl	20001a80 <FLASH_WaitForLastOperation>
20001d90:	4603      	mov	r3, r0
20001d92:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
20001d94:	4b11      	ldr	r3, [pc, #68]	; (20001ddc <HAL_FLASHEx_Erase+0xdc>)
20001d96:	691b      	ldr	r3, [r3, #16]
20001d98:	4a10      	ldr	r2, [pc, #64]	; (20001ddc <HAL_FLASHEx_Erase+0xdc>)
20001d9a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
20001d9e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
20001da0:	7bfb      	ldrb	r3, [r7, #15]
20001da2:	2b00      	cmp	r3, #0
20001da4:	d003      	beq.n	20001dae <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
20001da6:	683b      	ldr	r3, [r7, #0]
20001da8:	68ba      	ldr	r2, [r7, #8]
20001daa:	601a      	str	r2, [r3, #0]
          break;
20001dac:	e00a      	b.n	20001dc4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20001dae:	68bb      	ldr	r3, [r7, #8]
20001db0:	3301      	adds	r3, #1
20001db2:	60bb      	str	r3, [r7, #8]
20001db4:	687b      	ldr	r3, [r7, #4]
20001db6:	68da      	ldr	r2, [r3, #12]
20001db8:	687b      	ldr	r3, [r7, #4]
20001dba:	689b      	ldr	r3, [r3, #8]
20001dbc:	4413      	add	r3, r2
20001dbe:	68ba      	ldr	r2, [r7, #8]
20001dc0:	429a      	cmp	r2, r3
20001dc2:	d3da      	bcc.n	20001d7a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
20001dc4:	f000 f878 	bl	20001eb8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20001dc8:	4b03      	ldr	r3, [pc, #12]	; (20001dd8 <HAL_FLASHEx_Erase+0xd8>)
20001dca:	2200      	movs	r2, #0
20001dcc:	761a      	strb	r2, [r3, #24]

  return status;
20001dce:	7bfb      	ldrb	r3, [r7, #15]
}
20001dd0:	4618      	mov	r0, r3
20001dd2:	3710      	adds	r7, #16
20001dd4:	46bd      	mov	sp, r7
20001dd6:	bd80      	pop	{r7, pc}
20001dd8:	20003b58 	.word	0x20003b58
20001ddc:	40023c00 	.word	0x40023c00

20001de0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
20001de0:	b480      	push	{r7}
20001de2:	b083      	sub	sp, #12
20001de4:	af00      	add	r7, sp, #0
20001de6:	4603      	mov	r3, r0
20001de8:	6039      	str	r1, [r7, #0]
20001dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001dec:	4b0d      	ldr	r3, [pc, #52]	; (20001e24 <FLASH_MassErase+0x44>)
20001dee:	691b      	ldr	r3, [r3, #16]
20001df0:	4a0c      	ldr	r2, [pc, #48]	; (20001e24 <FLASH_MassErase+0x44>)
20001df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20001df6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
20001df8:	4b0a      	ldr	r3, [pc, #40]	; (20001e24 <FLASH_MassErase+0x44>)
20001dfa:	691b      	ldr	r3, [r3, #16]
20001dfc:	4a09      	ldr	r2, [pc, #36]	; (20001e24 <FLASH_MassErase+0x44>)
20001dfe:	f043 0304 	orr.w	r3, r3, #4
20001e02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
20001e04:	4b07      	ldr	r3, [pc, #28]	; (20001e24 <FLASH_MassErase+0x44>)
20001e06:	691a      	ldr	r2, [r3, #16]
20001e08:	79fb      	ldrb	r3, [r7, #7]
20001e0a:	021b      	lsls	r3, r3, #8
20001e0c:	4313      	orrs	r3, r2
20001e0e:	4a05      	ldr	r2, [pc, #20]	; (20001e24 <FLASH_MassErase+0x44>)
20001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20001e14:	6113      	str	r3, [r2, #16]
}
20001e16:	bf00      	nop
20001e18:	370c      	adds	r7, #12
20001e1a:	46bd      	mov	sp, r7
20001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e20:	4770      	bx	lr
20001e22:	bf00      	nop
20001e24:	40023c00 	.word	0x40023c00

20001e28 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
20001e28:	b480      	push	{r7}
20001e2a:	b085      	sub	sp, #20
20001e2c:	af00      	add	r7, sp, #0
20001e2e:	6078      	str	r0, [r7, #4]
20001e30:	460b      	mov	r3, r1
20001e32:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
20001e34:	2300      	movs	r3, #0
20001e36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
20001e38:	78fb      	ldrb	r3, [r7, #3]
20001e3a:	2b00      	cmp	r3, #0
20001e3c:	d102      	bne.n	20001e44 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
20001e3e:	2300      	movs	r3, #0
20001e40:	60fb      	str	r3, [r7, #12]
20001e42:	e010      	b.n	20001e66 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
20001e44:	78fb      	ldrb	r3, [r7, #3]
20001e46:	2b01      	cmp	r3, #1
20001e48:	d103      	bne.n	20001e52 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
20001e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
20001e4e:	60fb      	str	r3, [r7, #12]
20001e50:	e009      	b.n	20001e66 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
20001e52:	78fb      	ldrb	r3, [r7, #3]
20001e54:	2b02      	cmp	r3, #2
20001e56:	d103      	bne.n	20001e60 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
20001e58:	f44f 7300 	mov.w	r3, #512	; 0x200
20001e5c:	60fb      	str	r3, [r7, #12]
20001e5e:	e002      	b.n	20001e66 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
20001e60:	f44f 7340 	mov.w	r3, #768	; 0x300
20001e64:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20001e66:	4b13      	ldr	r3, [pc, #76]	; (20001eb4 <FLASH_Erase_Sector+0x8c>)
20001e68:	691b      	ldr	r3, [r3, #16]
20001e6a:	4a12      	ldr	r2, [pc, #72]	; (20001eb4 <FLASH_Erase_Sector+0x8c>)
20001e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20001e70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
20001e72:	4b10      	ldr	r3, [pc, #64]	; (20001eb4 <FLASH_Erase_Sector+0x8c>)
20001e74:	691a      	ldr	r2, [r3, #16]
20001e76:	490f      	ldr	r1, [pc, #60]	; (20001eb4 <FLASH_Erase_Sector+0x8c>)
20001e78:	68fb      	ldr	r3, [r7, #12]
20001e7a:	4313      	orrs	r3, r2
20001e7c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
20001e7e:	4b0d      	ldr	r3, [pc, #52]	; (20001eb4 <FLASH_Erase_Sector+0x8c>)
20001e80:	691b      	ldr	r3, [r3, #16]
20001e82:	4a0c      	ldr	r2, [pc, #48]	; (20001eb4 <FLASH_Erase_Sector+0x8c>)
20001e84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
20001e88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
20001e8a:	4b0a      	ldr	r3, [pc, #40]	; (20001eb4 <FLASH_Erase_Sector+0x8c>)
20001e8c:	691a      	ldr	r2, [r3, #16]
20001e8e:	687b      	ldr	r3, [r7, #4]
20001e90:	00db      	lsls	r3, r3, #3
20001e92:	4313      	orrs	r3, r2
20001e94:	4a07      	ldr	r2, [pc, #28]	; (20001eb4 <FLASH_Erase_Sector+0x8c>)
20001e96:	f043 0302 	orr.w	r3, r3, #2
20001e9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
20001e9c:	4b05      	ldr	r3, [pc, #20]	; (20001eb4 <FLASH_Erase_Sector+0x8c>)
20001e9e:	691b      	ldr	r3, [r3, #16]
20001ea0:	4a04      	ldr	r2, [pc, #16]	; (20001eb4 <FLASH_Erase_Sector+0x8c>)
20001ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20001ea6:	6113      	str	r3, [r2, #16]
}
20001ea8:	bf00      	nop
20001eaa:	3714      	adds	r7, #20
20001eac:	46bd      	mov	sp, r7
20001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
20001eb2:	4770      	bx	lr
20001eb4:	40023c00 	.word	0x40023c00

20001eb8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
20001eb8:	b480      	push	{r7}
20001eba:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
20001ebc:	4b20      	ldr	r3, [pc, #128]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001ebe:	681b      	ldr	r3, [r3, #0]
20001ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
20001ec4:	2b00      	cmp	r3, #0
20001ec6:	d017      	beq.n	20001ef8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
20001ec8:	4b1d      	ldr	r3, [pc, #116]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001eca:	681b      	ldr	r3, [r3, #0]
20001ecc:	4a1c      	ldr	r2, [pc, #112]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001ece:	f423 7300 	bic.w	r3, r3, #512	; 0x200
20001ed2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
20001ed4:	4b1a      	ldr	r3, [pc, #104]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001ed6:	681b      	ldr	r3, [r3, #0]
20001ed8:	4a19      	ldr	r2, [pc, #100]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001eda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
20001ede:	6013      	str	r3, [r2, #0]
20001ee0:	4b17      	ldr	r3, [pc, #92]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001ee2:	681b      	ldr	r3, [r3, #0]
20001ee4:	4a16      	ldr	r2, [pc, #88]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
20001eea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20001eec:	4b14      	ldr	r3, [pc, #80]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001eee:	681b      	ldr	r3, [r3, #0]
20001ef0:	4a13      	ldr	r2, [pc, #76]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20001ef6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
20001ef8:	4b11      	ldr	r3, [pc, #68]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001efa:	681b      	ldr	r3, [r3, #0]
20001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
20001f00:	2b00      	cmp	r3, #0
20001f02:	d017      	beq.n	20001f34 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
20001f04:	4b0e      	ldr	r3, [pc, #56]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001f06:	681b      	ldr	r3, [r3, #0]
20001f08:	4a0d      	ldr	r2, [pc, #52]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001f0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
20001f0e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
20001f10:	4b0b      	ldr	r3, [pc, #44]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001f12:	681b      	ldr	r3, [r3, #0]
20001f14:	4a0a      	ldr	r2, [pc, #40]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001f16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
20001f1a:	6013      	str	r3, [r2, #0]
20001f1c:	4b08      	ldr	r3, [pc, #32]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001f1e:	681b      	ldr	r3, [r3, #0]
20001f20:	4a07      	ldr	r2, [pc, #28]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001f22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
20001f26:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
20001f28:	4b05      	ldr	r3, [pc, #20]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001f2a:	681b      	ldr	r3, [r3, #0]
20001f2c:	4a04      	ldr	r2, [pc, #16]	; (20001f40 <FLASH_FlushCaches+0x88>)
20001f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20001f32:	6013      	str	r3, [r2, #0]
  }
}
20001f34:	bf00      	nop
20001f36:	46bd      	mov	sp, r7
20001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f3c:	4770      	bx	lr
20001f3e:	bf00      	nop
20001f40:	40023c00 	.word	0x40023c00

20001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20001f44:	b480      	push	{r7}
20001f46:	b089      	sub	sp, #36	; 0x24
20001f48:	af00      	add	r7, sp, #0
20001f4a:	6078      	str	r0, [r7, #4]
20001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
20001f4e:	2300      	movs	r3, #0
20001f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
20001f52:	2300      	movs	r3, #0
20001f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
20001f56:	2300      	movs	r3, #0
20001f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
20001f5a:	2300      	movs	r3, #0
20001f5c:	61fb      	str	r3, [r7, #28]
20001f5e:	e165      	b.n	2000222c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
20001f60:	2201      	movs	r2, #1
20001f62:	69fb      	ldr	r3, [r7, #28]
20001f64:	fa02 f303 	lsl.w	r3, r2, r3
20001f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
20001f6a:	683b      	ldr	r3, [r7, #0]
20001f6c:	681b      	ldr	r3, [r3, #0]
20001f6e:	697a      	ldr	r2, [r7, #20]
20001f70:	4013      	ands	r3, r2
20001f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
20001f74:	693a      	ldr	r2, [r7, #16]
20001f76:	697b      	ldr	r3, [r7, #20]
20001f78:	429a      	cmp	r2, r3
20001f7a:	f040 8154 	bne.w	20002226 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001f7e:	683b      	ldr	r3, [r7, #0]
20001f80:	685b      	ldr	r3, [r3, #4]
20001f82:	f003 0303 	and.w	r3, r3, #3
20001f86:	2b01      	cmp	r3, #1
20001f88:	d005      	beq.n	20001f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20001f8a:	683b      	ldr	r3, [r7, #0]
20001f8c:	685b      	ldr	r3, [r3, #4]
20001f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20001f92:	2b02      	cmp	r3, #2
20001f94:	d130      	bne.n	20001ff8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
20001f96:	687b      	ldr	r3, [r7, #4]
20001f98:	689b      	ldr	r3, [r3, #8]
20001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20001f9c:	69fb      	ldr	r3, [r7, #28]
20001f9e:	005b      	lsls	r3, r3, #1
20001fa0:	2203      	movs	r2, #3
20001fa2:	fa02 f303 	lsl.w	r3, r2, r3
20001fa6:	43db      	mvns	r3, r3
20001fa8:	69ba      	ldr	r2, [r7, #24]
20001faa:	4013      	ands	r3, r2
20001fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
20001fae:	683b      	ldr	r3, [r7, #0]
20001fb0:	68da      	ldr	r2, [r3, #12]
20001fb2:	69fb      	ldr	r3, [r7, #28]
20001fb4:	005b      	lsls	r3, r3, #1
20001fb6:	fa02 f303 	lsl.w	r3, r2, r3
20001fba:	69ba      	ldr	r2, [r7, #24]
20001fbc:	4313      	orrs	r3, r2
20001fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
20001fc0:	687b      	ldr	r3, [r7, #4]
20001fc2:	69ba      	ldr	r2, [r7, #24]
20001fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
20001fc6:	687b      	ldr	r3, [r7, #4]
20001fc8:	685b      	ldr	r3, [r3, #4]
20001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
20001fcc:	2201      	movs	r2, #1
20001fce:	69fb      	ldr	r3, [r7, #28]
20001fd0:	fa02 f303 	lsl.w	r3, r2, r3
20001fd4:	43db      	mvns	r3, r3
20001fd6:	69ba      	ldr	r2, [r7, #24]
20001fd8:	4013      	ands	r3, r2
20001fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
20001fdc:	683b      	ldr	r3, [r7, #0]
20001fde:	685b      	ldr	r3, [r3, #4]
20001fe0:	091b      	lsrs	r3, r3, #4
20001fe2:	f003 0201 	and.w	r2, r3, #1
20001fe6:	69fb      	ldr	r3, [r7, #28]
20001fe8:	fa02 f303 	lsl.w	r3, r2, r3
20001fec:	69ba      	ldr	r2, [r7, #24]
20001fee:	4313      	orrs	r3, r2
20001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
20001ff2:	687b      	ldr	r3, [r7, #4]
20001ff4:	69ba      	ldr	r2, [r7, #24]
20001ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20001ff8:	683b      	ldr	r3, [r7, #0]
20001ffa:	685b      	ldr	r3, [r3, #4]
20001ffc:	f003 0303 	and.w	r3, r3, #3
20002000:	2b03      	cmp	r3, #3
20002002:	d017      	beq.n	20002034 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
20002004:	687b      	ldr	r3, [r7, #4]
20002006:	68db      	ldr	r3, [r3, #12]
20002008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2000200a:	69fb      	ldr	r3, [r7, #28]
2000200c:	005b      	lsls	r3, r3, #1
2000200e:	2203      	movs	r2, #3
20002010:	fa02 f303 	lsl.w	r3, r2, r3
20002014:	43db      	mvns	r3, r3
20002016:	69ba      	ldr	r2, [r7, #24]
20002018:	4013      	ands	r3, r2
2000201a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
2000201c:	683b      	ldr	r3, [r7, #0]
2000201e:	689a      	ldr	r2, [r3, #8]
20002020:	69fb      	ldr	r3, [r7, #28]
20002022:	005b      	lsls	r3, r3, #1
20002024:	fa02 f303 	lsl.w	r3, r2, r3
20002028:	69ba      	ldr	r2, [r7, #24]
2000202a:	4313      	orrs	r3, r2
2000202c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
2000202e:	687b      	ldr	r3, [r7, #4]
20002030:	69ba      	ldr	r2, [r7, #24]
20002032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20002034:	683b      	ldr	r3, [r7, #0]
20002036:	685b      	ldr	r3, [r3, #4]
20002038:	f003 0303 	and.w	r3, r3, #3
2000203c:	2b02      	cmp	r3, #2
2000203e:	d123      	bne.n	20002088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
20002040:	69fb      	ldr	r3, [r7, #28]
20002042:	08da      	lsrs	r2, r3, #3
20002044:	687b      	ldr	r3, [r7, #4]
20002046:	3208      	adds	r2, #8
20002048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000204c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
2000204e:	69fb      	ldr	r3, [r7, #28]
20002050:	f003 0307 	and.w	r3, r3, #7
20002054:	009b      	lsls	r3, r3, #2
20002056:	220f      	movs	r2, #15
20002058:	fa02 f303 	lsl.w	r3, r2, r3
2000205c:	43db      	mvns	r3, r3
2000205e:	69ba      	ldr	r2, [r7, #24]
20002060:	4013      	ands	r3, r2
20002062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
20002064:	683b      	ldr	r3, [r7, #0]
20002066:	691a      	ldr	r2, [r3, #16]
20002068:	69fb      	ldr	r3, [r7, #28]
2000206a:	f003 0307 	and.w	r3, r3, #7
2000206e:	009b      	lsls	r3, r3, #2
20002070:	fa02 f303 	lsl.w	r3, r2, r3
20002074:	69ba      	ldr	r2, [r7, #24]
20002076:	4313      	orrs	r3, r2
20002078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
2000207a:	69fb      	ldr	r3, [r7, #28]
2000207c:	08da      	lsrs	r2, r3, #3
2000207e:	687b      	ldr	r3, [r7, #4]
20002080:	3208      	adds	r2, #8
20002082:	69b9      	ldr	r1, [r7, #24]
20002084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20002088:	687b      	ldr	r3, [r7, #4]
2000208a:	681b      	ldr	r3, [r3, #0]
2000208c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
2000208e:	69fb      	ldr	r3, [r7, #28]
20002090:	005b      	lsls	r3, r3, #1
20002092:	2203      	movs	r2, #3
20002094:	fa02 f303 	lsl.w	r3, r2, r3
20002098:	43db      	mvns	r3, r3
2000209a:	69ba      	ldr	r2, [r7, #24]
2000209c:	4013      	ands	r3, r2
2000209e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
200020a0:	683b      	ldr	r3, [r7, #0]
200020a2:	685b      	ldr	r3, [r3, #4]
200020a4:	f003 0203 	and.w	r2, r3, #3
200020a8:	69fb      	ldr	r3, [r7, #28]
200020aa:	005b      	lsls	r3, r3, #1
200020ac:	fa02 f303 	lsl.w	r3, r2, r3
200020b0:	69ba      	ldr	r2, [r7, #24]
200020b2:	4313      	orrs	r3, r2
200020b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
200020b6:	687b      	ldr	r3, [r7, #4]
200020b8:	69ba      	ldr	r2, [r7, #24]
200020ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
200020bc:	683b      	ldr	r3, [r7, #0]
200020be:	685b      	ldr	r3, [r3, #4]
200020c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
200020c4:	2b00      	cmp	r3, #0
200020c6:	f000 80ae 	beq.w	20002226 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
200020ca:	2300      	movs	r3, #0
200020cc:	60fb      	str	r3, [r7, #12]
200020ce:	4b5d      	ldr	r3, [pc, #372]	; (20002244 <HAL_GPIO_Init+0x300>)
200020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200020d2:	4a5c      	ldr	r2, [pc, #368]	; (20002244 <HAL_GPIO_Init+0x300>)
200020d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
200020d8:	6453      	str	r3, [r2, #68]	; 0x44
200020da:	4b5a      	ldr	r3, [pc, #360]	; (20002244 <HAL_GPIO_Init+0x300>)
200020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200020de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
200020e2:	60fb      	str	r3, [r7, #12]
200020e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
200020e6:	4a58      	ldr	r2, [pc, #352]	; (20002248 <HAL_GPIO_Init+0x304>)
200020e8:	69fb      	ldr	r3, [r7, #28]
200020ea:	089b      	lsrs	r3, r3, #2
200020ec:	3302      	adds	r3, #2
200020ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
200020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
200020f4:	69fb      	ldr	r3, [r7, #28]
200020f6:	f003 0303 	and.w	r3, r3, #3
200020fa:	009b      	lsls	r3, r3, #2
200020fc:	220f      	movs	r2, #15
200020fe:	fa02 f303 	lsl.w	r3, r2, r3
20002102:	43db      	mvns	r3, r3
20002104:	69ba      	ldr	r2, [r7, #24]
20002106:	4013      	ands	r3, r2
20002108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
2000210a:	687b      	ldr	r3, [r7, #4]
2000210c:	4a4f      	ldr	r2, [pc, #316]	; (2000224c <HAL_GPIO_Init+0x308>)
2000210e:	4293      	cmp	r3, r2
20002110:	d025      	beq.n	2000215e <HAL_GPIO_Init+0x21a>
20002112:	687b      	ldr	r3, [r7, #4]
20002114:	4a4e      	ldr	r2, [pc, #312]	; (20002250 <HAL_GPIO_Init+0x30c>)
20002116:	4293      	cmp	r3, r2
20002118:	d01f      	beq.n	2000215a <HAL_GPIO_Init+0x216>
2000211a:	687b      	ldr	r3, [r7, #4]
2000211c:	4a4d      	ldr	r2, [pc, #308]	; (20002254 <HAL_GPIO_Init+0x310>)
2000211e:	4293      	cmp	r3, r2
20002120:	d019      	beq.n	20002156 <HAL_GPIO_Init+0x212>
20002122:	687b      	ldr	r3, [r7, #4]
20002124:	4a4c      	ldr	r2, [pc, #304]	; (20002258 <HAL_GPIO_Init+0x314>)
20002126:	4293      	cmp	r3, r2
20002128:	d013      	beq.n	20002152 <HAL_GPIO_Init+0x20e>
2000212a:	687b      	ldr	r3, [r7, #4]
2000212c:	4a4b      	ldr	r2, [pc, #300]	; (2000225c <HAL_GPIO_Init+0x318>)
2000212e:	4293      	cmp	r3, r2
20002130:	d00d      	beq.n	2000214e <HAL_GPIO_Init+0x20a>
20002132:	687b      	ldr	r3, [r7, #4]
20002134:	4a4a      	ldr	r2, [pc, #296]	; (20002260 <HAL_GPIO_Init+0x31c>)
20002136:	4293      	cmp	r3, r2
20002138:	d007      	beq.n	2000214a <HAL_GPIO_Init+0x206>
2000213a:	687b      	ldr	r3, [r7, #4]
2000213c:	4a49      	ldr	r2, [pc, #292]	; (20002264 <HAL_GPIO_Init+0x320>)
2000213e:	4293      	cmp	r3, r2
20002140:	d101      	bne.n	20002146 <HAL_GPIO_Init+0x202>
20002142:	2306      	movs	r3, #6
20002144:	e00c      	b.n	20002160 <HAL_GPIO_Init+0x21c>
20002146:	2307      	movs	r3, #7
20002148:	e00a      	b.n	20002160 <HAL_GPIO_Init+0x21c>
2000214a:	2305      	movs	r3, #5
2000214c:	e008      	b.n	20002160 <HAL_GPIO_Init+0x21c>
2000214e:	2304      	movs	r3, #4
20002150:	e006      	b.n	20002160 <HAL_GPIO_Init+0x21c>
20002152:	2303      	movs	r3, #3
20002154:	e004      	b.n	20002160 <HAL_GPIO_Init+0x21c>
20002156:	2302      	movs	r3, #2
20002158:	e002      	b.n	20002160 <HAL_GPIO_Init+0x21c>
2000215a:	2301      	movs	r3, #1
2000215c:	e000      	b.n	20002160 <HAL_GPIO_Init+0x21c>
2000215e:	2300      	movs	r3, #0
20002160:	69fa      	ldr	r2, [r7, #28]
20002162:	f002 0203 	and.w	r2, r2, #3
20002166:	0092      	lsls	r2, r2, #2
20002168:	4093      	lsls	r3, r2
2000216a:	69ba      	ldr	r2, [r7, #24]
2000216c:	4313      	orrs	r3, r2
2000216e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
20002170:	4935      	ldr	r1, [pc, #212]	; (20002248 <HAL_GPIO_Init+0x304>)
20002172:	69fb      	ldr	r3, [r7, #28]
20002174:	089b      	lsrs	r3, r3, #2
20002176:	3302      	adds	r3, #2
20002178:	69ba      	ldr	r2, [r7, #24]
2000217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
2000217e:	4b3a      	ldr	r3, [pc, #232]	; (20002268 <HAL_GPIO_Init+0x324>)
20002180:	689b      	ldr	r3, [r3, #8]
20002182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20002184:	693b      	ldr	r3, [r7, #16]
20002186:	43db      	mvns	r3, r3
20002188:	69ba      	ldr	r2, [r7, #24]
2000218a:	4013      	ands	r3, r2
2000218c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
2000218e:	683b      	ldr	r3, [r7, #0]
20002190:	685b      	ldr	r3, [r3, #4]
20002192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
20002196:	2b00      	cmp	r3, #0
20002198:	d003      	beq.n	200021a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
2000219a:	69ba      	ldr	r2, [r7, #24]
2000219c:	693b      	ldr	r3, [r7, #16]
2000219e:	4313      	orrs	r3, r2
200021a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
200021a2:	4a31      	ldr	r2, [pc, #196]	; (20002268 <HAL_GPIO_Init+0x324>)
200021a4:	69bb      	ldr	r3, [r7, #24]
200021a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
200021a8:	4b2f      	ldr	r3, [pc, #188]	; (20002268 <HAL_GPIO_Init+0x324>)
200021aa:	68db      	ldr	r3, [r3, #12]
200021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200021ae:	693b      	ldr	r3, [r7, #16]
200021b0:	43db      	mvns	r3, r3
200021b2:	69ba      	ldr	r2, [r7, #24]
200021b4:	4013      	ands	r3, r2
200021b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
200021b8:	683b      	ldr	r3, [r7, #0]
200021ba:	685b      	ldr	r3, [r3, #4]
200021bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
200021c0:	2b00      	cmp	r3, #0
200021c2:	d003      	beq.n	200021cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
200021c4:	69ba      	ldr	r2, [r7, #24]
200021c6:	693b      	ldr	r3, [r7, #16]
200021c8:	4313      	orrs	r3, r2
200021ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
200021cc:	4a26      	ldr	r2, [pc, #152]	; (20002268 <HAL_GPIO_Init+0x324>)
200021ce:	69bb      	ldr	r3, [r7, #24]
200021d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
200021d2:	4b25      	ldr	r3, [pc, #148]	; (20002268 <HAL_GPIO_Init+0x324>)
200021d4:	685b      	ldr	r3, [r3, #4]
200021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200021d8:	693b      	ldr	r3, [r7, #16]
200021da:	43db      	mvns	r3, r3
200021dc:	69ba      	ldr	r2, [r7, #24]
200021de:	4013      	ands	r3, r2
200021e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
200021e2:	683b      	ldr	r3, [r7, #0]
200021e4:	685b      	ldr	r3, [r3, #4]
200021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200021ea:	2b00      	cmp	r3, #0
200021ec:	d003      	beq.n	200021f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
200021ee:	69ba      	ldr	r2, [r7, #24]
200021f0:	693b      	ldr	r3, [r7, #16]
200021f2:	4313      	orrs	r3, r2
200021f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
200021f6:	4a1c      	ldr	r2, [pc, #112]	; (20002268 <HAL_GPIO_Init+0x324>)
200021f8:	69bb      	ldr	r3, [r7, #24]
200021fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
200021fc:	4b1a      	ldr	r3, [pc, #104]	; (20002268 <HAL_GPIO_Init+0x324>)
200021fe:	681b      	ldr	r3, [r3, #0]
20002200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20002202:	693b      	ldr	r3, [r7, #16]
20002204:	43db      	mvns	r3, r3
20002206:	69ba      	ldr	r2, [r7, #24]
20002208:	4013      	ands	r3, r2
2000220a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
2000220c:	683b      	ldr	r3, [r7, #0]
2000220e:	685b      	ldr	r3, [r3, #4]
20002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20002214:	2b00      	cmp	r3, #0
20002216:	d003      	beq.n	20002220 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
20002218:	69ba      	ldr	r2, [r7, #24]
2000221a:	693b      	ldr	r3, [r7, #16]
2000221c:	4313      	orrs	r3, r2
2000221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20002220:	4a11      	ldr	r2, [pc, #68]	; (20002268 <HAL_GPIO_Init+0x324>)
20002222:	69bb      	ldr	r3, [r7, #24]
20002224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
20002226:	69fb      	ldr	r3, [r7, #28]
20002228:	3301      	adds	r3, #1
2000222a:	61fb      	str	r3, [r7, #28]
2000222c:	69fb      	ldr	r3, [r7, #28]
2000222e:	2b0f      	cmp	r3, #15
20002230:	f67f ae96 	bls.w	20001f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
20002234:	bf00      	nop
20002236:	bf00      	nop
20002238:	3724      	adds	r7, #36	; 0x24
2000223a:	46bd      	mov	sp, r7
2000223c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002240:	4770      	bx	lr
20002242:	bf00      	nop
20002244:	40023800 	.word	0x40023800
20002248:	40013800 	.word	0x40013800
2000224c:	40020000 	.word	0x40020000
20002250:	40020400 	.word	0x40020400
20002254:	40020800 	.word	0x40020800
20002258:	40020c00 	.word	0x40020c00
2000225c:	40021000 	.word	0x40021000
20002260:	40021400 	.word	0x40021400
20002264:	40021800 	.word	0x40021800
20002268:	40013c00 	.word	0x40013c00

2000226c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2000226c:	b480      	push	{r7}
2000226e:	b083      	sub	sp, #12
20002270:	af00      	add	r7, sp, #0
20002272:	6078      	str	r0, [r7, #4]
20002274:	460b      	mov	r3, r1
20002276:	807b      	strh	r3, [r7, #2]
20002278:	4613      	mov	r3, r2
2000227a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
2000227c:	787b      	ldrb	r3, [r7, #1]
2000227e:	2b00      	cmp	r3, #0
20002280:	d003      	beq.n	2000228a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
20002282:	887a      	ldrh	r2, [r7, #2]
20002284:	687b      	ldr	r3, [r7, #4]
20002286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
20002288:	e003      	b.n	20002292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
2000228a:	887b      	ldrh	r3, [r7, #2]
2000228c:	041a      	lsls	r2, r3, #16
2000228e:	687b      	ldr	r3, [r7, #4]
20002290:	619a      	str	r2, [r3, #24]
}
20002292:	bf00      	nop
20002294:	370c      	adds	r7, #12
20002296:	46bd      	mov	sp, r7
20002298:	f85d 7b04 	ldr.w	r7, [sp], #4
2000229c:	4770      	bx	lr
	...

200022a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
200022a0:	b580      	push	{r7, lr}
200022a2:	b082      	sub	sp, #8
200022a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
200022a6:	2300      	movs	r3, #0
200022a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
200022aa:	2300      	movs	r3, #0
200022ac:	603b      	str	r3, [r7, #0]
200022ae:	4b20      	ldr	r3, [pc, #128]	; (20002330 <HAL_PWREx_EnableOverDrive+0x90>)
200022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200022b2:	4a1f      	ldr	r2, [pc, #124]	; (20002330 <HAL_PWREx_EnableOverDrive+0x90>)
200022b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200022b8:	6413      	str	r3, [r2, #64]	; 0x40
200022ba:	4b1d      	ldr	r3, [pc, #116]	; (20002330 <HAL_PWREx_EnableOverDrive+0x90>)
200022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200022c2:	603b      	str	r3, [r7, #0]
200022c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
200022c6:	4b1b      	ldr	r3, [pc, #108]	; (20002334 <HAL_PWREx_EnableOverDrive+0x94>)
200022c8:	2201      	movs	r2, #1
200022ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200022cc:	f7ff fa3c 	bl	20001748 <HAL_GetTick>
200022d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
200022d2:	e009      	b.n	200022e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
200022d4:	f7ff fa38 	bl	20001748 <HAL_GetTick>
200022d8:	4602      	mov	r2, r0
200022da:	687b      	ldr	r3, [r7, #4]
200022dc:	1ad3      	subs	r3, r2, r3
200022de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
200022e2:	d901      	bls.n	200022e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
200022e4:	2303      	movs	r3, #3
200022e6:	e01f      	b.n	20002328 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
200022e8:	4b13      	ldr	r3, [pc, #76]	; (20002338 <HAL_PWREx_EnableOverDrive+0x98>)
200022ea:	685b      	ldr	r3, [r3, #4]
200022ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200022f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200022f4:	d1ee      	bne.n	200022d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
200022f6:	4b11      	ldr	r3, [pc, #68]	; (2000233c <HAL_PWREx_EnableOverDrive+0x9c>)
200022f8:	2201      	movs	r2, #1
200022fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200022fc:	f7ff fa24 	bl	20001748 <HAL_GetTick>
20002300:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20002302:	e009      	b.n	20002318 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20002304:	f7ff fa20 	bl	20001748 <HAL_GetTick>
20002308:	4602      	mov	r2, r0
2000230a:	687b      	ldr	r3, [r7, #4]
2000230c:	1ad3      	subs	r3, r2, r3
2000230e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20002312:	d901      	bls.n	20002318 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
20002314:	2303      	movs	r3, #3
20002316:	e007      	b.n	20002328 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20002318:	4b07      	ldr	r3, [pc, #28]	; (20002338 <HAL_PWREx_EnableOverDrive+0x98>)
2000231a:	685b      	ldr	r3, [r3, #4]
2000231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20002320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
20002324:	d1ee      	bne.n	20002304 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
20002326:	2300      	movs	r3, #0
}
20002328:	4618      	mov	r0, r3
2000232a:	3708      	adds	r7, #8
2000232c:	46bd      	mov	sp, r7
2000232e:	bd80      	pop	{r7, pc}
20002330:	40023800 	.word	0x40023800
20002334:	420e0040 	.word	0x420e0040
20002338:	40007000 	.word	0x40007000
2000233c:	420e0044 	.word	0x420e0044

20002340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20002340:	b580      	push	{r7, lr}
20002342:	b086      	sub	sp, #24
20002344:	af00      	add	r7, sp, #0
20002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
20002348:	687b      	ldr	r3, [r7, #4]
2000234a:	2b00      	cmp	r3, #0
2000234c:	d101      	bne.n	20002352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
2000234e:	2301      	movs	r3, #1
20002350:	e26f      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20002352:	687b      	ldr	r3, [r7, #4]
20002354:	681b      	ldr	r3, [r3, #0]
20002356:	f003 0301 	and.w	r3, r3, #1
2000235a:	2b00      	cmp	r3, #0
2000235c:	d075      	beq.n	2000244a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000235e:	4b88      	ldr	r3, [pc, #544]	; (20002580 <HAL_RCC_OscConfig+0x240>)
20002360:	689b      	ldr	r3, [r3, #8]
20002362:	f003 030c 	and.w	r3, r3, #12
20002366:	2b04      	cmp	r3, #4
20002368:	d00c      	beq.n	20002384 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000236a:	4b85      	ldr	r3, [pc, #532]	; (20002580 <HAL_RCC_OscConfig+0x240>)
2000236c:	689b      	ldr	r3, [r3, #8]
2000236e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20002372:	2b08      	cmp	r3, #8
20002374:	d112      	bne.n	2000239c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20002376:	4b82      	ldr	r3, [pc, #520]	; (20002580 <HAL_RCC_OscConfig+0x240>)
20002378:	685b      	ldr	r3, [r3, #4]
2000237a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000237e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20002382:	d10b      	bne.n	2000239c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20002384:	4b7e      	ldr	r3, [pc, #504]	; (20002580 <HAL_RCC_OscConfig+0x240>)
20002386:	681b      	ldr	r3, [r3, #0]
20002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000238c:	2b00      	cmp	r3, #0
2000238e:	d05b      	beq.n	20002448 <HAL_RCC_OscConfig+0x108>
20002390:	687b      	ldr	r3, [r7, #4]
20002392:	685b      	ldr	r3, [r3, #4]
20002394:	2b00      	cmp	r3, #0
20002396:	d157      	bne.n	20002448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
20002398:	2301      	movs	r3, #1
2000239a:	e24a      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2000239c:	687b      	ldr	r3, [r7, #4]
2000239e:	685b      	ldr	r3, [r3, #4]
200023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200023a4:	d106      	bne.n	200023b4 <HAL_RCC_OscConfig+0x74>
200023a6:	4b76      	ldr	r3, [pc, #472]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200023a8:	681b      	ldr	r3, [r3, #0]
200023aa:	4a75      	ldr	r2, [pc, #468]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200023ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200023b0:	6013      	str	r3, [r2, #0]
200023b2:	e01d      	b.n	200023f0 <HAL_RCC_OscConfig+0xb0>
200023b4:	687b      	ldr	r3, [r7, #4]
200023b6:	685b      	ldr	r3, [r3, #4]
200023b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
200023bc:	d10c      	bne.n	200023d8 <HAL_RCC_OscConfig+0x98>
200023be:	4b70      	ldr	r3, [pc, #448]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200023c0:	681b      	ldr	r3, [r3, #0]
200023c2:	4a6f      	ldr	r2, [pc, #444]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200023c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
200023c8:	6013      	str	r3, [r2, #0]
200023ca:	4b6d      	ldr	r3, [pc, #436]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200023cc:	681b      	ldr	r3, [r3, #0]
200023ce:	4a6c      	ldr	r2, [pc, #432]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200023d4:	6013      	str	r3, [r2, #0]
200023d6:	e00b      	b.n	200023f0 <HAL_RCC_OscConfig+0xb0>
200023d8:	4b69      	ldr	r3, [pc, #420]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200023da:	681b      	ldr	r3, [r3, #0]
200023dc:	4a68      	ldr	r2, [pc, #416]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200023de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
200023e2:	6013      	str	r3, [r2, #0]
200023e4:	4b66      	ldr	r3, [pc, #408]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200023e6:	681b      	ldr	r3, [r3, #0]
200023e8:	4a65      	ldr	r2, [pc, #404]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200023ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
200023ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
200023f0:	687b      	ldr	r3, [r7, #4]
200023f2:	685b      	ldr	r3, [r3, #4]
200023f4:	2b00      	cmp	r3, #0
200023f6:	d013      	beq.n	20002420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
200023f8:	f7ff f9a6 	bl	20001748 <HAL_GetTick>
200023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
200023fe:	e008      	b.n	20002412 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20002400:	f7ff f9a2 	bl	20001748 <HAL_GetTick>
20002404:	4602      	mov	r2, r0
20002406:	693b      	ldr	r3, [r7, #16]
20002408:	1ad3      	subs	r3, r2, r3
2000240a:	2b64      	cmp	r3, #100	; 0x64
2000240c:	d901      	bls.n	20002412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
2000240e:	2303      	movs	r3, #3
20002410:	e20f      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20002412:	4b5b      	ldr	r3, [pc, #364]	; (20002580 <HAL_RCC_OscConfig+0x240>)
20002414:	681b      	ldr	r3, [r3, #0]
20002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000241a:	2b00      	cmp	r3, #0
2000241c:	d0f0      	beq.n	20002400 <HAL_RCC_OscConfig+0xc0>
2000241e:	e014      	b.n	2000244a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20002420:	f7ff f992 	bl	20001748 <HAL_GetTick>
20002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20002426:	e008      	b.n	2000243a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20002428:	f7ff f98e 	bl	20001748 <HAL_GetTick>
2000242c:	4602      	mov	r2, r0
2000242e:	693b      	ldr	r3, [r7, #16]
20002430:	1ad3      	subs	r3, r2, r3
20002432:	2b64      	cmp	r3, #100	; 0x64
20002434:	d901      	bls.n	2000243a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
20002436:	2303      	movs	r3, #3
20002438:	e1fb      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000243a:	4b51      	ldr	r3, [pc, #324]	; (20002580 <HAL_RCC_OscConfig+0x240>)
2000243c:	681b      	ldr	r3, [r3, #0]
2000243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20002442:	2b00      	cmp	r3, #0
20002444:	d1f0      	bne.n	20002428 <HAL_RCC_OscConfig+0xe8>
20002446:	e000      	b.n	2000244a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20002448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2000244a:	687b      	ldr	r3, [r7, #4]
2000244c:	681b      	ldr	r3, [r3, #0]
2000244e:	f003 0302 	and.w	r3, r3, #2
20002452:	2b00      	cmp	r3, #0
20002454:	d063      	beq.n	2000251e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20002456:	4b4a      	ldr	r3, [pc, #296]	; (20002580 <HAL_RCC_OscConfig+0x240>)
20002458:	689b      	ldr	r3, [r3, #8]
2000245a:	f003 030c 	and.w	r3, r3, #12
2000245e:	2b00      	cmp	r3, #0
20002460:	d00b      	beq.n	2000247a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20002462:	4b47      	ldr	r3, [pc, #284]	; (20002580 <HAL_RCC_OscConfig+0x240>)
20002464:	689b      	ldr	r3, [r3, #8]
20002466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000246a:	2b08      	cmp	r3, #8
2000246c:	d11c      	bne.n	200024a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000246e:	4b44      	ldr	r3, [pc, #272]	; (20002580 <HAL_RCC_OscConfig+0x240>)
20002470:	685b      	ldr	r3, [r3, #4]
20002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20002476:	2b00      	cmp	r3, #0
20002478:	d116      	bne.n	200024a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000247a:	4b41      	ldr	r3, [pc, #260]	; (20002580 <HAL_RCC_OscConfig+0x240>)
2000247c:	681b      	ldr	r3, [r3, #0]
2000247e:	f003 0302 	and.w	r3, r3, #2
20002482:	2b00      	cmp	r3, #0
20002484:	d005      	beq.n	20002492 <HAL_RCC_OscConfig+0x152>
20002486:	687b      	ldr	r3, [r7, #4]
20002488:	68db      	ldr	r3, [r3, #12]
2000248a:	2b01      	cmp	r3, #1
2000248c:	d001      	beq.n	20002492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
2000248e:	2301      	movs	r3, #1
20002490:	e1cf      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20002492:	4b3b      	ldr	r3, [pc, #236]	; (20002580 <HAL_RCC_OscConfig+0x240>)
20002494:	681b      	ldr	r3, [r3, #0]
20002496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000249a:	687b      	ldr	r3, [r7, #4]
2000249c:	691b      	ldr	r3, [r3, #16]
2000249e:	00db      	lsls	r3, r3, #3
200024a0:	4937      	ldr	r1, [pc, #220]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200024a2:	4313      	orrs	r3, r2
200024a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
200024a6:	e03a      	b.n	2000251e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
200024a8:	687b      	ldr	r3, [r7, #4]
200024aa:	68db      	ldr	r3, [r3, #12]
200024ac:	2b00      	cmp	r3, #0
200024ae:	d020      	beq.n	200024f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
200024b0:	4b34      	ldr	r3, [pc, #208]	; (20002584 <HAL_RCC_OscConfig+0x244>)
200024b2:	2201      	movs	r2, #1
200024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200024b6:	f7ff f947 	bl	20001748 <HAL_GetTick>
200024ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200024bc:	e008      	b.n	200024d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
200024be:	f7ff f943 	bl	20001748 <HAL_GetTick>
200024c2:	4602      	mov	r2, r0
200024c4:	693b      	ldr	r3, [r7, #16]
200024c6:	1ad3      	subs	r3, r2, r3
200024c8:	2b02      	cmp	r3, #2
200024ca:	d901      	bls.n	200024d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
200024cc:	2303      	movs	r3, #3
200024ce:	e1b0      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200024d0:	4b2b      	ldr	r3, [pc, #172]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200024d2:	681b      	ldr	r3, [r3, #0]
200024d4:	f003 0302 	and.w	r3, r3, #2
200024d8:	2b00      	cmp	r3, #0
200024da:	d0f0      	beq.n	200024be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
200024dc:	4b28      	ldr	r3, [pc, #160]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200024de:	681b      	ldr	r3, [r3, #0]
200024e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
200024e4:	687b      	ldr	r3, [r7, #4]
200024e6:	691b      	ldr	r3, [r3, #16]
200024e8:	00db      	lsls	r3, r3, #3
200024ea:	4925      	ldr	r1, [pc, #148]	; (20002580 <HAL_RCC_OscConfig+0x240>)
200024ec:	4313      	orrs	r3, r2
200024ee:	600b      	str	r3, [r1, #0]
200024f0:	e015      	b.n	2000251e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
200024f2:	4b24      	ldr	r3, [pc, #144]	; (20002584 <HAL_RCC_OscConfig+0x244>)
200024f4:	2200      	movs	r2, #0
200024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200024f8:	f7ff f926 	bl	20001748 <HAL_GetTick>
200024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
200024fe:	e008      	b.n	20002512 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20002500:	f7ff f922 	bl	20001748 <HAL_GetTick>
20002504:	4602      	mov	r2, r0
20002506:	693b      	ldr	r3, [r7, #16]
20002508:	1ad3      	subs	r3, r2, r3
2000250a:	2b02      	cmp	r3, #2
2000250c:	d901      	bls.n	20002512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
2000250e:	2303      	movs	r3, #3
20002510:	e18f      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20002512:	4b1b      	ldr	r3, [pc, #108]	; (20002580 <HAL_RCC_OscConfig+0x240>)
20002514:	681b      	ldr	r3, [r3, #0]
20002516:	f003 0302 	and.w	r3, r3, #2
2000251a:	2b00      	cmp	r3, #0
2000251c:	d1f0      	bne.n	20002500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2000251e:	687b      	ldr	r3, [r7, #4]
20002520:	681b      	ldr	r3, [r3, #0]
20002522:	f003 0308 	and.w	r3, r3, #8
20002526:	2b00      	cmp	r3, #0
20002528:	d036      	beq.n	20002598 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
2000252a:	687b      	ldr	r3, [r7, #4]
2000252c:	695b      	ldr	r3, [r3, #20]
2000252e:	2b00      	cmp	r3, #0
20002530:	d016      	beq.n	20002560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
20002532:	4b15      	ldr	r3, [pc, #84]	; (20002588 <HAL_RCC_OscConfig+0x248>)
20002534:	2201      	movs	r2, #1
20002536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20002538:	f7ff f906 	bl	20001748 <HAL_GetTick>
2000253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000253e:	e008      	b.n	20002552 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20002540:	f7ff f902 	bl	20001748 <HAL_GetTick>
20002544:	4602      	mov	r2, r0
20002546:	693b      	ldr	r3, [r7, #16]
20002548:	1ad3      	subs	r3, r2, r3
2000254a:	2b02      	cmp	r3, #2
2000254c:	d901      	bls.n	20002552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
2000254e:	2303      	movs	r3, #3
20002550:	e16f      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20002552:	4b0b      	ldr	r3, [pc, #44]	; (20002580 <HAL_RCC_OscConfig+0x240>)
20002554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20002556:	f003 0302 	and.w	r3, r3, #2
2000255a:	2b00      	cmp	r3, #0
2000255c:	d0f0      	beq.n	20002540 <HAL_RCC_OscConfig+0x200>
2000255e:	e01b      	b.n	20002598 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20002560:	4b09      	ldr	r3, [pc, #36]	; (20002588 <HAL_RCC_OscConfig+0x248>)
20002562:	2200      	movs	r2, #0
20002564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
20002566:	f7ff f8ef 	bl	20001748 <HAL_GetTick>
2000256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000256c:	e00e      	b.n	2000258c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000256e:	f7ff f8eb 	bl	20001748 <HAL_GetTick>
20002572:	4602      	mov	r2, r0
20002574:	693b      	ldr	r3, [r7, #16]
20002576:	1ad3      	subs	r3, r2, r3
20002578:	2b02      	cmp	r3, #2
2000257a:	d907      	bls.n	2000258c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
2000257c:	2303      	movs	r3, #3
2000257e:	e158      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
20002580:	40023800 	.word	0x40023800
20002584:	42470000 	.word	0x42470000
20002588:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000258c:	4b88      	ldr	r3, [pc, #544]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
2000258e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20002590:	f003 0302 	and.w	r3, r3, #2
20002594:	2b00      	cmp	r3, #0
20002596:	d1ea      	bne.n	2000256e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20002598:	687b      	ldr	r3, [r7, #4]
2000259a:	681b      	ldr	r3, [r3, #0]
2000259c:	f003 0304 	and.w	r3, r3, #4
200025a0:	2b00      	cmp	r3, #0
200025a2:	f000 8097 	beq.w	200026d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
200025a6:	2300      	movs	r3, #0
200025a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
200025aa:	4b81      	ldr	r3, [pc, #516]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
200025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200025b2:	2b00      	cmp	r3, #0
200025b4:	d10f      	bne.n	200025d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
200025b6:	2300      	movs	r3, #0
200025b8:	60bb      	str	r3, [r7, #8]
200025ba:	4b7d      	ldr	r3, [pc, #500]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
200025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200025be:	4a7c      	ldr	r2, [pc, #496]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
200025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200025c4:	6413      	str	r3, [r2, #64]	; 0x40
200025c6:	4b7a      	ldr	r3, [pc, #488]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
200025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200025ce:	60bb      	str	r3, [r7, #8]
200025d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
200025d2:	2301      	movs	r3, #1
200025d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
200025d6:	4b77      	ldr	r3, [pc, #476]	; (200027b4 <HAL_RCC_OscConfig+0x474>)
200025d8:	681b      	ldr	r3, [r3, #0]
200025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
200025de:	2b00      	cmp	r3, #0
200025e0:	d118      	bne.n	20002614 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
200025e2:	4b74      	ldr	r3, [pc, #464]	; (200027b4 <HAL_RCC_OscConfig+0x474>)
200025e4:	681b      	ldr	r3, [r3, #0]
200025e6:	4a73      	ldr	r2, [pc, #460]	; (200027b4 <HAL_RCC_OscConfig+0x474>)
200025e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200025ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
200025ee:	f7ff f8ab 	bl	20001748 <HAL_GetTick>
200025f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
200025f4:	e008      	b.n	20002608 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
200025f6:	f7ff f8a7 	bl	20001748 <HAL_GetTick>
200025fa:	4602      	mov	r2, r0
200025fc:	693b      	ldr	r3, [r7, #16]
200025fe:	1ad3      	subs	r3, r2, r3
20002600:	2b02      	cmp	r3, #2
20002602:	d901      	bls.n	20002608 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
20002604:	2303      	movs	r3, #3
20002606:	e114      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20002608:	4b6a      	ldr	r3, [pc, #424]	; (200027b4 <HAL_RCC_OscConfig+0x474>)
2000260a:	681b      	ldr	r3, [r3, #0]
2000260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002610:	2b00      	cmp	r3, #0
20002612:	d0f0      	beq.n	200025f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20002614:	687b      	ldr	r3, [r7, #4]
20002616:	689b      	ldr	r3, [r3, #8]
20002618:	2b01      	cmp	r3, #1
2000261a:	d106      	bne.n	2000262a <HAL_RCC_OscConfig+0x2ea>
2000261c:	4b64      	ldr	r3, [pc, #400]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
2000261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20002620:	4a63      	ldr	r2, [pc, #396]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
20002622:	f043 0301 	orr.w	r3, r3, #1
20002626:	6713      	str	r3, [r2, #112]	; 0x70
20002628:	e01c      	b.n	20002664 <HAL_RCC_OscConfig+0x324>
2000262a:	687b      	ldr	r3, [r7, #4]
2000262c:	689b      	ldr	r3, [r3, #8]
2000262e:	2b05      	cmp	r3, #5
20002630:	d10c      	bne.n	2000264c <HAL_RCC_OscConfig+0x30c>
20002632:	4b5f      	ldr	r3, [pc, #380]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
20002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20002636:	4a5e      	ldr	r2, [pc, #376]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
20002638:	f043 0304 	orr.w	r3, r3, #4
2000263c:	6713      	str	r3, [r2, #112]	; 0x70
2000263e:	4b5c      	ldr	r3, [pc, #368]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
20002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20002642:	4a5b      	ldr	r2, [pc, #364]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
20002644:	f043 0301 	orr.w	r3, r3, #1
20002648:	6713      	str	r3, [r2, #112]	; 0x70
2000264a:	e00b      	b.n	20002664 <HAL_RCC_OscConfig+0x324>
2000264c:	4b58      	ldr	r3, [pc, #352]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
2000264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20002650:	4a57      	ldr	r2, [pc, #348]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
20002652:	f023 0301 	bic.w	r3, r3, #1
20002656:	6713      	str	r3, [r2, #112]	; 0x70
20002658:	4b55      	ldr	r3, [pc, #340]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
2000265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000265c:	4a54      	ldr	r2, [pc, #336]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
2000265e:	f023 0304 	bic.w	r3, r3, #4
20002662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20002664:	687b      	ldr	r3, [r7, #4]
20002666:	689b      	ldr	r3, [r3, #8]
20002668:	2b00      	cmp	r3, #0
2000266a:	d015      	beq.n	20002698 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000266c:	f7ff f86c 	bl	20001748 <HAL_GetTick>
20002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20002672:	e00a      	b.n	2000268a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20002674:	f7ff f868 	bl	20001748 <HAL_GetTick>
20002678:	4602      	mov	r2, r0
2000267a:	693b      	ldr	r3, [r7, #16]
2000267c:	1ad3      	subs	r3, r2, r3
2000267e:	f241 3288 	movw	r2, #5000	; 0x1388
20002682:	4293      	cmp	r3, r2
20002684:	d901      	bls.n	2000268a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
20002686:	2303      	movs	r3, #3
20002688:	e0d3      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000268a:	4b49      	ldr	r3, [pc, #292]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
2000268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000268e:	f003 0302 	and.w	r3, r3, #2
20002692:	2b00      	cmp	r3, #0
20002694:	d0ee      	beq.n	20002674 <HAL_RCC_OscConfig+0x334>
20002696:	e014      	b.n	200026c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
20002698:	f7ff f856 	bl	20001748 <HAL_GetTick>
2000269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000269e:	e00a      	b.n	200026b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
200026a0:	f7ff f852 	bl	20001748 <HAL_GetTick>
200026a4:	4602      	mov	r2, r0
200026a6:	693b      	ldr	r3, [r7, #16]
200026a8:	1ad3      	subs	r3, r2, r3
200026aa:	f241 3288 	movw	r2, #5000	; 0x1388
200026ae:	4293      	cmp	r3, r2
200026b0:	d901      	bls.n	200026b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
200026b2:	2303      	movs	r3, #3
200026b4:	e0bd      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
200026b6:	4b3e      	ldr	r3, [pc, #248]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
200026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200026ba:	f003 0302 	and.w	r3, r3, #2
200026be:	2b00      	cmp	r3, #0
200026c0:	d1ee      	bne.n	200026a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
200026c2:	7dfb      	ldrb	r3, [r7, #23]
200026c4:	2b01      	cmp	r3, #1
200026c6:	d105      	bne.n	200026d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
200026c8:	4b39      	ldr	r3, [pc, #228]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
200026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200026cc:	4a38      	ldr	r2, [pc, #224]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
200026ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
200026d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
200026d4:	687b      	ldr	r3, [r7, #4]
200026d6:	699b      	ldr	r3, [r3, #24]
200026d8:	2b00      	cmp	r3, #0
200026da:	f000 80a9 	beq.w	20002830 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
200026de:	4b34      	ldr	r3, [pc, #208]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
200026e0:	689b      	ldr	r3, [r3, #8]
200026e2:	f003 030c 	and.w	r3, r3, #12
200026e6:	2b08      	cmp	r3, #8
200026e8:	d05c      	beq.n	200027a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
200026ea:	687b      	ldr	r3, [r7, #4]
200026ec:	699b      	ldr	r3, [r3, #24]
200026ee:	2b02      	cmp	r3, #2
200026f0:	d141      	bne.n	20002776 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
200026f2:	4b31      	ldr	r3, [pc, #196]	; (200027b8 <HAL_RCC_OscConfig+0x478>)
200026f4:	2200      	movs	r2, #0
200026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200026f8:	f7ff f826 	bl	20001748 <HAL_GetTick>
200026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200026fe:	e008      	b.n	20002712 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20002700:	f7ff f822 	bl	20001748 <HAL_GetTick>
20002704:	4602      	mov	r2, r0
20002706:	693b      	ldr	r3, [r7, #16]
20002708:	1ad3      	subs	r3, r2, r3
2000270a:	2b02      	cmp	r3, #2
2000270c:	d901      	bls.n	20002712 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
2000270e:	2303      	movs	r3, #3
20002710:	e08f      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20002712:	4b27      	ldr	r3, [pc, #156]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
20002714:	681b      	ldr	r3, [r3, #0]
20002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000271a:	2b00      	cmp	r3, #0
2000271c:	d1f0      	bne.n	20002700 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
2000271e:	687b      	ldr	r3, [r7, #4]
20002720:	69da      	ldr	r2, [r3, #28]
20002722:	687b      	ldr	r3, [r7, #4]
20002724:	6a1b      	ldr	r3, [r3, #32]
20002726:	431a      	orrs	r2, r3
20002728:	687b      	ldr	r3, [r7, #4]
2000272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000272c:	019b      	lsls	r3, r3, #6
2000272e:	431a      	orrs	r2, r3
20002730:	687b      	ldr	r3, [r7, #4]
20002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002734:	085b      	lsrs	r3, r3, #1
20002736:	3b01      	subs	r3, #1
20002738:	041b      	lsls	r3, r3, #16
2000273a:	431a      	orrs	r2, r3
2000273c:	687b      	ldr	r3, [r7, #4]
2000273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002740:	061b      	lsls	r3, r3, #24
20002742:	491b      	ldr	r1, [pc, #108]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
20002744:	4313      	orrs	r3, r2
20002746:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20002748:	4b1b      	ldr	r3, [pc, #108]	; (200027b8 <HAL_RCC_OscConfig+0x478>)
2000274a:	2201      	movs	r2, #1
2000274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000274e:	f7fe fffb 	bl	20001748 <HAL_GetTick>
20002752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20002754:	e008      	b.n	20002768 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20002756:	f7fe fff7 	bl	20001748 <HAL_GetTick>
2000275a:	4602      	mov	r2, r0
2000275c:	693b      	ldr	r3, [r7, #16]
2000275e:	1ad3      	subs	r3, r2, r3
20002760:	2b02      	cmp	r3, #2
20002762:	d901      	bls.n	20002768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
20002764:	2303      	movs	r3, #3
20002766:	e064      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20002768:	4b11      	ldr	r3, [pc, #68]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
2000276a:	681b      	ldr	r3, [r3, #0]
2000276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20002770:	2b00      	cmp	r3, #0
20002772:	d0f0      	beq.n	20002756 <HAL_RCC_OscConfig+0x416>
20002774:	e05c      	b.n	20002830 <HAL_RCC_OscConfig+0x4f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20002776:	4b10      	ldr	r3, [pc, #64]	; (200027b8 <HAL_RCC_OscConfig+0x478>)
20002778:	2200      	movs	r2, #0
2000277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000277c:	f7fe ffe4 	bl	20001748 <HAL_GetTick>
20002780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20002782:	e008      	b.n	20002796 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20002784:	f7fe ffe0 	bl	20001748 <HAL_GetTick>
20002788:	4602      	mov	r2, r0
2000278a:	693b      	ldr	r3, [r7, #16]
2000278c:	1ad3      	subs	r3, r2, r3
2000278e:	2b02      	cmp	r3, #2
20002790:	d901      	bls.n	20002796 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
20002792:	2303      	movs	r3, #3
20002794:	e04d      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20002796:	4b06      	ldr	r3, [pc, #24]	; (200027b0 <HAL_RCC_OscConfig+0x470>)
20002798:	681b      	ldr	r3, [r3, #0]
2000279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000279e:	2b00      	cmp	r3, #0
200027a0:	d1f0      	bne.n	20002784 <HAL_RCC_OscConfig+0x444>
200027a2:	e045      	b.n	20002830 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
200027a4:	687b      	ldr	r3, [r7, #4]
200027a6:	699b      	ldr	r3, [r3, #24]
200027a8:	2b01      	cmp	r3, #1
200027aa:	d107      	bne.n	200027bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
200027ac:	2301      	movs	r3, #1
200027ae:	e040      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
200027b0:	40023800 	.word	0x40023800
200027b4:	40007000 	.word	0x40007000
200027b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
200027bc:	4b1f      	ldr	r3, [pc, #124]	; (2000283c <HAL_RCC_OscConfig+0x4fc>)
200027be:	685b      	ldr	r3, [r3, #4]
200027c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
200027c2:	687b      	ldr	r3, [r7, #4]
200027c4:	699b      	ldr	r3, [r3, #24]
200027c6:	2b01      	cmp	r3, #1
200027c8:	d030      	beq.n	2000282c <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
200027ca:	68fb      	ldr	r3, [r7, #12]
200027cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
200027d0:	687b      	ldr	r3, [r7, #4]
200027d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
200027d4:	429a      	cmp	r2, r3
200027d6:	d129      	bne.n	2000282c <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
200027d8:	68fb      	ldr	r3, [r7, #12]
200027da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
200027de:	687b      	ldr	r3, [r7, #4]
200027e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
200027e2:	429a      	cmp	r2, r3
200027e4:	d122      	bne.n	2000282c <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
200027e6:	68fa      	ldr	r2, [r7, #12]
200027e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
200027ec:	4013      	ands	r3, r2
200027ee:	687a      	ldr	r2, [r7, #4]
200027f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
200027f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
200027f4:	4293      	cmp	r3, r2
200027f6:	d119      	bne.n	2000282c <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
200027f8:	68fb      	ldr	r3, [r7, #12]
200027fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
200027fe:	687b      	ldr	r3, [r7, #4]
20002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002802:	085b      	lsrs	r3, r3, #1
20002804:	3b01      	subs	r3, #1
20002806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20002808:	429a      	cmp	r2, r3
2000280a:	d10f      	bne.n	2000282c <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
2000280c:	68fb      	ldr	r3, [r7, #12]
2000280e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
20002812:	687b      	ldr	r3, [r7, #4]
20002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20002818:	429a      	cmp	r2, r3
2000281a:	d107      	bne.n	2000282c <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
2000281c:	68fb      	ldr	r3, [r7, #12]
2000281e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
20002822:	687b      	ldr	r3, [r7, #4]
20002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002826:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20002828:	429a      	cmp	r2, r3
2000282a:	d001      	beq.n	20002830 <HAL_RCC_OscConfig+0x4f0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
2000282c:	2301      	movs	r3, #1
2000282e:	e000      	b.n	20002832 <HAL_RCC_OscConfig+0x4f2>
        }
      }
    }
  }
  return HAL_OK;
20002830:	2300      	movs	r3, #0
}
20002832:	4618      	mov	r0, r3
20002834:	3718      	adds	r7, #24
20002836:	46bd      	mov	sp, r7
20002838:	bd80      	pop	{r7, pc}
2000283a:	bf00      	nop
2000283c:	40023800 	.word	0x40023800

20002840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
20002840:	b580      	push	{r7, lr}
20002842:	b084      	sub	sp, #16
20002844:	af00      	add	r7, sp, #0
20002846:	6078      	str	r0, [r7, #4]
20002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
2000284a:	687b      	ldr	r3, [r7, #4]
2000284c:	2b00      	cmp	r3, #0
2000284e:	d101      	bne.n	20002854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
20002850:	2301      	movs	r3, #1
20002852:	e0cc      	b.n	200029ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
20002854:	4b68      	ldr	r3, [pc, #416]	; (200029f8 <HAL_RCC_ClockConfig+0x1b8>)
20002856:	681b      	ldr	r3, [r3, #0]
20002858:	f003 030f 	and.w	r3, r3, #15
2000285c:	683a      	ldr	r2, [r7, #0]
2000285e:	429a      	cmp	r2, r3
20002860:	d90c      	bls.n	2000287c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20002862:	4b65      	ldr	r3, [pc, #404]	; (200029f8 <HAL_RCC_ClockConfig+0x1b8>)
20002864:	683a      	ldr	r2, [r7, #0]
20002866:	b2d2      	uxtb	r2, r2
20002868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000286a:	4b63      	ldr	r3, [pc, #396]	; (200029f8 <HAL_RCC_ClockConfig+0x1b8>)
2000286c:	681b      	ldr	r3, [r3, #0]
2000286e:	f003 030f 	and.w	r3, r3, #15
20002872:	683a      	ldr	r2, [r7, #0]
20002874:	429a      	cmp	r2, r3
20002876:	d001      	beq.n	2000287c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
20002878:	2301      	movs	r3, #1
2000287a:	e0b8      	b.n	200029ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2000287c:	687b      	ldr	r3, [r7, #4]
2000287e:	681b      	ldr	r3, [r3, #0]
20002880:	f003 0302 	and.w	r3, r3, #2
20002884:	2b00      	cmp	r3, #0
20002886:	d020      	beq.n	200028ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20002888:	687b      	ldr	r3, [r7, #4]
2000288a:	681b      	ldr	r3, [r3, #0]
2000288c:	f003 0304 	and.w	r3, r3, #4
20002890:	2b00      	cmp	r3, #0
20002892:	d005      	beq.n	200028a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20002894:	4b59      	ldr	r3, [pc, #356]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
20002896:	689b      	ldr	r3, [r3, #8]
20002898:	4a58      	ldr	r2, [pc, #352]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
2000289a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2000289e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
200028a0:	687b      	ldr	r3, [r7, #4]
200028a2:	681b      	ldr	r3, [r3, #0]
200028a4:	f003 0308 	and.w	r3, r3, #8
200028a8:	2b00      	cmp	r3, #0
200028aa:	d005      	beq.n	200028b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
200028ac:	4b53      	ldr	r3, [pc, #332]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
200028ae:	689b      	ldr	r3, [r3, #8]
200028b0:	4a52      	ldr	r2, [pc, #328]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
200028b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
200028b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
200028b8:	4b50      	ldr	r3, [pc, #320]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
200028ba:	689b      	ldr	r3, [r3, #8]
200028bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
200028c0:	687b      	ldr	r3, [r7, #4]
200028c2:	689b      	ldr	r3, [r3, #8]
200028c4:	494d      	ldr	r1, [pc, #308]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
200028c6:	4313      	orrs	r3, r2
200028c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
200028ca:	687b      	ldr	r3, [r7, #4]
200028cc:	681b      	ldr	r3, [r3, #0]
200028ce:	f003 0301 	and.w	r3, r3, #1
200028d2:	2b00      	cmp	r3, #0
200028d4:	d044      	beq.n	20002960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
200028d6:	687b      	ldr	r3, [r7, #4]
200028d8:	685b      	ldr	r3, [r3, #4]
200028da:	2b01      	cmp	r3, #1
200028dc:	d107      	bne.n	200028ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
200028de:	4b47      	ldr	r3, [pc, #284]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
200028e0:	681b      	ldr	r3, [r3, #0]
200028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200028e6:	2b00      	cmp	r3, #0
200028e8:	d119      	bne.n	2000291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
200028ea:	2301      	movs	r3, #1
200028ec:	e07f      	b.n	200029ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
200028ee:	687b      	ldr	r3, [r7, #4]
200028f0:	685b      	ldr	r3, [r3, #4]
200028f2:	2b02      	cmp	r3, #2
200028f4:	d003      	beq.n	200028fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
200028f6:	687b      	ldr	r3, [r7, #4]
200028f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
200028fa:	2b03      	cmp	r3, #3
200028fc:	d107      	bne.n	2000290e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200028fe:	4b3f      	ldr	r3, [pc, #252]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
20002900:	681b      	ldr	r3, [r3, #0]
20002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20002906:	2b00      	cmp	r3, #0
20002908:	d109      	bne.n	2000291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000290a:	2301      	movs	r3, #1
2000290c:	e06f      	b.n	200029ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000290e:	4b3b      	ldr	r3, [pc, #236]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
20002910:	681b      	ldr	r3, [r3, #0]
20002912:	f003 0302 	and.w	r3, r3, #2
20002916:	2b00      	cmp	r3, #0
20002918:	d101      	bne.n	2000291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000291a:	2301      	movs	r3, #1
2000291c:	e067      	b.n	200029ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000291e:	4b37      	ldr	r3, [pc, #220]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
20002920:	689b      	ldr	r3, [r3, #8]
20002922:	f023 0203 	bic.w	r2, r3, #3
20002926:	687b      	ldr	r3, [r7, #4]
20002928:	685b      	ldr	r3, [r3, #4]
2000292a:	4934      	ldr	r1, [pc, #208]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
2000292c:	4313      	orrs	r3, r2
2000292e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
20002930:	f7fe ff0a 	bl	20001748 <HAL_GetTick>
20002934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20002936:	e00a      	b.n	2000294e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20002938:	f7fe ff06 	bl	20001748 <HAL_GetTick>
2000293c:	4602      	mov	r2, r0
2000293e:	68fb      	ldr	r3, [r7, #12]
20002940:	1ad3      	subs	r3, r2, r3
20002942:	f241 3288 	movw	r2, #5000	; 0x1388
20002946:	4293      	cmp	r3, r2
20002948:	d901      	bls.n	2000294e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
2000294a:	2303      	movs	r3, #3
2000294c:	e04f      	b.n	200029ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000294e:	4b2b      	ldr	r3, [pc, #172]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
20002950:	689b      	ldr	r3, [r3, #8]
20002952:	f003 020c 	and.w	r2, r3, #12
20002956:	687b      	ldr	r3, [r7, #4]
20002958:	685b      	ldr	r3, [r3, #4]
2000295a:	009b      	lsls	r3, r3, #2
2000295c:	429a      	cmp	r2, r3
2000295e:	d1eb      	bne.n	20002938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
20002960:	4b25      	ldr	r3, [pc, #148]	; (200029f8 <HAL_RCC_ClockConfig+0x1b8>)
20002962:	681b      	ldr	r3, [r3, #0]
20002964:	f003 030f 	and.w	r3, r3, #15
20002968:	683a      	ldr	r2, [r7, #0]
2000296a:	429a      	cmp	r2, r3
2000296c:	d20c      	bcs.n	20002988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000296e:	4b22      	ldr	r3, [pc, #136]	; (200029f8 <HAL_RCC_ClockConfig+0x1b8>)
20002970:	683a      	ldr	r2, [r7, #0]
20002972:	b2d2      	uxtb	r2, r2
20002974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20002976:	4b20      	ldr	r3, [pc, #128]	; (200029f8 <HAL_RCC_ClockConfig+0x1b8>)
20002978:	681b      	ldr	r3, [r3, #0]
2000297a:	f003 030f 	and.w	r3, r3, #15
2000297e:	683a      	ldr	r2, [r7, #0]
20002980:	429a      	cmp	r2, r3
20002982:	d001      	beq.n	20002988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
20002984:	2301      	movs	r3, #1
20002986:	e032      	b.n	200029ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20002988:	687b      	ldr	r3, [r7, #4]
2000298a:	681b      	ldr	r3, [r3, #0]
2000298c:	f003 0304 	and.w	r3, r3, #4
20002990:	2b00      	cmp	r3, #0
20002992:	d008      	beq.n	200029a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20002994:	4b19      	ldr	r3, [pc, #100]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
20002996:	689b      	ldr	r3, [r3, #8]
20002998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
2000299c:	687b      	ldr	r3, [r7, #4]
2000299e:	68db      	ldr	r3, [r3, #12]
200029a0:	4916      	ldr	r1, [pc, #88]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
200029a2:	4313      	orrs	r3, r2
200029a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
200029a6:	687b      	ldr	r3, [r7, #4]
200029a8:	681b      	ldr	r3, [r3, #0]
200029aa:	f003 0308 	and.w	r3, r3, #8
200029ae:	2b00      	cmp	r3, #0
200029b0:	d009      	beq.n	200029c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
200029b2:	4b12      	ldr	r3, [pc, #72]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
200029b4:	689b      	ldr	r3, [r3, #8]
200029b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
200029ba:	687b      	ldr	r3, [r7, #4]
200029bc:	691b      	ldr	r3, [r3, #16]
200029be:	00db      	lsls	r3, r3, #3
200029c0:	490e      	ldr	r1, [pc, #56]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
200029c2:	4313      	orrs	r3, r2
200029c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
200029c6:	f000 f821 	bl	20002a0c <HAL_RCC_GetSysClockFreq>
200029ca:	4602      	mov	r2, r0
200029cc:	4b0b      	ldr	r3, [pc, #44]	; (200029fc <HAL_RCC_ClockConfig+0x1bc>)
200029ce:	689b      	ldr	r3, [r3, #8]
200029d0:	091b      	lsrs	r3, r3, #4
200029d2:	f003 030f 	and.w	r3, r3, #15
200029d6:	490a      	ldr	r1, [pc, #40]	; (20002a00 <HAL_RCC_ClockConfig+0x1c0>)
200029d8:	5ccb      	ldrb	r3, [r1, r3]
200029da:	fa22 f303 	lsr.w	r3, r2, r3
200029de:	4a09      	ldr	r2, [pc, #36]	; (20002a04 <HAL_RCC_ClockConfig+0x1c4>)
200029e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
200029e2:	4b09      	ldr	r3, [pc, #36]	; (20002a08 <HAL_RCC_ClockConfig+0x1c8>)
200029e4:	681b      	ldr	r3, [r3, #0]
200029e6:	4618      	mov	r0, r3
200029e8:	f7fe fe6a 	bl	200016c0 <HAL_InitTick>

  return HAL_OK;
200029ec:	2300      	movs	r3, #0
}
200029ee:	4618      	mov	r0, r3
200029f0:	3710      	adds	r7, #16
200029f2:	46bd      	mov	sp, r7
200029f4:	bd80      	pop	{r7, pc}
200029f6:	bf00      	nop
200029f8:	40023c00 	.word	0x40023c00
200029fc:	40023800 	.word	0x40023800
20002a00:	20003af8 	.word	0x20003af8
20002a04:	20003b2c 	.word	0x20003b2c
20002a08:	20003b30 	.word	0x20003b30

20002a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
20002a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20002a10:	b094      	sub	sp, #80	; 0x50
20002a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
20002a14:	2300      	movs	r3, #0
20002a16:	647b      	str	r3, [r7, #68]	; 0x44
20002a18:	2300      	movs	r3, #0
20002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
20002a1c:	2300      	movs	r3, #0
20002a1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
20002a20:	2300      	movs	r3, #0
20002a22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20002a24:	4b79      	ldr	r3, [pc, #484]	; (20002c0c <HAL_RCC_GetSysClockFreq+0x200>)
20002a26:	689b      	ldr	r3, [r3, #8]
20002a28:	f003 030c 	and.w	r3, r3, #12
20002a2c:	2b08      	cmp	r3, #8
20002a2e:	d00d      	beq.n	20002a4c <HAL_RCC_GetSysClockFreq+0x40>
20002a30:	2b08      	cmp	r3, #8
20002a32:	f200 80e1 	bhi.w	20002bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
20002a36:	2b00      	cmp	r3, #0
20002a38:	d002      	beq.n	20002a40 <HAL_RCC_GetSysClockFreq+0x34>
20002a3a:	2b04      	cmp	r3, #4
20002a3c:	d003      	beq.n	20002a46 <HAL_RCC_GetSysClockFreq+0x3a>
20002a3e:	e0db      	b.n	20002bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20002a40:	4b73      	ldr	r3, [pc, #460]	; (20002c10 <HAL_RCC_GetSysClockFreq+0x204>)
20002a42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
20002a44:	e0db      	b.n	20002bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20002a46:	4b73      	ldr	r3, [pc, #460]	; (20002c14 <HAL_RCC_GetSysClockFreq+0x208>)
20002a48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
20002a4a:	e0d8      	b.n	20002bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20002a4c:	4b6f      	ldr	r3, [pc, #444]	; (20002c0c <HAL_RCC_GetSysClockFreq+0x200>)
20002a4e:	685b      	ldr	r3, [r3, #4]
20002a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20002a54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20002a56:	4b6d      	ldr	r3, [pc, #436]	; (20002c0c <HAL_RCC_GetSysClockFreq+0x200>)
20002a58:	685b      	ldr	r3, [r3, #4]
20002a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20002a5e:	2b00      	cmp	r3, #0
20002a60:	d063      	beq.n	20002b2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20002a62:	4b6a      	ldr	r3, [pc, #424]	; (20002c0c <HAL_RCC_GetSysClockFreq+0x200>)
20002a64:	685b      	ldr	r3, [r3, #4]
20002a66:	099b      	lsrs	r3, r3, #6
20002a68:	2200      	movs	r2, #0
20002a6a:	63bb      	str	r3, [r7, #56]	; 0x38
20002a6c:	63fa      	str	r2, [r7, #60]	; 0x3c
20002a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
20002a74:	633b      	str	r3, [r7, #48]	; 0x30
20002a76:	2300      	movs	r3, #0
20002a78:	637b      	str	r3, [r7, #52]	; 0x34
20002a7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
20002a7e:	4622      	mov	r2, r4
20002a80:	462b      	mov	r3, r5
20002a82:	f04f 0000 	mov.w	r0, #0
20002a86:	f04f 0100 	mov.w	r1, #0
20002a8a:	0159      	lsls	r1, r3, #5
20002a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20002a90:	0150      	lsls	r0, r2, #5
20002a92:	4602      	mov	r2, r0
20002a94:	460b      	mov	r3, r1
20002a96:	4621      	mov	r1, r4
20002a98:	1a51      	subs	r1, r2, r1
20002a9a:	6139      	str	r1, [r7, #16]
20002a9c:	4629      	mov	r1, r5
20002a9e:	eb63 0301 	sbc.w	r3, r3, r1
20002aa2:	617b      	str	r3, [r7, #20]
20002aa4:	f04f 0200 	mov.w	r2, #0
20002aa8:	f04f 0300 	mov.w	r3, #0
20002aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
20002ab0:	4659      	mov	r1, fp
20002ab2:	018b      	lsls	r3, r1, #6
20002ab4:	4651      	mov	r1, sl
20002ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
20002aba:	4651      	mov	r1, sl
20002abc:	018a      	lsls	r2, r1, #6
20002abe:	4651      	mov	r1, sl
20002ac0:	ebb2 0801 	subs.w	r8, r2, r1
20002ac4:	4659      	mov	r1, fp
20002ac6:	eb63 0901 	sbc.w	r9, r3, r1
20002aca:	f04f 0200 	mov.w	r2, #0
20002ace:	f04f 0300 	mov.w	r3, #0
20002ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
20002ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
20002ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
20002ade:	4690      	mov	r8, r2
20002ae0:	4699      	mov	r9, r3
20002ae2:	4623      	mov	r3, r4
20002ae4:	eb18 0303 	adds.w	r3, r8, r3
20002ae8:	60bb      	str	r3, [r7, #8]
20002aea:	462b      	mov	r3, r5
20002aec:	eb49 0303 	adc.w	r3, r9, r3
20002af0:	60fb      	str	r3, [r7, #12]
20002af2:	f04f 0200 	mov.w	r2, #0
20002af6:	f04f 0300 	mov.w	r3, #0
20002afa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
20002afe:	4629      	mov	r1, r5
20002b00:	024b      	lsls	r3, r1, #9
20002b02:	4621      	mov	r1, r4
20002b04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
20002b08:	4621      	mov	r1, r4
20002b0a:	024a      	lsls	r2, r1, #9
20002b0c:	4610      	mov	r0, r2
20002b0e:	4619      	mov	r1, r3
20002b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20002b12:	2200      	movs	r2, #0
20002b14:	62bb      	str	r3, [r7, #40]	; 0x28
20002b16:	62fa      	str	r2, [r7, #44]	; 0x2c
20002b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
20002b1c:	f7fe fb72 	bl	20001204 <__aeabi_uldivmod>
20002b20:	4602      	mov	r2, r0
20002b22:	460b      	mov	r3, r1
20002b24:	4613      	mov	r3, r2
20002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
20002b28:	e058      	b.n	20002bdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20002b2a:	4b38      	ldr	r3, [pc, #224]	; (20002c0c <HAL_RCC_GetSysClockFreq+0x200>)
20002b2c:	685b      	ldr	r3, [r3, #4]
20002b2e:	099b      	lsrs	r3, r3, #6
20002b30:	2200      	movs	r2, #0
20002b32:	4618      	mov	r0, r3
20002b34:	4611      	mov	r1, r2
20002b36:	f3c0 0308 	ubfx	r3, r0, #0, #9
20002b3a:	623b      	str	r3, [r7, #32]
20002b3c:	2300      	movs	r3, #0
20002b3e:	627b      	str	r3, [r7, #36]	; 0x24
20002b40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
20002b44:	4642      	mov	r2, r8
20002b46:	464b      	mov	r3, r9
20002b48:	f04f 0000 	mov.w	r0, #0
20002b4c:	f04f 0100 	mov.w	r1, #0
20002b50:	0159      	lsls	r1, r3, #5
20002b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20002b56:	0150      	lsls	r0, r2, #5
20002b58:	4602      	mov	r2, r0
20002b5a:	460b      	mov	r3, r1
20002b5c:	4641      	mov	r1, r8
20002b5e:	ebb2 0a01 	subs.w	sl, r2, r1
20002b62:	4649      	mov	r1, r9
20002b64:	eb63 0b01 	sbc.w	fp, r3, r1
20002b68:	f04f 0200 	mov.w	r2, #0
20002b6c:	f04f 0300 	mov.w	r3, #0
20002b70:	ea4f 138b 	mov.w	r3, fp, lsl #6
20002b74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
20002b78:	ea4f 128a 	mov.w	r2, sl, lsl #6
20002b7c:	ebb2 040a 	subs.w	r4, r2, sl
20002b80:	eb63 050b 	sbc.w	r5, r3, fp
20002b84:	f04f 0200 	mov.w	r2, #0
20002b88:	f04f 0300 	mov.w	r3, #0
20002b8c:	00eb      	lsls	r3, r5, #3
20002b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20002b92:	00e2      	lsls	r2, r4, #3
20002b94:	4614      	mov	r4, r2
20002b96:	461d      	mov	r5, r3
20002b98:	4643      	mov	r3, r8
20002b9a:	18e3      	adds	r3, r4, r3
20002b9c:	603b      	str	r3, [r7, #0]
20002b9e:	464b      	mov	r3, r9
20002ba0:	eb45 0303 	adc.w	r3, r5, r3
20002ba4:	607b      	str	r3, [r7, #4]
20002ba6:	f04f 0200 	mov.w	r2, #0
20002baa:	f04f 0300 	mov.w	r3, #0
20002bae:	e9d7 4500 	ldrd	r4, r5, [r7]
20002bb2:	4629      	mov	r1, r5
20002bb4:	028b      	lsls	r3, r1, #10
20002bb6:	4621      	mov	r1, r4
20002bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20002bbc:	4621      	mov	r1, r4
20002bbe:	028a      	lsls	r2, r1, #10
20002bc0:	4610      	mov	r0, r2
20002bc2:	4619      	mov	r1, r3
20002bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20002bc6:	2200      	movs	r2, #0
20002bc8:	61bb      	str	r3, [r7, #24]
20002bca:	61fa      	str	r2, [r7, #28]
20002bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20002bd0:	f7fe fb18 	bl	20001204 <__aeabi_uldivmod>
20002bd4:	4602      	mov	r2, r0
20002bd6:	460b      	mov	r3, r1
20002bd8:	4613      	mov	r3, r2
20002bda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
20002bdc:	4b0b      	ldr	r3, [pc, #44]	; (20002c0c <HAL_RCC_GetSysClockFreq+0x200>)
20002bde:	685b      	ldr	r3, [r3, #4]
20002be0:	0c1b      	lsrs	r3, r3, #16
20002be2:	f003 0303 	and.w	r3, r3, #3
20002be6:	3301      	adds	r3, #1
20002be8:	005b      	lsls	r3, r3, #1
20002bea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
20002bec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
20002bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
20002bf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
20002bf6:	e002      	b.n	20002bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20002bf8:	4b05      	ldr	r3, [pc, #20]	; (20002c10 <HAL_RCC_GetSysClockFreq+0x204>)
20002bfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
20002bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
20002bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
20002c00:	4618      	mov	r0, r3
20002c02:	3750      	adds	r7, #80	; 0x50
20002c04:	46bd      	mov	sp, r7
20002c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20002c0a:	bf00      	nop
20002c0c:	40023800 	.word	0x40023800
20002c10:	00f42400 	.word	0x00f42400
20002c14:	007a1200 	.word	0x007a1200

20002c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20002c18:	b480      	push	{r7}
20002c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
20002c1c:	4b03      	ldr	r3, [pc, #12]	; (20002c2c <HAL_RCC_GetHCLKFreq+0x14>)
20002c1e:	681b      	ldr	r3, [r3, #0]
}
20002c20:	4618      	mov	r0, r3
20002c22:	46bd      	mov	sp, r7
20002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
20002c28:	4770      	bx	lr
20002c2a:	bf00      	nop
20002c2c:	20003b2c 	.word	0x20003b2c

20002c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
20002c30:	b580      	push	{r7, lr}
20002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
20002c34:	f7ff fff0 	bl	20002c18 <HAL_RCC_GetHCLKFreq>
20002c38:	4602      	mov	r2, r0
20002c3a:	4b05      	ldr	r3, [pc, #20]	; (20002c50 <HAL_RCC_GetPCLK1Freq+0x20>)
20002c3c:	689b      	ldr	r3, [r3, #8]
20002c3e:	0a9b      	lsrs	r3, r3, #10
20002c40:	f003 0307 	and.w	r3, r3, #7
20002c44:	4903      	ldr	r1, [pc, #12]	; (20002c54 <HAL_RCC_GetPCLK1Freq+0x24>)
20002c46:	5ccb      	ldrb	r3, [r1, r3]
20002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
20002c4c:	4618      	mov	r0, r3
20002c4e:	bd80      	pop	{r7, pc}
20002c50:	40023800 	.word	0x40023800
20002c54:	20003b08 	.word	0x20003b08

20002c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
20002c58:	b580      	push	{r7, lr}
20002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
20002c5c:	f7ff ffdc 	bl	20002c18 <HAL_RCC_GetHCLKFreq>
20002c60:	4602      	mov	r2, r0
20002c62:	4b05      	ldr	r3, [pc, #20]	; (20002c78 <HAL_RCC_GetPCLK2Freq+0x20>)
20002c64:	689b      	ldr	r3, [r3, #8]
20002c66:	0b5b      	lsrs	r3, r3, #13
20002c68:	f003 0307 	and.w	r3, r3, #7
20002c6c:	4903      	ldr	r1, [pc, #12]	; (20002c7c <HAL_RCC_GetPCLK2Freq+0x24>)
20002c6e:	5ccb      	ldrb	r3, [r1, r3]
20002c70:	fa22 f303 	lsr.w	r3, r2, r3
}
20002c74:	4618      	mov	r0, r3
20002c76:	bd80      	pop	{r7, pc}
20002c78:	40023800 	.word	0x40023800
20002c7c:	20003b08 	.word	0x20003b08

20002c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
20002c80:	b580      	push	{r7, lr}
20002c82:	b082      	sub	sp, #8
20002c84:	af00      	add	r7, sp, #0
20002c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
20002c88:	687b      	ldr	r3, [r7, #4]
20002c8a:	2b00      	cmp	r3, #0
20002c8c:	d101      	bne.n	20002c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
20002c8e:	2301      	movs	r3, #1
20002c90:	e042      	b.n	20002d18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
20002c92:	687b      	ldr	r3, [r7, #4]
20002c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20002c98:	b2db      	uxtb	r3, r3
20002c9a:	2b00      	cmp	r3, #0
20002c9c:	d106      	bne.n	20002cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
20002c9e:	687b      	ldr	r3, [r7, #4]
20002ca0:	2200      	movs	r2, #0
20002ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
20002ca6:	6878      	ldr	r0, [r7, #4]
20002ca8:	f000 fe50 	bl	2000394c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
20002cac:	687b      	ldr	r3, [r7, #4]
20002cae:	2224      	movs	r2, #36	; 0x24
20002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
20002cb4:	687b      	ldr	r3, [r7, #4]
20002cb6:	681b      	ldr	r3, [r3, #0]
20002cb8:	68da      	ldr	r2, [r3, #12]
20002cba:	687b      	ldr	r3, [r7, #4]
20002cbc:	681b      	ldr	r3, [r3, #0]
20002cbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
20002cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
20002cc4:	6878      	ldr	r0, [r7, #4]
20002cc6:	f000 f82b 	bl	20002d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
20002cca:	687b      	ldr	r3, [r7, #4]
20002ccc:	681b      	ldr	r3, [r3, #0]
20002cce:	691a      	ldr	r2, [r3, #16]
20002cd0:	687b      	ldr	r3, [r7, #4]
20002cd2:	681b      	ldr	r3, [r3, #0]
20002cd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
20002cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
20002cda:	687b      	ldr	r3, [r7, #4]
20002cdc:	681b      	ldr	r3, [r3, #0]
20002cde:	695a      	ldr	r2, [r3, #20]
20002ce0:	687b      	ldr	r3, [r7, #4]
20002ce2:	681b      	ldr	r3, [r3, #0]
20002ce4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
20002ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
20002cea:	687b      	ldr	r3, [r7, #4]
20002cec:	681b      	ldr	r3, [r3, #0]
20002cee:	68da      	ldr	r2, [r3, #12]
20002cf0:	687b      	ldr	r3, [r7, #4]
20002cf2:	681b      	ldr	r3, [r3, #0]
20002cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
20002cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
20002cfa:	687b      	ldr	r3, [r7, #4]
20002cfc:	2200      	movs	r2, #0
20002cfe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
20002d00:	687b      	ldr	r3, [r7, #4]
20002d02:	2220      	movs	r2, #32
20002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
20002d08:	687b      	ldr	r3, [r7, #4]
20002d0a:	2220      	movs	r2, #32
20002d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
20002d10:	687b      	ldr	r3, [r7, #4]
20002d12:	2200      	movs	r2, #0
20002d14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
20002d16:	2300      	movs	r3, #0
}
20002d18:	4618      	mov	r0, r3
20002d1a:	3708      	adds	r7, #8
20002d1c:	46bd      	mov	sp, r7
20002d1e:	bd80      	pop	{r7, pc}

20002d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
20002d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20002d24:	b0c0      	sub	sp, #256	; 0x100
20002d26:	af00      	add	r7, sp, #0
20002d28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
20002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002d30:	681b      	ldr	r3, [r3, #0]
20002d32:	691b      	ldr	r3, [r3, #16]
20002d34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
20002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002d3c:	68d9      	ldr	r1, [r3, #12]
20002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002d42:	681a      	ldr	r2, [r3, #0]
20002d44:	ea40 0301 	orr.w	r3, r0, r1
20002d48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
20002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002d4e:	689a      	ldr	r2, [r3, #8]
20002d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002d54:	691b      	ldr	r3, [r3, #16]
20002d56:	431a      	orrs	r2, r3
20002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002d5c:	695b      	ldr	r3, [r3, #20]
20002d5e:	431a      	orrs	r2, r3
20002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002d64:	69db      	ldr	r3, [r3, #28]
20002d66:	4313      	orrs	r3, r2
20002d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
20002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002d70:	681b      	ldr	r3, [r3, #0]
20002d72:	68db      	ldr	r3, [r3, #12]
20002d74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
20002d78:	f021 010c 	bic.w	r1, r1, #12
20002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002d80:	681a      	ldr	r2, [r3, #0]
20002d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
20002d86:	430b      	orrs	r3, r1
20002d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
20002d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002d8e:	681b      	ldr	r3, [r3, #0]
20002d90:	695b      	ldr	r3, [r3, #20]
20002d92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
20002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002d9a:	6999      	ldr	r1, [r3, #24]
20002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002da0:	681a      	ldr	r2, [r3, #0]
20002da2:	ea40 0301 	orr.w	r3, r0, r1
20002da6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
20002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002dac:	681a      	ldr	r2, [r3, #0]
20002dae:	4b8f      	ldr	r3, [pc, #572]	; (20002fec <UART_SetConfig+0x2cc>)
20002db0:	429a      	cmp	r2, r3
20002db2:	d005      	beq.n	20002dc0 <UART_SetConfig+0xa0>
20002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002db8:	681a      	ldr	r2, [r3, #0]
20002dba:	4b8d      	ldr	r3, [pc, #564]	; (20002ff0 <UART_SetConfig+0x2d0>)
20002dbc:	429a      	cmp	r2, r3
20002dbe:	d104      	bne.n	20002dca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
20002dc0:	f7ff ff4a 	bl	20002c58 <HAL_RCC_GetPCLK2Freq>
20002dc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
20002dc8:	e003      	b.n	20002dd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
20002dca:	f7ff ff31 	bl	20002c30 <HAL_RCC_GetPCLK1Freq>
20002dce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
20002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002dd6:	69db      	ldr	r3, [r3, #28]
20002dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20002ddc:	f040 810c 	bne.w	20002ff8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
20002de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20002de4:	2200      	movs	r2, #0
20002de6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
20002dea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
20002dee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
20002df2:	4622      	mov	r2, r4
20002df4:	462b      	mov	r3, r5
20002df6:	1891      	adds	r1, r2, r2
20002df8:	65b9      	str	r1, [r7, #88]	; 0x58
20002dfa:	415b      	adcs	r3, r3
20002dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
20002dfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
20002e02:	4621      	mov	r1, r4
20002e04:	eb12 0801 	adds.w	r8, r2, r1
20002e08:	4629      	mov	r1, r5
20002e0a:	eb43 0901 	adc.w	r9, r3, r1
20002e0e:	f04f 0200 	mov.w	r2, #0
20002e12:	f04f 0300 	mov.w	r3, #0
20002e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
20002e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
20002e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
20002e22:	4690      	mov	r8, r2
20002e24:	4699      	mov	r9, r3
20002e26:	4623      	mov	r3, r4
20002e28:	eb18 0303 	adds.w	r3, r8, r3
20002e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
20002e30:	462b      	mov	r3, r5
20002e32:	eb49 0303 	adc.w	r3, r9, r3
20002e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
20002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002e3e:	685b      	ldr	r3, [r3, #4]
20002e40:	2200      	movs	r2, #0
20002e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
20002e46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
20002e4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
20002e4e:	460b      	mov	r3, r1
20002e50:	18db      	adds	r3, r3, r3
20002e52:	653b      	str	r3, [r7, #80]	; 0x50
20002e54:	4613      	mov	r3, r2
20002e56:	eb42 0303 	adc.w	r3, r2, r3
20002e5a:	657b      	str	r3, [r7, #84]	; 0x54
20002e5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
20002e60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
20002e64:	f7fe f9ce 	bl	20001204 <__aeabi_uldivmod>
20002e68:	4602      	mov	r2, r0
20002e6a:	460b      	mov	r3, r1
20002e6c:	4b61      	ldr	r3, [pc, #388]	; (20002ff4 <UART_SetConfig+0x2d4>)
20002e6e:	fba3 2302 	umull	r2, r3, r3, r2
20002e72:	095b      	lsrs	r3, r3, #5
20002e74:	011c      	lsls	r4, r3, #4
20002e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20002e7a:	2200      	movs	r2, #0
20002e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
20002e80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
20002e84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
20002e88:	4642      	mov	r2, r8
20002e8a:	464b      	mov	r3, r9
20002e8c:	1891      	adds	r1, r2, r2
20002e8e:	64b9      	str	r1, [r7, #72]	; 0x48
20002e90:	415b      	adcs	r3, r3
20002e92:	64fb      	str	r3, [r7, #76]	; 0x4c
20002e94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
20002e98:	4641      	mov	r1, r8
20002e9a:	eb12 0a01 	adds.w	sl, r2, r1
20002e9e:	4649      	mov	r1, r9
20002ea0:	eb43 0b01 	adc.w	fp, r3, r1
20002ea4:	f04f 0200 	mov.w	r2, #0
20002ea8:	f04f 0300 	mov.w	r3, #0
20002eac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
20002eb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
20002eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
20002eb8:	4692      	mov	sl, r2
20002eba:	469b      	mov	fp, r3
20002ebc:	4643      	mov	r3, r8
20002ebe:	eb1a 0303 	adds.w	r3, sl, r3
20002ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
20002ec6:	464b      	mov	r3, r9
20002ec8:	eb4b 0303 	adc.w	r3, fp, r3
20002ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
20002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002ed4:	685b      	ldr	r3, [r3, #4]
20002ed6:	2200      	movs	r2, #0
20002ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
20002edc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
20002ee0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
20002ee4:	460b      	mov	r3, r1
20002ee6:	18db      	adds	r3, r3, r3
20002ee8:	643b      	str	r3, [r7, #64]	; 0x40
20002eea:	4613      	mov	r3, r2
20002eec:	eb42 0303 	adc.w	r3, r2, r3
20002ef0:	647b      	str	r3, [r7, #68]	; 0x44
20002ef2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
20002ef6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
20002efa:	f7fe f983 	bl	20001204 <__aeabi_uldivmod>
20002efe:	4602      	mov	r2, r0
20002f00:	460b      	mov	r3, r1
20002f02:	4611      	mov	r1, r2
20002f04:	4b3b      	ldr	r3, [pc, #236]	; (20002ff4 <UART_SetConfig+0x2d4>)
20002f06:	fba3 2301 	umull	r2, r3, r3, r1
20002f0a:	095b      	lsrs	r3, r3, #5
20002f0c:	2264      	movs	r2, #100	; 0x64
20002f0e:	fb02 f303 	mul.w	r3, r2, r3
20002f12:	1acb      	subs	r3, r1, r3
20002f14:	00db      	lsls	r3, r3, #3
20002f16:	f103 0232 	add.w	r2, r3, #50	; 0x32
20002f1a:	4b36      	ldr	r3, [pc, #216]	; (20002ff4 <UART_SetConfig+0x2d4>)
20002f1c:	fba3 2302 	umull	r2, r3, r3, r2
20002f20:	095b      	lsrs	r3, r3, #5
20002f22:	005b      	lsls	r3, r3, #1
20002f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
20002f28:	441c      	add	r4, r3
20002f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20002f2e:	2200      	movs	r2, #0
20002f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
20002f34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
20002f38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
20002f3c:	4642      	mov	r2, r8
20002f3e:	464b      	mov	r3, r9
20002f40:	1891      	adds	r1, r2, r2
20002f42:	63b9      	str	r1, [r7, #56]	; 0x38
20002f44:	415b      	adcs	r3, r3
20002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
20002f48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
20002f4c:	4641      	mov	r1, r8
20002f4e:	1851      	adds	r1, r2, r1
20002f50:	6339      	str	r1, [r7, #48]	; 0x30
20002f52:	4649      	mov	r1, r9
20002f54:	414b      	adcs	r3, r1
20002f56:	637b      	str	r3, [r7, #52]	; 0x34
20002f58:	f04f 0200 	mov.w	r2, #0
20002f5c:	f04f 0300 	mov.w	r3, #0
20002f60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
20002f64:	4659      	mov	r1, fp
20002f66:	00cb      	lsls	r3, r1, #3
20002f68:	4651      	mov	r1, sl
20002f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
20002f6e:	4651      	mov	r1, sl
20002f70:	00ca      	lsls	r2, r1, #3
20002f72:	4610      	mov	r0, r2
20002f74:	4619      	mov	r1, r3
20002f76:	4603      	mov	r3, r0
20002f78:	4642      	mov	r2, r8
20002f7a:	189b      	adds	r3, r3, r2
20002f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
20002f80:	464b      	mov	r3, r9
20002f82:	460a      	mov	r2, r1
20002f84:	eb42 0303 	adc.w	r3, r2, r3
20002f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
20002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002f90:	685b      	ldr	r3, [r3, #4]
20002f92:	2200      	movs	r2, #0
20002f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
20002f98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
20002f9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
20002fa0:	460b      	mov	r3, r1
20002fa2:	18db      	adds	r3, r3, r3
20002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
20002fa6:	4613      	mov	r3, r2
20002fa8:	eb42 0303 	adc.w	r3, r2, r3
20002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
20002fae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
20002fb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
20002fb6:	f7fe f925 	bl	20001204 <__aeabi_uldivmod>
20002fba:	4602      	mov	r2, r0
20002fbc:	460b      	mov	r3, r1
20002fbe:	4b0d      	ldr	r3, [pc, #52]	; (20002ff4 <UART_SetConfig+0x2d4>)
20002fc0:	fba3 1302 	umull	r1, r3, r3, r2
20002fc4:	095b      	lsrs	r3, r3, #5
20002fc6:	2164      	movs	r1, #100	; 0x64
20002fc8:	fb01 f303 	mul.w	r3, r1, r3
20002fcc:	1ad3      	subs	r3, r2, r3
20002fce:	00db      	lsls	r3, r3, #3
20002fd0:	3332      	adds	r3, #50	; 0x32
20002fd2:	4a08      	ldr	r2, [pc, #32]	; (20002ff4 <UART_SetConfig+0x2d4>)
20002fd4:	fba2 2303 	umull	r2, r3, r2, r3
20002fd8:	095b      	lsrs	r3, r3, #5
20002fda:	f003 0207 	and.w	r2, r3, #7
20002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
20002fe2:	681b      	ldr	r3, [r3, #0]
20002fe4:	4422      	add	r2, r4
20002fe6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
20002fe8:	e106      	b.n	200031f8 <UART_SetConfig+0x4d8>
20002fea:	bf00      	nop
20002fec:	40011000 	.word	0x40011000
20002ff0:	40011400 	.word	0x40011400
20002ff4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
20002ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20002ffc:	2200      	movs	r2, #0
20002ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
20003002:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
20003006:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
2000300a:	4642      	mov	r2, r8
2000300c:	464b      	mov	r3, r9
2000300e:	1891      	adds	r1, r2, r2
20003010:	6239      	str	r1, [r7, #32]
20003012:	415b      	adcs	r3, r3
20003014:	627b      	str	r3, [r7, #36]	; 0x24
20003016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
2000301a:	4641      	mov	r1, r8
2000301c:	1854      	adds	r4, r2, r1
2000301e:	4649      	mov	r1, r9
20003020:	eb43 0501 	adc.w	r5, r3, r1
20003024:	f04f 0200 	mov.w	r2, #0
20003028:	f04f 0300 	mov.w	r3, #0
2000302c:	00eb      	lsls	r3, r5, #3
2000302e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20003032:	00e2      	lsls	r2, r4, #3
20003034:	4614      	mov	r4, r2
20003036:	461d      	mov	r5, r3
20003038:	4643      	mov	r3, r8
2000303a:	18e3      	adds	r3, r4, r3
2000303c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
20003040:	464b      	mov	r3, r9
20003042:	eb45 0303 	adc.w	r3, r5, r3
20003046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
2000304a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
2000304e:	685b      	ldr	r3, [r3, #4]
20003050:	2200      	movs	r2, #0
20003052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
20003056:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
2000305a:	f04f 0200 	mov.w	r2, #0
2000305e:	f04f 0300 	mov.w	r3, #0
20003062:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
20003066:	4629      	mov	r1, r5
20003068:	008b      	lsls	r3, r1, #2
2000306a:	4621      	mov	r1, r4
2000306c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
20003070:	4621      	mov	r1, r4
20003072:	008a      	lsls	r2, r1, #2
20003074:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
20003078:	f7fe f8c4 	bl	20001204 <__aeabi_uldivmod>
2000307c:	4602      	mov	r2, r0
2000307e:	460b      	mov	r3, r1
20003080:	4b60      	ldr	r3, [pc, #384]	; (20003204 <UART_SetConfig+0x4e4>)
20003082:	fba3 2302 	umull	r2, r3, r3, r2
20003086:	095b      	lsrs	r3, r3, #5
20003088:	011c      	lsls	r4, r3, #4
2000308a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
2000308e:	2200      	movs	r2, #0
20003090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
20003094:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
20003098:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
2000309c:	4642      	mov	r2, r8
2000309e:	464b      	mov	r3, r9
200030a0:	1891      	adds	r1, r2, r2
200030a2:	61b9      	str	r1, [r7, #24]
200030a4:	415b      	adcs	r3, r3
200030a6:	61fb      	str	r3, [r7, #28]
200030a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
200030ac:	4641      	mov	r1, r8
200030ae:	1851      	adds	r1, r2, r1
200030b0:	6139      	str	r1, [r7, #16]
200030b2:	4649      	mov	r1, r9
200030b4:	414b      	adcs	r3, r1
200030b6:	617b      	str	r3, [r7, #20]
200030b8:	f04f 0200 	mov.w	r2, #0
200030bc:	f04f 0300 	mov.w	r3, #0
200030c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
200030c4:	4659      	mov	r1, fp
200030c6:	00cb      	lsls	r3, r1, #3
200030c8:	4651      	mov	r1, sl
200030ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
200030ce:	4651      	mov	r1, sl
200030d0:	00ca      	lsls	r2, r1, #3
200030d2:	4610      	mov	r0, r2
200030d4:	4619      	mov	r1, r3
200030d6:	4603      	mov	r3, r0
200030d8:	4642      	mov	r2, r8
200030da:	189b      	adds	r3, r3, r2
200030dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
200030e0:	464b      	mov	r3, r9
200030e2:	460a      	mov	r2, r1
200030e4:	eb42 0303 	adc.w	r3, r2, r3
200030e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
200030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200030f0:	685b      	ldr	r3, [r3, #4]
200030f2:	2200      	movs	r2, #0
200030f4:	67bb      	str	r3, [r7, #120]	; 0x78
200030f6:	67fa      	str	r2, [r7, #124]	; 0x7c
200030f8:	f04f 0200 	mov.w	r2, #0
200030fc:	f04f 0300 	mov.w	r3, #0
20003100:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
20003104:	4649      	mov	r1, r9
20003106:	008b      	lsls	r3, r1, #2
20003108:	4641      	mov	r1, r8
2000310a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
2000310e:	4641      	mov	r1, r8
20003110:	008a      	lsls	r2, r1, #2
20003112:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
20003116:	f7fe f875 	bl	20001204 <__aeabi_uldivmod>
2000311a:	4602      	mov	r2, r0
2000311c:	460b      	mov	r3, r1
2000311e:	4611      	mov	r1, r2
20003120:	4b38      	ldr	r3, [pc, #224]	; (20003204 <UART_SetConfig+0x4e4>)
20003122:	fba3 2301 	umull	r2, r3, r3, r1
20003126:	095b      	lsrs	r3, r3, #5
20003128:	2264      	movs	r2, #100	; 0x64
2000312a:	fb02 f303 	mul.w	r3, r2, r3
2000312e:	1acb      	subs	r3, r1, r3
20003130:	011b      	lsls	r3, r3, #4
20003132:	3332      	adds	r3, #50	; 0x32
20003134:	4a33      	ldr	r2, [pc, #204]	; (20003204 <UART_SetConfig+0x4e4>)
20003136:	fba2 2303 	umull	r2, r3, r2, r3
2000313a:	095b      	lsrs	r3, r3, #5
2000313c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
20003140:	441c      	add	r4, r3
20003142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
20003146:	2200      	movs	r2, #0
20003148:	673b      	str	r3, [r7, #112]	; 0x70
2000314a:	677a      	str	r2, [r7, #116]	; 0x74
2000314c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
20003150:	4642      	mov	r2, r8
20003152:	464b      	mov	r3, r9
20003154:	1891      	adds	r1, r2, r2
20003156:	60b9      	str	r1, [r7, #8]
20003158:	415b      	adcs	r3, r3
2000315a:	60fb      	str	r3, [r7, #12]
2000315c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
20003160:	4641      	mov	r1, r8
20003162:	1851      	adds	r1, r2, r1
20003164:	6039      	str	r1, [r7, #0]
20003166:	4649      	mov	r1, r9
20003168:	414b      	adcs	r3, r1
2000316a:	607b      	str	r3, [r7, #4]
2000316c:	f04f 0200 	mov.w	r2, #0
20003170:	f04f 0300 	mov.w	r3, #0
20003174:	e9d7 ab00 	ldrd	sl, fp, [r7]
20003178:	4659      	mov	r1, fp
2000317a:	00cb      	lsls	r3, r1, #3
2000317c:	4651      	mov	r1, sl
2000317e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
20003182:	4651      	mov	r1, sl
20003184:	00ca      	lsls	r2, r1, #3
20003186:	4610      	mov	r0, r2
20003188:	4619      	mov	r1, r3
2000318a:	4603      	mov	r3, r0
2000318c:	4642      	mov	r2, r8
2000318e:	189b      	adds	r3, r3, r2
20003190:	66bb      	str	r3, [r7, #104]	; 0x68
20003192:	464b      	mov	r3, r9
20003194:	460a      	mov	r2, r1
20003196:	eb42 0303 	adc.w	r3, r2, r3
2000319a:	66fb      	str	r3, [r7, #108]	; 0x6c
2000319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200031a0:	685b      	ldr	r3, [r3, #4]
200031a2:	2200      	movs	r2, #0
200031a4:	663b      	str	r3, [r7, #96]	; 0x60
200031a6:	667a      	str	r2, [r7, #100]	; 0x64
200031a8:	f04f 0200 	mov.w	r2, #0
200031ac:	f04f 0300 	mov.w	r3, #0
200031b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
200031b4:	4649      	mov	r1, r9
200031b6:	008b      	lsls	r3, r1, #2
200031b8:	4641      	mov	r1, r8
200031ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
200031be:	4641      	mov	r1, r8
200031c0:	008a      	lsls	r2, r1, #2
200031c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
200031c6:	f7fe f81d 	bl	20001204 <__aeabi_uldivmod>
200031ca:	4602      	mov	r2, r0
200031cc:	460b      	mov	r3, r1
200031ce:	4b0d      	ldr	r3, [pc, #52]	; (20003204 <UART_SetConfig+0x4e4>)
200031d0:	fba3 1302 	umull	r1, r3, r3, r2
200031d4:	095b      	lsrs	r3, r3, #5
200031d6:	2164      	movs	r1, #100	; 0x64
200031d8:	fb01 f303 	mul.w	r3, r1, r3
200031dc:	1ad3      	subs	r3, r2, r3
200031de:	011b      	lsls	r3, r3, #4
200031e0:	3332      	adds	r3, #50	; 0x32
200031e2:	4a08      	ldr	r2, [pc, #32]	; (20003204 <UART_SetConfig+0x4e4>)
200031e4:	fba2 2303 	umull	r2, r3, r2, r3
200031e8:	095b      	lsrs	r3, r3, #5
200031ea:	f003 020f 	and.w	r2, r3, #15
200031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
200031f2:	681b      	ldr	r3, [r3, #0]
200031f4:	4422      	add	r2, r4
200031f6:	609a      	str	r2, [r3, #8]
}
200031f8:	bf00      	nop
200031fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
200031fe:	46bd      	mov	sp, r7
20003200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20003204:	51eb851f 	.word	0x51eb851f

20003208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
20003208:	f8df d034 	ldr.w	sp, [pc, #52]	; 20003240 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
2000320c:	480d      	ldr	r0, [pc, #52]	; (20003244 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
2000320e:	490e      	ldr	r1, [pc, #56]	; (20003248 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
20003210:	4a0e      	ldr	r2, [pc, #56]	; (2000324c <LoopFillZerobss+0x1e>)
  movs r3, #0
20003212:	2300      	movs	r3, #0
  b LoopCopyDataInit
20003214:	e002      	b.n	2000321c <LoopCopyDataInit>

20003216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20003216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20003218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
2000321a:	3304      	adds	r3, #4

2000321c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
2000321c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
2000321e:	428c      	cmp	r4, r1
  bcc CopyDataInit
20003220:	d3f9      	bcc.n	20003216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20003222:	4a0b      	ldr	r2, [pc, #44]	; (20003250 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
20003224:	4c0b      	ldr	r4, [pc, #44]	; (20003254 <LoopFillZerobss+0x26>)
  movs r3, #0
20003226:	2300      	movs	r3, #0
  b LoopFillZerobss
20003228:	e001      	b.n	2000322e <LoopFillZerobss>

2000322a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
2000322a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
2000322c:	3204      	adds	r2, #4

2000322e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
2000322e:	42a2      	cmp	r2, r4
  bcc FillZerobss
20003230:	d3fb      	bcc.n	2000322a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
20003232:	f7fe f9e9 	bl	20001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20003236:	f000 fc11 	bl	20003a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2000323a:	f000 fa51 	bl	200036e0 <main>
  bx  lr    
2000323e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20003240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
20003244:	20003b20 	.word	0x20003b20
  ldr r1, =_edata
20003248:	20003b38 	.word	0x20003b38
  ldr r2, =_sidata
2000324c:	20003b20 	.word	0x20003b20
  ldr r2, =_sbss
20003250:	20003b38 	.word	0x20003b38
  ldr r4, =_ebss
20003254:	20003c70 	.word	0x20003c70

20003258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20003258:	e7fe      	b.n	20003258 <ADC_IRQHandler>

2000325a <HEXQueueInit>:
	uint8_t next; //array index of the next element to write
	uint8_t buf[HEX_QUEUE_LEN];
	uint8_t len;
} HEXQueue;

void HEXQueueInit(HEXQueue *q) {
2000325a:	b480      	push	{r7}
2000325c:	b083      	sub	sp, #12
2000325e:	af00      	add	r7, sp, #0
20003260:	6078      	str	r0, [r7, #4]
	q->start = 0;
20003262:	687b      	ldr	r3, [r7, #4]
20003264:	2200      	movs	r2, #0
20003266:	701a      	strb	r2, [r3, #0]
	q->next = 0;
20003268:	687b      	ldr	r3, [r7, #4]
2000326a:	2200      	movs	r2, #0
2000326c:	705a      	strb	r2, [r3, #1]
	q->len = 0;
2000326e:	687b      	ldr	r3, [r7, #4]
20003270:	2200      	movs	r2, #0
20003272:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
20003276:	bf00      	nop
20003278:	370c      	adds	r7, #12
2000327a:	46bd      	mov	sp, r7
2000327c:	f85d 7b04 	ldr.w	r7, [sp], #4
20003280:	4770      	bx	lr

20003282 <HEXQueueFixBounds>:

void HEXQueueFixBounds(HEXQueue *q) {
20003282:	b480      	push	{r7}
20003284:	b083      	sub	sp, #12
20003286:	af00      	add	r7, sp, #0
20003288:	6078      	str	r0, [r7, #4]
	if(q->start >= HEX_QUEUE_LEN)
2000328a:	687b      	ldr	r3, [r7, #4]
2000328c:	781b      	ldrb	r3, [r3, #0]
2000328e:	2bc7      	cmp	r3, #199	; 0xc7
20003290:	d905      	bls.n	2000329e <HEXQueueFixBounds+0x1c>
		q->start -= HEX_QUEUE_LEN;
20003292:	687b      	ldr	r3, [r7, #4]
20003294:	781b      	ldrb	r3, [r3, #0]
20003296:	3338      	adds	r3, #56	; 0x38
20003298:	b2da      	uxtb	r2, r3
2000329a:	687b      	ldr	r3, [r7, #4]
2000329c:	701a      	strb	r2, [r3, #0]
	if(q->next >= HEX_QUEUE_LEN)
2000329e:	687b      	ldr	r3, [r7, #4]
200032a0:	785b      	ldrb	r3, [r3, #1]
200032a2:	2bc7      	cmp	r3, #199	; 0xc7
200032a4:	d905      	bls.n	200032b2 <HEXQueueFixBounds+0x30>
		q->next -= HEX_QUEUE_LEN;
200032a6:	687b      	ldr	r3, [r7, #4]
200032a8:	785b      	ldrb	r3, [r3, #1]
200032aa:	3338      	adds	r3, #56	; 0x38
200032ac:	b2da      	uxtb	r2, r3
200032ae:	687b      	ldr	r3, [r7, #4]
200032b0:	705a      	strb	r2, [r3, #1]
	if(q->len > HEX_QUEUE_LEN)
200032b2:	687b      	ldr	r3, [r7, #4]
200032b4:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
200032b8:	2bc8      	cmp	r3, #200	; 0xc8
200032ba:	d903      	bls.n	200032c4 <HEXQueueFixBounds+0x42>
		q->len = HEX_QUEUE_LEN;
200032bc:	687b      	ldr	r3, [r7, #4]
200032be:	22c8      	movs	r2, #200	; 0xc8
200032c0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
200032c4:	bf00      	nop
200032c6:	370c      	adds	r7, #12
200032c8:	46bd      	mov	sp, r7
200032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
200032ce:	4770      	bx	lr

200032d0 <HEXQueueAdd>:

void HEXQueueAdd(HEXQueue *q, uint8_t element) {
200032d0:	b580      	push	{r7, lr}
200032d2:	b082      	sub	sp, #8
200032d4:	af00      	add	r7, sp, #0
200032d6:	6078      	str	r0, [r7, #4]
200032d8:	460b      	mov	r3, r1
200032da:	70fb      	strb	r3, [r7, #3]
	q->buf[q->next] = element;
200032dc:	687b      	ldr	r3, [r7, #4]
200032de:	785b      	ldrb	r3, [r3, #1]
200032e0:	461a      	mov	r2, r3
200032e2:	687b      	ldr	r3, [r7, #4]
200032e4:	4413      	add	r3, r2
200032e6:	78fa      	ldrb	r2, [r7, #3]
200032e8:	709a      	strb	r2, [r3, #2]
	q->next++;
200032ea:	687b      	ldr	r3, [r7, #4]
200032ec:	785b      	ldrb	r3, [r3, #1]
200032ee:	3301      	adds	r3, #1
200032f0:	b2da      	uxtb	r2, r3
200032f2:	687b      	ldr	r3, [r7, #4]
200032f4:	705a      	strb	r2, [r3, #1]
	q->len++;
200032f6:	687b      	ldr	r3, [r7, #4]
200032f8:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
200032fc:	3301      	adds	r3, #1
200032fe:	b2da      	uxtb	r2, r3
20003300:	687b      	ldr	r3, [r7, #4]
20003302:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca

	if(q->len == HEX_QUEUE_LEN)
20003306:	687b      	ldr	r3, [r7, #4]
20003308:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
2000330c:	2bc8      	cmp	r3, #200	; 0xc8
2000330e:	d105      	bne.n	2000331c <HEXQueueAdd+0x4c>
		q->start++;
20003310:	687b      	ldr	r3, [r7, #4]
20003312:	781b      	ldrb	r3, [r3, #0]
20003314:	3301      	adds	r3, #1
20003316:	b2da      	uxtb	r2, r3
20003318:	687b      	ldr	r3, [r7, #4]
2000331a:	701a      	strb	r2, [r3, #0]

	HEXQueueFixBounds(q);
2000331c:	6878      	ldr	r0, [r7, #4]
2000331e:	f7ff ffb0 	bl	20003282 <HEXQueueFixBounds>
}
20003322:	bf00      	nop
20003324:	3708      	adds	r7, #8
20003326:	46bd      	mov	sp, r7
20003328:	bd80      	pop	{r7, pc}
	...

2000332c <HEXQueueGetIdx>:
void HEXQueueAddArray(HEXQueue *q, uint8_t *inbuf, uint8_t len) {
	for(uint8_t i = 0; i < len; i++)
		HEXQueueAdd(q, inbuf[i]);
}

uint8_t HEXQueueGetIdx(HEXQueue *q, uint8_t idx) {
2000332c:	b480      	push	{r7}
2000332e:	b085      	sub	sp, #20
20003330:	af00      	add	r7, sp, #0
20003332:	6078      	str	r0, [r7, #4]
20003334:	460b      	mov	r3, r1
20003336:	70fb      	strb	r3, [r7, #3]
	uint8_t retIdx = (idx + q->start) % HEX_QUEUE_LEN;
20003338:	78fb      	ldrb	r3, [r7, #3]
2000333a:	687a      	ldr	r2, [r7, #4]
2000333c:	7812      	ldrb	r2, [r2, #0]
2000333e:	4413      	add	r3, r2
20003340:	4a0a      	ldr	r2, [pc, #40]	; (2000336c <HEXQueueGetIdx+0x40>)
20003342:	fb82 1203 	smull	r1, r2, r2, r3
20003346:	1191      	asrs	r1, r2, #6
20003348:	17da      	asrs	r2, r3, #31
2000334a:	1a8a      	subs	r2, r1, r2
2000334c:	21c8      	movs	r1, #200	; 0xc8
2000334e:	fb01 f202 	mul.w	r2, r1, r2
20003352:	1a9a      	subs	r2, r3, r2
20003354:	4613      	mov	r3, r2
20003356:	73fb      	strb	r3, [r7, #15]
	return q->buf[retIdx];
20003358:	7bfb      	ldrb	r3, [r7, #15]
2000335a:	687a      	ldr	r2, [r7, #4]
2000335c:	4413      	add	r3, r2
2000335e:	789b      	ldrb	r3, [r3, #2]
}
20003360:	4618      	mov	r0, r3
20003362:	3714      	adds	r7, #20
20003364:	46bd      	mov	sp, r7
20003366:	f85d 7b04 	ldr.w	r7, [sp], #4
2000336a:	4770      	bx	lr
2000336c:	51eb851f 	.word	0x51eb851f

20003370 <HEXQueueExtractHex>:


//pulls an Intel hex command out of the buffer if one exists
	//returns 1 if command extracted, 0 if none found
uint8_t HEXQueueExtractHex(HEXQueue *q, uint8_t *outBuf) {
20003370:	b590      	push	{r4, r7, lr}
20003372:	b085      	sub	sp, #20
20003374:	af00      	add	r7, sp, #0
20003376:	6078      	str	r0, [r7, #4]
20003378:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < q->len - 5; i++) { //scan where queue is full enough for minimum len hex command
2000337a:	2300      	movs	r3, #0
2000337c:	73fb      	strb	r3, [r7, #15]
2000337e:	e064      	b.n	2000344a <HEXQueueExtractHex+0xda>
		if(HEXQueueGetIdx(q, i) == ':') {
20003380:	7bfb      	ldrb	r3, [r7, #15]
20003382:	4619      	mov	r1, r3
20003384:	6878      	ldr	r0, [r7, #4]
20003386:	f7ff ffd1 	bl	2000332c <HEXQueueGetIdx>
2000338a:	4603      	mov	r3, r0
2000338c:	2b3a      	cmp	r3, #58	; 0x3a
2000338e:	d159      	bne.n	20003444 <HEXQueueExtractHex+0xd4>
			//check if complete hex command
			uint8_t dataLen = HEXQueueGetIdx(q, i+1);
20003390:	7bfb      	ldrb	r3, [r7, #15]
20003392:	3301      	adds	r3, #1
20003394:	b2db      	uxtb	r3, r3
20003396:	4619      	mov	r1, r3
20003398:	6878      	ldr	r0, [r7, #4]
2000339a:	f7ff ffc7 	bl	2000332c <HEXQueueGetIdx>
2000339e:	4603      	mov	r3, r0
200033a0:	72fb      	strb	r3, [r7, #11]
			if((q->len - i) >= 5 + dataLen) { //if hex fully received
200033a2:	7afb      	ldrb	r3, [r7, #11]
200033a4:	1d1a      	adds	r2, r3, #4
200033a6:	687b      	ldr	r3, [r7, #4]
200033a8:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
200033ac:	4619      	mov	r1, r3
200033ae:	7bfb      	ldrb	r3, [r7, #15]
200033b0:	1acb      	subs	r3, r1, r3
200033b2:	429a      	cmp	r2, r3
200033b4:	da46      	bge.n	20003444 <HEXQueueExtractHex+0xd4>
				//check checksum
				uint8_t checksum = 0;
200033b6:	2300      	movs	r3, #0
200033b8:	73bb      	strb	r3, [r7, #14]
				for(uint8_t j = 1; j < dataLen + 5; j++) {
200033ba:	2301      	movs	r3, #1
200033bc:	737b      	strb	r3, [r7, #13]
200033be:	e00f      	b.n	200033e0 <HEXQueueExtractHex+0x70>
					checksum += HEXQueueGetIdx(q, i+j);
200033c0:	7bfa      	ldrb	r2, [r7, #15]
200033c2:	7b7b      	ldrb	r3, [r7, #13]
200033c4:	4413      	add	r3, r2
200033c6:	b2db      	uxtb	r3, r3
200033c8:	4619      	mov	r1, r3
200033ca:	6878      	ldr	r0, [r7, #4]
200033cc:	f7ff ffae 	bl	2000332c <HEXQueueGetIdx>
200033d0:	4603      	mov	r3, r0
200033d2:	461a      	mov	r2, r3
200033d4:	7bbb      	ldrb	r3, [r7, #14]
200033d6:	4413      	add	r3, r2
200033d8:	73bb      	strb	r3, [r7, #14]
				for(uint8_t j = 1; j < dataLen + 5; j++) {
200033da:	7b7b      	ldrb	r3, [r7, #13]
200033dc:	3301      	adds	r3, #1
200033de:	737b      	strb	r3, [r7, #13]
200033e0:	7afb      	ldrb	r3, [r7, #11]
200033e2:	1d1a      	adds	r2, r3, #4
200033e4:	7b7b      	ldrb	r3, [r7, #13]
200033e6:	429a      	cmp	r2, r3
200033e8:	daea      	bge.n	200033c0 <HEXQueueExtractHex+0x50>
				}
				checksum = (~checksum)+1; //2's compliment
200033ea:	7bbb      	ldrb	r3, [r7, #14]
200033ec:	425b      	negs	r3, r3
200033ee:	73bb      	strb	r3, [r7, #14]
				if(checksum != HEXQueueGetIdx(q, i+dataLen+5)) {
200033f0:	7bfa      	ldrb	r2, [r7, #15]
200033f2:	7afb      	ldrb	r3, [r7, #11]
200033f4:	4413      	add	r3, r2
200033f6:	b2db      	uxtb	r3, r3
200033f8:	3305      	adds	r3, #5
200033fa:	b2db      	uxtb	r3, r3
200033fc:	4619      	mov	r1, r3
200033fe:	6878      	ldr	r0, [r7, #4]
20003400:	f7ff ff94 	bl	2000332c <HEXQueueGetIdx>
20003404:	4603      	mov	r3, r0
20003406:	461a      	mov	r2, r3
20003408:	7bbb      	ldrb	r3, [r7, #14]
2000340a:	4293      	cmp	r3, r2
2000340c:	d119      	bne.n	20003442 <HEXQueueExtractHex+0xd2>
					continue;
				}

				//copy hex command to out buffer
				for(uint8_t j = 1; j < dataLen + 6; j++)
2000340e:	2301      	movs	r3, #1
20003410:	733b      	strb	r3, [r7, #12]
20003412:	e00f      	b.n	20003434 <HEXQueueExtractHex+0xc4>
					outBuf[j-1] = HEXQueueGetIdx(q, i+j);
20003414:	7bfa      	ldrb	r2, [r7, #15]
20003416:	7b3b      	ldrb	r3, [r7, #12]
20003418:	4413      	add	r3, r2
2000341a:	b2d9      	uxtb	r1, r3
2000341c:	7b3b      	ldrb	r3, [r7, #12]
2000341e:	3b01      	subs	r3, #1
20003420:	683a      	ldr	r2, [r7, #0]
20003422:	18d4      	adds	r4, r2, r3
20003424:	6878      	ldr	r0, [r7, #4]
20003426:	f7ff ff81 	bl	2000332c <HEXQueueGetIdx>
2000342a:	4603      	mov	r3, r0
2000342c:	7023      	strb	r3, [r4, #0]
				for(uint8_t j = 1; j < dataLen + 6; j++)
2000342e:	7b3b      	ldrb	r3, [r7, #12]
20003430:	3301      	adds	r3, #1
20003432:	733b      	strb	r3, [r7, #12]
20003434:	7afb      	ldrb	r3, [r7, #11]
20003436:	1d5a      	adds	r2, r3, #5
20003438:	7b3b      	ldrb	r3, [r7, #12]
2000343a:	429a      	cmp	r2, r3
2000343c:	daea      	bge.n	20003414 <HEXQueueExtractHex+0xa4>
				return 1;
2000343e:	2301      	movs	r3, #1
20003440:	e00b      	b.n	2000345a <HEXQueueExtractHex+0xea>
					continue;
20003442:	bf00      	nop
	for(uint8_t i = 0; i < q->len - 5; i++) { //scan where queue is full enough for minimum len hex command
20003444:	7bfb      	ldrb	r3, [r7, #15]
20003446:	3301      	adds	r3, #1
20003448:	73fb      	strb	r3, [r7, #15]
2000344a:	7bfa      	ldrb	r2, [r7, #15]
2000344c:	687b      	ldr	r3, [r7, #4]
2000344e:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
20003452:	3b05      	subs	r3, #5
20003454:	429a      	cmp	r2, r3
20003456:	db93      	blt.n	20003380 <HEXQueueExtractHex+0x10>
			}
		}
	}
	return 0;
20003458:	2300      	movs	r3, #0
}
2000345a:	4618      	mov	r0, r3
2000345c:	3714      	adds	r7, #20
2000345e:	46bd      	mov	sp, r7
20003460:	bd90      	pop	{r4, r7, pc}
	...

20003464 <TinyBLInit>:
static void SystemClock_Config(void);
static uint32_t GetSector(uint32_t Address);
static uint32_t GetSectorSize(uint32_t Sector);
/* Private functions ---------------------------------------------------------*/

void TinyBLInit(void) {
20003464:	b580      	push	{r7, lr}
20003466:	b094      	sub	sp, #80	; 0x50
20003468:	af00      	add	r7, sp, #0
	HAL_Init();
2000346a:	f7fe f905 	bl	20001678 <HAL_Init>

	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2000346e:	f107 031c 	add.w	r3, r7, #28
20003472:	2234      	movs	r2, #52	; 0x34
20003474:	2100      	movs	r1, #0
20003476:	4618      	mov	r0, r3
20003478:	f000 fae8 	bl	20003a4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2000347c:	f107 0308 	add.w	r3, r7, #8
20003480:	2200      	movs	r2, #0
20003482:	601a      	str	r2, [r3, #0]
20003484:	605a      	str	r2, [r3, #4]
20003486:	609a      	str	r2, [r3, #8]
20003488:	60da      	str	r2, [r3, #12]
2000348a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
2000348c:	2300      	movs	r3, #0
2000348e:	607b      	str	r3, [r7, #4]
20003490:	4b3b      	ldr	r3, [pc, #236]	; (20003580 <TinyBLInit+0x11c>)
20003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20003494:	4a3a      	ldr	r2, [pc, #232]	; (20003580 <TinyBLInit+0x11c>)
20003496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000349a:	6413      	str	r3, [r2, #64]	; 0x40
2000349c:	4b38      	ldr	r3, [pc, #224]	; (20003580 <TinyBLInit+0x11c>)
2000349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200034a4:	607b      	str	r3, [r7, #4]
200034a6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
200034a8:	2300      	movs	r3, #0
200034aa:	603b      	str	r3, [r7, #0]
200034ac:	4b35      	ldr	r3, [pc, #212]	; (20003584 <TinyBLInit+0x120>)
200034ae:	681b      	ldr	r3, [r3, #0]
200034b0:	4a34      	ldr	r2, [pc, #208]	; (20003584 <TinyBLInit+0x120>)
200034b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
200034b6:	6013      	str	r3, [r2, #0]
200034b8:	4b32      	ldr	r3, [pc, #200]	; (20003584 <TinyBLInit+0x120>)
200034ba:	681b      	ldr	r3, [r3, #0]
200034bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
200034c0:	603b      	str	r3, [r7, #0]
200034c2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
200034c4:	2302      	movs	r3, #2
200034c6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
200034c8:	2301      	movs	r3, #1
200034ca:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
200034cc:	2310      	movs	r3, #16
200034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
200034d0:	2302      	movs	r3, #2
200034d2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
200034d4:	2300      	movs	r3, #0
200034d6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
200034d8:	2308      	movs	r3, #8
200034da:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
200034dc:	23b4      	movs	r3, #180	; 0xb4
200034de:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
200034e0:	2302      	movs	r3, #2
200034e2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
200034e4:	2302      	movs	r3, #2
200034e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
200034e8:	2302      	movs	r3, #2
200034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
200034ec:	f107 031c 	add.w	r3, r7, #28
200034f0:	4618      	mov	r0, r3
200034f2:	f7fe ff25 	bl	20002340 <HAL_RCC_OscConfig>
200034f6:	4603      	mov	r3, r0
200034f8:	2b00      	cmp	r3, #0
200034fa:	d000      	beq.n	200034fe <TinyBLInit+0x9a>
	{
		for(;;);
200034fc:	e7fe      	b.n	200034fc <TinyBLInit+0x98>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
200034fe:	f7fe fecf 	bl	200022a0 <HAL_PWREx_EnableOverDrive>
20003502:	4603      	mov	r3, r0
20003504:	2b00      	cmp	r3, #0
20003506:	d000      	beq.n	2000350a <TinyBLInit+0xa6>
	{
		for(;;);
20003508:	e7fe      	b.n	20003508 <TinyBLInit+0xa4>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2000350a:	230f      	movs	r3, #15
2000350c:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2000350e:	2302      	movs	r3, #2
20003510:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20003512:	2300      	movs	r3, #0
20003514:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
20003516:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
2000351a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
2000351c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20003520:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
20003522:	f107 0308 	add.w	r3, r7, #8
20003526:	2105      	movs	r1, #5
20003528:	4618      	mov	r0, r3
2000352a:	f7ff f989 	bl	20002840 <HAL_RCC_ClockConfig>
2000352e:	4603      	mov	r3, r0
20003530:	2b00      	cmp	r3, #0
20003532:	d000      	beq.n	20003536 <TinyBLInit+0xd2>
	{
		for(;;);
20003534:	e7fe      	b.n	20003534 <TinyBLInit+0xd0>
	GPIO_InitStruct.Pin = GPIO_PIN_9;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);*/


	UartHandle.Instance        = USART3;
20003536:	4b14      	ldr	r3, [pc, #80]	; (20003588 <TinyBLInit+0x124>)
20003538:	4a14      	ldr	r2, [pc, #80]	; (2000358c <TinyBLInit+0x128>)
2000353a:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 57600;
2000353c:	4b12      	ldr	r3, [pc, #72]	; (20003588 <TinyBLInit+0x124>)
2000353e:	f44f 4261 	mov.w	r2, #57600	; 0xe100
20003542:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
20003544:	4b10      	ldr	r3, [pc, #64]	; (20003588 <TinyBLInit+0x124>)
20003546:	2200      	movs	r2, #0
20003548:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
2000354a:	4b0f      	ldr	r3, [pc, #60]	; (20003588 <TinyBLInit+0x124>)
2000354c:	2200      	movs	r2, #0
2000354e:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
20003550:	4b0d      	ldr	r3, [pc, #52]	; (20003588 <TinyBLInit+0x124>)
20003552:	2200      	movs	r2, #0
20003554:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
20003556:	4b0c      	ldr	r3, [pc, #48]	; (20003588 <TinyBLInit+0x124>)
20003558:	2200      	movs	r2, #0
2000355a:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
2000355c:	4b0a      	ldr	r3, [pc, #40]	; (20003588 <TinyBLInit+0x124>)
2000355e:	220c      	movs	r2, #12
20003560:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
20003562:	4b09      	ldr	r3, [pc, #36]	; (20003588 <TinyBLInit+0x124>)
20003564:	2200      	movs	r2, #0
20003566:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
20003568:	4807      	ldr	r0, [pc, #28]	; (20003588 <TinyBLInit+0x124>)
2000356a:	f7ff fb89 	bl	20002c80 <HAL_UART_Init>
2000356e:	4603      	mov	r3, r0
20003570:	2b00      	cmp	r3, #0
20003572:	d000      	beq.n	20003576 <TinyBLInit+0x112>
	{
		//Initialization Error
		for(;;);
20003574:	e7fe      	b.n	20003574 <TinyBLInit+0x110>
	}

}
20003576:	bf00      	nop
20003578:	3750      	adds	r7, #80	; 0x50
2000357a:	46bd      	mov	sp, r7
2000357c:	bd80      	pop	{r7, pc}
2000357e:	bf00      	nop
20003580:	40023800 	.word	0x40023800
20003584:	40007000 	.word	0x40007000
20003588:	20003b84 	.word	0x20003b84
2000358c:	40004800 	.word	0x40004800

20003590 <FlashEraseSectorIfNeeded>:

uint32_t erasedSectors[8];
uint8_t erasedSectorsLen = 0;
//erase sector if not already erased
void FlashEraseSectorIfNeeded(uint32_t addr) {
20003590:	b580      	push	{r7, lr}
20003592:	b084      	sub	sp, #16
20003594:	af00      	add	r7, sp, #0
20003596:	6078      	str	r0, [r7, #4]
	//get current flash sector
	uint32_t sector = GetSector(addr);
20003598:	6878      	ldr	r0, [r7, #4]
2000359a:	f000 f945 	bl	20003828 <GetSector>
2000359e:	60b8      	str	r0, [r7, #8]
	for(uint8_t i = 0; i < erasedSectorsLen; i++) {
200035a0:	2300      	movs	r3, #0
200035a2:	73fb      	strb	r3, [r7, #15]
200035a4:	e009      	b.n	200035ba <FlashEraseSectorIfNeeded+0x2a>
		if(sector == erasedSectors[i])
200035a6:	7bfb      	ldrb	r3, [r7, #15]
200035a8:	4a1b      	ldr	r2, [pc, #108]	; (20003618 <FlashEraseSectorIfNeeded+0x88>)
200035aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
200035ae:	68ba      	ldr	r2, [r7, #8]
200035b0:	429a      	cmp	r2, r3
200035b2:	d02c      	beq.n	2000360e <FlashEraseSectorIfNeeded+0x7e>
	for(uint8_t i = 0; i < erasedSectorsLen; i++) {
200035b4:	7bfb      	ldrb	r3, [r7, #15]
200035b6:	3301      	adds	r3, #1
200035b8:	73fb      	strb	r3, [r7, #15]
200035ba:	4b18      	ldr	r3, [pc, #96]	; (2000361c <FlashEraseSectorIfNeeded+0x8c>)
200035bc:	781b      	ldrb	r3, [r3, #0]
200035be:	7bfa      	ldrb	r2, [r7, #15]
200035c0:	429a      	cmp	r2, r3
200035c2:	d3f0      	bcc.n	200035a6 <FlashEraseSectorIfNeeded+0x16>
			return;
	}

	//erasing sector
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
200035c4:	4b16      	ldr	r3, [pc, #88]	; (20003620 <FlashEraseSectorIfNeeded+0x90>)
200035c6:	2200      	movs	r2, #0
200035c8:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
200035ca:	4b15      	ldr	r3, [pc, #84]	; (20003620 <FlashEraseSectorIfNeeded+0x90>)
200035cc:	2202      	movs	r2, #2
200035ce:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = sector;
200035d0:	4a13      	ldr	r2, [pc, #76]	; (20003620 <FlashEraseSectorIfNeeded+0x90>)
200035d2:	68bb      	ldr	r3, [r7, #8]
200035d4:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = 1;
200035d6:	4b12      	ldr	r3, [pc, #72]	; (20003620 <FlashEraseSectorIfNeeded+0x90>)
200035d8:	2201      	movs	r2, #1
200035da:	60da      	str	r2, [r3, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
200035dc:	4911      	ldr	r1, [pc, #68]	; (20003624 <FlashEraseSectorIfNeeded+0x94>)
200035de:	4810      	ldr	r0, [pc, #64]	; (20003620 <FlashEraseSectorIfNeeded+0x90>)
200035e0:	f7fe fb8e 	bl	20001d00 <HAL_FLASHEx_Erase>
200035e4:	4603      	mov	r3, r0
200035e6:	2b00      	cmp	r3, #0
200035e8:	d003      	beq.n	200035f2 <FlashEraseSectorIfNeeded+0x62>
	      //Error occurred while sector erase.
	      //User can add here some code to deal with this error.
	      //SECTORError will contain the faulty sector and then to know the code error on this sector,
	      //user can call function 'HAL_FLASH_GetError()'
		while (1) {
			BSP_LED_On(LED3);
200035ea:	2002      	movs	r0, #2
200035ec:	f7fd ffd8 	bl	200015a0 <BSP_LED_On>
200035f0:	e7fb      	b.n	200035ea <FlashEraseSectorIfNeeded+0x5a>
		}
	}
	erasedSectors[erasedSectorsLen] = sector;
200035f2:	4b0a      	ldr	r3, [pc, #40]	; (2000361c <FlashEraseSectorIfNeeded+0x8c>)
200035f4:	781b      	ldrb	r3, [r3, #0]
200035f6:	4619      	mov	r1, r3
200035f8:	4a07      	ldr	r2, [pc, #28]	; (20003618 <FlashEraseSectorIfNeeded+0x88>)
200035fa:	68bb      	ldr	r3, [r7, #8]
200035fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	erasedSectorsLen++;
20003600:	4b06      	ldr	r3, [pc, #24]	; (2000361c <FlashEraseSectorIfNeeded+0x8c>)
20003602:	781b      	ldrb	r3, [r3, #0]
20003604:	3301      	adds	r3, #1
20003606:	b2da      	uxtb	r2, r3
20003608:	4b04      	ldr	r3, [pc, #16]	; (2000361c <FlashEraseSectorIfNeeded+0x8c>)
2000360a:	701a      	strb	r2, [r3, #0]
	return;
2000360c:	e000      	b.n	20003610 <FlashEraseSectorIfNeeded+0x80>
			return;
2000360e:	bf00      	nop
}
20003610:	3710      	adds	r7, #16
20003612:	46bd      	mov	sp, r7
20003614:	bd80      	pop	{r7, pc}
20003616:	bf00      	nop
20003618:	20003be0 	.word	0x20003be0
2000361c:	20003c00 	.word	0x20003c00
20003620:	20003bcc 	.word	0x20003bcc
20003624:	20003b80 	.word	0x20003b80

20003628 <ProcessHexFlash>:

uint8_t hexBuf[100];
uint32_t addrOffset = 0;
//process hex and flash
//returns 0 if success, 1 if end of flashing, -1 if error
uint8_t ProcessHexFlash() {
20003628:	b5b0      	push	{r4, r5, r7, lr}
2000362a:	b082      	sub	sp, #8
2000362c:	af00      	add	r7, sp, #0
	uint8_t dataLen = hexBuf[0];
2000362e:	4b2a      	ldr	r3, [pc, #168]	; (200036d8 <ProcessHexFlash+0xb0>)
20003630:	781b      	ldrb	r3, [r3, #0]
20003632:	71bb      	strb	r3, [r7, #6]
	uint8_t cmdType = hexBuf[3];
20003634:	4b28      	ldr	r3, [pc, #160]	; (200036d8 <ProcessHexFlash+0xb0>)
20003636:	78db      	ldrb	r3, [r3, #3]
20003638:	717b      	strb	r3, [r7, #5]
	if(cmdType == 0) { //data
2000363a:	797b      	ldrb	r3, [r7, #5]
2000363c:	2b00      	cmp	r3, #0
2000363e:	d12e      	bne.n	2000369e <ProcessHexFlash+0x76>
		uint32_t flashAddr = addrOffset + (((uint32_t)hexBuf[1])<<8) + (uint32_t)hexBuf[2];
20003640:	4b25      	ldr	r3, [pc, #148]	; (200036d8 <ProcessHexFlash+0xb0>)
20003642:	785b      	ldrb	r3, [r3, #1]
20003644:	021a      	lsls	r2, r3, #8
20003646:	4b25      	ldr	r3, [pc, #148]	; (200036dc <ProcessHexFlash+0xb4>)
20003648:	681b      	ldr	r3, [r3, #0]
2000364a:	4413      	add	r3, r2
2000364c:	4a22      	ldr	r2, [pc, #136]	; (200036d8 <ProcessHexFlash+0xb0>)
2000364e:	7892      	ldrb	r2, [r2, #2]
20003650:	4413      	add	r3, r2
20003652:	603b      	str	r3, [r7, #0]
		//I'm making a brave assumption here. I'm assuming a single data record won't extend between
		//multiple sectors. Is this a safe assumption? I dunno. But it'll save more clock cycles than
		//a half-baked solution
		FlashEraseSectorIfNeeded(flashAddr);
20003654:	6838      	ldr	r0, [r7, #0]
20003656:	f7ff ff9b 	bl	20003590 <FlashEraseSectorIfNeeded>

		for(uint8_t i = 0; i < dataLen; i++) {
2000365a:	2300      	movs	r3, #0
2000365c:	71fb      	strb	r3, [r7, #7]
2000365e:	e019      	b.n	20003694 <ProcessHexFlash+0x6c>
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddr+i, hexBuf[i+4]) != HAL_OK) {
20003660:	79fa      	ldrb	r2, [r7, #7]
20003662:	683b      	ldr	r3, [r7, #0]
20003664:	18d1      	adds	r1, r2, r3
20003666:	79fb      	ldrb	r3, [r7, #7]
20003668:	3304      	adds	r3, #4
2000366a:	4a1b      	ldr	r2, [pc, #108]	; (200036d8 <ProcessHexFlash+0xb0>)
2000366c:	5cd3      	ldrb	r3, [r2, r3]
2000366e:	b2db      	uxtb	r3, r3
20003670:	2200      	movs	r2, #0
20003672:	461c      	mov	r4, r3
20003674:	4615      	mov	r5, r2
20003676:	4622      	mov	r2, r4
20003678:	462b      	mov	r3, r5
2000367a:	2000      	movs	r0, #0
2000367c:	f7fe f97a 	bl	20001974 <HAL_FLASH_Program>
20003680:	4603      	mov	r3, r0
20003682:	2b00      	cmp	r3, #0
20003684:	d003      	beq.n	2000368e <ProcessHexFlash+0x66>
				// Error occurred while writing data in Flash memory.
			    	//User can add here some code to deal with this error
				while (1)
				{
					BSP_LED_On(LED3);
20003686:	2002      	movs	r0, #2
20003688:	f7fd ff8a 	bl	200015a0 <BSP_LED_On>
2000368c:	e7fb      	b.n	20003686 <ProcessHexFlash+0x5e>
		for(uint8_t i = 0; i < dataLen; i++) {
2000368e:	79fb      	ldrb	r3, [r7, #7]
20003690:	3301      	adds	r3, #1
20003692:	71fb      	strb	r3, [r7, #7]
20003694:	79fa      	ldrb	r2, [r7, #7]
20003696:	79bb      	ldrb	r3, [r7, #6]
20003698:	429a      	cmp	r2, r3
2000369a:	d3e1      	bcc.n	20003660 <ProcessHexFlash+0x38>
2000369c:	e016      	b.n	200036cc <ProcessHexFlash+0xa4>
				}
			}

		}
	}
	else if(cmdType == 1) { //EOF
2000369e:	797b      	ldrb	r3, [r7, #5]
200036a0:	2b01      	cmp	r3, #1
200036a2:	d101      	bne.n	200036a8 <ProcessHexFlash+0x80>
		return 1;
200036a4:	2301      	movs	r3, #1
200036a6:	e012      	b.n	200036ce <ProcessHexFlash+0xa6>
	}
	else if (cmdType == 2) { //extended segment address
200036a8:	797b      	ldrb	r3, [r7, #5]
200036aa:	2b02      	cmp	r3, #2
200036ac:	d00e      	beq.n	200036cc <ProcessHexFlash+0xa4>
		//should not be used so don't bother
	}
	else if (cmdType == 3) { //start segment address
200036ae:	797b      	ldrb	r3, [r7, #5]
200036b0:	2b03      	cmp	r3, #3
200036b2:	d00b      	beq.n	200036cc <ProcessHexFlash+0xa4>
		//we shouldn't need to care about entry address
	}
	else if (cmdType == 4) { //extended linear address
200036b4:	797b      	ldrb	r3, [r7, #5]
200036b6:	2b04      	cmp	r3, #4
200036b8:	d108      	bne.n	200036cc <ProcessHexFlash+0xa4>
		//printf("Address Command: %s\r\n", hexCmdBuf);
		addrOffset = (((uint32_t)hexBuf[4]) << 24) + (((uint32_t)hexBuf[5]) << 16);
200036ba:	4b07      	ldr	r3, [pc, #28]	; (200036d8 <ProcessHexFlash+0xb0>)
200036bc:	791b      	ldrb	r3, [r3, #4]
200036be:	061a      	lsls	r2, r3, #24
200036c0:	4b05      	ldr	r3, [pc, #20]	; (200036d8 <ProcessHexFlash+0xb0>)
200036c2:	795b      	ldrb	r3, [r3, #5]
200036c4:	041b      	lsls	r3, r3, #16
200036c6:	4413      	add	r3, r2
200036c8:	4a04      	ldr	r2, [pc, #16]	; (200036dc <ProcessHexFlash+0xb4>)
200036ca:	6013      	str	r3, [r2, #0]
	}
	else if (cmdType == 5) { //start linear address
		//we shouldn't need to care about entry address
	}
	return 0;
200036cc:	2300      	movs	r3, #0
}
200036ce:	4618      	mov	r0, r3
200036d0:	3708      	adds	r7, #8
200036d2:	46bd      	mov	sp, r7
200036d4:	bdb0      	pop	{r4, r5, r7, pc}
200036d6:	bf00      	nop
200036d8:	20003c04 	.word	0x20003c04
200036dc:	20003c68 	.word	0x20003c68

200036e0 <main>:
 * @retval None
 */

uint32_t recMsgCount = 0;
int main(void)
{  
200036e0:	b5b0      	push	{r4, r5, r7, lr}
200036e2:	b0c2      	sub	sp, #264	; 0x108
200036e4:	af00      	add	r7, sp, #0
	TinyBLInit();
200036e6:	f7ff febd 	bl	20003464 <TinyBLInit>

	/* Configure the system clock to 180 MHz */
	//SystemClock_Config();

	/* Initialize LED1, LED2 and LED3 */
	BSP_LED_Init(LED1);
200036ea:	2000      	movs	r0, #0
200036ec:	f7fd ff08 	bl	20001500 <BSP_LED_Init>
	BSP_LED_Init(LED2);
200036f0:	2001      	movs	r0, #1
200036f2:	f7fd ff05 	bl	20001500 <BSP_LED_Init>
	BSP_LED_Init(LED3);
200036f6:	2002      	movs	r0, #2
200036f8:	f7fd ff02 	bl	20001500 <BSP_LED_Init>
		for(;;);
	}*/


	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
200036fc:	f7fe f98e 	bl	20001a1c <HAL_FLASH_Unlock>

	/* Erase the user Flash area
    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	/* Get the 1st sector to erase */
	FirstSector = GetSector(FLASH_USER_START_ADDR);
20003700:	483f      	ldr	r0, [pc, #252]	; (20003800 <main+0x120>)
20003702:	f000 f891 	bl	20003828 <GetSector>
20003706:	4603      	mov	r3, r0
20003708:	4a3e      	ldr	r2, [pc, #248]	; (20003804 <main+0x124>)
2000370a:	6013      	str	r3, [r2, #0]
	/* Get the number of sector to erase from 1st sector*/
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
2000370c:	483e      	ldr	r0, [pc, #248]	; (20003808 <main+0x128>)
2000370e:	f000 f8f5 	bl	200038fc <GetSectorSize>
20003712:	4602      	mov	r2, r0
20003714:	4b3d      	ldr	r3, [pc, #244]	; (2000380c <main+0x12c>)
20003716:	4413      	add	r3, r2
20003718:	4618      	mov	r0, r3
2000371a:	f000 f885 	bl	20003828 <GetSector>
2000371e:	4602      	mov	r2, r0
20003720:	4b38      	ldr	r3, [pc, #224]	; (20003804 <main+0x124>)
20003722:	681b      	ldr	r3, [r3, #0]
20003724:	1ad3      	subs	r3, r2, r3
20003726:	3301      	adds	r3, #1
20003728:	4a39      	ldr	r2, [pc, #228]	; (20003810 <main+0x130>)
2000372a:	6013      	str	r3, [r2, #0]
	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
2000372c:	4b39      	ldr	r3, [pc, #228]	; (20003814 <main+0x134>)
2000372e:	2200      	movs	r2, #0
20003730:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
20003732:	4b38      	ldr	r3, [pc, #224]	; (20003814 <main+0x134>)
20003734:	2202      	movs	r2, #2
20003736:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FirstSector;
20003738:	4b32      	ldr	r3, [pc, #200]	; (20003804 <main+0x124>)
2000373a:	681b      	ldr	r3, [r3, #0]
2000373c:	4a35      	ldr	r2, [pc, #212]	; (20003814 <main+0x134>)
2000373e:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
20003740:	4b33      	ldr	r3, [pc, #204]	; (20003810 <main+0x130>)
20003742:	681b      	ldr	r3, [r3, #0]
20003744:	4a33      	ldr	r2, [pc, #204]	; (20003814 <main+0x134>)
20003746:	60d3      	str	r3, [r2, #12]


	uint8_t printout[50] = "Ready to receive FLASH data\r\n";
20003748:	4b33      	ldr	r3, [pc, #204]	; (20003818 <main+0x138>)
2000374a:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
2000374e:	461d      	mov	r5, r3
20003750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
20003752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
20003754:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
20003758:	c407      	stmia	r4!, {r0, r1, r2}
2000375a:	8023      	strh	r3, [r4, #0]
2000375c:	f107 03ee 	add.w	r3, r7, #238	; 0xee
20003760:	2200      	movs	r2, #0
20003762:	601a      	str	r2, [r3, #0]
20003764:	605a      	str	r2, [r3, #4]
20003766:	609a      	str	r2, [r3, #8]
20003768:	60da      	str	r2, [r3, #12]
2000376a:	611a      	str	r2, [r3, #16]
	//HAL_UART_Transmit(&UartHandle, printout, 31, HAL_MAX_DELAY);

	/* Infinite loop */
	HEXQueue q;
	HEXQueueInit(&q);
2000376c:	1d3b      	adds	r3, r7, #4
2000376e:	4618      	mov	r0, r3
20003770:	f7ff fd73 	bl	2000325a <HEXQueueInit>
	while(1) {
		uint16_t count = 0;
20003774:	2300      	movs	r3, #0
20003776:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
		//HAL_UARTEx_ReceiveToIdle(&UartHandle, uartInBuf, 17, &count, 200);
		if((UartHandle.Instance->SR & UART_FLAG_RXNE) == UART_FLAG_RXNE) {
2000377a:	4b28      	ldr	r3, [pc, #160]	; (2000381c <main+0x13c>)
2000377c:	681b      	ldr	r3, [r3, #0]
2000377e:	681b      	ldr	r3, [r3, #0]
20003780:	f003 0320 	and.w	r3, r3, #32
20003784:	2b20      	cmp	r3, #32
20003786:	d1f5      	bne.n	20003774 <main+0x94>
			HEXQueueAdd(&q, (uint8_t)UartHandle.Instance->DR);
20003788:	4b24      	ldr	r3, [pc, #144]	; (2000381c <main+0x13c>)
2000378a:	681b      	ldr	r3, [r3, #0]
2000378c:	685b      	ldr	r3, [r3, #4]
2000378e:	b2da      	uxtb	r2, r3
20003790:	1d3b      	adds	r3, r7, #4
20003792:	4611      	mov	r1, r2
20003794:	4618      	mov	r0, r3
20003796:	f7ff fd9b 	bl	200032d0 <HEXQueueAdd>
			//asm("nop");
			if(HEXQueueExtractHex(&q, hexBuf)) {
2000379a:	1d3b      	adds	r3, r7, #4
2000379c:	4920      	ldr	r1, [pc, #128]	; (20003820 <main+0x140>)
2000379e:	4618      	mov	r0, r3
200037a0:	f7ff fde6 	bl	20003370 <HEXQueueExtractHex>
200037a4:	4603      	mov	r3, r0
200037a6:	2b00      	cmp	r3, #0
200037a8:	d0e4      	beq.n	20003774 <main+0x94>
				recMsgCount++;
200037aa:	4b1e      	ldr	r3, [pc, #120]	; (20003824 <main+0x144>)
200037ac:	681b      	ldr	r3, [r3, #0]
200037ae:	3301      	adds	r3, #1
200037b0:	4a1c      	ldr	r2, [pc, #112]	; (20003824 <main+0x144>)
200037b2:	6013      	str	r3, [r2, #0]
				HEXQueueInit(&q);
200037b4:	1d3b      	adds	r3, r7, #4
200037b6:	4618      	mov	r0, r3
200037b8:	f7ff fd4f 	bl	2000325a <HEXQueueInit>
				uint8_t result = ProcessHexFlash();
200037bc:	f7ff ff34 	bl	20003628 <ProcessHexFlash>
200037c0:	4603      	mov	r3, r0
200037c2:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				if(result == 1)
200037c6:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
200037ca:	2b01      	cmp	r3, #1
200037cc:	d000      	beq.n	200037d0 <main+0xf0>
	while(1) {
200037ce:	e7d1      	b.n	20003774 <main+0x94>
					break;
200037d0:	bf00      	nop
			}
		}

	}
	HAL_FLASH_Lock();
200037d2:	f7fe f945 	bl	20001a60 <HAL_FLASH_Lock>
	while (1)
	{
		HAL_Delay(500);
200037d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
200037da:	f7fd ffc1 	bl	20001760 <HAL_Delay>
		BSP_LED_On(LED1);
200037de:	2000      	movs	r0, #0
200037e0:	f7fd fede 	bl	200015a0 <BSP_LED_On>
		//BSP_LED_On(LED2);
		BSP_LED_On(LED3);
200037e4:	2002      	movs	r0, #2
200037e6:	f7fd fedb 	bl	200015a0 <BSP_LED_On>
		HAL_Delay(500);
200037ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
200037ee:	f7fd ffb7 	bl	20001760 <HAL_Delay>
		BSP_LED_Off(LED1);
200037f2:	2000      	movs	r0, #0
200037f4:	f7fd feee 	bl	200015d4 <BSP_LED_Off>
		//BSP_LED_Off(LED2);
		BSP_LED_Off(LED3);
200037f8:	2002      	movs	r0, #2
200037fa:	f7fd feeb 	bl	200015d4 <BSP_LED_Off>
		HAL_Delay(500);
200037fe:	e7ea      	b.n	200037d6 <main+0xf6>
20003800:	08008000 	.word	0x08008000
20003804:	20003b78 	.word	0x20003b78
20003808:	08060000 	.word	0x08060000
2000380c:	0805ffff 	.word	0x0805ffff
20003810:	20003b7c 	.word	0x20003b7c
20003814:	20003bcc 	.word	0x20003bcc
20003818:	20003abc 	.word	0x20003abc
2000381c:	20003b84 	.word	0x20003b84
20003820:	20003c04 	.word	0x20003c04
20003824:	20003c6c 	.word	0x20003c6c

20003828 <GetSector>:
 * @brief  Gets the sector of a given address
 * @param  None
 * @retval The sector of a given address
 */
static uint32_t GetSector(uint32_t Address)
{
20003828:	b480      	push	{r7}
2000382a:	b085      	sub	sp, #20
2000382c:	af00      	add	r7, sp, #0
2000382e:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
20003830:	2300      	movs	r3, #0
20003832:	60fb      	str	r3, [r7, #12]

	if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
20003834:	687b      	ldr	r3, [r7, #4]
20003836:	4a2a      	ldr	r2, [pc, #168]	; (200038e0 <GetSector+0xb8>)
20003838:	4293      	cmp	r3, r2
2000383a:	d206      	bcs.n	2000384a <GetSector+0x22>
2000383c:	687b      	ldr	r3, [r7, #4]
2000383e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
20003842:	d302      	bcc.n	2000384a <GetSector+0x22>
	{
		sector = FLASH_SECTOR_0;
20003844:	2300      	movs	r3, #0
20003846:	60fb      	str	r3, [r7, #12]
20003848:	e043      	b.n	200038d2 <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
2000384a:	687b      	ldr	r3, [r7, #4]
2000384c:	4a25      	ldr	r2, [pc, #148]	; (200038e4 <GetSector+0xbc>)
2000384e:	4293      	cmp	r3, r2
20003850:	d206      	bcs.n	20003860 <GetSector+0x38>
20003852:	687b      	ldr	r3, [r7, #4]
20003854:	4a22      	ldr	r2, [pc, #136]	; (200038e0 <GetSector+0xb8>)
20003856:	4293      	cmp	r3, r2
20003858:	d302      	bcc.n	20003860 <GetSector+0x38>
	{
		sector = FLASH_SECTOR_1;
2000385a:	2301      	movs	r3, #1
2000385c:	60fb      	str	r3, [r7, #12]
2000385e:	e038      	b.n	200038d2 <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
20003860:	687b      	ldr	r3, [r7, #4]
20003862:	4a21      	ldr	r2, [pc, #132]	; (200038e8 <GetSector+0xc0>)
20003864:	4293      	cmp	r3, r2
20003866:	d206      	bcs.n	20003876 <GetSector+0x4e>
20003868:	687b      	ldr	r3, [r7, #4]
2000386a:	4a1e      	ldr	r2, [pc, #120]	; (200038e4 <GetSector+0xbc>)
2000386c:	4293      	cmp	r3, r2
2000386e:	d302      	bcc.n	20003876 <GetSector+0x4e>
	{
		sector = FLASH_SECTOR_2;
20003870:	2302      	movs	r3, #2
20003872:	60fb      	str	r3, [r7, #12]
20003874:	e02d      	b.n	200038d2 <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
20003876:	687b      	ldr	r3, [r7, #4]
20003878:	4a1c      	ldr	r2, [pc, #112]	; (200038ec <GetSector+0xc4>)
2000387a:	4293      	cmp	r3, r2
2000387c:	d806      	bhi.n	2000388c <GetSector+0x64>
2000387e:	687b      	ldr	r3, [r7, #4]
20003880:	4a19      	ldr	r2, [pc, #100]	; (200038e8 <GetSector+0xc0>)
20003882:	4293      	cmp	r3, r2
20003884:	d302      	bcc.n	2000388c <GetSector+0x64>
	{
		sector = FLASH_SECTOR_3;
20003886:	2303      	movs	r3, #3
20003888:	60fb      	str	r3, [r7, #12]
2000388a:	e022      	b.n	200038d2 <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
2000388c:	687b      	ldr	r3, [r7, #4]
2000388e:	4a18      	ldr	r2, [pc, #96]	; (200038f0 <GetSector+0xc8>)
20003890:	4293      	cmp	r3, r2
20003892:	d806      	bhi.n	200038a2 <GetSector+0x7a>
20003894:	687b      	ldr	r3, [r7, #4]
20003896:	4a15      	ldr	r2, [pc, #84]	; (200038ec <GetSector+0xc4>)
20003898:	4293      	cmp	r3, r2
2000389a:	d902      	bls.n	200038a2 <GetSector+0x7a>
	{
		sector = FLASH_SECTOR_4;
2000389c:	2304      	movs	r3, #4
2000389e:	60fb      	str	r3, [r7, #12]
200038a0:	e017      	b.n	200038d2 <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
200038a2:	687b      	ldr	r3, [r7, #4]
200038a4:	4a13      	ldr	r2, [pc, #76]	; (200038f4 <GetSector+0xcc>)
200038a6:	4293      	cmp	r3, r2
200038a8:	d806      	bhi.n	200038b8 <GetSector+0x90>
200038aa:	687b      	ldr	r3, [r7, #4]
200038ac:	4a10      	ldr	r2, [pc, #64]	; (200038f0 <GetSector+0xc8>)
200038ae:	4293      	cmp	r3, r2
200038b0:	d902      	bls.n	200038b8 <GetSector+0x90>
	{
		sector = FLASH_SECTOR_5;
200038b2:	2305      	movs	r3, #5
200038b4:	60fb      	str	r3, [r7, #12]
200038b6:	e00c      	b.n	200038d2 <GetSector+0xaa>
	}
	else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
200038b8:	687b      	ldr	r3, [r7, #4]
200038ba:	4a0f      	ldr	r2, [pc, #60]	; (200038f8 <GetSector+0xd0>)
200038bc:	4293      	cmp	r3, r2
200038be:	d806      	bhi.n	200038ce <GetSector+0xa6>
200038c0:	687b      	ldr	r3, [r7, #4]
200038c2:	4a0c      	ldr	r2, [pc, #48]	; (200038f4 <GetSector+0xcc>)
200038c4:	4293      	cmp	r3, r2
200038c6:	d902      	bls.n	200038ce <GetSector+0xa6>
	{
		sector = FLASH_SECTOR_6;
200038c8:	2306      	movs	r3, #6
200038ca:	60fb      	str	r3, [r7, #12]
200038cc:	e001      	b.n	200038d2 <GetSector+0xaa>
	}
	else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7) */
	{
		sector = FLASH_SECTOR_7;
200038ce:	2307      	movs	r3, #7
200038d0:	60fb      	str	r3, [r7, #12]
	}
	return sector;
200038d2:	68fb      	ldr	r3, [r7, #12]
}
200038d4:	4618      	mov	r0, r3
200038d6:	3714      	adds	r7, #20
200038d8:	46bd      	mov	sp, r7
200038da:	f85d 7b04 	ldr.w	r7, [sp], #4
200038de:	4770      	bx	lr
200038e0:	08004000 	.word	0x08004000
200038e4:	08008000 	.word	0x08008000
200038e8:	0800c000 	.word	0x0800c000
200038ec:	0800ffff 	.word	0x0800ffff
200038f0:	0801ffff 	.word	0x0801ffff
200038f4:	0803ffff 	.word	0x0803ffff
200038f8:	0805ffff 	.word	0x0805ffff

200038fc <GetSectorSize>:
 * @brief  Gets sector Size
 * @param  None
 * @retval The size of a given sector
 */
static uint32_t GetSectorSize(uint32_t Sector)
{
200038fc:	b480      	push	{r7}
200038fe:	b085      	sub	sp, #20
20003900:	af00      	add	r7, sp, #0
20003902:	6078      	str	r0, [r7, #4]
	uint32_t sectorsize = 0x00;
20003904:	2300      	movs	r3, #0
20003906:	60fb      	str	r3, [r7, #12]
	if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) || (Sector == FLASH_SECTOR_3))
20003908:	687b      	ldr	r3, [r7, #4]
2000390a:	2b00      	cmp	r3, #0
2000390c:	d008      	beq.n	20003920 <GetSectorSize+0x24>
2000390e:	687b      	ldr	r3, [r7, #4]
20003910:	2b01      	cmp	r3, #1
20003912:	d005      	beq.n	20003920 <GetSectorSize+0x24>
20003914:	687b      	ldr	r3, [r7, #4]
20003916:	2b02      	cmp	r3, #2
20003918:	d002      	beq.n	20003920 <GetSectorSize+0x24>
2000391a:	687b      	ldr	r3, [r7, #4]
2000391c:	2b03      	cmp	r3, #3
2000391e:	d103      	bne.n	20003928 <GetSectorSize+0x2c>
	{
		sectorsize = 16 * 1024;
20003920:	f44f 4380 	mov.w	r3, #16384	; 0x4000
20003924:	60fb      	str	r3, [r7, #12]
20003926:	e009      	b.n	2000393c <GetSectorSize+0x40>
	}
	else if(Sector == FLASH_SECTOR_4)
20003928:	687b      	ldr	r3, [r7, #4]
2000392a:	2b04      	cmp	r3, #4
2000392c:	d103      	bne.n	20003936 <GetSectorSize+0x3a>
	{
		sectorsize = 64 * 1024;
2000392e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20003932:	60fb      	str	r3, [r7, #12]
20003934:	e002      	b.n	2000393c <GetSectorSize+0x40>
	}
	else
	{
		sectorsize = 128 * 1024;
20003936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2000393a:	60fb      	str	r3, [r7, #12]
	}
	return sectorsize;
2000393c:	68fb      	ldr	r3, [r7, #12]
}
2000393e:	4618      	mov	r0, r3
20003940:	3714      	adds	r7, #20
20003942:	46bd      	mov	sp, r7
20003944:	f85d 7b04 	ldr.w	r7, [sp], #4
20003948:	4770      	bx	lr
	...

2000394c <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
2000394c:	b580      	push	{r7, lr}
2000394e:	b08a      	sub	sp, #40	; 0x28
20003950:	af00      	add	r7, sp, #0
20003952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
20003954:	2300      	movs	r3, #0
20003956:	613b      	str	r3, [r7, #16]
20003958:	4b23      	ldr	r3, [pc, #140]	; (200039e8 <HAL_UART_MspInit+0x9c>)
2000395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000395c:	4a22      	ldr	r2, [pc, #136]	; (200039e8 <HAL_UART_MspInit+0x9c>)
2000395e:	f043 0308 	orr.w	r3, r3, #8
20003962:	6313      	str	r3, [r2, #48]	; 0x30
20003964:	4b20      	ldr	r3, [pc, #128]	; (200039e8 <HAL_UART_MspInit+0x9c>)
20003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003968:	f003 0308 	and.w	r3, r3, #8
2000396c:	613b      	str	r3, [r7, #16]
2000396e:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
20003970:	2300      	movs	r3, #0
20003972:	60fb      	str	r3, [r7, #12]
20003974:	4b1c      	ldr	r3, [pc, #112]	; (200039e8 <HAL_UART_MspInit+0x9c>)
20003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003978:	4a1b      	ldr	r2, [pc, #108]	; (200039e8 <HAL_UART_MspInit+0x9c>)
2000397a:	f043 0308 	orr.w	r3, r3, #8
2000397e:	6313      	str	r3, [r2, #48]	; 0x30
20003980:	4b19      	ldr	r3, [pc, #100]	; (200039e8 <HAL_UART_MspInit+0x9c>)
20003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003984:	f003 0308 	and.w	r3, r3, #8
20003988:	60fb      	str	r3, [r7, #12]
2000398a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
2000398c:	2300      	movs	r3, #0
2000398e:	60bb      	str	r3, [r7, #8]
20003990:	4b15      	ldr	r3, [pc, #84]	; (200039e8 <HAL_UART_MspInit+0x9c>)
20003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20003994:	4a14      	ldr	r2, [pc, #80]	; (200039e8 <HAL_UART_MspInit+0x9c>)
20003996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2000399a:	6413      	str	r3, [r2, #64]	; 0x40
2000399c:	4b12      	ldr	r3, [pc, #72]	; (200039e8 <HAL_UART_MspInit+0x9c>)
2000399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200039a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
200039a4:	60bb      	str	r3, [r7, #8]
200039a6:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
200039a8:	f44f 7380 	mov.w	r3, #256	; 0x100
200039ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
200039ae:	2302      	movs	r3, #2
200039b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
200039b2:	2301      	movs	r3, #1
200039b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
200039b6:	2303      	movs	r3, #3
200039b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
200039ba:	2307      	movs	r3, #7
200039bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
200039be:	f107 0314 	add.w	r3, r7, #20
200039c2:	4619      	mov	r1, r3
200039c4:	4809      	ldr	r0, [pc, #36]	; (200039ec <HAL_UART_MspInit+0xa0>)
200039c6:	f7fe fabd 	bl	20001f44 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
200039ca:	f44f 7300 	mov.w	r3, #512	; 0x200
200039ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
200039d0:	2307      	movs	r3, #7
200039d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
200039d4:	f107 0314 	add.w	r3, r7, #20
200039d8:	4619      	mov	r1, r3
200039da:	4804      	ldr	r0, [pc, #16]	; (200039ec <HAL_UART_MspInit+0xa0>)
200039dc:	f7fe fab2 	bl	20001f44 <HAL_GPIO_Init>
}
200039e0:	bf00      	nop
200039e2:	3728      	adds	r7, #40	; 0x28
200039e4:	46bd      	mov	sp, r7
200039e6:	bd80      	pop	{r7, pc}
200039e8:	40023800 	.word	0x40023800
200039ec:	40020c00 	.word	0x40020c00

200039f0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
200039f0:	b480      	push	{r7}
200039f2:	af00      	add	r7, sp, #0
}
200039f4:	bf00      	nop
200039f6:	46bd      	mov	sp, r7
200039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
200039fc:	4770      	bx	lr

200039fe <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
200039fe:	b480      	push	{r7}
20003a00:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
20003a02:	e7fe      	b.n	20003a02 <HardFault_Handler+0x4>

20003a04 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
20003a04:	b480      	push	{r7}
20003a06:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
20003a08:	e7fe      	b.n	20003a08 <MemManage_Handler+0x4>

20003a0a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
20003a0a:	b480      	push	{r7}
20003a0c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
20003a0e:	e7fe      	b.n	20003a0e <BusFault_Handler+0x4>

20003a10 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
20003a10:	b480      	push	{r7}
20003a12:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
20003a14:	e7fe      	b.n	20003a14 <UsageFault_Handler+0x4>

20003a16 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
20003a16:	b480      	push	{r7}
20003a18:	af00      	add	r7, sp, #0
}
20003a1a:	bf00      	nop
20003a1c:	46bd      	mov	sp, r7
20003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
20003a22:	4770      	bx	lr

20003a24 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
20003a24:	b480      	push	{r7}
20003a26:	af00      	add	r7, sp, #0
}
20003a28:	bf00      	nop
20003a2a:	46bd      	mov	sp, r7
20003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20003a30:	4770      	bx	lr

20003a32 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
20003a32:	b480      	push	{r7}
20003a34:	af00      	add	r7, sp, #0
}
20003a36:	bf00      	nop
20003a38:	46bd      	mov	sp, r7
20003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
20003a3e:	4770      	bx	lr

20003a40 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
20003a40:	b580      	push	{r7, lr}
20003a42:	af00      	add	r7, sp, #0
  HAL_IncTick();
20003a44:	f7fd fe6c 	bl	20001720 <HAL_IncTick>
}
20003a48:	bf00      	nop
20003a4a:	bd80      	pop	{r7, pc}

20003a4c <memset>:
20003a4c:	4402      	add	r2, r0
20003a4e:	4603      	mov	r3, r0
20003a50:	4293      	cmp	r3, r2
20003a52:	d100      	bne.n	20003a56 <memset+0xa>
20003a54:	4770      	bx	lr
20003a56:	f803 1b01 	strb.w	r1, [r3], #1
20003a5a:	e7f9      	b.n	20003a50 <memset+0x4>

20003a5c <__libc_init_array>:
20003a5c:	b570      	push	{r4, r5, r6, lr}
20003a5e:	4d0d      	ldr	r5, [pc, #52]	; (20003a94 <__libc_init_array+0x38>)
20003a60:	4c0d      	ldr	r4, [pc, #52]	; (20003a98 <__libc_init_array+0x3c>)
20003a62:	1b64      	subs	r4, r4, r5
20003a64:	10a4      	asrs	r4, r4, #2
20003a66:	2600      	movs	r6, #0
20003a68:	42a6      	cmp	r6, r4
20003a6a:	d109      	bne.n	20003a80 <__libc_init_array+0x24>
20003a6c:	4d0b      	ldr	r5, [pc, #44]	; (20003a9c <__libc_init_array+0x40>)
20003a6e:	4c0c      	ldr	r4, [pc, #48]	; (20003aa0 <__libc_init_array+0x44>)
20003a70:	f000 f818 	bl	20003aa4 <_init>
20003a74:	1b64      	subs	r4, r4, r5
20003a76:	10a4      	asrs	r4, r4, #2
20003a78:	2600      	movs	r6, #0
20003a7a:	42a6      	cmp	r6, r4
20003a7c:	d105      	bne.n	20003a8a <__libc_init_array+0x2e>
20003a7e:	bd70      	pop	{r4, r5, r6, pc}
20003a80:	f855 3b04 	ldr.w	r3, [r5], #4
20003a84:	4798      	blx	r3
20003a86:	3601      	adds	r6, #1
20003a88:	e7ee      	b.n	20003a68 <__libc_init_array+0xc>
20003a8a:	f855 3b04 	ldr.w	r3, [r5], #4
20003a8e:	4798      	blx	r3
20003a90:	3601      	adds	r6, #1
20003a92:	e7f2      	b.n	20003a7a <__libc_init_array+0x1e>
20003a94:	20003b18 	.word	0x20003b18
20003a98:	20003b18 	.word	0x20003b18
20003a9c:	20003b18 	.word	0x20003b18
20003aa0:	20003b1c 	.word	0x20003b1c

20003aa4 <_init>:
20003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003aa6:	bf00      	nop
20003aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003aaa:	bc08      	pop	{r3}
20003aac:	469e      	mov	lr, r3
20003aae:	4770      	bx	lr

20003ab0 <_fini>:
20003ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003ab2:	bf00      	nop
20003ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003ab6:	bc08      	pop	{r3}
20003ab8:	469e      	mov	lr, r3
20003aba:	4770      	bx	lr
